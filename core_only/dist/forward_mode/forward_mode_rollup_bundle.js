!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(require("crypto")):"function"==typeof define&&define.amd?define(["crypto"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self).crypto)}(this,(function(t){"use strict";t=t&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t;class e{constructor(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.populateURLFlags()}setPlatform(t,e){null!=this.platform&&console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`),this.platformName=t,this.platform=e}registerFlag(t,e,n){if(this.flagRegistry[t]={evaluationFn:e,setHook:n},null!=this.urlFlags[t]){const e=this.urlFlags[t];console.warn(`Setting feature override from URL ${t}: ${e}.`),this.set(t,e)}}async getAsync(t){return t in this.flags||(this.flags[t]=await this.evaluateFlag(t)),this.flags[t]}get(t){if(t in this.flags)return this.flags[t];const e=this.evaluateFlag(t);if(e instanceof Promise)throw new Error(`Flag ${t} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[t]=e,this.flags[t]}getNumber(t){return this.get(t)}getBool(t){return this.get(t)}getFlags(){return this.flags}get features(){return this.flags}set(t,e){if(null==this.flagRegistry[t])throw new Error(`Cannot set flag ${t} as it has not been registered.`);this.flags[t]=e,null!=this.flagRegistry[t].setHook&&this.flagRegistry[t].setHook(e)}evaluateFlag(t){if(null==this.flagRegistry[t])throw new Error(`Cannot evaluate flag '${t}': no evaluation function found.`);return this.flagRegistry[t].evaluationFn()}setFlags(t){this.flags=Object.assign({},t)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const t=function(t){const e={};return t.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(t,...n)=>(function(t,e,n){t[decodeURIComponent(e)]=decodeURIComponent(n||"")}(e,n[0],n[1]),n.join("="))),e}(this.global.location.search);if("tfjsflags"in t){t.tfjsflags.split(",").forEach(t=>{const[e,n]=t.split(":");this.urlFlags[e]=function(t,e){if("true"===(e=e.toLowerCase())||"false"===e)return"true"===e;if(""+ +e===e)return+e;throw new Error(`Could not parse value flag value ${e} for flag ${t}.`)}(e,n)})}}}function n(){return o}let r,o=null;function s(){if(null==r){let t;if("undefined"!=typeof window)t=window;else if("undefined"!=typeof global)t=global;else if("undefined"!=typeof process)t=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");t=self}r=t}return r}function i(t,e){const n=function(){const t=s();return null==t._tfGlobals&&(t._tfGlobals=new Map),t._tfGlobals}();if(n.has(t))return n.get(t);{const r=e();return n.set(t,r),n.get(t)}}const a=i("kernelRegistry",()=>new Map),l=i("gradRegistry",()=>new Map);function u(t){return l.get(t)}function c(t){const e=a.entries(),n=[];for(;;){const{done:r,value:o}=e.next();if(r)break;const[s,i]=o,[a]=s.split("_");a===t&&n.push(i)}return n}function h(t){const{kernelName:e,backendName:n}=t,r=d(e,n);a.has(r)&&console.warn(`The kernel '${e}' for backend '${n}' is already registered`),a.set(r,t)}function d(t,e){return`${e}_${t}`}function f(t){return t%2==0?t:t+1}function p(t,e){if(!t)throw new Error("string"==typeof e?e:e())}function g(t,e,n=""){p(y(t,e),()=>n+` Shapes ${t} and ${e} must match`)}function x(t){p(null!=t,()=>"The input to the tensor constructor must be a non-null value.")}function m(t,e=[],n=!1){if(null==e&&(e=[]),Array.isArray(t)||S(t)&&!n)for(let r=0;r<t.length;++r)m(t[r],e,n);else e.push(t);return e}function v(t){if(0===t.length)return 1;let e=t[0];for(let n=1;n<t.length;n++)e*=t[n];return e}function y(t,e){if(t===e)return!0;if(null==t||null==e)return!1;if(t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(t[n]!==e[n])return!1;return!0}function C(t){return t%1==0}function $(t){if(null!=Math.tanh)return Math.tanh(t);if(t===1/0)return 1;if(t===-1/0)return-1;{const e=Math.exp(2*t);return(e-1)/(e+1)}}function w(t){const e=Math.ceil(Math.sqrt(t));return[e,Math.ceil(t/e)]}function b(t,e){return e<=t.length?t:t+" ".repeat(e-t.length)}function R(t,e=(t=>0),n){return new Promise((r,o)=>{let s=0;const i=()=>{if(t())return void r();s++;const a=e(s);null!=n&&s>=n?o():setTimeout(i,a)};i()})}function I(t,e){const n=e.length;return p((t=null==t?e.map((t,e)=>e):[].concat(t)).every(t=>t>=-n&&t<n),()=>`All values in axis param must be in range [-${n}, ${n}) but got axis `+t),p(t.every(t=>C(t)),()=>"All values in axis param must be integers but got axis "+t),t.map(t=>t<0?n+t:t)}function E(t,e){const n=[],r=[],o=null!=e&&Array.isArray(e)&&0===e.length,s=null==e||o?null:I(e,t).sort();let i=0;for(let e=0;e<t.length;++e){if(null!=s){if(s[i]===e&&1!==t[e])throw new Error(`Can't squeeze axis ${e} since its dim '${t[e]}' is not 1`);(null==s[i]||s[i]>e)&&1===t[e]&&(n.push(t[e]),r.push(e)),s[i]<=e&&i++}1!==t[e]&&(n.push(t[e]),r.push(e))}return{newShape:n,keptDims:r}}function A(t,e){let n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else{if("bool"!==t)throw new Error("Unknown data type "+t);n=new Uint8Array(e)}return n}function T(t,e){let n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else if("bool"===t)n=new Uint8Array(e);else{if("string"!==t)throw new Error("Unknown data type "+t);n=new Array(e)}return n}function S(t){return t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array}function O(t){if("float32"===t||"int32"===t)return 4;if("complex64"===t)return 8;if("bool"===t)return 1;throw new Error("Unknown dtype "+t)}function N(t){return"string"==typeof t||t instanceof String}function k(t){return Array.isArray(t)?k(t[0]):t instanceof Float32Array?"float32":t instanceof Int32Array||t instanceof Uint8Array?"int32":"number"==typeof t?"float32":N(t)?"string":function(t){return"boolean"==typeof t}(t)?"bool":"float32"}function F(t){return!!(t&&t.constructor&&t.call&&t.apply)}function D(t,e){for(let n=e;n<t;++n)if(t%n==0)return n;return t}function _(t){const e=t.length;if(e<2)return[];const n=new Array(e-1);n[e-2]=t[e-1];for(let r=e-3;r>=0;--r)n[r]=n[r+1]*t[r+1];return n}function B(t,e){if("string"===e)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(t)&&(t=m(t)),n().getBool("DEBUG")&&function(t,e){for(let n=0;n<t.length;n++){const r=t[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${e} being uploaded contains ${r}.`)}}(t,e),function(t,e){return t instanceof Float32Array&&"float32"===e||t instanceof Int32Array&&"int32"===e||t instanceof Uint8Array&&"bool"===e}(t,e))return t;if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e){const e=new Uint8Array(t.length);for(let n=0;n<e.length;++n)0!==Math.round(t[n])&&(e[n]=1);return e}throw new Error("Unknown data type "+e)}function M(t,e){if(0===t.length)return e[0];const n=t.reduce((t,e)=>t*e);if(0===n)return[];if(n!==e.length)throw new Error(`[${t}] does not match the input size ${e.length}.`);return function t(e,n,r){const o=new Array;if(1===n.length){const t=n[0];for(let n=0;n<t;n++)o[n]=r[e+n]}else{const s=n[0],i=n.slice(1),a=i.reduce((t,e)=>t*e);for(let n=0;n<s;n++)o[n]=t(e+n*a,i,r)}return o}(0,t,e)}function P(t,e){if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e)return new Uint8Array(t);throw new Error("Unknown data type "+e)}function L(){return n().platform.now()}function W(t){t.forEach(e=>{p(Number.isInteger(e)&&e>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${t}].`)})}function U(t,e="utf-8"){return e=e||"utf-8",n().platform.decode(t,e)}function V(t,e,n){if(0===e)return 0;if(1===e)return t[0];let r=t[t.length-1];for(let e=0;e<t.length-1;++e)r+=n[e]*t[e];return r}function z(t,e,n){if(0===e)return[];if(1===e)return[t];const r=new Array(e);for(let e=0;e<r.length-1;++e)r[e]=Math.floor(t/n[e]),t-=r[e]*n[e];return r[r.length-1]=t,r}class G{constructor(t,e){this.backendTimer=t,this.logger=e,null==e&&(this.logger=new H)}profileKernel(t,e,n){let r;const o=this.backendTimer.time(()=>{r=n()});return r.forEach(n=>{n.data().then(r=>{!function(t,e,n){if("float32"!==e)return!1;for(let e=0;e<t.length;e++){const r=t[e];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${n}'`),!0}}(r,n.dtype,t),o.then(o=>{let s="";null!=o.getExtraProfileInfo&&(s=o.getExtraProfileInfo()),this.logger.logKernelProfile(t,n,r,o.kernelMs,e,s)})})}),r}}class H{logKernelProfile(t,e,n,r,o,s){const i="number"==typeof r?b(r+"ms",9):r.error,a=b(t,25),l=e.rank,u=e.size,c=b(e.shape.toString(),14);let h="";for(const t in o){const n=o[t].shape||e.shape,r=n.length;h+=`${t}: ${r}D ${r>0?n:""} `}console.log(`%c${a}\t%c${i}\t%c${l}D ${c}\t%c${u}\t%c${h}\t%c${s}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function X(t,e,n,r){const o=_(e),s=function(t,e,n,r){const o=v(e),s=r[r.length-1],i=new Array(s).fill(0),a=e.length,l="complex64"===n?q(t):t;if(a>1)for(let t=0;t<o/s;t++){const e=t*s;for(let t=0;t<s;t++)i[t]=Math.max(i[t],j(l[e+t],0,n).length)}return i}(t,e,n,o),i=e.length,a=function t(e,n,r,o,s,i=!0){const a="complex64"===r?2:1,l=n[0],u=n.length;if(0===u){if("complex64"===r){return[j(q(e)[0],0,r)]}return"bool"===r?[K(e[0])]:[e[0].toString()]}if(1===u){if(l>20){const t=3*a;let n=Array.from(e.slice(0,t)),o=Array.from(e.slice((l-3)*a,l*a));return"complex64"===r&&(n=q(n),o=q(o)),["["+n.map((t,e)=>j(t,s[e],r)).join(", ")+", ..., "+o.map((t,e)=>j(t,s[l-3+e],r)).join(", ")+"]"]}return["["+("complex64"===r?q(e):Array.from(e)).map((t,e)=>j(t,s[e],r)).join(", ")+"]"]}const c=n.slice(1),h=o.slice(1),d=o[0]*a,f=[];if(l>20){for(let n=0;n<3;n++){const o=n*d,i=o+d;f.push(...t(e.slice(o,i),c,r,h,s,!1))}f.push("...");for(let n=l-3;n<l;n++){const o=n*d,i=o+d;f.push(...t(e.slice(o,i),c,r,h,s,n===l-1))}}else for(let n=0;n<l;n++){const o=n*d,i=o+d;f.push(...t(e.slice(o,i),c,r,h,s,n===l-1))}const p=2===u?",":"";f[0]="["+f[0]+p;for(let t=1;t<f.length-1;t++)f[t]=" "+f[t]+p;let g=",\n";for(let t=2;t<u;t++)g+="\n";return f[f.length-1]=" "+f[f.length-1]+"]"+(i?"":g),f}(t,e,n,o,s),l=["Tensor"];return r&&(l.push("  dtype: "+n),l.push("  rank: "+i),l.push(`  shape: [${e}]`),l.push("  values:")),l.push(a.map(t=>"    "+t).join("\n")),l.join("\n")}function j(t,e,n){let r;return r=Array.isArray(t)?parseFloat(t[0].toFixed(7))+" + "+parseFloat(t[1].toFixed(7))+"j":N(t)?`'${t}'`:"bool"===n?K(t):parseFloat(t.toFixed(7)).toString(),b(r,e)}function K(t){return 0===t?"false":"true"}function q(t){const e=[];for(let n=0;n<t.length;n+=2)e.push([t[n],t[n+1]]);return e}class Y{constructor(t,e,n){if(this.dtype=e,this.shape=t.slice(),this.size=v(t),null!=n){const t=n.length;p(t===this.size,()=>`Length of values '${t}' does not match the size inferred by the shape '${this.size}'.`)}if("complex64"===e)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||T(e,this.size),this.strides=_(t)}set(t,...e){0===e.length&&(e=[0]),p(e.length===this.rank,()=>`The number of provided coordinates (${e.length}) must match the rank (${this.rank})`);const n=this.locToIndex(e);this.values[n]=t}get(...t){0===t.length&&(t=[0]);let e=0;for(const n of t){if(n<0||n>=this.shape[e]){const e=`Requested out of range element at ${t}.   Buffer shape=`+this.shape;throw new Error(e)}e++}let n=t[t.length-1];for(let e=0;e<t.length-1;++e)n+=this.strides[e]*t[e];return this.values[n]}locToIndex(t){if(0===this.rank)return 0;if(1===this.rank)return t[0];let e=t[t.length-1];for(let n=0;n<t.length-1;++n)e+=this.strides[n]*t[n];return e}indexToLoc(t){if(0===this.rank)return[];if(1===this.rank)return[t];const e=new Array(this.shape.length);for(let n=0;n<e.length-1;++n)e[n]=Math.floor(t/this.strides[n]),t-=e[n]*this.strides[n];return e[e.length-1]=t,e}get rank(){return this.shape.length}toTensor(){return Q().makeTensor(this.values,this.shape,this.dtype)}}let Q=null;class Z{constructor(t,e,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||"float32",this.size=v(t),this.strides=_(t),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const t=await this.data();return null.buffer(this.shape,this.dtype,t)}bufferSync(){return null.buffer(this.shape,this.dtype,this.dataSync())}async array(){const t=await this.data();return M(this.shape,t)}arraySync(){return M(this.shape,this.dataSync())}async data(){this.throwIfDisposed();const t=Q().read(this.dataId);if("string"===this.dtype){const e=await t;try{return e.map(t=>U(t))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return t}dataSync(){this.throwIfDisposed();const t=Q().readSync(this.dataId);if("string"===this.dtype)try{return t.map(t=>U(t))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return t}async bytes(){this.throwIfDisposed();const t=await Q().read(this.dataId);return"string"===this.dtype?t:new Uint8Array(t.buffer)}dispose(){this.isDisposed||(Q().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(t=!1){return null.print(this,t)}clone(){return this.throwIfDisposed(),null.clone(this)}toString(t=!1){return X(this.dataSync(),this.shape,this.dtype,t)}cast(t){return this.throwIfDisposed(),null.cast(this,t)}variable(t=!0,e,n){return this.throwIfDisposed(),Q().makeVariable(this,t,e,n)}}Object.defineProperty(Z,Symbol.hasInstance,{value:t=>!!t&&null!=t.dataId&&null!=t.shape&&null!=t.dtype});class J extends Z{constructor(t,e,n,r){super(t.shape,t.dtype,t.dataId,r),this.trainable=e,this.name=n}assign(t){if(t.dtype!==this.dtype)throw new Error(`dtype of the new value (${t.dtype}) and previous value (${this.dtype}) must match`);if(!y(t.shape,this.shape))throw new Error(`shape of the new value (${t.shape}) and previous value (${this.shape}) must match`);Q().disposeTensor(this),this.dataId=t.dataId,Q().incRef(this,null)}dispose(){Q().disposeVariable(this),this.isDisposedInternal=!0}}var tt,et,nt,rt,ot;Object.defineProperty(J,Symbol.hasInstance,{value:t=>t instanceof Z&&null!=t.assign&&t.assign instanceof Function}),function(t){t.R0="R0",t.R1="R1",t.R2="R2",t.R3="R3",t.R4="R4",t.R5="R5",t.R6="R6"}(tt||(tt={})),function(t){t.float32="float32",t.int32="int32",t.bool="int32",t.complex64="complex64"}(et||(et={})),function(t){t.float32="float32",t.int32="int32",t.bool="bool",t.complex64="complex64"}(nt||(nt={})),function(t){t.float32="float32",t.int32="float32",t.bool="float32",t.complex64="complex64"}(rt||(rt={})),function(t){t.float32="complex64",t.int32="complex64",t.bool="complex64",t.complex64="complex64"}(ot||(ot={}));const st={float32:rt,int32:et,bool:nt,complex64:ot};function it(t,e){if("string"===t||"string"===e){if("string"===t&&"string"===e)return"string";throw new Error(`Can not upcast ${t} with ${e}`)}return st[t][e]}function at(t){return it(t,"int32")}function lt(t,e){if(t.dtype===e.dtype)return[t,e];const n=it(t.dtype,e.dtype);return[t.cast(n),e.cast(n)]}function ut(t){const e=[];return function t(e,n,r){if(null==e)return;if(e instanceof Z)return void n.push(e);if(o=e,!Array.isArray(o)&&"object"!=typeof o)return;var o;const s=e;for(const e in s){const o=s[e];r.has(o)||(r.add(o),t(o,n,r))}}(t,e,new Set),e}class ct{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null}}dispose(){for(const t in this.registeredVariables)this.registeredVariables[t].dispose()}}class ht{constructor(t){this.ENV=t,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new ct}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then(()=>{});if(null!=this.backendInstance)return;const t=this.getSortedBackends();for(let e=0;e<t.length;e++){const n=t[e];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:t,asyncInit:e}=this.initializeBackendsAndReturnBest();if(e)throw new Error(`The highest priority backend '${t}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(t)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(t){if(!(t in this.registry)){if(!(t in this.registryFactory))return null;{const{asyncInit:e}=this.initializeBackend(t);if(e)return null}}return this.registry[t]}findBackendFactory(t){return t in this.registryFactory?this.registryFactory[t].factory:null}registerBackend(t,e,n=1){return t in this.registryFactory?(console.warn(t+" backend was already registered. Reusing existing backend factory."),!1):(this.registryFactory[t]={factory:e,priority:n},!0)}async setBackend(t){if(null==this.registryFactory[t])throw new Error(`Backend name '${t}' not found in registry`);if(this.backendName=t,null==this.registry[t]){this.backendInstance=null;const{success:e,asyncInit:n}=this.initializeBackend(t);if(!(n?await e:e))return!1}return this.backendInstance=this.registry[t],this.setupRegisteredKernels(),this.profiler=new G(this.backendInstance),!0}setupRegisteredKernels(){c(this.backendName).forEach(t=>{null!=t.setupFunc&&t.setupFunc(this.backendInstance)})}disposeRegisteredKernels(t){c(t).forEach(e=>{null!=e.disposeFunc&&e.disposeFunc(this.registry[t])})}initializeBackend(t){const e=this.registryFactory[t];if(null==e)throw new Error(`Cannot initialize backend ${t}, no registration found.`);try{const n=e.factory();if(Promise.resolve(n)===n){const e=++this.pendingBackendInitId,r=n.then(n=>!(e<this.pendingBackendInitId)&&(this.registry[t]=n,this.pendingBackendInit=null,!0)).catch(n=>(e<this.pendingBackendInitId||(this.pendingBackendInit=null,console.warn(`Initialization of backend ${t} failed`),console.warn(n.stack||n.message)),!1));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}return this.registry[t]=n,{success:!0,asyncInit:!1}}catch(e){return console.warn(`Initialization of backend ${t} failed`),console.warn(e.stack||e.message),{success:!1,asyncInit:!1}}}removeBackend(t){if(!(t in this.registryFactory))throw new Error(t+" backend not found in registry");this.backendName===t&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,t in this.registry&&(this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t]),delete this.registryFactory[t],this.backendName===t&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((t,e)=>this.registryFactory[e].priority-this.registryFactory[t].priority)}initializeBackendsAndReturnBest(){const t=this.getSortedBackends();for(let e=0;e<t.length;e++){const n=t[e],{success:r,asyncInit:o}=this.initializeBackend(n);if(o||r)return{name:n,asyncInit:o}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(t,e){const n=this.state.tensorInfo.get(e),r=n.backend,o=this.readSync(e);r.disposeData(e),n.backend=t,t.move(e,o,n.shape,n.dtype),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(t,e){let n,r=null;if(null==e){if("function"!=typeof t)throw new Error("Please provide a function to tidy()");e=t}else{if("string"!=typeof t&&!(t instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof e)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=t}return this.scopedRun(()=>this.startScope(r),()=>this.endScope(n),()=>(n=e(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n))}scopedRun(t,e,n){t();try{const t=n();return e(),t}catch(t){throw e(),t}}nextTensorId(){return ht.nextTensorId++}nextVariableId(){return ht.nextVariableId++}clone(t){const e=this.makeTensorFromDataId(t.dataId,t.shape,t.dtype),n={x:t};return this.addTapeNode(this.state.activeScope.name,n,[e],t=>({x:()=>t.toFloat()}),[],{}),e}runKernel(t,e,n,r,o){return this.runKernelFunc(null,e,null,t,n,r,o)}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(t,e,n){const r=this.backend.numDataIds();let o=0;n.forEach(t=>{o+="complex64"===t.dtype?3:1});const s=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],i=r-e-o-s;if(i>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${t}'`)}runKernelFunc(t,e,n,r,o,s,i){let l,u=[];const c=this.isTapeOn();null==r&&(r=null!=this.state.activeScope?this.state.activeScope.name:"");const h=this.state.numBytes,f=this.state.numTensors;let p;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);const g=function(t,e){const n=d(t,e);return a.get(n)}(r,this.backendName);let x;if(null!=g)p=()=>{const t=this.backend.numDataIds();x=g.kernelFunc({inputs:e,attrs:o,backend:this.backend});const n=Array.isArray(x)?x:[x];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(r,t,n);const a=n.map(({dataId:t,shape:e,dtype:n})=>this.makeTensorFromDataId(t,e,n));if(c){let t=this.getTensorsForGradient(r,e,a);if(null==t){null==i&&(i=[]);const e=a.filter((t,e)=>i[e]);t=(s||[]).slice().concat(e)}u=this.saveTensorsForBackwardMode(t)}return a};else{const e=t=>{c&&(u=t.map(t=>this.keep(this.clone(t))))};p=()=>{const n=this.backend.numDataIds();x=this.tidy(()=>t(this.backend,e));const o=Array.isArray(x)?x:[x];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(r,n,o),o}}return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{l=this.ENV.getBool("DEBUG")?this.profiler.profileKernel(r,e,()=>p()):p()}),c&&this.addTapeNode(r,e,l,n,u,o),this.state.profiling&&this.state.activeProfile.kernels.push({name:r,bytesAdded:this.state.numBytes-h,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-f,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(e).map(t=>e[t].shape),outputShapes:l.map(t=>t.shape)}),Array.isArray(x)?l:l[0]}saveTensorsForBackwardMode(t){return t.map(t=>this.keep(this.clone(t)))}getTensorsForGradient(t,e,n){const r=u(t);if(null!=r){const t=r.inputsToSave||[],o=r.outputsToSave||[];let s;r.saveAllInputs?(p(Array.isArray(e),()=>"saveAllInputs is true, expected inputs to be an array."),s=Object.keys(e).map(t=>e[t])):s=t.map(t=>e[t]);const i=n.filter((t,e)=>o[e]);return s.concat(i)}return null}makeTensor(t,e,r,o){if(null==t)throw new Error("Values passed to engine.makeTensor() are null");r=r||"float32",o=o||this.backend;let s=t;"string"===r&&N(t[0])&&(s=t.map(t=>function(t,e="utf-8"){return e=e||"utf-8",n().platform.encode(t,e)}(t)));const i=o.write(s,e,r),a=new Z(e,r,i,this.nextTensorId());if(this.incRef(a,o),"string"===r){const t=this.state.tensorInfo.get(i),e=function(t){if(null==t)return 0;let e=0;return t.forEach(t=>e+=t.length),e}(s);this.state.numBytes+=e-t.bytes,t.bytes=e}return a}makeTensorFromDataId(t,e,n,r){const o=new Z(e,n=n||"float32",t,this.nextTensorId());return this.incRef(o,r),o}makeVariable(t,e=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==t.dtype&&(t=t.cast(r));const o=new J(t,e,n,this.nextTensorId());if(null!=this.state.registeredVariables[o.name])throw new Error(`Variable with name ${o.name} was already registered`);return this.state.registeredVariables[o.name]=o,this.incRef(o,this.backend),o}incRef(t,e){const n=this.state.tensorInfo.has(t.dataId)?this.state.tensorInfo.get(t.dataId).refCount:0;if(this.state.numTensors++,"string"===t.dtype&&this.state.numStringTensors++,0===n){this.state.numDataBuffers++;let n=0;"complex64"!==t.dtype&&"string"!==t.dtype&&(n=t.size*O(t.dtype)),this.state.tensorInfo.set(t.dataId,{backend:e||this.backend,dtype:t.dtype,shape:t.shape,bytes:n,refCount:0}),this.state.numBytes+=n}this.state.tensorInfo.get(t.dataId).refCount++,t instanceof J||this.track(t)}disposeTensor(t){if(!this.state.tensorInfo.has(t.dataId))return;this.state.numTensors--,"string"===t.dtype&&this.state.numStringTensors--;const e=this.state.tensorInfo.get(t.dataId);e.refCount<=1?("complex64"!==t.dtype&&(this.state.numBytes-=e.bytes),this.state.numDataBuffers--,e.backend.disposeData(t.dataId),this.state.tensorInfo.delete(t.dataId)):this.state.tensorInfo.get(t.dataId).refCount--}disposeVariables(){for(const t in this.state.registeredVariables){const e=this.state.registeredVariables[t];this.disposeVariable(e)}}disposeVariable(t){this.disposeTensor(t),null!=this.state.registeredVariables[t.name]&&delete this.state.registeredVariables[t.name]}memory(){const t=this.backend.memory();return t.numTensors=this.state.numTensors,t.numDataBuffers=this.state.numDataBuffers,t.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(t.unreliable=!0,null==t.reasons&&(t.reasons=[]),t.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),t}async profile(t){this.state.profiling=!0;const e=this.state.numBytes,n=this.state.numTensors;return this.state.activeProfile.kernels=[],this.state.activeProfile.result=await t(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map(t=>t.totalBytesSnapshot)),this.state.activeProfile.newBytes=this.state.numBytes-e,this.state.activeProfile.newTensors=this.state.numTensors-n,this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(t,e,n,r,o,s){const i={id:this.state.nextTapeNodeId++,kernelName:t,inputs:e,outputs:n,saved:o},a=u(t);null!=a&&(r=a.gradFunc),null!=r&&(i.gradient=t=>(t=t.map((t,e)=>{if(null==t){const t=n[e],r=P(t.size,t.dtype);return this.makeTensor(r,t.shape,t.dtype)}return t}),r(t.length>1?t:t[0],o,s))),this.state.activeTape.push(i)}keep(t){return t.kept=!0,t}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(t){const e={track:[],name:"unnamed scope",id:this.state.nextScopeId++};t&&(e.name=t),this.state.scopeStack.push(e),this.state.activeScope=e}endScope(t){const e=ut(t),n=new Set(e.map(t=>t.id));for(let t=0;t<this.state.activeScope.track.length;t++){const e=this.state.activeScope.track[t];e.kept||n.has(e.id)||e.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],e.forEach(t=>{t.kept||t.scopeId!==r.id||this.track(t)})}gradients(t,e,n,r=!1){if(p(e.length>0,()=>"gradients() received an empty list of xs."),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const o=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",t));p(o instanceof Z,()=>"The result y returned by f() must be a tensor.");const s=function(t,e,n){const r={},o={};for(let t=0;t<e.length;t++)r[e[t].id]=!0;for(let n=0;n<t.length;n++){const s=t[n],i=s.inputs;for(const t in i){const n=i[t];let a=!1;for(let t=0;t<e.length;t++)if(r[n.id]){s.outputs.forEach(t=>r[t.id]=!0),a=!0,o[s.id]=!0;break}if(a)break}}const s={};s[n.id]=!0;const i={};for(let e=t.length-1;e>=0;e--){const n=t[e],r=n.inputs;for(let t=0;t<n.outputs.length;t++)if(s[n.outputs[t].id]){for(const t in r)s[r[t].id]=!0,i[n.id]=!0;break}}const a=[];for(let e=0;e<t.length;e++){const n=t[e];if(o[n.id]&&i[n.id]){const t={};for(const e in n.inputs){const o=n.inputs[e];r[o.id]&&(t[e]=o)}const e=Object.assign({},n);e.inputs=t,e.outputs=n.outputs,a.push(e)}}return a}(this.state.activeTape,e,o);if(!r&&0===s.length&&e.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{const t={};t[o.id]=null==n?function(t){const e=function(t,e){const n=P(t,e);for(let t=0;t<n.length;t++)n[t]=1;return n}(v(t),"float32");return dt.makeTensor(e,t,"float32")}(o.shape):n,function(t,e,n){for(let r=e.length-1;r>=0;r--){const o=e[r],s=[];if(o.outputs.forEach(e=>{const n=t[e.id];null!=n?s.push(n):s.push(null)}),null==o.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${o.kernelName}.`);const i=o.gradient(s);for(const e in o.inputs){if(!(e in i))throw new Error(`Cannot backprop through input ${e}. Available gradients found: ${Object.keys(i)}.`);const r=n(()=>i[e]());if("float32"!==r.dtype)throw new Error(`Error in gradient for op ${o.kernelName}. The gradient of input ${e} must have 'float32' dtype, but has '${r.dtype}'`);const s=o.inputs[e];if(!y(r.shape,s.shape))throw new Error(`Error in gradient for op ${o.kernelName}. The gradient of input '${e}' has shape '${r.shape}', which does not match the shape of the input '${s.shape}'`);if(null==t[s.id])t[s.id]=r;else{const e=t[s.id];t[s.id]=e.add(r),e.dispose()}}}}(t,s,t=>this.tidy(t));const r=e.map(e=>t[e.id]);return 0===this.state.gradientDepth&&(this.state.activeTape.forEach(t=>{for(const e of t.saved)e.dispose()}),this.state.activeTape=null),{value:o,grads:r}})}customGrad(t){return p(F(t),()=>"The f passed in customGrad(f) must be a function."),(...e)=>{let n;p(e.every(t=>t instanceof Z),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");const r={};return e.forEach((t,e)=>{r[e]=t}),this.runKernelFunc((r,o)=>(n=t(...e,o),p(n.value instanceof Z,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),p(F(n.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),n.value),r,(t,r)=>{const o=n.gradFunc(t,r),s=Array.isArray(o)?o:[o];p(s.length===e.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),p(s.every(t=>t instanceof Z),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");const i={};return s.forEach((t,e)=>{i[e]=()=>t}),i})}}readSync(t){return this.state.tensorInfo.get(t).backend.readSync(t)}read(t){return this.state.tensorInfo.get(t).backend.read(t)}async time(t){const e=L(),n=await this.backend.time(t);return n.wallMs=L()-e,n}track(t){return null!=this.state.activeScope&&(t.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(t)),t}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new ct;for(const t in this.registry)this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}ht.nextTensorId=0,ht.nextVariableId=0;const dt=function(){const t=s();if(null==t._tfengine){const n=new e(t);t._tfengine=new ht(n)}var n;return n=t._tfengine.ENV,o=n,Q=()=>t._tfengine,t._tfengine}();function ft(t,e){let r=t;if(S(t))return"string"===e?[]:[t.length];if(!Array.isArray(t))return[];const o=[];for(;Array.isArray(r)||S(r)&&"string"!==e;)o.push(r.length),r=r[0];return Array.isArray(t)&&n().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&function t(e,n,r){if(r=r||[],!Array.isArray(e)&&!S(e))return void p(0===n.length,()=>`Element arr[${r.join("][")}] is a primitive, but should be an array/TypedArray of ${n[0]} elements`);p(n.length>0,()=>`Element arr[${r.join("][")}] should be a primitive, but is an array of ${e.length} elements`),p(e.length===n[0],()=>`Element arr[${r.join("][")}] should have ${n[0]} elements, but has ${e.length} elements`);const o=n.slice(1);for(let n=0;n<e.length;++n)t(e[n],o,r.concat(n))}(t,o,[]),o}function pt(t,e,n,r){if(null!=t&&("numeric"!==t&&t!==e||"numeric"===t&&"string"===e))throw new Error(`Argument '${n}' passed to '${r}' must be ${t} tensor, but got ${e} tensor`)}function gt(t,e,n,r="numeric"){if(t instanceof Z)return pt(r,t.dtype,e,n),t;let o=k(t);if("string"!==o&&["bool","int32","float32"].indexOf(r)>=0&&(o=r),pt(r,o,e,n),null==t||!S(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t){const r=null==t?"null":t.constructor.name;throw new Error(`Argument '${e}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const s=ft(t,o);S(t)||Array.isArray(t)||(t=[t]);const i="string"!==o?B(t,o):m(t,[],!0);return dt.makeTensor(i,s,o)}function xt(t,e,n,r="numeric"){if(!Array.isArray(t))throw new Error(`Argument ${e} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return t.map((t,r)=>gt(t,`${e}[${r}]`,n),r)}function mt(t){const e=Object.keys(t);if(1!==e.length)throw new Error("Please provide an object with a single key (operation name) mapping to a function. Got an object with "+e.length+" keys.");let n=e[0];const r=t[n];n.endsWith("_")&&(n=n.substring(0,n.length-1));const o=(...t)=>{dt.startScope(n);try{const e=r(...t);return e instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),dt.endScope(e),e}catch(t){throw dt.endScope(null),t}};return Object.defineProperty(o,"name",{value:n,configurable:!0}),o}const vt=mt({complex_:function(t,e){const n=gt(t,"real","complex"),r=gt(e,"imag","complex");g(n.shape,r.shape,`real and imag shapes, ${n.shape} and ${r.shape}, must match in call to tf.complex().`);const o={real:n,imag:r};return dt.runKernelFunc(t=>t.complex(n,r),o,null,"Complex")}});function yt(t,e,n,r){if(null==r&&(r=k(t)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!S(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=e){W(e);const t=v(e),r=v(n);p(t===r,()=>`Based on the provided shape, [${e}], the tensor should have ${t} values but has ${r}`);for(let t=0;t<n.length;++t){const r=n[t],o=t!==n.length-1||r!==v(e.slice(t));p(n[t]===e[t]||!o,()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${e}). `)}}return S(t)||Array.isArray(t)||(t=[t]),e=e||n,t="string"!==r?B(t,r):m(t,[],!0),dt.makeTensor(t,e,r)}function Ct(t,e,n){return yt(t,e,ft(t,n),n)}const $t=mt({reshape_:function(t,e){const n=gt(t,"x","reshape",null);e=function(t,e){let n=1,r=-1;for(let e=0;e<t.length;++e)if(t[e]>=0)n*=t[e];else if(-1===t[e]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${e}`);r=e}else if(t[e]<0)throw Error(`Shapes can not be < 0. Found ${t[e]} at dim ${e}`);if(-1===r){if(e>0&&e!==n)throw Error(`Size(${e}) must match the product of shape ${t}`);return t}if(0===n)throw Error(`Cannot infer the missing size in [${t}] when there are 0 elements`);if(e%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${e} / ${n}`);const o=t.slice();return o[r]=e/n,o}(e,n.size),p(n.size===v(e),()=>"new shape and old shape must have the same number of elements.");const r={x:n},o={shape:e};return dt.runKernelFunc((t,r)=>(r([n]),t.reshape(n,e)),r,null,"Reshape",o)}});const wt=mt({cast_:function(t,e){const n=gt(t,"x","cast");if(!function(t){return"bool"===t||"complex64"===t||"float32"===t||"int32"===t||"string"===t}(e))throw new Error("Failed to cast to unknown dtype "+e);if("string"===e&&"string"!==n.dtype||"string"!==e&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const r={x:n},o={dtype:e};return dt.runKernelFunc(t=>t.cast(n,e),r,null,"Cast",o)}});function bt(t,e){for(let n=0;n<t.length;++n)if(t[t.length-n-1]!==e-1-n)return!1;return!0}function Rt(t,e,n){const r=t.length+e.length,o=[];let s=0,i=0;for(let a=0;a<r;a++)-1===n.indexOf(a)?o.push(t[s++]):o.push(e[i++]);return o}function It(t,e){const n=[],r=t.length;for(let o=0;o<r;o++)-1===e.indexOf(o)&&n.push(t[o]);return[n,e.map(e=>t[e])]}function Et(t,e){return Rt(t,e.map(t=>1),e)}function At(t,e,n){p(bt(e,n),()=>t+" supports only inner-most axes for now. "+`Got axes ${e} and rank-${n} input.`)}function Tt(t,e){if(bt(t,e))return null;const n=[];for(let r=0;r<e;++r)-1===t.indexOf(r)&&n.push(r);return t.forEach(t=>n.push(t)),n}function St(t){return t.map((t,e)=>[e,t]).sort((t,e)=>t[1]-e[1]).map(t=>t[0])}function Ot(t,e){const n=[];for(let r=e-t;r<e;++r)n.push(r);return n}const Nt=mt({transpose_:function(t,e){const n=gt(t,"x","transpose");if(null==e&&(e=n.shape.map((t,e)=>e).reverse()),p(n.rank===e.length,()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${e}.`),e.forEach(t=>{p(t>=0&&t<n.rank,()=>"All entries in 'perm' must be between 0 and "+(n.rank-1)+" but got "+e)}),n.rank<=1)return n.clone();const r={x:n},o={perm:e};return dt.runKernelFunc(t=>t.transpose(n,e),r,null,"Transpose",o)}});const kt=mt({max_:function(t,e=null,n=!1){const r=gt(t,"x","max"),o={x:r},s={reductionIndices:e,keepDims:n};return dt.runKernelFunc((t,o)=>{let s=I(e,r.shape);const i=Tt(s,r.rank);let a=r;null!=i&&(a=Nt(r,i),s=Ot(s.length,a.rank));const l=t.max(a,s);null!=i&&a.dispose();let u=l;if(n){const t=Et(u.shape,I(e,r.shape));u=$t(u,t),l.dispose()}return o([r,u]),u},o,null,"Max",s)}});function Ft(t,e){if(t.rank<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==e.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.shape[e.rank-1]>t.rank)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${e.shape[e.rank-1]} vs. ${t.rank}`);if(0===t.size)throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${t.shape}.`);const n=e.shape,r=n[n.length-1];let o=1;for(let t=0;t<n.length-1;++t)o*=n[t];const s=t.shape,i=n.slice();i.pop();let a=1;for(let e=r;e<t.rank;++e)a*=s[e],i.push(s[e]);const l=[..._(t.shape).map(t=>t/a),1].slice(0,r);return[i,o,a,l]}function Dt(t,e,n){const r=e.rank>1?e.shape[e.rank-1]:1,o=e.rank>1?e.rank-1:1,s="Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: "+n.shape+`, indices.shape: ${e.shape}, shape: ${t}`+`, sliceDim: ${r}, and batchDim: ${o}.`;if(n.rank<o)throw new Error(s+` update.rank < ${o}. `);if(t.length<r+(n.rank-o))throw new Error(s+" Output shape length < "+(r+(n.rank-o)));if(n.rank!==o+t.length-r)throw new Error(s+" update.rank != "+(o+t.length-r));for(let t=0;t<o;++t)if(n.shape[t]!==e.shape[t])throw new Error(s+` updates.shape[${t}] (${n.shape[t]}) != indices.shape[${t}] (${e.shape[t]}).`);for(let e=0;e<n.rank-o;++e)if(n.shape[e+o]!==t[e+r])throw new Error(s+` updates.shape[${e+o}] (${n.shape[e+o]}) != shape[${e+o}] (${t[e+o]})`)}function _t(t,e,n){const r=e.shape.length,o=r>1?e.shape[r-1]:1,s=n.length;let i=1;for(let t=o;t<s;++t)i*=n[t];const a=o<1?1:o;return{sliceRank:o,numUpdates:v(e.shape)/a,sliceSize:i,strides:[..._(n.slice(0,o)),1],outputSize:v(n)}}function Bt(t,e,n){const r=[];for(let o=0;o<t.length;o++)r[o]=Math.ceil((e[o]-t[o])/n[o]);return r}function Mt(t,e,n){let r=n.length;for(let t=0;t<n.length;t++)if(n[t]>1){r=t;break}for(let o=r+1;o<n.length;o++)if(e[o]>0||n[o]!==t[o])return!1;return!0}function Pt(t,e){let n=t.length>0?t[t.length-1]:1;for(let r=0;r<t.length-1;r++)n+=t[r]*e[r];return n}function Lt(){return dt}function Wt(t,e,n=1){return dt.registerBackend(t,e,n)}function Ut(t,e,n,r,o,s,i=!1,a="channelsLast"){let[l,u,c,h]=[-1,-1,-1,-1];if("channelsLast"===a)[l,u,c,h]=t;else{if("channelsFirst"!==a)throw new Error("Unknown dataFormat "+a);[l,h,u,c]=t}const[d,f,,g]=e,[x,m]=Gt(n),[v,y]=Gt(r),$=Xt(d,v),w=Xt(f,y),{padInfo:b,outHeight:R,outWidth:I}=function(t,e,n,r,o,s,i,a,l){let u,c,h;if("number"==typeof t){u={top:t,bottom:t,left:t,right:t,type:0===t?"VALID":"NUMBER"};const o=function(t,e,n,r,o){null==r&&(r=zt(t,e,n));const s=t[0],i=t[1],a=jt((s-e+2*r)/n+1,o);p(C(a),()=>`The output # of rows (${a}) must be an integer. Change the stride and/or zero pad parameters`);const l=jt((i-e+2*r)/n+1,o);return p(C(l),()=>`The output # of columns (${l}) must be an integer. Change the stride and/or zero pad parameters`),[a,l]}([e,n],s,r,t,a);c=o[0],h=o[1]}else if("same"===t){c=Math.ceil(e/r),h=Math.ceil(n/o);const t=Math.max(0,(c-1)*r+s-e),a=Math.max(0,(h-1)*o+i-n),l=Math.floor(t/2),d=t-l,f=Math.floor(a/2);u={top:l,bottom:d,left:f,right:a-f,type:"SAME"}}else if("valid"===t)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((e-s+1)/r),h=Math.ceil((n-i+1)/o);else{if("object"!=typeof t)throw Error("Unknown padding parameter: "+t);{const d="channelsLast"===l?t[1][0]:t[2][0],f="channelsLast"===l?t[1][1]:t[2][1],p="channelsLast"===l?t[2][0]:t[3][0],g="channelsLast"===l?t[2][1]:t[3][1];u={top:d,bottom:f,left:p,right:g,type:0===d&&0===f&&0===p&&0===g?"VALID":"EXPLICIT"},c=jt((e-s+d+f)/r+1,a),h=jt((n-i+p+g)/o+1,a)}}return{padInfo:u,outHeight:c,outWidth:h}}(o,u,c,x,m,$,w,s,a),E=i?g*h:g;let A;return"channelsFirst"===a?A=[l,E,R,I]:"channelsLast"===a&&(A=[l,R,I,E]),{batchSize:l,dataFormat:a,inHeight:u,inWidth:c,inChannels:h,outHeight:R,outWidth:I,outChannels:E,padInfo:b,strideHeight:x,strideWidth:m,filterHeight:d,filterWidth:f,effectiveFilterHeight:$,effectiveFilterWidth:w,dilationHeight:v,dilationWidth:y,inShape:t,outShape:A,filterShape:e}}function Vt(t,e,n,r,o,s=!1,i="channelsLast",a){let[l,u,c,h,d]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[l,u,c,h,d]=t;else{if("channelsFirst"!==i)throw new Error("Unknown dataFormat "+i);[l,d,u,c,h]=t}const[f,g,x,,m]=e,[v,y,$]=Ht(n),[w,b,R]=Ht(r),I=Xt(f,w),E=Xt(g,b),A=Xt(x,R),{padInfo:T,outDepth:S,outHeight:O,outWidth:N}=function(t,e,n,r,o,s,i,a,l,u,c){let h,d,f,g;if("number"==typeof t){h={top:t,bottom:t,left:t,right:t,front:t,back:t,type:0===t?"VALID":"NUMBER"};const s=function(t,e,n,r,o,s){null==o&&(o=zt(t,e,r));const i=t[0],a=t[1],l=t[2],u=jt((i-e+2*o)/r+1,s);p(C(u),()=>`The output # of depths (${u}) must be an integer. Change the stride and/or zero pad parameters`);const c=jt((a-e+2*o)/r+1,s);p(C(c),()=>`The output # of rows (${c}) must be an integer. Change the stride and/or zero pad parameters`);const h=jt((l-e+2*o)/r+1,s);return p(C(h),()=>`The output # of columns (${h}) must be an integer. Change the stride and/or zero pad parameters`),[u,c,h,n]}([e,n,r,1],a,1,o,t,c);d=s[0],f=s[1],g=s[2]}else if("same"===t){d=Math.ceil(e/o),f=Math.ceil(n/s),g=Math.ceil(r/i);const t=(d-1)*o+a-e,c=(f-1)*s+l-n,p=(g-1)*i+u-r,x=Math.floor(t/2),m=t-x,v=Math.floor(c/2),y=c-v,C=Math.floor(p/2);h={top:v,bottom:y,left:C,right:p-C,front:x,back:m,type:"SAME"}}else{if("valid"!==t)throw Error("Unknown padding parameter: "+t);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},d=Math.ceil((e-a+1)/o),f=Math.ceil((n-l+1)/s),g=Math.ceil((r-u+1)/i)}return{padInfo:h,outDepth:d,outHeight:f,outWidth:g}}(o,u,c,h,v,y,$,I,E,A,a),k=s?m*d:m;let F;return"channelsFirst"===i?F=[l,k,S,O,N]:"channelsLast"===i&&(F=[l,S,O,N,k]),{batchSize:l,dataFormat:i,inDepth:u,inHeight:c,inWidth:h,inChannels:d,outDepth:S,outHeight:O,outWidth:N,outChannels:k,padInfo:T,strideDepth:v,strideHeight:y,strideWidth:$,filterDepth:f,filterHeight:g,filterWidth:x,effectiveFilterDepth:I,effectiveFilterHeight:E,effectiveFilterWidth:A,dilationDepth:w,dilationHeight:b,dilationWidth:R,inShape:t,outShape:F,filterShape:e}}function zt(t,e,n,r=1){const o=Xt(e,r);return Math.floor((t[0]*(n-1)-n+o)/2)}function Gt(t){return"number"==typeof t?[t,t,t]:2===t.length?[t[0],t[1],1]:t}function Ht(t){return"number"==typeof t?[t,t,t]:t}function Xt(t,e){return e<=1?t:t+(t-1)*(e-1)}function jt(t,e){if(!e)return t;switch(e){case"round":return Math.round(t);case"ceil":return Math.ceil(t);case"floor":return Math.floor(t);default:throw new Error("Unknown roundingMode "+e)}}function Kt(t){const[e,n,r]=Gt(t);return 1===e&&1===n&&1===r}function qt(t){if("NHWC"===t)return"channelsLast";if("NCHW"===t)return"channelsFirst";throw new Error("Unknown dataFormat "+t)}function Yt(t,e){const n=t[0].length;t.forEach((t,e)=>{p(t.length===n,()=>`Error in concat${n}D: rank of tensors[${e}] must be the same as the rank of the rest (${n})`)}),p(e>=0&&e<n,()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`);const r=t[0];t.forEach((t,o)=>{for(let s=0;s<n;s++)p(s===e||t[s]===r[s],()=>`Error in concat${n}D: Shape of tensors[${o}] (${t}) does not match the shape of the rest (${r}) along the non-concatenated axis ${o}.`)})}function Qt(t,e){const n=t[0].slice();for(let r=1;r<t.length;r++)n[e]+=t[r][e];return n}const Zt=mt({concat_:function(t,e=0){p(t.length>=1,()=>"Pass at least one tensor to concat");let n=xt(t,"tensors","concat");"complex64"===n[0].dtype&&n.forEach(t=>{if("complex64"!==t.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${t.dtype}. `)});const r=I(e,n[0].shape)[0],o=Qt(n.map(t=>t.shape),r);if(0===v(o))return Ct([],o);if(n=n.filter(t=>t.size>0),1===n.length)return n[0];Yt(n.map(t=>t.shape),r);const s=n,i={axis:e};return dt.runKernelFunc((t,e)=>{const o=t.concat(n,r);return e(n),o},s,null,"Concat",i)}});function Jt(t,e="float32",n){return e=e||"float32",W(t),new Y(t,e,n)}const te=mt({floorDiv_:function(t,e){let n=gt(t,"a","floorDiv"),r=gt(e,"b","floorDiv");[n,r]=lt(n,r);const o={a:n,b:r};return dt.runKernelFunc((t,e)=>{const o=t.floorDiv(n,r);return e([n,r]),o},o,null,"FloorDiv")}});const ee=mt({div_:function(t,e){let n=gt(t,"a","div"),r=gt(e,"b","div");if([n,r]=lt(n,r),"int32"===n.dtype&&"int32"===r.dtype)return te(n,r);const o={a:n,b:r};return dt.runKernelFunc((t,e)=>{const o=t.realDivide(n,r);return e([n,r]),o},o,null,"Div",{})}});function ne(t,e){const n=t.length,r=[];for(let o=0;o<n;o++){const s=n-1-o,i=t[s]||1;(e[e.length-1-o]||1)>1&&1===i&&r.unshift(s)}return r}function re(t,e){const n=[];for(let r=0;r<e.length;r++){const o=t[t.length-r-1],s=e.length-r-1,i=e[s];(null==o||1===o&&i>1)&&n.unshift(s)}return n}function oe(t,e){const n=[],r=Math.max(t.length,e.length);for(let o=0;o<r;o++){let r=t[t.length-o-1];null==r&&(r=1);let s=e[e.length-o-1];if(null==s&&(s=1),1===r)n.unshift(s);else if(1===s)n.unshift(r);else{if(r!==s){throw Error(`Operands could not be broadcast together with shapes ${t} and ${e}.`)}n.unshift(r)}}return n}const se=mt({elu_:function(t){const e=gt(t,"x","elu"),n={x:e};return dt.runKernelFunc((t,n)=>{const r=t.elu(e);return n([r]),r},n,null,"Elu")}});const ie=mt({equal_:function(t,e){let n=gt(t,"a","equal"),r=gt(e,"b","equal");[n,r]=lt(n,r),oe(n.shape,r.shape);const o={a:n,b:r};return dt.runKernelFunc(t=>t.equal(n,r),o,null,"Equal")}});const ae=mt({expandDims_:function(t,e=0){const n=gt(t,"x","expandDims",null);p(e<=n.rank,()=>"Axis must be <= rank of the tensor");const r=n.shape.slice();return e<0&&(p(-(n.rank+1)<=e,()=>`Axis must be in the interval [${-(n.rank+1)}, ${n.rank}]`),e=n.rank+e+1),r.splice(e,0,1),$t(n,r)}});function le(t){return t<=30?t:D(t,Math.floor(Math.sqrt(t)))}var ue=Object.freeze({__proto__:null,segOpComputeOptimalWindowSize:function(t,e){let n,r=!1;for(t<=30?(n=t,r=!0):n=D(t,Math.floor(Math.sqrt(t)));!r;)n>e||n===t?r=!0:n=D(t,n+1);return n},computeOutShape:function(t,e,n){const r=[],o=t.length;for(let s=0;s<o;s++)s!==e?r.push(t[s]):r.push(n);return r},collectGatherOpShapeInfo:function(t,e,n){const r=t.shape[n],o=[];let s=1,i=1;for(let e=0;e<n;e++)o.push(t.shape[e]),s*=t.shape[e];for(let t=0;t<e.rank;t++)o.push(e.shape[t]);for(let e=n+1;e<t.rank;e++)o.push(t.shape[e]),i*=t.shape[e];return{batchSize:s,sliceSize:i,dimSize:r,outputShape:o}}});const ce=mt({imag_:function(t){const e=gt(t,"input","imag"),n={input:e};return dt.runKernelFunc(t=>t.imag(e),n,null,"Imag")}});const he=mt({real_:function(t){const e=gt(t,"input","real"),n={input:e};return dt.runKernelFunc(t=>t.real(e),n,null,"Real")}});function de(t,e){if((S(t)&&"string"!==e||Array.isArray(t))&&"complex64"!==e)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===e&&S(t)&&!(t instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return yt(t,[],[],e)}function fe(t,e="float32"){if("complex64"===e){const e=fe(t,"float32"),n=fe(t,"float32");return vt(e,n)}const n=P(v(t),e);return dt.makeTensor(n,t,e)}const pe=mt({prelu_:function(t,e){const n=gt(t,"x","prelu"),r=gt(e,"alpha","prelu"),o={x:n,alpha:r};return dt.runKernelFunc((t,e)=>{const o=t.prelu(n,r);return e([n,r]),o},o,null,"Prelu")}});"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;function ge(t,e,n){return t(n={path:e,exports:{},require:function(t,e){return function(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}(null==e&&n.path)}},n.exports),n.exports}var xe=ge((function(t){!function(t,e,n){function r(t){var e,n=this,r=(e=4022871197,function(t){t=t.toString();for(var n=0;n<t.length;n++){var r=.02519603282416938*(e+=t.charCodeAt(n));r-=e=r>>>0,e=(r*=e)>>>0,e+=4294967296*(r-=e)}return 2.3283064365386963e-10*(e>>>0)});n.next=function(){var t=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=t-(n.c=0|t)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(t),n.s0<0&&(n.s0+=1),n.s1-=r(t),n.s1<0&&(n.s1+=1),n.s2-=r(t),n.s2<0&&(n.s2+=1),r=null}function o(t,e){return e.c=t.c,e.s0=t.s0,e.s1=t.s1,e.s2=t.s2,e}function s(t,e){var n=new r(t),s=e&&e.state,i=n.next;return i.int32=function(){return 4294967296*n.next()|0},i.double=function(){return i()+11102230246251565e-32*(2097152*i()|0)},i.quick=i,s&&("object"==typeof s&&o(s,n),i.state=function(){return o(n,{})}),i}e&&e.exports?e.exports=s:n&&n.amd?n((function(){return s})):this.alea=s}(0,t,!1)})),me=ge((function(t){!function(t,e,n){function r(t){var e=this,n="";e.x=0,e.y=0,e.z=0,e.w=0,e.next=function(){var t=e.x^e.x<<11;return e.x=e.y,e.y=e.z,e.z=e.w,e.w^=e.w>>>19^t^t>>>8},t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),e.next()}function o(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e}function s(t,e){var n=new r(t),s=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,s&&("object"==typeof s&&o(s,n),i.state=function(){return o(n,{})}),i}e&&e.exports?e.exports=s:n&&n.amd?n((function(){return s})):this.xor128=s}(0,t,!1)})),ve=ge((function(t){!function(t,e,n){function r(t){var e=this,n="";e.next=function(){var t=e.x^e.x>>>2;return e.x=e.y,e.y=e.z,e.z=e.w,e.w=e.v,(e.d=e.d+362437|0)+(e.v=e.v^e.v<<4^t^t<<1)|0},e.x=0,e.y=0,e.z=0,e.w=0,e.v=0,t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),r==n.length&&(e.d=e.x<<10^e.x>>>4),e.next()}function o(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e.v=t.v,e.d=t.d,e}function s(t,e){var n=new r(t),s=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,s&&("object"==typeof s&&o(s,n),i.state=function(){return o(n,{})}),i}e&&e.exports?e.exports=s:n&&n.amd?n((function(){return s})):this.xorwow=s}(0,t,!1)})),ye=ge((function(t){!function(t,e,n){function r(t){var e=this;e.next=function(){var t,n,r=e.x,o=e.i;return t=r[o],n=(t^=t>>>7)^t<<24,n^=(t=r[o+1&7])^t>>>10,n^=(t=r[o+3&7])^t>>>3,n^=(t=r[o+4&7])^t<<7,t=r[o+7&7],n^=(t^=t<<13)^t<<9,r[o]=n,e.i=o+1&7,n},function(t,e){var n,r=[];if(e===(0|e))r[0]=e;else for(e=""+e,n=0;n<e.length;++n)r[7&n]=r[7&n]<<15^e.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],t.x=r,t.i=0,n=256;n>0;--n)t.next()}(e,t)}function o(t,e){return e.x=t.x.slice(),e.i=t.i,e}function s(t,e){null==t&&(t=+new Date);var n=new r(t),s=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,s&&(s.x&&o(s,n),i.state=function(){return o(n,{})}),i}e&&e.exports?e.exports=s:n&&n.amd?n((function(){return s})):this.xorshift7=s}(0,t,!1)})),Ce=ge((function(t){!function(t,e,n){function r(t){var e=this;e.next=function(){var t,n,r=e.w,o=e.X,s=e.i;return e.w=r=r+1640531527|0,n=o[s+34&127],t=o[s=s+1&127],n^=n<<13,t^=t<<17,n^=n>>>15,t^=t>>>12,n=o[s]=n^t,e.i=s,n+(r^r>>>16)|0},function(t,e){var n,r,o,s,i,a=[],l=128;for(e===(0|e)?(r=e,e=null):(e+="\0",r=0,l=Math.max(l,e.length)),o=0,s=-32;s<l;++s)e&&(r^=e.charCodeAt((s+32)%e.length)),0===s&&(i=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,s>=0&&(i=i+1640531527|0,o=0==(n=a[127&s]^=r+i)?o+1:0);for(o>=128&&(a[127&(e&&e.length||0)]=-1),o=127,s=512;s>0;--s)r=a[o+34&127],n=a[o=o+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,a[o]=r^n;t.w=i,t.X=a,t.i=o}(e,t)}function o(t,e){return e.i=t.i,e.w=t.w,e.X=t.X.slice(),e}function s(t,e){null==t&&(t=+new Date);var n=new r(t),s=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,s&&(s.X&&o(s,n),i.state=function(){return o(n,{})}),i}e&&e.exports?e.exports=s:n&&n.amd?n((function(){return s})):this.xor4096=s}(0,t,!1)})),$e=ge((function(t){!function(t,e,n){function r(t){var e=this,n="";e.next=function(){var t=e.b,n=e.c,r=e.d,o=e.a;return t=t<<25^t>>>7^n,n=n-r|0,r=r<<24^r>>>8^o,o=o-t|0,e.b=t=t<<20^t>>>12^n,e.c=n=n-r|0,e.d=r<<16^n>>>16^o,e.a=o-t|0},e.a=0,e.b=0,e.c=-1640531527,e.d=1367130551,t===Math.floor(t)?(e.a=t/4294967296|0,e.b=0|t):n+=t;for(var r=0;r<n.length+20;r++)e.b^=0|n.charCodeAt(r),e.next()}function o(t,e){return e.a=t.a,e.b=t.b,e.c=t.c,e.d=t.d,e}function s(t,e){var n=new r(t),s=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,s&&("object"==typeof s&&o(s,n),i.state=function(){return o(n,{})}),i}e&&e.exports?e.exports=s:n&&n.amd?n((function(){return s})):this.tychei=s}(0,t,!1)})),we=ge((function(e){!function(n,r){var o,s=this,i=r.pow(256,6),a=r.pow(2,52),l=2*a;function u(t,e,u){var p=[],g=d(function t(e,n){var r,o=[],s=typeof e;if(n&&"object"==s)for(r in e)try{o.push(t(e[r],n-1))}catch(t){}return o.length?o:"string"==s?e:e+"\0"}((e=1==e?{entropy:!0}:e||{}).entropy?[t,f(n)]:null==t?function(){try{var t;return o&&(t=o.randomBytes)?t=t(256):(t=new Uint8Array(256),(s.crypto||s.msCrypto).getRandomValues(t)),f(t)}catch(t){var e=s.navigator,r=e&&e.plugins;return[+new Date,s,r,s.screen,f(n)]}}():t,3),p),x=new c(p),m=function(){for(var t=x.g(6),e=i,n=0;t<a;)t=256*(t+n),e*=256,n=x.g(1);for(;t>=l;)t/=2,e/=2,n>>>=1;return(t+n)/e};return m.int32=function(){return 0|x.g(4)},m.quick=function(){return x.g(4)/4294967296},m.double=m,d(f(x.S),n),(e.pass||u||function(t,e,n,o){return o&&(o.S&&h(o,x),t.state=function(){return h(x,{})}),n?(r.random=t,e):t})(m,g,"global"in e?e.global:this==r,e.state)}function c(t){var e,n=t.length,r=this,o=0,s=r.i=r.j=0,i=r.S=[];for(n||(t=[n++]);o<256;)i[o]=o++;for(o=0;o<256;o++)i[o]=i[s=255&s+t[o%n]+(e=i[o])],i[s]=e;(r.g=function(t){for(var e,n=0,o=r.i,s=r.j,i=r.S;t--;)e=i[o=255&o+1],n=256*n+i[255&(i[o]=i[s=255&s+e])+(i[s]=e)];return r.i=o,r.j=s,n})(256)}function h(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function d(t,e){for(var n,r=t+"",o=0;o<r.length;)e[255&o]=255&(n^=19*e[255&o])+r.charCodeAt(o++);return f(e)}function f(t){return String.fromCharCode.apply(0,t)}if(r.seedrandom=u,d(r.random(),n),e.exports){e.exports=u;try{o=t}catch(t){}}}([],Math)}));we.alea=xe,we.xor128=me,we.xorwow=ve,we.xorshift7=ye,we.xor4096=Ce,we.tychei=$e;var be=we;function Re(t,e){x(t);const n=ft(t,e);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return yt(t,null,n,e)}const Ie=mt({relu_:function(t){const e=gt(t,"x","relu"),n={x:e};return dt.runKernelFunc((t,n)=>(n([e]),"bool"===e.dtype?e.toInt():t.relu(e)),n,null,"Relu")}});const Ee=mt({relu6_:function(t){const e=gt(t,"x","relu6"),n={x:e};return dt.runKernelFunc((t,n)=>(n([e]),"bool"===e.dtype?wt(e,"int32"):t.relu6(e)),n,null,"Relu6")}});const Ae=mt({softmax_:function(t,e=-1){const n=gt(t,"logits","softmax","float32");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${e}`);const r={logits:n},o={dim:e};return dt.runKernelFunc((t,r)=>{const o=t.softmax(n,e);return r([o]),o},r,null,"Softmax",o)}});const Te=mt({stack_:function(t,e=0){const n=xt(t,"tensors","stack");if(p(n.length>=1,()=>"Pass at least one tensor to tf.stack"),1===n.length)return ae(n[0],e);const r=n[0].rank,o=n[0].shape,s=n[0].dtype;p(e<=r,()=>"Axis must be <= rank of the tensor"),n.forEach(t=>{g(o,t.shape,"All tensors passed to stack must have matching shapes"),p(s===t.dtype,()=>"All tensors passed to stack must have matching dtypes")});const i=n.map(t=>ae(t,e));return Zt(i,e)}});function Se(t,e,n){if(x(t),null!=e&&4!==e.length)throw new Error("tensor4d() requires shape to have four numbers");const r=ft(t,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return yt(t,e,r,n)}function Oe(t,e){const n=[];for(let t=0;t<e.length;t++)e[t]&&n.push(t);const r=Jt(t,"int32"),o=Jt([n.length,t.length],"int32");for(let e=0;e<n.length;e++){const s=r.indexToLoc(n[e]),i=e*t.length;o.values.set(s,i)}return o.toTensor()}function Ne(t,e,n){const r=function(t,e,n){return function(t,e,n){let r=0,o=t.length,s=0,i=!1;for(;r<o;){s=r+(o-r>>>1);const a=n(e,t[s]);a>0?r=s+1:(o=s,i=!a)}return i?r:-r-1}(t,e,n||ke)}(t,e,n),o=r<0?-(r+1):r;t.splice(o,0,e)}function ke(t,e){return t>e?1:t<e?-1:0}function Fe(t,e,n){const r=t.subarray(4*e,4*e+4),o=t.subarray(4*n,4*n+4),s=Math.min(r[0],r[2]),i=Math.min(r[1],r[3]),a=Math.max(r[0],r[2]),l=Math.max(r[1],r[3]),u=Math.min(o[0],o[2]),c=Math.min(o[1],o[3]),h=Math.max(o[0],o[2]),d=Math.max(o[1],o[3]),f=(a-s)*(l-i),p=(h-u)*(d-c);if(f<=0||p<=0)return 0;const g=Math.max(s,u),x=Math.max(i,c),m=Math.min(a,h),v=Math.min(l,d),y=Math.max(m-g,0)*Math.max(v-x,0);return y/(f+p-y)}function De(t,e,n){const r=Math.exp(e*n*n);return n<=t?r:0}function _e(t,e){return t.score-e.score||t.score===e.score&&e.boxIndex-t.boxIndex}function Be(t,e,n,r=!0){let o=[];if(r)o=o.concat(e.slice(0)),o.push(t[0]/n),o=o.concat(t.slice(1));else{o=o.concat(t[0]);const n=e.length;for(let r=0;r<n;++r)o=o.concat([t[r+1]/e[r],e[r]]);o=o.concat(t.slice(n+1))}return o}function Me(t,e,n=!0){const r=[];if(n){r.push(e);for(let n=e+1;n<t;++n)n<=2*e?(r.push(n),r.push(n-(e+1))):r.push(n)}else{const n=[],o=[];for(let r=1;r<t;++r)r>=2*e+1||r%2==1?o.push(r):n.push(r);r.push(...n),r.push(0),r.push(...o)}return r}function Pe(t,e,n,r=!0){const o=[];r?o.push(t[0]/n):o.push(t[0]*n);for(let n=1;n<t.length;++n)n<=e.length?r?o.push(e[n-1]*t[n]):o.push(t[n]/e[n-1]):o.push(t[n]);return o}function Le(t,e){const n=[0];for(let r=0;r<e;++r)n.push(t[r][0]);return n}function We(t,e,n){const r=t.slice(0,1);for(let o=0;o<n;++o)r.push(t[o+1]-e[o][0]-e[o][1]);return r}function Ue(...t){n().getBool("IS_TEST")||console.warn(...t)}function Ve(t,e){if(t.length!==e.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${t.length}, imag: ${e.length}.`);const n=new Float32Array(2*t.length);for(let r=0;r<n.length;r+=2)n[r]=t[r/2],n[r+1]=e[r/2];return n}function ze(t){const e=new Float32Array(t.length/2),n=new Float32Array(t.length/2);for(let r=0;r<t.length;r+=2)e[r/2]=t[r],n[r/2]=t[r+1];return{real:e,imag:n}}function Ge(t){const e=Math.ceil(t.length/4),n=new Float32Array(e),r=new Float32Array(e);for(let e=0;e<t.length;e+=4)n[Math.floor(e/4)]=t[e],r[Math.floor(e/4)]=t[e+1];return{real:n,imag:r}}function He(t){const e=Math.floor(t.length/4),n=new Float32Array(e),r=new Float32Array(e);for(let e=2;e<t.length;e+=4)n[Math.floor(e/4)]=t[e],r[Math.floor(e/4)]=t[e+1];return{real:n,imag:r}}function Xe(t,e){return{real:t[2*e],imag:t[2*e+1]}}function je(t,e,n,r){t[2*r]=e,t[2*r+1]=n}function Ke(t,e){const n=new Float32Array(t/2),r=new Float32Array(t/2);for(let o=0;o<Math.ceil(t/2);o++){const s=(e?2:-2)*Math.PI*(o/t);n[o]=Math.cos(s),r[o]=Math.sin(s)}return{real:n,imag:r}}function qe(t,e,n){const r=(n?2:-2)*Math.PI*(t/e);return{real:Math.cos(r),imag:Math.sin(r)}}function Ye(t,e,n){if("complex64"===e){if("complex64"===t.dtype)return t.clone();const e=fe(t.shape),r=t.toFloat(),o=n.complex(r,e);return e.dispose(),r.dispose(),o}if(r=t.dtype,"complex64"===(o=e)||"float32"===o&&"complex64"!==r||"int32"===o&&"float32"!==r&&"complex64"!==r||"bool"===o&&"bool"===r)return dt.makeTensorFromDataId(t.dataId,t.shape,e);var r,o;if("complex64"===t.dtype){const r=n.real(t),o=r.cast(e);return r.dispose(),o}if("int32"===e)return n.int(t);if("bool"===e){const e=de(0,t.dtype),r=n.notEqual(t,e);return e.dispose(),r}throw new Error(`Error in Cast: failed to cast ${t.dtype} to ${e}`)}function Qe(t,e){return dt.makeTensorFromDataId(t.dataId,e,t.dtype)}function Ze(t,e,n){const r=(e-t)/(n-1),o=P(n,"float32");o[0]=t;for(let t=1;t<o.length;t++)o[t]=o[t-1]+r;return Re(o,"float32")}var Je=Object.freeze({__proto__:null,segment_util:ue,castTensor:Ye,reshapeTensor:Qe,linspaceImpl:Ze,upcastType:it,axesAreInnerMostDims:bt,combineLocations:Rt,computeOutAndReduceShapes:It,expandShapeToKeepDim:Et,assertAxesAreInnerMostDims:At,getAxesPermutation:Tt,getUndoAxesPermutation:St,getInnerMostAxes:Ot,getBroadcastDims:ne,getReductionAxes:re,assertAndGetBroadcastShape:oe,assertParamsConsistent:Yt,computeOutShape:Qt,computeDilation2DInfo:function(t,e,n,r,o="NHWC",s){return Ut(t,[...e,t[3]],n,s,r,null,null,qt(o))},computePool2DInfo:function(t,e,n,r,o,s,i="channelsLast"){const[a,l]=Gt(e);let u;if("channelsLast"===i)u=[a,l,t[3],t[3]];else{if("channelsFirst"!==i)throw new Error("Unknown dataFormat "+i);u=[a,l,t[1],t[1]]}return Ut(t,u,n,r,o,s,!1,i)},computePool3DInfo:function(t,e,n,r,o,s,i="NDHWC"){const[a,l,u]=Ht(e);let c,h;if("NDHWC"===i)h="channelsLast",c=[a,l,u,t[4],t[4]];else{if("NCDHW"!==i)throw new Error("Unknown dataFormat "+i);h="channelsFirst",c=[a,l,u,t[1],t[1]]}return Vt(t,c,n,r,o,!1,h,s)},computeConv2DInfo:Ut,computeConv3DInfo:Vt,computeDefaultPad:zt,tupleValuesAreOne:Kt,eitherStridesOrDilationsAreOne:function(t,e){return Kt(t)||Kt(e)},convertConv2DDataFormat:qt,getFusedDyActivation:function(t,e,n){if(null==n||"linear"===n)return t;if("relu"===n)return t.mul(e.step());throw new Error(`Cannot compute gradient for fused activation ${n}.`)},getFusedBiasGradient:function(t,e){let n=e;const r=re(t.shape,e.shape);return r.length>0&&(n=n.sum(r)),n.reshape(t.shape)},applyActivation:function(t,e,n){if("linear"===e)return t;if("relu"===e)return Ie(t);if("elu"===e)return se(t);if("relu6"===e)return Ee(t);if("prelu"===e)return pe(t,n);throw new Error(`Unknown fused activation ${e}.`)},shouldFuse:(t,e)=>!(t>0)||"linear"===e,PARALLELIZE_THRESHOLD:30,computeOptimalWindowSize:le,getImageCenter:function(t,e,n){return[n*("number"==typeof t?t:t[0]),e*("number"==typeof t?t:t[1])]},getReshaped:Be,getPermuted:Me,getReshapedPermuted:Pe,getSliceBeginCoords:Le,getSliceSize:We,prepareAndValidate:Ft,validateUpdateShape:Dt,validateInput:function(t,e,n){if(e.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`);if(t.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${t.rank}.`);if("int32"!==e.dtype)throw new Error("The dtype of 'indices' should be int32, but got dtype: "+e.dtype);if(n.length<1)throw new Error("Output rank must be greater or equal to 1, but got shape: "+n);if(0===n.length){if(0===e.size)throw new Error("Indices specified for empty output. indices shape: "+e.shape);if(0===t.size)throw new Error("Updates specified for empty output. updates shape: "+t.shape)}Dt(n,e,t)},calculateShapes:_t,SELU_SCALEALPHA:1.7580993408473768,SELU_SCALE:1.0507009873554805,ERF_P:.3275911,ERF_A1:.254829592,ERF_A2:-.284496736,ERF_A3:1.421413741,ERF_A4:-1.453152027,ERF_A5:1.061405429,warn:Ue,log:function(...t){n().getBool("IS_TEST")||console.log(...t)},mergeRealAndImagArrays:Ve,splitRealAndImagArrays:ze,complexWithEvenIndex:Ge,complexWithOddIndex:He,getComplexWithIndex:Xe,assignToTypedArray:je,exponents:Ke,exponent:qe,prepareSplitSize:function(t,e,n=0){let r=[];if("number"==typeof e)p(t.shape[n]%e==0,()=>"Number of splits must evenly divide the axis."),r=new Array(e).fill(t.shape[n]/e);else{p(e.reduce((t,e)=>(-1===e&&(t+=1),t),0)<=1,()=>"There should be only one negative value in split array.");const o=e.indexOf(-1);if(-1!==o){const r=e.reduce((t,e)=>e>0?t+e:t);e[o]=t.shape[n]-r}p(t.shape[n]===e.reduce((t,e)=>t+e),()=>"The sum of sizes must match the size of the axis dimension."),r=e}return r}});function tn(){if("undefined"!=typeof navigator&&null!=navigator){const t=navigator.userAgent||navigator.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function en(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}function nn(t,e,n){const r=new Array(t.rank).fill(0),o=t.shape.slice();return e.map(e=>{const s=[...o];s[n]=e;const i=t.slice(r,s);return r[n]+=e,i})}function rn(t,e){const n=new Array(t.rank);for(let r=0;r<n.length;r++)n[r]=t.shape[r]*e[r];const r=Jt(n,t.dtype);for(let e=0;e<r.values.length;++e){const n=r.indexToLoc(e),o=new Array(t.rank);for(let e=0;e<o.length;e++)o[e]=n[e]%t.shape[e];const s=t.locToIndex(o);r.values[e]=t.values[s]}return r.toTensor()}function on(t,e,n,r,o){const s=e[e.length-1],[i,a]=[t.length/s,s],l=A(n,i*r),u=A("int32",i*r);for(let e=0;e<i;e++){const n=e*a,o=t.subarray(n,n+a),s=[];for(let t=0;t<o.length;t++)s.push({value:o[t],index:t});s.sort((t,e)=>e.value-t.value);const i=e*r,c=l.subarray(i,i+r),h=u.subarray(i,i+r);for(let t=0;t<r;t++)c[t]=s[t].value,h[t]=s[t].index}const c=e.slice();return c[c.length-1]=r,[Ct(l,c,n),Ct(u,c,"int32")]}class sn{constructor(t,e){this.backend=t,this.dataMover=e,this.data=new WeakMap,this.dataIdsCount=0}get(t){return this.data.has(t)||this.dataMover.moveData(this.backend,t),this.data.get(t)}set(t,e){this.dataIdsCount++,this.data.set(t,e)}has(t){return this.data.has(t)}delete(t){return this.dataIdsCount--,this.data.delete(t)}numDataIds(){return this.dataIdsCount}}class an{time(t){return ln("time")}read(t){return ln("read")}readSync(t){return ln("readSync")}numDataIds(){return ln("numDataIds")}disposeData(t){return ln("disposeData")}write(t,e,n){return ln("write")}move(t,e,n,r){return ln("move")}memory(){return ln("memory")}floatPrecision(){return ln("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}batchMatMul(t,e,n,r){return ln("batchMatMul")}fusedBatchMatMul({a:t,b:e,transposeA:n,transposeB:r,bias:o,activation:s,preluActivationWeights:i}){return ln("fusedBatchMatMul")}slice(t,e,n){return ln("slice")}stridedSlice(t,e,n,r){return ln("stridedSlice")}unstack(t,e){return ln("unstack")}reverse(t,e){return ln("reverse")}concat(t,e){return ln("concat")}neg(t){return ln("neg")}add(t,e){return ln("add")}addN(t){return ln("addN")}subtract(t,e){return ln("subtract")}multiply(t,e){return ln("multiply")}realDivide(t,e){return ln("realDivide")}floorDiv(t,e){return ln("floorDiv")}sum(t,e){return ln("sum")}prod(t,e){return ln("prod")}unsortedSegmentSum(t,e,n){return ln("unsortedSegmentSum")}argMin(t,e){return ln("argMin")}argMax(t,e){return ln("argMax")}equal(t,e){return ln("equal")}notEqual(t,e){return ln("notEqual")}less(t,e){return ln("less")}lessEqual(t,e){return ln("lessEqual")}greater(t,e){return ln("greater")}greaterEqual(t,e){return ln("greaterEqual")}logicalNot(t){return ln("logicalNot")}logicalAnd(t,e){return ln("logicalAnd")}logicalOr(t,e){return ln("logicalOr")}where(t){return ln("where")}select(t,e,n){return ln("select")}topk(t,e,n){return ln("topk")}min(t,e){return ln("min")}minimum(t,e){return ln("minimum")}mod(t,e){return ln("mod")}max(t,e){return ln("max")}maximum(t,e){return ln("maximum")}all(t,e){return ln("all")}any(t,e){return ln("any")}squaredDifference(t,e){return ln("squaredDifference")}ceil(t){return ln("ceil")}floor(t){return ln("floor")}round(t){return ln("round")}sign(t){return ln("sign")}isNaN(t){return ln("isNaN")}isInf(t){return ln("isInf")}isFinite(t){return ln("isFinite")}pow(t,e){return ln("pow")}exp(t){return ln("exp")}expm1(t){return ln("expm1")}softmax(t,e){return ln("softmax")}log(t){return ln("log")}log1p(t){return ln("log1p")}sqrt(t){return ln("sqrt")}rsqrt(t){return ln("rsqrt")}square(t){return ln("square")}reciprocal(t){return ln("reciprocal")}relu(t){return ln("relu")}relu6(t){return ln("relu6")}prelu(t,e){return ln("prelu")}elu(t){return ln("elu")}eluDer(t,e){return ln("eluDer")}selu(t){return ln("selu")}int(t){return ln("int")}clip(t,e,n){return ln("clip")}abs(t){return ln("abs")}complexAbs(t){return ln("complexAbs")}sigmoid(t){return ln("sigmoid")}softplus(t){return ln("softplus")}sin(t){return ln("sin")}cos(t){return ln("cos")}tan(t){return ln("tan")}asin(t){return ln("asin")}acos(t){return ln("acos")}atan(t){return ln("atan")}atan2(t,e){return ln("atan2")}sinh(t){return ln("sinh")}cosh(t){return ln("cosh")}tanh(t){return ln("tanh")}asinh(t){return ln("asinh")}acosh(t){return ln("acosh")}atanh(t){return ln("atanh")}erf(t){return ln("erf")}step(t,e){return ln("step")}fusedConv2d({input:t,filter:e,convInfo:n,bias:r,activation:o,preluActivationWeights:s}){return ln("fusedConv2d")}conv2d(t,e,n){return ln("conv2d")}conv2dDerInput(t,e,n){return ln("conv2dDerInput")}conv2dDerFilter(t,e,n){return ln("conv2dDerFilter")}fusedDepthwiseConv2D({input:t,filter:e,convInfo:n,bias:r,activation:o,preluActivationWeights:s}){return ln("fusedDepthwiseConv2D")}depthwiseConv2D(t,e,n){return ln("depthwiseConv2D")}depthwiseConv2DDerInput(t,e,n){return ln("depthwiseConv2DDerInput")}depthwiseConv2DDerFilter(t,e,n){return ln("depthwiseConv2DDerFilter")}conv3d(t,e,n){return ln("conv3d")}conv3dDerInput(t,e,n){return ln("conv3dDerInput")}conv3dDerFilter(t,e,n){return ln("conv3dDerFilter")}maxPool(t,e){return ln("maxPool")}maxPoolBackprop(t,e,n,r){return ln("maxPoolBackprop")}avgPool(t,e){return ln("avgPool")}avgPoolBackprop(t,e,n){return ln("avgPoolBackprop")}avgPool3d(t,e){return ln("avgPool3d")}avgPool3dBackprop(t,e,n){return ln("avgPool3dBackprop")}maxPool3d(t,e){return ln("maxPool3d")}maxPool3dBackprop(t,e,n,r){return ln("maxPool3dBackprop")}reshape(t,e){return ln("reshape")}cast(t,e){return ln("cast")}tile(t,e){return ln("tile")}pad(t,e,n){return ln("pad")}transpose(t,e){return ln("transpose")}gather(t,e,n){return ln("gather")}gatherND(t,e){return ln("gatherND")}scatterND(t,e,n){return ln("scatterND")}batchToSpaceND(t,e,n){return ln("batchToSpaceND")}spaceToBatchND(t,e,n){return ln("spaceToBatchND")}resizeBilinear(t,e,n,r){return ln("resizeBilinear")}resizeBilinearBackprop(t,e,n){return ln("resizeBilinearBackprop")}resizeNearestNeighbor(t,e,n,r){return ln("resizeNearestNeighbor")}resizeNearestNeighborBackprop(t,e,n){return ln("resizeNearestNeighborBackprop")}batchNorm(t,e,n,r,o,s){return ln("batchNorm")}localResponseNormalization4D(t,e,n,r,o){return ln("localResponseNormalization4D")}LRNGrad(t,e,n,r,o,s,i){return ln("LRNGrad")}multinomial(t,e,n,r){return ln("multinomial")}oneHot(t,e,n,r){return ln("oneHot")}cumsum(t,e,n,r){return ln("cumsum")}nonMaxSuppression(t,e,n,r,o){return ln("nonMaxSuppression")}fft(t){return ln("fft")}ifft(t){return ln("ifft")}complex(t,e){return ln("complex")}real(t){return ln("real")}imag(t){return ln("imag")}cropAndResize(t,e,n,r,o,s){return ln("cropAndResize")}depthToSpace(t,e,n){return ln("depthToSpace")}split(t,e,n){return ln("split")}sparseToDense(t,e,n,r){return ln("sparseToDense")}diag(t){return ln("diag")}fill(t,e,n){return ln("fill")}onesLike(t){return ln("onesLike")}zerosLike(t){return ln("zerosLike")}linspace(t,e,n){return ln("linspace")}dispose(){return ln("dispose")}}function ln(t){throw new Error(`'${t}' not yet implemented or not found in the registry. Did you forget to import the kernel?`)}const un=n();un.registerFlag("DEBUG",()=>!1,t=>{t&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}),un.registerFlag("IS_BROWSER",()=>en()),un.registerFlag("IS_NODE",()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node),un.registerFlag("IS_CHROME",()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),un.registerFlag("PROD",()=>!1),un.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>un.getBool("DEBUG")),un.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),un.registerFlag("IS_TEST",()=>!1);class cn{fetch(t,e){return fetch(t,e)}now(){return performance.now()}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error("Browser's encoder only supports utf-8, but got "+e);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(t)}decode(t,e){return new TextDecoder(e).decode(t)}}n().get("IS_BROWSER")&&n().setPlatform("browser",new cn);const hn=()=>require("node-fetch");let dn;class fn{constructor(){this.util=require("util"),this.textEncoder=new this.util.TextEncoder}fetch(t,e){return null!=n().global.fetch?n().global.fetch(t,e):(null==dn&&(dn=hn()),dn(t,e))}now(){const t=process.hrtime();return 1e3*t[0]+t[1]/1e6}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error("Node built-in encoder only supports utf-8, but got "+e);return this.textEncoder.encode(t)}decode(t,e){return 0===t.length?"":new this.util.TextDecoder(e).decode(t)}}function pn(t,e){Array.isArray(t)||(t=[t]),t.forEach(t=>{null!=t&&p("complex64"!==t.dtype,()=>e+" does not support complex64 tensors in the CPU backend.")})}function gn(t,e,n,r,o,s){const i=o.strideHeight,a=o.strideWidth,l=o.dilationHeight,u=o.dilationWidth,c=o.effectiveFilterHeight,h=o.effectiveFilterWidth,d=o.padInfo.top,f=o.padInfo.left,p="max"===s?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,g=Jt(o.outShape,n),x=g.values,m=o.outShape[1]*o.outShape[2]*o.outShape[3],v=o.outShape[2]*o.outShape[3],y=o.outShape[3];for(let e=0;e<o.batchSize;++e){const n=e*m,g=e*r[0];for(let e=0;e<o.inChannels;++e)for(let m=0;m<o.outHeight;++m){const C=m*i-d,$=Math.max(0,C),w=Math.min(o.inHeight,c+C),b=n+m*v;for(let n=0;n<o.outWidth;++n){const i=n*a-f,c=Math.max(0,i),d=Math.min(o.inWidth,h+i);let m=p,v=0,C=0;for(let n=$;n<w;n+=l){const o=g+n*r[1];for(let n=c;n<d;n+=u){const i=t[o+n*r[2]+e];"max"===s&&i>m?m=i:"avg"===s&&(v+=i,C++)}if(isNaN(m))break}x[b+n*y+e]="avg"===s?v/C:m}}}return g}n().get("IS_NODE")&&n().setPlatform("node",new fn);const xn=function(t,e,n,r,o){return function(t,e,n,r,o,s,i=!1,a=!1,l=!1){const u=[];for(let t=0;t<e.length;t++)e[t]>o&&u.push({score:e[t],boxIndex:t,suppressBeginIndex:0});u.sort(_e);const c=s>0?-.5/s:0,h=[],d=[];for(;h.length<n&&u.length>0;){const e=u.pop(),{score:n,boxIndex:s,suppressBeginIndex:i}=e;if(n<o)break;let a=!1;for(let n=h.length-1;n>=i;--n){const i=Fe(t,s,h[n]);if(i>=r){a=!0;break}if(e.score=e.score*De(r,c,i),e.score<=o)break}e.suppressBeginIndex=h.length,a||(e.score===n?(h.push(s),d.push(e.score)):e.score>o&&Ne(u,e,_e))}const f=h.length,p=n-f;a&&p>0&&(h.push(...new Array(p).fill(0)),d.push(...new Array(p).fill(0)));const g={selectedIndices:Re(h,"int32")};i&&(g.selectedScores=Re(d,"float32"));l&&(g.validOutputs=de(f,"int32"));return g}(t,e,n,r,o,0).selectedIndices},mn=nn,vn=rn,yn=on,Cn=Oe;function $n(t,e,n,r){if("linear"===n)return t.linear(e);if("relu"===n)return t.relu(e);if("elu"===n)return t.elu(e);if("relu6"===n)return t.relu6(e);if("prelu"===n)return t.prelu(e,r);throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}class wn extends an{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new sn(this,Lt())}write(t,e,r){this.firstUse&&(this.firstUse=!1,n().get("IS_NODE")&&Ue("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));const o={};return this.data.set(o,{values:t,dtype:r}),o}move(t,e,n,r){this.data.set(t,{values:e,dtype:r})}numDataIds(){return this.data.numDataIds()}async read(t){return this.readSync(t)}readSync(t){const{dtype:e,complexTensors:n}=this.data.get(t);if("complex64"===e){return Ve(this.readSync(n.real.dataId),this.readSync(n.imag.dataId))}return this.data.get(t).values}bufferSync(t){const e=this.readSync(t.dataId);let n=e;if("string"===t.dtype)try{n=e.map(t=>U(t))}catch(t){throw new Error("Failed to decode encoded string bytes into utf-8")}return Jt(t.shape,t.dtype,n)}makeOutput(t,e,n){const r=this.write(t,e,n);return Lt().makeTensorFromDataId(r,e,n,this)}disposeData(t){if(this.data.has(t)){const{complexTensors:e}=this.data.get(t);null!=e&&(e.real.dispose(),e.imag.dispose()),this.data.delete(t)}}async time(t){const e=L();t();return{kernelMs:L()-e}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}complex(t,e){const n=this.makeOutput(null,t.shape,"complex64");return this.data.get(n.dataId).complexTensors={real:Lt().keep(t.clone()),imag:Lt().keep(e.clone())},n}real(t){return this.data.get(t.dataId).complexTensors.real.clone()}imag(t){return this.data.get(t.dataId).complexTensors.imag.clone()}slice(t,e,n){pn(t,"slice");if(Mt(t.shape,e,n)){const r=Pt(e,t.strides),o=v(n);return Ct(this.readSync(t.dataId).subarray(r,r+o),n,t.dtype)}const r=Jt(n,t.dtype),o=this.bufferSync(t);for(let t=0;t<r.size;++t){const n=r.indexToLoc(t).map((t,n)=>t+e[n]);r.values[t]=o.get(...n)}return r.toTensor()}stridedSlice(t,e,n,r){pn(t,"stridedSlice");const o=Bt(e,n,r);if(o.some(t=>0===t))return Ct([],o);const s=Jt(o,t.dtype),i=this.bufferSync(t);for(let t=0;t<s.size;t++){const n=s.indexToLoc(t),o=new Array(n.length);for(let t=0;t<o.length;t++)o[t]=n[t]*r[t]+e[t];s.set(i.get(...o),...n)}return s.toTensor()}diag(t){const e=this.readSync(t.dataId),n=Jt([t.size,t.size],t.dtype),r=n.values;for(let n=0;n<e.length;n++)r[n*t.size+n]=e[n];return n.toTensor()}unstack(t,e){const n=t.shape[e],r=new Array(t.rank-1);let o=0;for(let n=0;n<t.rank;n++)n!==e&&(r[o++]=t.shape[n]);const s=new Array(t.rank).fill(0),i=t.shape.slice();i[e]=1;const a=new Array(n);for(let n=0;n<a.length;n++)s[e]=n,a[n]=this.slice(t,s,i).reshape(r);return a}reverse(t,e){pn(t,"reverse");const n=Jt(t.shape,t.dtype),r=this.bufferSync(t);for(let o=0;o<n.size;o++){const s=n.indexToLoc(o),i=s.slice();e.forEach(e=>i[e]=t.shape[e]-1-i[e]),n.set(r.get(...i),...s)}return n.toTensor()}concat(t,e){if("complex64"===t[0].dtype){const n=t.map(t=>he(t)),r=t.map(t=>ce(t));return vt(this.concat(n,e),this.concat(r,e))}const n=t.map(t=>{const n=v(t.shape.slice(e));return t.as2D(-1,n)}),r=Qt(n.map(t=>t.shape),1),o=Jt(r,t[0].dtype).values;if(1===n[0].shape[0]){let t=0;n.forEach(e=>{o.set(this.readSync(e.dataId),t),t+=e.size})}else{let t=0;n.forEach(e=>{const n=this.readSync(e.dataId);let s=0;for(let i=0;i<e.shape[0];++i){const a=i*r[1]+t;for(let t=0;t<e.shape[1];++t)o[a+t]=n[s++]}t+=e.shape[1]})}const s=Qt(t.map(t=>t.shape),e);return Ct(o,s,t[0].dtype)}neg(t){return pn(t,"neg"),this.multiply(de(-1),t)}add(t,e){return"complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),(t,e,n,r)=>({real:t+n,imag:e+r})):this.broadcastedBinaryOp(t,e,it(t.dtype,e.dtype),(t,e)=>t+e)}addN(t){pn(t,"addN");const e=t.map(t=>this.readSync(t.dataId)),n=Jt(t[0].shape,t[0].dtype),r=n.values;for(let n=0;n<t.length;n++){const t=e[n];for(let e=0;e<r.length;e++)r[e]+=t[e]}return n.toTensor()}softmax(t,e){const n=I([e],t.shape),r=kt(t,n),o=Et(r.shape,n),s=this.subtract(t,r.reshape(o)),i=this.exp(s),a=this.sum(i,n).reshape(o);return ee(i,a)}subtract(t,e){return"complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),(t,e,n,r)=>({real:t-n,imag:e-r})):this.broadcastedBinaryOp(t,e,it(t.dtype,e.dtype),(t,e)=>t-e)}pow(t,e){return pn([t,e],"pow"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>Math.pow(t,e))}batchMatMul(t,e,n,r){pn([t,e],"matMul");const o=n?t.shape[1]:t.shape[2],s=n?t.shape[2]:t.shape[1],i=r?e.shape[1]:e.shape[2],a=t.shape[0],l=this.readSync(t.dataId),u=this.readSync(e.dataId),[c,h,d]=n?[t.strides[0],1,t.strides[1]]:[t.strides[0],t.strides[1],1],[f,p,g]=r?[1,e.strides[1],e.strides[0]]:[e.strides[1],1,e.strides[0]],x=s*i,m=Jt([a,s,i],t.dtype),v=m.values,y=this.blockSize;for(let t=0;t<a;t++)for(let e=0;e<s;e+=y)for(let n=0;n<i;n+=y)for(let r=0;r<o;r+=y){const a=Math.min(e+y,s),m=Math.min(n+y,i),C=Math.min(r+y,o);for(let o=e;o<a;o++)for(let e=n;e<m;e++){let n=0;for(let s=r;s<C;s++)n+=l[t*c+o*h+s*d]*u[s*f+e*p+t*g];v[t*x+(o*i+e)]+=n}}return m.toTensor()}fusedBatchMatMul({a:t,b:e,transposeA:n,transposeB:r,bias:o,activation:s,preluActivationWeights:i}){let a=this.batchMatMul(t,e,n,r);return o&&(a=this.add(a,o)),s&&(a=$n(this,a,s,i)),a}multiply(t,e){return"complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),(t,e,n,r)=>({real:t*n-e*r,imag:t*r+e*n})):this.broadcastedBinaryOp(t,e,it(t.dtype,e.dtype),(t,e)=>t*e)}floorDiv(t,e){pn([t,e],"floorDiv");return this.broadcastedBinaryOp(t,e,"int32",(t,e)=>Math.floor(t/e))}sum(t,e){pn(t,"sum"),At("sum",e,t.rank);const[n,r]=It(t.shape,e),o=fe(n,it(t.dtype,"int32")),s=v(r),i=this.readSync(o.dataId),a=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*s;let n=0;for(let t=0;t<s;++t)n+=a[e+t];i[t]=n}return o}prod(t,e){pn(t,"sum");const[n,r]=It(t.shape,e),o=fe(n,it(t.dtype,"int32")),s=v(r),i=this.readSync(o.dataId),a=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*s;let n=1;for(let t=0;t<s;++t)n*=a[e+t];i[t]=n}return o}unsortedSegmentSum(t,e,n){pn(t,"unsortedSegmentSum");const r=[],o=t.rank-e.rank;for(let t=0;t<o;++t)e=e.expandDims(t+1);for(let o=0;o<n;++o){const n=de(o,"int32"),s=ie(n,e).asType("float32").mul(t).sum(0);r.push(s)}return Te(r)}argMin(t,e){pn(t,"argMin");const n=[e];At("argMin",n,t.rank);const[r,o]=It(t.shape,n),s=fe(r,"int32"),i=v(o),a=this.readSync(s.dataId),l=this.readSync(t.dataId);for(let t=0;t<a.length;++t){const e=t*i;let n=l[e],r=0;for(let t=0;t<i;++t){const o=l[e+t];o<n&&(n=o,r=t)}a[t]=r}return s}argMax(t,e){pn(t,"argMax");const n=[e];At("argMax",n,t.rank);const[r,o]=It(t.shape,n),s=fe(r,"int32"),i=v(o),a=this.readSync(s.dataId),l=this.readSync(t.dataId);for(let t=0;t<a.length;++t){const e=t*i;let n=l[e],r=0;for(let t=0;t<i;++t){const o=l[e+t];o>n&&(n=o,r=t)}a[t]=r}return s}cumsum(t,e,n,r){if(pn(t,"cumsum"),e!==t.rank-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${t.rank-1} but got axis=`+e);const o=it(t.dtype,"int32"),s=fe(t.shape,o),i=this.readSync(s.dataId),a=this.readSync(t.dataId),l=t.shape[t.rank-1],u=r?(t,e)=>t+l-e-1:(t,e)=>t+e;for(let t=0;t<a.length;t+=l)for(let e=0;e<l;e++){const r=u(t,e);if(0===e)i[r]=n?0:a[r];else{const o=u(t,e-1);i[r]=n?a[o]+i[o]:a[r]+i[o]}}return s}equal(t,e){return pn([t,e],"equal"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t===e?1:0)}notEqual(t,e){return pn([t,e],"notEqual"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t!==e?1:0)}less(t,e){return pn([t,e],"less"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t<e?1:0)}lessEqual(t,e){return pn([t,e],"lessEqual"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t<=e?1:0)}greater(t,e){return pn([t,e],"greater"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t>e?1:0)}greaterEqual(t,e){return pn([t,e],"greaterEqual"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t>=e?1:0)}logicalNot(t){pn(t,"logicalNot");const e=this.readSync(t.dataId),n=new Uint8Array(e.length);for(let t=0;t<e.length;++t)n[t]=e[t]?0:1;return this.makeOutput(n,t.shape,"bool")}logicalAnd(t,e){return pn([t,e],"logicalAnd"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t&&e)}logicalOr(t,e){return pn([t,e],"logicalOr"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t||e)}select(t,e,n){pn([t,e,n],"select");const r=this.readSync(t.dataId),o=this.readSync(e.dataId),s=this.readSync(n.dataId),i=fe(e.shape,it(e.dtype,n.dtype)),a=this.readSync(i.dataId);let l=0;const u=0===t.rank||t.rank>1||1===e.rank?1:v(e.shape.slice(1));for(let t=0;t<r.length;t++)for(let e=0;e<u;e++)1===r[t]?a[l++]=o[t]:a[l++]=s[t];return i}where(t){pn([t],"where");const e=this.readSync(t.dataId);return Cn(t.shape,e)}topk(t,e,n){pn(t,"topk");const r=this.readSync(t.dataId);return yn(r,t.shape,t.dtype,e)}min(t,e){pn(t,"min"),At("min",e,t.rank);const[n,r]=It(t.shape,e),o=fe(n,t.dtype),s=v(r),i=this.readSync(o.dataId),a=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*s;let n=a[e];for(let t=0;t<s;++t){const r=a[e+t];r<n&&(n=r)}i[t]=n}return o}minimum(t,e){return pn([t,e],"minimum"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>Math.min(t,e))}mod(t,e){return pn([t,e],"mod"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>{const n=t%e;return t<0&&e<0||t>=0&&e>=0?n:(n+e)%e})}maximum(t,e){return pn([t,e],"maximum"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>Math.max(t,e))}all(t,e){pn(t,"all"),At("all",e,t.rank);const[n,r]=It(t.shape,e),o=fe(n,t.dtype),s=v(r),i=this.readSync(o.dataId),a=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*s;let n=a[e];for(let t=0;t<s;++t){const r=a[e+t];n=n&&r}i[t]=n}return o}any(t,e){pn(t,"any"),At("any",e,t.rank);const[n,r]=It(t.shape,e),o=fe(n,t.dtype),s=v(r),i=this.readSync(o.dataId),a=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*s;let n=a[e];for(let t=0;t<s;++t){const r=a[e+t];n=n||r}i[t]=n}return o}squaredDifference(t,e){return pn([t,e],"squaredDifference"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>{const n=t-e;return n*n})}ceil(t){pn(t,"ceil");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)n[t]=Math.ceil(e[t]);return this.makeOutput(n,t.shape,"float32")}floor(t){pn(t,"floor");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)n[t]=Math.floor(e[t]);return this.makeOutput(n,t.shape,"float32")}sign(t){pn(t,"x");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)e[t]<0?n[t]=-1:e[t]>0?n[t]=1:n[t]=0;return this.makeOutput(n,t.shape,"float32")}isNaN(t){pn(t,"x");const e=this.readSync(t.dataId),n=new Uint8Array(e.length);for(let t=0;t<e.length;++t)Number.isNaN(e[t])&&(n[t]=1);return this.makeOutput(n,t.shape,"bool")}isInf(t){pn(t,"x");const e=this.readSync(t.dataId),n=new Uint8Array(e.length);for(let t=0;t<e.length;++t)Math.abs(e[t])===1/0&&(n[t]=1);return this.makeOutput(n,t.shape,"bool")}isFinite(t){pn(t,"x");const e=this.readSync(t.dataId),n=new Uint8Array(e.length);for(let t=0;t<e.length;++t)Number.isFinite(e[t])&&(n[t]=1);return this.makeOutput(n,t.shape,"bool")}round(t){pn(t,"round");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t){const r=Math.floor(e[t]);e[t]-r<.5?n[t]=Math.floor(e[t]):e[t]-r>.5?n[t]=Math.ceil(e[t]):n[t]=r%2==0?r:r+1}return this.makeOutput(n,t.shape,"float32")}exp(t){pn(t,"exp");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)n[t]=Math.exp(e[t]);return this.makeOutput(n,t.shape,"float32")}expm1(t){pn(t,"expm1");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)n[t]=Math.expm1(e[t]);return this.makeOutput(n,t.shape,"float32")}log(t){pn(t,"log");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t){const r=e[t];n[t]=Math.log(r)}return this.makeOutput(n,t.shape,"float32")}log1p(t){pn(t,"log1p");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t){const r=e[t];n[t]=Math.log1p(r)}return this.makeOutput(n,t.shape,"float32")}sqrt(t){pn(t,"sqrt");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t){const r=e[t];n[t]=Math.sqrt(r)}return this.makeOutput(n,t.shape,"float32")}rsqrt(t){pn(t,"rsqrt");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t){const r=e[t];n[t]=1/Math.sqrt(r)}return this.makeOutput(n,t.shape,"float32")}reciprocal(t){pn(t,"reciprocal");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)n[t]=1/e[t];return this.makeOutput(n,t.shape,"float32")}linear(t){return t}relu(t){pn(t,"relu");const e=fe(t.shape,t.dtype),n=this.readSync(e.dataId),r=this.readSync(t.dataId);for(let t=0;t<r.length;++t)n[t]=Math.max(0,r[t]);return e}relu6(t){pn(t,"relu");const e=fe(t.shape,t.dtype),n=this.readSync(e.dataId),r=this.readSync(t.dataId);for(let t=0;t<r.length;++t)n[t]=Math.min(Math.max(0,r[t]),6);return e}prelu(t,e){return pn([t,e],"prelu"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>t<0?e*t:t)}elu(t){pn(t,"elu");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t){const r=n[t];e[t]=r>=0?r:Math.exp(r)-1}return this.makeOutput(e,t.shape,"float32")}eluDer(t,e){pn([t,e],"eluDer");const n=new Float32Array(e.size),r=this.readSync(e.dataId),o=this.readSync(t.dataId);for(let t=0;t<r.length;++t){const e=r[t];n[t]=e>=1?o[t]:o[t]*(e+1)}return this.makeOutput(n,e.shape,"float32")}selu(t){pn(t,"selu");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t){const r=n[t];e[t]=r>=0?1.0507009873554805*r:1.7580993408473768*(Math.exp(r)-1)}return this.makeOutput(e,t.shape,"float32")}clip(t,e,n){pn(t,"clip");const r=new Float32Array(t.size),o=this.readSync(t.dataId);for(let t=0;t<o.length;++t){const s=o[t];r[t]=s>n?n:s<e?e:s}return this.makeOutput(r,t.shape,"float32")}abs(t){const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.abs(n[t]);return this.makeOutput(e,t.shape,"float32")}complexAbs(t){const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let r=0;r<t.size;++r){const t=n[2*r],o=n[2*r+1];e[r]=Math.hypot(t,o)}return this.makeOutput(e,t.shape,"float32")}int(t){pn(t,"int");const e=new Int32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=n[t];return this.makeOutput(e,t.shape,"int32")}sigmoid(t){pn(t,"sigmoid");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=1/(1+Math.exp(-n[t]));return this.makeOutput(e,t.shape,"float32")}softplus(t){pn(t,"softplus");const e=Math.log(1.1920928955078125e-7)+2,n=new Float32Array(t.size),r=this.readSync(t.dataId);for(let t=0;t<r.length;++t){const o=r[t]>-e,s=r[t]<e,i=Math.exp(r[t]);let a;a=s?i:o?r[t]:Math.log(1+i),n[t]=a}return this.makeOutput(n,t.shape,"float32")}sin(t){pn(t,"sin");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.sin(n[t]);return this.makeOutput(e,t.shape,"float32")}cos(t){pn(t,"cos");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.cos(n[t]);return this.makeOutput(e,t.shape,"float32")}tan(t){pn(t,"tan");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.tan(n[t]);return this.makeOutput(e,t.shape,"float32")}asin(t){pn(t,"asin");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.asin(n[t]);return this.makeOutput(e,t.shape,"float32")}acos(t){pn(t,"acos");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.acos(n[t]);return this.makeOutput(e,t.shape,"float32")}atan(t){pn(t,"atan");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.atan(n[t]);return this.makeOutput(e,t.shape,"float32")}atan2(t,e){return pn([t,e],"atan2"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>Math.atan2(t,e))}sinh(t){pn(t,"sinh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.sinh(n[t]);return this.makeOutput(e,t.shape,"float32")}cosh(t){pn(t,"cosh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.cosh(n[t]);return this.makeOutput(e,t.shape,"float32")}tanh(t){pn(t,"tanh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=$(n[t]);return this.makeOutput(e,t.shape,"float32")}asinh(t){pn(t,"asinh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.asinh(n[t]);return this.makeOutput(e,t.shape,"float32")}acosh(t){pn(t,"acosh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.acosh(n[t]);return this.makeOutput(e,t.shape,"float32")}atanh(t){pn(t,"atanh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.atanh(n[t]);return this.makeOutput(e,t.shape,"float32")}erf(t){pn(t,"erf");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t){const r=Math.sign(n[t]),o=Math.abs(n[t]),s=1/(1+.3275911*o);e[t]=r*(1-((((1.061405429*s-1.453152027)*s+1.421413741)*s-.284496736)*s+.254829592)*s*Math.exp(-o*o))}return this.makeOutput(e,t.shape,"float32")}step(t,e=0){pn(t,"step");const n=new Float32Array(t.size),r=this.readSync(t.dataId);for(let t=0;t<r.length;++t){const o=r[t];isNaN(o)?n[t]=NaN:n[t]=o>0?1:e}return this.makeOutput(n,t.shape,"float32")}fusedConv2d({input:t,filter:e,convInfo:n,bias:r,activation:o,preluActivationWeights:s}){let i=this.conv2d(t,e,n);return r&&(i=this.add(i,r)),o&&(i=$n(this,i,o,s)),i}conv2d(t,e,n){pn([t,e],"conv2d");const r=n.filterHeight,o=n.filterWidth,s=n.dilationHeight,i=n.dilationWidth,a=n.padInfo.left,l=n.padInfo.top,u="channelsLast"===n.dataFormat,c=Jt(n.outShape,t.dtype),h=t.strides[0],d=u?t.strides[1]:t.strides[2],f=u?t.strides[2]:1,p=u?1:t.strides[1],g=c.strides[0],x=u?c.strides[1]:c.strides[2],m=u?c.strides[2]:1,v=u?1:c.strides[1],y=this.readSync(t.dataId),C=this.readSync(e.dataId),$=c.values;for(let t=0;t<n.batchSize;++t){const u=t*h,c=t*g;for(let t=0;t<n.outHeight;++t){const h=c+t*x,g=t*n.strideHeight-l;for(let t=0;t<r;t++){const r=g+t*s;if(r<0||r>=n.inHeight)continue;const l=t*e.strides[0],c=u+r*d;for(let t=0;t<n.outWidth;++t){const r=h+t*m,s=t*n.strideWidth-a;for(let t=0;t<o;t++){const o=s+t*i;if(o<0||o>=n.inWidth)continue;const a=c+o*f;let u=l+t*e.strides[1];for(let t=0;t<n.inChannels;++t){const e=y[a+t*p];for(let t=0;t<n.outChannels;++t)$[r+t*v]+=e*C[u+t];u+=n.outChannels}}}}}}return c.toTensor()}conv3d(t,e,n){const r=n.filterDepth,o=n.filterHeight,s=n.filterWidth,i=n.dilationDepth,a=n.dilationHeight,l=n.dilationWidth,u=n.padInfo.front,c=n.padInfo.left,h=n.padInfo.top,d=Jt(n.outShape,t.dtype),f=this.readSync(t.dataId),p=this.readSync(e.dataId),g=d.values;for(let x=0;x<n.batchSize;++x){const m=x*t.strides[0],v=x*d.strides[0];for(let x=0;x<n.outDepth;++x){const y=v+x*d.strides[1],C=x*n.strideDepth-u;for(let u=0;u<r;u++){const r=C+u*i;if(r<0||r>=n.inDepth)continue;const x=u*e.strides[0],v=m+r*t.strides[1];for(let r=0;r<n.outHeight;++r){const i=y+r*d.strides[2],u=r*n.strideHeight-h;for(let r=0;r<o;r++){const o=u+r*a;if(o<0||o>=n.inHeight)continue;const h=x+r*e.strides[1],d=v+o*t.strides[2];for(let t=0;t<n.outWidth;++t){const r=i+t*n.outChannels,o=t*n.strideWidth-c;for(let t=0;t<s;t++){const s=o+t*l;if(s<0||s>=n.inWidth)continue;const i=h+t*e.strides[2],a=d+s*n.inChannels;let u=i;for(let t=0;t<n.inChannels;++t){const e=f[a+t];for(let t=0;t<n.outChannels;++t)g[r+t]+=e*p[u+t];u+=n.outChannels}}}}}}}}return d.toTensor()}conv2dDerInput(t,e,n){pn([t,e],"conv2dDerInput");const r=Jt(n.inShape,"float32"),o=r.values,s=this.readSync(t.dataId),i=this.readSync(e.dataId),[a,l,u]=e.strides,{batchSize:c,filterHeight:h,filterWidth:d,inChannels:f,inHeight:p,inWidth:g,outChannels:x,outHeight:m,outWidth:v,strideHeight:y,strideWidth:C,dataFormat:$}=n,w=h-1-n.padInfo.top,b=d-1-n.padInfo.left,R="channelsLast"===$,I=r.strides[0],E=R?r.strides[1]:r.strides[2],A=R?r.strides[2]:1,T=R?1:r.strides[1],S=t.strides[0],O=R?t.strides[1]:t.strides[2],N=R?t.strides[2]:1,k=R?1:t.strides[1];for(let t=0;t<c;++t)for(let e=0;e<f;++e)for(let n=0;n<p;++n){const r=n-w,c=Math.max(0,Math.ceil(r/y)),f=Math.min(m,(h+r)/y);for(let p=0;p<g;++p){const g=p-b,m=Math.max(0,Math.ceil(g/C)),$=Math.min(v,(d+g)/C);let w=0;for(let n=c;n<f;++n){const o=n*y-r;for(let r=m;r<$;++r){const c=S*t+O*n+N*r,f=a*(h-1-o)+l*(d-1-(r*C-g))+u*e;for(let t=0;t<x;++t){w+=s[c+k*t]*i[f+t]}}}o[I*t+E*n+A*p+T*e]=w}}return r.toTensor()}conv3dDerInput(t,e,n){const r=Jt(n.inShape,"float32"),o=r.values,[s,i,a,l]=r.strides,u=this.readSync(t.dataId),[c,h,d,f]=t.strides,p=this.readSync(e.dataId),[g,x,m,v]=e.strides,{batchSize:y,filterDepth:C,filterHeight:$,filterWidth:w,inChannels:b,inDepth:R,inHeight:I,inWidth:E,outChannels:A,outDepth:T,outHeight:S,outWidth:O,strideDepth:N,strideHeight:k,strideWidth:F}=n,D=C-1-n.padInfo.front,_=$-1-n.padInfo.top,B=w-1-n.padInfo.left;for(let t=0;t<y;++t)for(let e=0;e<b;++e)for(let n=0;n<R;++n){const r=n-D,y=Math.max(0,Math.ceil(r/N)),b=Math.min(T,(C+r)/N);for(let R=0;R<I;++R){const I=R-_,T=Math.max(0,Math.ceil(I/k)),D=Math.min(S,($+I)/k);for(let S=0;S<E;++S){const E=S-B,_=Math.max(0,Math.ceil(E/F)),M=Math.min(O,(w+E)/F);let P=0;for(let n=y;n<b;++n){const o=n*N-r;for(let r=T;r<D;++r){const s=r*k-I;for(let i=_;i<M;++i){const a=c*t+h*n+d*r+f*i,l=g*(C-1-o)+x*($-1-s)+m*(w-1-(i*F-E))+v*e;for(let t=0;t<A;++t){P+=u[a+t]*p[l+t]}}}}o[s*t+i*n+a*R+l*S+e]=P}}}return r.toTensor()}conv2dDerFilter(t,e,n){pn([t,e],"conv2dDerFilter");const r=n.strideHeight,o=n.strideWidth,s=n.filterHeight,i=n.filterWidth,a="channelsLast"===n.dataFormat,l=Jt(n.filterShape,"float32"),u=n.padInfo.left,c=n.padInfo.top,h=this.bufferSync(t),d=this.bufferSync(e);for(let t=0;t<s;++t){const e=Math.max(0,Math.ceil((c-t)/r)),s=Math.min(n.outHeight,(n.inHeight+c-t)/r);for(let f=0;f<i;++f){const i=Math.max(0,Math.ceil((u-f)/o)),p=Math.min(n.outWidth,(n.inWidth+u-f)/o);for(let g=0;g<n.inChannels;++g)for(let x=0;x<n.outChannels;++x){let m=0;for(let l=0;l<n.batchSize;++l)for(let n=e;n<s;++n){const e=t+n*r-c;for(let t=i;t<p;++t){const r=f+t*o-u;m+=a?h.get(l,e,r,g)*d.get(l,n,t,x):h.get(l,g,e,r)*d.get(l,x,n,t)}}l.set(m,t,f,g,x)}}}return l.toTensor()}conv3dDerFilter(t,e,n){const r=n.strideDepth,o=n.strideHeight,s=n.strideWidth,i=n.filterDepth,a=n.filterHeight,l=n.filterWidth,u=Jt(n.filterShape,"float32"),c=u.values,[h,d,f,p]=u.strides,g=this.readSync(e.dataId),[x,m,v,y]=e.strides,C=this.readSync(t.dataId),[$,w,b,R]=t.strides,I=n.padInfo.front,E=n.padInfo.left,A=n.padInfo.top;for(let t=0;t<i;++t){const e=Math.max(0,Math.ceil((I-t)/r)),i=Math.min(n.outDepth,(n.inDepth+I-t)/r),u=t*h;for(let h=0;h<a;++h){const a=Math.max(0,Math.ceil((A-h)/o)),T=Math.min(n.outHeight,(n.inHeight+A-h)/o),S=h*d+u;for(let u=0;u<l;++u){const l=Math.max(0,Math.ceil((E-u)/s)),d=Math.min(n.outWidth,(n.inWidth+E-u)/s),O=u*f+S;for(let f=0;f<n.inChannels;++f){const S=f*p+O;for(let p=0;p<n.outChannels;++p){let O=0;for(let c=0;c<n.batchSize;++c){const n=c*$,S=c*x;for(let c=e;c<i;++c){const e=(t+c*r-I)*w+n,i=c*m+S;for(let t=a;t<T;++t){const n=(h+t*o-A)*b+e,r=t*v+i;for(let t=l;t<d;++t){const e=t*y+r;O+=C[(u+t*s-E)*R+n+f]*g[e+p]}}}}c[S+p]=O}}}}}return u.toTensor()}fusedDepthwiseConv2D({input:t,filter:e,convInfo:n,bias:r,activation:o,preluActivationWeights:s}){let i=this.depthwiseConv2D(t,e,n);return r&&(i=this.add(i,r)),o&&(i=$n(this,i,o,s)),i}depthwiseConv2D(t,e,n){pn([t,e],"depthwiseConv2D");const r=n.filterHeight,o=n.filterWidth,s=n.dilationHeight,i=n.dilationWidth,a=n.padInfo.left,l=n.padInfo.top,u=n.outChannels/n.inChannels,c=Jt(n.outShape,t.dtype),h=this.readSync(t.dataId),d=this.readSync(e.dataId),f=c.values;for(let p=0;p<n.batchSize;++p){const g=p*t.strides[0],x=p*c.strides[0];for(let p=0;p<n.outHeight;++p){const m=x+p*c.strides[1],v=p*n.strideHeight-a;for(let a=0;a<r;++a){const r=v+a*s;if(r<0||r>=n.inHeight)continue;const p=a*e.strides[0],x=g+r*t.strides[1];for(let t=0;t<n.outWidth;++t){const r=m+t*c.strides[2],s=t*n.strideWidth-l;for(let t=0;t<o;++t){const o=s+t*i;if(o<0||o>=n.inWidth)continue;const a=p+t*e.strides[1],l=x+o*n.inChannels;let c=r,g=a;for(let t=0;t<n.inChannels;++t){const e=h[l+t];for(let t=0;t<u;++t)f[c+t]+=e*d[g+t];c+=u,g+=u}}}}}}return c.toTensor()}depthwiseConv2DDerInput(t,e,n){pn([t,e],"depthwiseConv2DDerInput");const r=Jt(n.inShape,"float32"),o=r.values,[s,i,a]=r.strides,l=this.readSync(t.dataId),[u,c,h]=t.strides,d=this.readSync(e.dataId),[f,p,g]=e.strides,{batchSize:x,filterHeight:m,filterWidth:v,inChannels:y,inHeight:C,inWidth:$,outChannels:w,outHeight:b,outWidth:R,strideHeight:I,strideWidth:E}=n,A=m-1-n.padInfo.top,T=v-1-n.padInfo.left,S=w/y;for(let t=0;t<x;++t)for(let e=0;e<y;++e)for(let n=0;n<C;++n){const r=n-A,x=Math.max(0,Math.ceil(r/I)),y=Math.min(b,(m+r)/I);for(let C=0;C<$;++C){const $=C-T,w=Math.max(0,Math.ceil($/E)),b=Math.min(R,(v+$)/E);let A=0;for(let n=x;n<y;++n){const o=n*I-r;for(let r=w;r<b;++r){const s=u*t+c*n+h*r,i=f*(m-1-o)+p*(v-1-(r*E-$))+g*e;for(let t=0;t<S;++t){A+=l[s+(e*S+t)]*d[i+t]}}}o[s*t+i*n+a*C+e]=A}}return r.toTensor()}depthwiseConv2DDerFilter(t,e,n){pn([t,e],"depthwiseConv2DDerFilter");const r=n.strideHeight,o=n.strideWidth,s=n.filterHeight,i=n.filterWidth,a=Jt(n.filterShape,"float32"),l=n.padInfo.left,u=n.padInfo.top,c=n.outChannels/n.inChannels,h=this.bufferSync(t),d=this.bufferSync(e);for(let t=0;t<s;++t){const e=Math.max(0,Math.ceil((u-t)/r)),s=Math.min(n.outHeight,(n.inHeight+u-t)/r);for(let f=0;f<i;++f){const i=Math.max(0,Math.ceil((l-f)/o)),p=Math.min(n.outWidth,(n.inWidth+l-f)/o);for(let g=0;g<n.outChannels;++g){const x=Math.trunc(g/c),m=g%c;let v=0;for(let a=0;a<n.batchSize;++a)for(let n=e;n<s;++n){const e=t+n*r-u;for(let t=i;t<p;++t){const r=f+t*o-l;v+=h.get(a,e,r,x)*d.get(a,n,t,g)}}a.set(v,t,f,x,m)}}}return a.toTensor()}tile(t,e){return pn(t,"tile"),vn(this.bufferSync(t),e)}pad(t,e,n){pn(t,"pad");const r=e.map((e,n)=>e[0]+t.shape[n]+e[1]),o=e.map(t=>t[0]),s=this.bufferSync(t),i=Jt(r,t.dtype);0!==n&&i.values.fill(n);for(let e=0;e<t.size;e++){const t=s.indexToLoc(e),n=t.map((t,e)=>t+o[e]);i.set(s.get(...t),...n)}return i.toTensor()}gather(t,e,n){pn([t,e],"gather");const r=t.shape.slice(),o=this.readSync(e.dataId);r[n]=o.length;const s=Jt(r,t.dtype),i=this.bufferSync(t);for(let t=0;t<s.size;++t){const e=s.indexToLoc(t),r=e.slice();r[n]=o[e[n]];const a=i.locToIndex(r);s.values[t]=i.values[a]}return s.toTensor()}batchToSpaceND(t,e,n){pn([t],"batchToSpaceND");const r=e.reduce((t,e)=>t*e),o=Be(t.shape,e,r),s=Me(o.length,e.length),i=Pe(t.shape,e,r),a=Le(n,e.length),l=We(i,n,e.length);return Nt(t.reshape(o),s).reshape(i).slice(a,l)}spaceToBatchND(t,e,n){pn([t],"spaceToBatchND");const r=e.reduce((t,e)=>t*e),o=[[0,0]];o.push(...n);for(let n=1+e.length;n<t.shape.length;++n)o.push([0,0]);const s=t.pad(o),i=Be(s.shape,e,r,!1),a=Me(i.length,e.length,!1),l=Pe(s.shape,e,r,!1),u=Nt(s.reshape(i),a);return $t(u,l)}maxPool(t,e){pn(t,"maxPool");return gn(this.readSync(t.dataId),t.shape,t.dtype,t.strides,e,"max").toTensor()}maxPoolBackprop(t,e,n,r){pn([e,n],"maxPoolBackprop");const o=this.readSync(e.dataId),s=Jt(r.outShape,e.dtype,function(t,e,n,r,o=!1,s=!1){const i=Jt(r.outShape,"int32"),a=r.strideHeight,l=r.strideWidth,u=r.dilationHeight,c=r.dilationWidth,h=r.effectiveFilterHeight,d=r.effectiveFilterWidth,f=r.padInfo.top,p=r.padInfo.left,g=Jt(e,n,t);for(let t=0;t<r.batchSize;++t)for(let e=0;e<r.inChannels;++e)for(let n=0;n<r.outHeight;++n){const x=n*a-f;let m=x;for(;m<0;)m+=u;const v=Math.min(r.inHeight,h+x);for(let a=0;a<r.outWidth;++a){const h=a*l-p;let f=h;for(;f<0;)f+=c;const y=Math.min(r.inWidth,d+h);let C=Number.NEGATIVE_INFINITY,$=-1;for(let n=m;n<v;n+=u){const i=n-x;for(let a=f;a<y;a+=c){const l=a-h,u=g.get(t,n,a,e);u>C&&(C=u,$=o?s?((t*r.inHeight+n)*r.inWidth+a)*r.inChannels+e:(n*r.inWidth+a)*r.inChannels+e:i*d+l)}}i.set($,t,n,a,e)}}return i}(o,e.shape,e.dtype,r).values),i=r.strideHeight,a=r.strideWidth,l=r.dilationHeight,u=r.dilationWidth,c=r.effectiveFilterHeight,h=r.effectiveFilterWidth,d=h-1-r.padInfo.left,f=c-1-r.padInfo.top,p=Jt(e.shape,"float32"),g=this.bufferSync(t);for(let t=0;t<r.batchSize;++t)for(let e=0;e<r.inChannels;++e)for(let n=0;n<r.inHeight;++n)for(let o=0;o<r.inWidth;++o){const x=n-f,m=o-d;let v=0;for(let n=0;n<c;n+=l){const o=(x+n)/i;if(!(o<0||o>=r.outHeight||Math.floor(o)!==o))for(let i=0;i<h;i+=u){const l=(m+i)/a;if(l<0||l>=r.outWidth||Math.floor(l)!==l)continue;const u=c*h-1-s.get(t,o,l,e)===n*h+i?1:0;if(0===u)continue;v+=g.get(t,o,l,e)*u}}p.set(v,t,n,o,e)}return p.toTensor()}avgPoolBackprop(t,e,n){pn([t,e],"avgPoolBackprop");const r=n.strideHeight,o=n.strideWidth,s=n.filterHeight,i=n.filterWidth,a=n.dilationHeight,l=n.dilationWidth,u=n.effectiveFilterHeight,c=n.effectiveFilterWidth,h=c-1-n.padInfo.left,d=u-1-n.padInfo.top,f=Jt(e.shape,"float32"),p=1/(s*i),g=this.bufferSync(t);for(let t=0;t<n.batchSize;++t)for(let e=0;e<n.inChannels;++e)for(let s=0;s<n.inHeight;++s)for(let i=0;i<n.inWidth;++i){const x=s-d,m=i-h;let v=0;for(let s=0;s<u;s+=a){const i=(x+s)/r;if(!(i<0||i>=n.outHeight||Math.floor(i)!==i))for(let r=0;r<c;r+=l){const s=(m+r)/o;if(s<0||s>=n.outWidth||Math.floor(s)!==s)continue;v+=g.get(t,i,s,e)}}f.set(v*p,t,s,i,e)}return f.toTensor()}pool3d(t,e,n){pn(t,"pool3d");const r=e.strideDepth,o=e.strideHeight,s=e.strideWidth,i=e.dilationDepth,a=e.dilationHeight,l=e.dilationWidth,u=e.effectiveFilterDepth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,d=e.padInfo.front,f=e.padInfo.top,p=e.padInfo.left,g="max"===n?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,x=this.readSync(t.dataId),m=Jt(e.outShape,t.dtype),v=m.values,y=e.outShape[1]*e.outShape[2]*e.outShape[3]*e.outShape[4],C=e.outShape[2]*e.outShape[3]*e.outShape[4],$=e.outShape[3]*e.outShape[4],w=e.outShape[4];for(let m=0;m<e.batchSize;++m){const b=m*y,R=m*t.strides[0];for(let m=0;m<e.inChannels;++m)for(let y=0;y<e.outDepth;++y){const I=y*r-d;let E=I;for(;E<0;)E+=i;const A=Math.min(e.inDepth,u+I),T=b+y*C;for(let r=0;r<e.outHeight;++r){const u=r*o-f;let d=u;for(;d<0;)d+=a;const y=Math.min(e.inHeight,c+u),C=T+r*$;for(let r=0;r<e.outWidth;++r){const o=r*s-p;let u=o;for(;u<0;)u+=l;const c=Math.min(e.inWidth,h+o),f=C+r*w;let $=g,b=0,I=0;for(let e=E;e<A;e+=i){const r=R+e*t.strides[1];for(let e=d;e<y;e+=a){const o=r+e*t.strides[2];for(let e=u;e<c;e+=l){const r=x[o+e*t.strides[3]+m];if("max"===n&&r>$?$=r:"avg"===n&&(b+=r,I++),isNaN($))break}if(isNaN($))break}if(isNaN($))break}v[f+m]="avg"===n?b/I:$}}}}return m.toTensor()}avgPool3d(t,e){return pn(t,"avgPool3d"),this.pool3d(t,e,"avg").toFloat()}avgPool3dBackprop(t,e,n){pn([t,e],"avgPool3dBackprop");const r=n.strideDepth,o=n.strideHeight,s=n.strideWidth,i=n.filterDepth,a=n.filterHeight,l=n.filterWidth,u=n.dilationDepth,c=n.dilationHeight,h=n.dilationWidth,d=n.effectiveFilterDepth,f=n.effectiveFilterHeight,p=n.effectiveFilterWidth,g=d-1-n.padInfo.front,x=p-1-n.padInfo.left,m=f-1-n.padInfo.top,v=Jt(e.shape,"float32"),y=1/(i*a*l),C=this.bufferSync(t);for(let t=0;t<n.batchSize;++t)for(let e=0;e<n.inChannels;++e)for(let i=0;i<n.inDepth;++i)for(let a=0;a<n.inHeight;++a)for(let l=0;l<n.inWidth;++l){const $=i-g,w=a-m,b=l-x;let R=0;for(let i=0;i<d;i+=u){const a=($+i)/r;if(!(a<0||a>=n.outDepth||Math.floor(a)!==a))for(let r=0;r<f;r+=c){const i=(w+r)/o;if(!(i<0||i>=n.outHeight||Math.floor(i)!==i))for(let r=0;r<p;r+=h){const o=(b+r)/s;if(o<0||o>=n.outWidth||Math.floor(o)!==o)continue;R+=C.get(t,a,i,o,e)}}}v.set(R*y,t,i,a,l,e)}return v.toTensor()}maxPool3d(t,e){return pn(t,"maxPool3d"),this.pool3d(t,e,"max").toFloat()}maxPool3dPositions(t,e){const n=Jt(e.outShape,"int32"),r=e.strideDepth,o=e.strideHeight,s=e.strideWidth,i=e.dilationDepth,a=e.dilationHeight,l=e.dilationWidth,u=e.effectiveFilterDepth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,d=e.padInfo.front,f=e.padInfo.top,p=e.padInfo.left,g=this.bufferSync(t);for(let t=0;t<e.batchSize;++t)for(let x=0;x<e.inChannels;++x)for(let m=0;m<e.outDepth;++m){const v=m*r-d;let y=v;for(;y<0;)y+=i;const C=Math.min(e.inDepth,u+v);for(let r=0;r<e.outHeight;++r){const u=r*o-f;let d=u;for(;d<0;)d+=a;const $=Math.min(e.inHeight,c+u);for(let o=0;o<e.outWidth;++o){const f=o*s-p;let w=f;for(;w<0;)w+=l;const b=Math.min(e.inWidth,h+f);let R=Number.NEGATIVE_INFINITY,I=-1;for(let e=y;e<C;e+=i){const n=e-v;for(let r=d;r<$;r+=a){const o=r-u;for(let s=w;s<b;s+=l){const i=s-f,a=g.get(t,e,r,s,x);a>=R&&(R=a,I=n*c*h+o*c+i)}}}n.set(I,t,m,r,o,x)}}}return n.toTensor()}maxPool3dBackprop(t,e,n,r){pn([e,n],"maxPool3dBackprop");const o=this.maxPool3dPositions(e,r),s=r.strideDepth,i=r.strideHeight,a=r.strideWidth,l=r.dilationDepth,u=r.dilationHeight,c=r.dilationWidth,h=r.effectiveFilterDepth,d=r.effectiveFilterHeight,f=r.effectiveFilterWidth,p=h-1-r.padInfo.front,g=f-1-r.padInfo.left,x=d-1-r.padInfo.top,m=Jt(e.shape,"float32"),v=this.bufferSync(o),y=this.bufferSync(t);for(let t=0;t<r.batchSize;++t)for(let e=0;e<r.inChannels;++e)for(let n=0;n<r.inDepth;++n)for(let o=0;o<r.inHeight;++o)for(let C=0;C<r.inWidth;++C){const $=n-p,w=o-x,b=C-g;let R=0;for(let n=0;n<h;n+=l){const o=($+n)/s;if(!(o<0||o>=r.outDepth||Math.floor(o)!==o))for(let s=0;s<d;s+=u){const l=(w+s)/i;if(!(l<0||l>=r.outHeight||Math.floor(l)!==l))for(let i=0;i<f;i+=c){const u=(b+i)/a;if(u<0||u>=r.outWidth||Math.floor(u)!==u)continue;const c=h*d*f-1-v.get(t,o,l,u,e)===n*d*f+s*f+i?1:0;if(0===c)continue;R+=y.get(t,o,l,u,e)*c}}}m.set(R,t,n,o,C,e)}return m.toTensor()}cast(t,e){return Ye(t,e,this)}reshape(t,e){return Qe(t,e)}avgPool(t,e){pn(t,"avgPool"),pn(t,"maxPool");return gn(this.readSync(t.dataId),t.shape,t.dtype,t.strides,e,"avg").toTensor().toFloat()}resizeBilinear(t,e,n,r){pn(t,"resizeBilinear");const[o,s,i,a]=t.shape,l=this.readSync(t.dataId),u=new Float32Array(v([o,e,n,a])),c=[r&&e>1?s-1:s,r&&n>1?i-1:i],h=[r&&e>1?e-1:e,r&&n>1?n-1:n];let d=0;const f=c[0]/h[0],p=c[1]/h[1];for(let r=0;r<o;r++)for(let o=0;o<e;o++){const e=f*o,c=Math.floor(e),h=e-c,g=Math.min(s-1,Math.ceil(e)),x=r*t.strides[0]+c*t.strides[1],m=r*t.strides[0]+g*t.strides[1];for(let e=0;e<n;e++){const n=p*e,r=Math.floor(n),o=n-r,s=Math.min(i-1,Math.ceil(n)),c=x+r*t.strides[2],f=m+r*t.strides[2],g=x+s*t.strides[2],v=m+s*t.strides[2];for(let t=0;t<a;t++){const e=l[c+t],n=l[f+t],r=e+(l[g+t]-e)*o,s=r+(n+(l[v+t]-n)*o-r)*h;u[d++]=s}}}return Ct(u,[o,e,n,a])}resizeBilinearBackprop(t,e,n){pn([t,e],"resizeBilinearBackprop");const[r,o,s,i]=e.shape,[,a,l]=t.shape,u=new Float32Array(r*o*s*i),c=[n&&a>1?o-1:o,n&&l>1?s-1:s],h=[n&&a>1?a-1:a,n&&l>1?l-1:l],d=c[0]/h[0],f=c[1]/h[1],p=this.readSync(t.dataId);let g=0;for(let t=0;t<r;t++){const n=t*e.strides[0];for(let t=0;t<a;t++){const r=t*d,a=Math.floor(r),c=Math.min(Math.ceil(r),o-1),h=n+a*e.strides[1],x=n+c*e.strides[1],m=r-a,v=1-m;for(let t=0;t<l;t++){const n=t*f,r=Math.floor(n),o=Math.min(Math.ceil(n),s-1),a=n-r,l=1-a,c=h+r*e.strides[2],d=h+o*e.strides[2],y=x+r*e.strides[2],C=x+o*e.strides[2],$=v*l,w=v*a,b=m*l,R=m*a;for(let t=0;t<i;t++){const e=p[g++];u[c+t]+=e*$,u[d+t]+=e*w,u[y+t]+=e*b,u[C+t]+=e*R}}}}return Se(u,[r,s,o,i],e.dtype)}resizeNearestNeighbor(t,e,n,r){pn(t,"resizeNearestNeighbor");const[o,s,i,a]=t.shape,l=this.readSync(t.dataId),u=new Float32Array(o*e*n*a),c=[r&&e>1?s-1:s,r&&n>1?i-1:i],h=[r&&e>1?e-1:e,r&&n>1?n-1:n],d=c[0]/h[0],f=c[1]/h[1];let p=0;for(let c=0;c<o;c++){const o=c*t.strides[0];for(let c=0;c<e;c++){const e=d*c,h=o+Math.min(s-1,r?Math.round(e):Math.floor(e))*t.strides[1];for(let e=0;e<n;e++){const n=f*e,o=h+Math.min(i-1,r?Math.round(n):Math.floor(n))*t.strides[2];for(let t=0;t<a;t++){const e=l[o+t];u[p++]=e}}}}return Ct(u,[o,e,n,a],t.dtype)}resizeNearestNeighborBackprop(t,e,n){pn([t,e],"resizeNearestNeighborBackprop");const[r,o,s,i]=e.shape,[,a,l]=t.shape,u=new Float32Array(r*o*s*i),c=this.readSync(t.dataId),h=[n&&a>1?o-1:o,n&&l>1?s-1:s],d=[n&&a>1?a-1:a,n&&l>1?l-1:l],f=h[0]/d[0],p=h[1]/d[1],g=1/f,x=1/p,m=2*Math.ceil(g)+2,v=2*Math.ceil(x)+2;for(let h=0;h<r;h++){const r=h*e.strides[0];for(let h=0;h<o;h++){const d=r+h*e.strides[1],y=Math.floor(h*g),C=Math.floor(y-m/2);for(let g=0;g<s;g++){const y=d+g*e.strides[2],$=Math.floor(g*x),w=Math.floor($-v/2);for(let e=0;e<i;e++){let i=0;for(let u=0;u<m;u++){const d=u+C;if(d<0||d>=a)continue;const x=r+d*t.strides[1],m=d*f;if(h===Math.min(o-1,n?Math.round(m):Math.floor(m)))for(let r=0;r<v;r++){const o=r+w;if(o<0||o>=l)continue;const a=x+o*t.strides[2],u=o*p;g===Math.min(s-1,n?Math.round(u):Math.floor(u))&&(i+=c[a+e])}}u[y+e]=i}}}}return Se(u,e.shape,e.dtype)}batchNorm(t,e,n,r,o,s){pn([t,e,n,o,r],"batchNorm");const i=this.readSync(t.dataId),a=this.readSync(e.dataId),l=this.readSync(n.dataId),u=o?this.readSync(o.dataId):new Float32Array([1]),c=r?this.readSync(r.dataId):new Float32Array([0]),h=new Float32Array(i.length),d=c.length,f=u.length,p=l.length,g=a.length;let x=0,m=0,v=0,y=0;for(let t=0;t<i.length;++t)h[t]=c[x++]+(i[t]-a[m++])*u[v++]/Math.sqrt(l[y++]+s),x>=d&&(x=0),m>=g&&(m=0),v>=f&&(v=0),y>=p&&(y=0);return Se(h,t.shape)}localResponseNormalization4D(t,e,n,r,o){pn(t,"localResponseNormalization4D");const s=t.shape[3],i=s-1,a=this.readSync(t.dataId),l=t.size,u=new Float32Array(l);function c(t){const n=t%s;let r=t-n+Math.max(0,n-e);const o=t-n+Math.min(n+e,i);let l=0;for(;r<=o;r++){const t=a[r];l+=t*t}return l}for(let t=0;t<l;t++){const e=c(t),s=a[t]*Math.pow(n+r*e,-o);u[t]=s}return Se(u,t.shape)}LRNGrad(t,e,n,r,o,s,i){pn(t,"LRNGrad");const a=t.shape[3],l=this.readSync(t.dataId),u=this.readSync(e.dataId),c=this.readSync(n.dataId),h=new Float32Array(t.size),d=t.size;for(let t=0;t<d;t++){const e=t%a,n=t-e+Math.max(0,e-r),d=t-e+Math.min(a,e+r+1);let f=0;for(let t=n;t<d;t++)f+=Math.pow(u[t],2);f=s*f+o;for(let e=n;e<d;e++){let n=-2*s*i*u[e]*c[t]/f;t===e&&(n+=Math.pow(f,-i)),n*=l[t],h[e]+=n}}return Se(h,t.shape)}multinomial(t,e,n,r){pn(t,"multinomial");const o=e?t:Ae(t),s=o.shape[0],i=o.shape[1],a=fe([s,n],"int32"),l=this.readSync(a.dataId),u=this.readSync(o.dataId);for(let t=0;t<s;++t){const e=t*i,o=new Float32Array(i-1);o[0]=u[e];for(let t=1;t<o.length;++t)o[t]=o[t-1]+u[e+t];const s=be.alea(r.toString()),a=t*n;for(let t=0;t<n;++t){const e=s();l[a+t]=o.length;for(let n=0;n<o.length;n++)if(e<o[n]){l[a+t]=n;break}}}return a}oneHot(t,e,n,r){pn(t,"oneHot");const o=new Float32Array(t.size*e);o.fill(r);const s=this.readSync(t.dataId);for(let r=0;r<t.size;++r)s[r]>=0&&s[r]<e&&(o[r*e+s[r]]=n);return function(t,e,n){if(x(t),null!=e&&2!==e.length)throw new Error("tensor2d() requires shape to have two numbers");const r=ft(t,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return yt(t,e,r,n)}(o,[t.size,e],"int32")}nonMaxSuppression(t,e,n,r,o){pn(t,"nonMaxSuppression");const s=this.readSync(t.dataId),i=this.readSync(e.dataId);return xn(s,i,n,r,o)}fft(t){return this.fftBatch(t,!1)}ifft(t){return this.fftBatch(t,!0)}fftBatch(t,e){const n=t.shape[0],r=t.shape[1],o=Jt(t.shape,"float32"),s=Jt(t.shape,"float32"),i=he(t).as2D(n,r),a=ce(t).as2D(n,r);for(let t=0;t<n;t++){const n=i.slice([t,0],[1,r]),l=a.slice([t,0],[1,r]),u=vt(n,l),c=this.readSync(this.fftImpl(u,e).dataId);for(let e=0;e<r;e++){const n=Xe(c,e);o.values[t*r+e]=n.real,s.values[t*r+e]=n.imag}}return vt(o.toTensor(),s.toTensor()).as2D(n,r)}fftImpl(t,e){const n=t.as1D(),r=n.size;if(this.isExponentOf2(r)){let o=this.fftRadix2(n,r,e).as2D(t.shape[0],t.shape[1]);return e&&(o=vt(he(o).div(de(r)),ce(o).div(de(r)))),o}{const n=this.readSync(t.dataId),o=ze(this.fourierTransformByMatmul(n,r,e));return vt(o.real,o.imag).as2D(t.shape[0],t.shape[1])}}isExponentOf2(t){return 0==(t&t-1)}fftRadix2(t,e,n){if(1===e)return t;const r=this.readSync(t.dataId),o=e/2,s=Ge(r);let i=vt(s.real,s.imag).as1D();const a=He(r);let l=vt(a.real,a.imag).as1D();i=this.fftRadix2(i,o,n),l=this.fftRadix2(l,o,n);const u=Ke(e,n),c=vt(u.real,u.imag).mul(l),h=i.add(c),d=i.sub(c),f=he(h).concat(he(d)),p=ce(h).concat(ce(d));return vt(f,p).as1D()}fourierTransformByMatmul(t,e,n){const r=new Float32Array(2*e);for(let o=0;o<e;o++){let s=0,i=0;for(let r=0;r<e;r++){const a=qe(o*r,e,n),l=Xe(t,r);s+=l.real*a.real-l.imag*a.imag,i+=l.real*a.imag+l.imag*a.real}n&&(s/=e,i/=e),je(r,s,i,o)}return r}depthToSpace(t,e,n){p("NHWC"===n,()=>"Only NHWC dataFormat supported on CPU for depthToSpace. Got "+n),p(e>1,()=>"blockSize should be > 1 for depthToSpace, but was: "+e);const r=t.shape[0],o=t.shape[1],s=t.shape[2],i=t.shape[3],a=o*e,l=s*e,u=i/(e*e),c=this.readSync(t.dataId),h=new Float32Array(r*a*l*u);let d=0;for(let t=0;t<r;++t)for(let n=0;n<a;++n){const r=Math.floor(n/e),a=n%e;for(let n=0;n<l;++n){const l=Math.floor(n/e),f=(a*e+n%e)*u;for(let e=0;e<u;++e){const n=e+f+i*(l+s*(r+o*t));h[d++]=c[n]}}}return Se(h,[r,a,l,u])}broadcastedBinaryOp(t,e,n,r){const o=oe(t.shape,e.shape),s=Jt(o,n),i=this.readSync(t.dataId),a=this.readSync(e.dataId),l=ne(t.shape,o),u=ne(e.shape,o),c=s.values;if(l.length+u.length===0)for(let t=0;t<c.length;++t)c[t]=r(i[t%i.length],a[t%a.length]);else{const n=this.bufferSync(t),o=this.bufferSync(e);for(let h=0;h<c.length;++h){const d=s.indexToLoc(h),f=d.slice(-t.rank);l.forEach(t=>f[t]=0);const p=n.locToIndex(f),g=d.slice(-e.rank);u.forEach(t=>g[t]=0);const x=o.locToIndex(g);c[h]=r(i[p],a[x])}}return s.toTensor()}broadcastedBinaryComplexOp(t,e,n){const r=oe(t.shape,e.shape),o=Jt(r,"float32"),s=Jt(r,"float32"),i=this.readSync(t.dataId),a=this.readSync(e.dataId),l=ne(t.shape,r),u=ne(e.shape,r),c=o.values,h=s.values;if(l.length+u.length===0)for(let t=0;t<c.length;t++){const e=t%i.length,r=t%a.length,o=n(i[2*e],i[2*e+1],a[2*r],a[2*r+1]);c[t]=o.real,h[t]=o.imag}else{const r=this.bufferSync(this.data.get(t.dataId).complexTensors.real),s=this.bufferSync(this.data.get(e.dataId).complexTensors.real);for(let d=0;d<c.length;d++){const f=o.indexToLoc(d),p=f.slice(-t.rank);l.forEach(t=>p[t]=0);const g=r.locToIndex(p),x=f.slice(-e.rank);u.forEach(t=>x[t]=0);const m=s.locToIndex(x),v=n(i[2*g],i[2*g+1],a[2*m],a[2*m+1]);c[d]=v.real,h[d]=v.imag}}return this.complex(o.toTensor(),s.toTensor())}split(t,e,n){return mn(t,e,n)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}cropAndResize(t,e,n,r,o,s){const[i,a,l,u]=t.shape,c=e.shape[0],[h,d]=r,f=Jt([c,h,d,u],"float32"),p=this.readSync(e.dataId),g=this.readSync(n.dataId),x=this.readSync(t.dataId),m=t.strides,v=f.strides;for(let t=0;t<c;t++){const e=4*t,n=p[e],r=p[e+1],c=p[e+2],y=p[e+3],C=g[t];if(C>=i)continue;const $=h>1?(c-n)*(a-1)/(h-1):0,w=d>1?(y-r)*(l-1)/(d-1):0;for(let e=0;e<h;e++){const i=h>1?n*(a-1)+e*$:.5*(n+c)*(a-1);if(i<0||i>a-1)for(let n=0;n<d;n++)for(let r=0;r<u;r++){const o=r+n*v[2]+e*v[1]+t*v[0];f.values[o]=s}else if("bilinear"===o){const n=Math.floor(i),o=Math.ceil(i),a=i-n;for(let i=0;i<d;i++){const c=d>1?r*(l-1)+i*w:.5*(r+y)*(l-1);if(c<0||c>l-1){for(let n=0;n<u;n++){const r=n+i*v[2]+e*v[1]+t*v[0];f.values[r]=s}continue}const h=Math.floor(c),p=Math.ceil(c),g=c-h;for(let r=0;r<u;r++){let s=r+h*m[2]+n*m[1]+C*m[0];const l=x[s];s=r+p*m[2]+n*m[1]+C*m[0];const u=x[s];s=r+h*m[2]+o*m[1]+C*m[0];const c=x[s];s=r+p*m[2]+o*m[1]+C*m[0];const d=l+(u-l)*g,y=c+(x[s]-c)*g;s=r+i*v[2]+e*v[1]+t*v[0],f.values[s]=d+(y-d)*a}}}else for(let n=0;n<d;++n){const o=d>1?r*(l-1)+n*w:.5*(r+y)*(l-1);if(o<0||o>l-1){for(let r=0;r<u;r++){const o=r+n*v[2]+e*v[1]+t*v[0];f.values[o]=s}continue}const a=Math.round(o),c=Math.round(i);for(let r=0;r<u;r++){const o=r+a*m[2]+c*m[1]+C*m[0],s=r+n*v[2]+e*v[1]+t*v[0];f.values[s]=x[o]}}}}return f.toTensor()}sparseToDense(t,e,n,r){const{sliceRank:o,numUpdates:s,sliceSize:i,strides:a,outputSize:l}=_t(0,t,n);return this.scatter(t,e,n,l,i,s,o,a,r,!1)}gatherND(t,e){const n=e.shape,r=n[n.length-1],[o,s,i,a]=Ft(t,e);if(0===s)return Ct([],o,t.dtype);const l=new Y([s,i],t.dtype),u=this.readSync(e.dataId),c=this.readSync(t.dataId);for(let e=0;e<s;e++){const n=[];let o=0;for(let t=0;t<r;t++){const s=u[e*r+t];o+=s*a[t],n.push(s)}if(o<0||o>=t.size/i)throw new Error(`Invalid indices: ${n} does not index into ${t.shape}`);for(let t=0;t<i;t++)l.values[e*i+t]=c[o*i+t]}return l.toTensor().reshape(o)}scatterND(t,e,n){const{sliceRank:r,numUpdates:o,sliceSize:s,strides:i,outputSize:a}=_t(0,t,n),l=de(0);return this.scatter(t,e,n,a,s,o,r,i,l,!0)}fill(t,e,n){const r=T(n=n||k(e),v(t));return r.fill(e),Lt().makeTensor(r,t,n,this)}onesLike(t){if("string"===t.dtype)throw new Error("onesLike is not supported for string tensors");return this.fill(t.shape,1,t.dtype)}zerosLike(t){const e=T(t.dtype,v(t.shape));return this.makeOutput(e,t.shape,t.dtype)}linspace(t,e,n){return Ze(t,e,n)}scatter(t,e,n,r,o,s,i,a,l,u){const c=[r/o,o],h=this.readSync(t.dataId),d=this.readSync(e.dataId);if(0===r)return Ct([],n,e.dtype);const f=new Y(c,e.dtype);f.values.fill(this.readSync(l.dataId)[0]);for(let t=0;t<s;t++){const s=[];let l=0;for(let e=0;e<i;e++){const n=h[t*i+e];s.push(n),l+=n*a[e]}if(l<0||l>=r/o)throw new Error(`Invalid indices: ${s} does not index into ${n}`);for(let n=0;n<o;n++)u?f.values[l*o+n]+=d[t*o+n]:f.values[l*o+n]=0===e.rank?d[0]:d[t*o+n]}return f.toTensor().reshape(n)}}function bn(t,e,n,r){const o=A(r,v(n));for(let n=0;n<o.length;++n){const r=n*e;let s=t[r];for(let n=0;n<e;++n){const e=t[r+n];e>s&&(s=e)}o[n]=s}return o}function Rn(t,e,n,r,o){const s=e.length,i=v(e),a=_(e),l=_(o),u=A(n,v(o));for(let e=0;e<i;++e){const n=z(e,s,a),o=new Array(n.length);for(let t=0;t<o.length;t++)o[t]=n[r[t]];u[V(o,s,l)]=t[e]}return u}var In=Object.freeze({__proto__:null,maxImpl:bn,transposeImpl:Rn});Wt("cpu",()=>new wn,1);const En={kernelName:"Max",backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{reductionIndices:o,keepDims:s}=e,i=n;let a=r.shape;const l=a.length,u=I(o,a);let c=u;const h=Tt(c,l);let d=i.data.get(r.dataId).values;if(null!=h){const t=new Array(l);for(let e=0;e<t.length;e++)t[e]=a[h[e]];d=Rn(d,a,r.dtype,h,t),c=Ot(c.length,l),a=t}pn(r,"max"),At("max",c,l);const[f,p]=It(a,c),g=bn(d,v(p),f,r.dtype),x=i.write(g,f,r.dtype);let m=f;if(s){m=Et(f,u)}return{dataId:x,shape:m,dtype:r.dtype}}},An={},Tn={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function Sn(t){t in An||(An[t]=function(t){if(1!==t&&2!==t)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const e=function(t){if("undefined"!=typeof OffscreenCanvas&&2===t)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(t);if(e.addEventListener("webglcontextlost",e=>{e.preventDefault(),delete An[t]},!1),1===t)return e.getContext("webgl",Tn)||e.getContext("experimental-webgl",Tn);return e.getContext("webgl2",Tn)}(t));const e=An[t];return e.isContextLost()?(delete An[t],Sn(t)):(e.disable(e.DEPTH_TEST),e.disable(e.STENCIL_TEST),e.disable(e.BLEND),e.disable(e.DITHER),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SAMPLE_COVERAGE),e.enable(e.SCISSOR_TEST),e.enable(e.CULL_FACE),e.cullFace(e.BACK),An[t])}var On,Nn,kn;function Fn(t,e){return[e,t]}function Dn(t){const e=v(t);return w(Math.ceil(e/4))}function _n(t,e){return[Math.max(1,Math.ceil(e/2)),Math.max(1,Math.ceil(t/2))]}function Bn(t,e){const r=t;let o,s,i,a,l,u,c,h,d,f;return 2===n().getNumber("WEBGL_VERSION")?(o=r.R32F,s=r.R16F,i=r.RGBA16F,a=r.RGBA32F,l=r.RED,c=4,h=1,d=r.HALF_FLOAT,f=r.FLOAT):(o=t.RGBA,s=t.RGBA,i=t.RGBA,a=r.RGBA,l=t.RGBA,c=4,h=4,d=null!=e?e.HALF_FLOAT_OES:null,f=t.FLOAT),u=t.RGBA,{internalFormatFloat:o,internalFormatHalfFloat:s,internalFormatPackedHalfFloat:i,internalFormatPackedFloat:a,textureFormatFloat:l,downloadTextureFormat:u,downloadUnpackNumChannels:c,defaultNumChannels:h,textureTypeHalfFloat:d,textureTypeFloat:f}}function Mn(t,e){const r=e();return n().getBool("DEBUG")&&function(t){const e=t.getError();if(e!==t.NO_ERROR)throw new Error("WebGL Error: "+function(t,e){switch(e){case t.NO_ERROR:return"NO_ERROR";case t.INVALID_ENUM:return"INVALID_ENUM";case t.INVALID_VALUE:return"INVALID_VALUE";case t.INVALID_OPERATION:return"INVALID_OPERATION";case t.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case t.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case t.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return"Unknown error code "+e}}(t,e))}(t),r}!function(t){t[t.DENSE=0]="DENSE",t[t.SHARED_BATCH=1]="SHARED_BATCH"}(On||(On={})),function(t){t[t.RENDER=0]="RENDER",t[t.UPLOAD=1]="UPLOAD",t[t.PIXELS=2]="PIXELS",t[t.DOWNLOAD=3]="DOWNLOAD"}(Nn||(Nn={})),function(t){t[t.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",t[t.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",t[t.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",t[t.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",t[t.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(kn||(kn={}));function Pn(t){return!!(n().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===t||5.96e-8<Math.abs(t)&&Math.abs(t)<65504)}function Ln(t,e){return Kn(t,()=>t.getExtension(e),'Extension "'+e+'" not supported on this browser.')}function Wn(t,e){const n=Kn(t,()=>t.createShader(t.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(Mn(t,()=>t.shaderSource(n,e)),Mn(t,()=>t.compileShader(n)),!1===t.getShaderParameter(n,t.COMPILE_STATUS))throw function(t,e){const n=Un.exec(e);if(null==n)return console.log("Couldn't parse line number in error: "+e),void console.log(t);const r=+n[1],o=t.split("\n"),s=o.length.toString().length+2,i=o.map((t,e)=>b((e+1).toString(),s)+t);let a=0;for(let t=0;t<i.length;t++)a=Math.max(i[t].length,a);const l=i.slice(0,r-1),u=i.slice(r-1,r),c=i.slice(r);console.log(l.join("\n")),console.log(e.split("\n")[0]),console.log("%c "+b(u[0],a),"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}(e,t.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}const Un=/ERROR: [0-9]+:([0-9]+):/g;function Vn(t,e){if(Mn(t,()=>t.validateProgram(e)),!1===t.getProgramParameter(e,t.VALIDATE_STATUS))throw console.log(t.getProgramInfoLog(e)),new Error("Shader program validation failed.")}function zn(t,e,n,r,o,s,i){const a=t.getAttribLocation(e,n);return-1!==a&&(Mn(t,()=>t.bindBuffer(t.ARRAY_BUFFER,r)),Mn(t,()=>t.vertexAttribPointer(a,o,t.FLOAT,!1,s,i)),Mn(t,()=>t.enableVertexAttribArray(a)),!0)}function Gn(t,e,n){!function(t,e){const n=t.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=e+t.TEXTURE0;if(r<t.TEXTURE0||r>n){throw new Error(`textureUnit must be in ${`[gl.TEXTURE0, gl.TEXTURE${n}]`}.`)}}(t,n),Mn(t,()=>t.activeTexture(t.TEXTURE0+n)),Mn(t,()=>t.bindTexture(t.TEXTURE_2D,e))}function Hn(t,e,n){Mn(t,()=>t.bindFramebuffer(t.FRAMEBUFFER,n)),Mn(t,()=>t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,e,0))}function Xn(t,e){Mn(t,()=>t.bindFramebuffer(t.FRAMEBUFFER,e)),Mn(t,()=>t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,null,0))}function jn(t){const e=t.checkFramebufferStatus(t.FRAMEBUFFER);if(e!==t.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(t,e){switch(e){case t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case t.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return"unknown error "+e}}(t,e))}function Kn(t,e,n){const r=Mn(t,()=>e());if(null==r)throw new Error(n);return r}function qn(t,e=2){return v(t.slice(0,t.length-e))}function Yn(t){if(0===t.length)throw Error("Cannot get rows and columns of an empty shape array.");return[t.length>1?t[t.length-2]:1,t[t.length-1]]}function Qn(t){let e=[1,1,1];return 0===t.length||1===t.length&&1===t[0]||(e=[qn(t),...Yn(t)]),e}function Zn(t){return t%2==0}function Jn(t,e){if(y(t=t.slice(-2),e=e.slice(-2)))return!0;if(!t.length||!e.length)return!0;if(0===t[0]||0===t[1]||0===e[0]||0===e[1])return!0;if(t.length!==e.length){const n=t.slice(-1)[0],r=e.slice(-1)[0];if(n===r)return!0;if(Zn(n)&&Zn(r)&&(1===t[0]||1===e[0]))return!0}return t[1]===e[1]&&Zn(t[0])&&Zn(e[0])}let tr,er;function nr(t,e){return null!=t.getExtension(e)}function rr(t){try{if(null!=Sn(t))return!0}catch(t){return!1}return!1}function or(t){if(0===t)return!1;const e=Sn(t);if(1!==t){if(nr(e,"EXT_color_buffer_float"))return sr(e);const t="EXT_color_buffer_half_float";if(nr(e,t)){const n=e.getExtension(t);return function(t,e){const n=Bn(t,e),r=t.createTexture();t.bindTexture(t.TEXTURE_2D,r);t.texImage2D(t.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const o=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,o),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,r,0);const s=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(r),t.deleteFramebuffer(o),s}(e,n)}return!1}if(!nr(e,"OES_texture_float"))return!1;if(!nr(e,"WEBGL_color_buffer_float"))return!1;return sr(e)}function sr(t){const e=Bn(t),n=t.createTexture();t.bindTexture(t.TEXTURE_2D,n);t.texImage2D(t.TEXTURE_2D,0,e.internalFormatFloat,1,1,0,e.textureFormatFloat,e.textureTypeFloat,null);const r=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,r),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,n,0);const o=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(n),t.deleteFramebuffer(r),o}const ir=n();ir.registerFlag("HAS_WEBGL",()=>ir.getNumber("WEBGL_VERSION")>0),ir.registerFlag("WEBGL_VERSION",()=>rr(2)?2:rr(1)?1:0),ir.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1),ir.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>2===ir.get("WEBGL_VERSION")),ir.registerFlag("WEBGL_CPU_FORWARD",()=>!0),ir.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1),ir.registerFlag("WEBGL_PACK",()=>ir.getBool("HAS_WEBGL")),ir.registerFlag("WEBGL_PACK_NORMALIZATION",()=>ir.getBool("WEBGL_PACK")),ir.registerFlag("WEBGL_PACK_CLIP",()=>ir.getBool("WEBGL_PACK")),ir.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>!1),ir.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>ir.getBool("WEBGL_PACK")),ir.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>ir.getBool("WEBGL_PACK")),ir.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>ir.getBool("WEBGL_PACK")),ir.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>ir.getBool("WEBGL_PACK")),ir.registerFlag("WEBGL_PACK_REDUCE",()=>ir.getBool("WEBGL_PACK")),ir.registerFlag("WEBGL_LAZILY_UNPACK",()=>ir.getBool("WEBGL_PACK")),ir.registerFlag("WEBGL_CONV_IM2COL",()=>ir.getBool("WEBGL_PACK")),ir.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>function(t){if(null==tr){const e=Sn(t);tr=e.getParameter(e.MAX_TEXTURE_SIZE)}return tr}(ir.getNumber("WEBGL_VERSION"))),ir.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>function(t){if(null==er){const e=Sn(t);er=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,er)}(ir.getNumber("WEBGL_VERSION"))),ir.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{const t=ir.getNumber("WEBGL_VERSION");return 0===t?0:function(t){if(0===t)return 0;let e;const n=Sn(t);return e=nr(n,"EXT_disjoint_timer_query_webgl2")&&2===t?2:nr(n,"EXT_disjoint_timer_query")?1:0,e}(t)}),ir.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>ir.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!tn()),ir.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>function(t){if(0===t)return!1;const e=Sn(t);if(1===t){if(!nr(e,"OES_texture_float"))return!1}else if(!nr(e,"EXT_color_buffer_float"))return!1;return sr(e)}(ir.getNumber("WEBGL_VERSION"))),ir.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>!ir.getBool("WEBGL_FORCE_F16_TEXTURES")&&ir.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")),ir.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>or(ir.getNumber("WEBGL_VERSION"))),ir.registerFlag("WEBGL_FENCE_API_ENABLED",()=>{return 2===(t=ir.getNumber("WEBGL_VERSION"))&&null!=Sn(t).fenceSync;var t}),ir.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>ir.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0),ir.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,t=>{if(t<0&&-1!==t)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${t}.`)});class ar{constructor(t,e){this.outputShape=[],this.outputShape=t,this.variableNames=e.map((t,e)=>"T"+e);const n=[];this.variableNames.forEach(t=>{n.push(`float v${t} = get${t}AtOutCoords();`)});const r=this.variableNames.map(t=>"v"+t).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `}}class lr{constructor(t,e){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.variableNames=e.map((t,e)=>"T"+e);const n=[];this.variableNames.forEach(t=>{n.push(`vec4 v${t} = get${t}AtOutCoords();`)});const r=this.variableNames.map(t=>"v"+t).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `}}class ur{constructor(t,e,n){this.variableNames=["A"];const r=t.windowSize,o=t.batchSize,s=t.inSize,i=Math.ceil(s/r);n||this.variableNames.push("bestIndicesA"),this.outputShape=[o,i];const a="max"===e?">":"<",l=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${l};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${a} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}function cr(t,e){return["x","y","z","w","u","v"].slice(0,e).map(e=>`${t}.${e}`)}function hr(t,e){return 1===e?[t]:cr(t,e)}function dr(){let t,e,r,o,s,i,a,l,u,c;return 2===n().getNumber("WEBGL_VERSION")?(t="#version 300 es",e="in",r="out",o="in",s="texture",i="outputColor",a="out vec4 outputColor;",l="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",u="",c="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(t="",e="attribute",r="varying",o="varying",s="texture2D",i="gl_FragColor",a="",l="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",u="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",c="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:t,attribute:e,varyingVs:r,varyingFs:o,texture2D:s,output:i,defineOutput:a,defineSpecialNaN:l,defineSpecialInf:u,defineRound:c}}function fr(t,e,n="index"){const r=_(e);return r.map((e,o)=>`${`int ${t[o]} = ${n} / ${e}`}; ${o===r.length-1?`int ${t[o+1]} = ${n} - ${t[o]} * ${e}`:`index -= ${t[o]} * ${e}`};`).join("")}function pr(t){const e=_(t).map(t=>t.toString());return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${e[0]} + coords.y * ${e[1]} + coords.z;\n  }\n`}const gr="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:xr}=Je;function mr(t,e,n,r){const o=[];t.forEach(t=>{const e=v(t.shapeInfo.logicalShape);t.shapeInfo.isUniform?o.push(`uniform float ${t.name}${e>1?`[${e}]`:""};`):(o.push(`uniform sampler2D ${t.name};`),o.push(`uniform int offset${t.name};`))});const s=o.join("\n"),i=t.map(t=>function(t,e,n=!1){let r="";r+=n?yr(t):vr(t);const o=t.shapeInfo.logicalShape,s=e.logicalShape;o.length<=s.length&&(r+=n?function(t,e){const n=t.name,r=n.charAt(0).toUpperCase()+n.slice(1),o="get"+r+"AtOutCoords",s=t.shapeInfo.logicalShape.length,i=e.logicalShape.length,a=xr(t.shapeInfo.logicalShape,e.logicalShape),l=Ar(i),u=i-s;let c;const h=["x","y","z","w","u","v"];c=0===s?"":i<2&&a.length>=1?"coords = 0;":a.map(t=>`coords.${h[t+u]} = 0;`).join("\n");let d="";d=i<2&&s>0?"coords":t.shapeInfo.logicalShape.map((t,e)=>"coords."+h[e+u]).join(", ");let f="return outputValue;";const p=1===v(t.shapeInfo.logicalShape),g=1===v(e.logicalShape);if(1!==s||p||g){if(p&&!g)f=1===i?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(a.length){const t=s-2,e=s-1;a.indexOf(t)>-1&&a.indexOf(e)>-1?f="return vec4(outputValue.x);":a.indexOf(t)>-1?f="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":a.indexOf(e)>-1&&(f="return vec4(outputValue.xx, outputValue.zz);")}}else f="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${o}() {\n      ${l} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${r}(${d});\n      ${f}\n    }\n  `}(t,e):function(t,e){const n=t.name,r=n.charAt(0).toUpperCase()+n.slice(1),o="get"+r+"AtOutCoords",s=e.texShape,i=t.shapeInfo.texShape,a=t.shapeInfo.logicalShape.length,l=e.logicalShape.length;if(!t.shapeInfo.isUniform&&a===l&&null==t.shapeInfo.flatOffset&&y(i,s))return`\n      float ${o}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const u=Ar(l),c=xr(t.shapeInfo.logicalShape,e.logicalShape),h=l-a;let d;const f=["x","y","z","w","u","v"];d=0===a?"":l<2&&c.length>=1?"coords = 0;":c.map(t=>`coords.${f[t+h]} = 0;`).join("\n");let p="";p=l<2&&a>0?"coords":t.shapeInfo.logicalShape.map((t,e)=>"coords."+f[e+h]).join(", ");return`\n    float ${o}() {\n      ${u} coords = getOutputCoords();\n      ${d}\n      return get${r}(${p});\n    }\n  `}(t,e));return r}(t,e,r)).join("\n"),a=e.texShape,l=dr(),u=function(t){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${t.texture2D}(textureSampler, uv).r;\n    }\n  `}(l);let c,h,d=function(t){return`${t.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${t.varyingFs} vec2 resultUV;\n    ${t.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${t.defineSpecialNaN}\n    ${t.defineSpecialInf}\n    ${t.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${Cr}\n    ${$r}\n    ${wr}\n  `}(l);e.isPacked?(c=function(t,e){switch(t.length){case 0:return Rr();case 1:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(1===n[0])return`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${n[1]}.0);\n      }\n    `;if(1===n[1])return`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${n[0]}.0);\n      }\n    `;return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return 2 * (resTexRC.x * ${n[1]} + resTexRC.y);\n    }\n  `}(0,e);case 2:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(y(t,e))return`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${n[0]}, ${n[1]}));\n      }\n    `;const r=Math.ceil(t[1]/2);return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(t,e);case 3:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],r=Math.ceil(t[2]/2),o=r*Math.ceil(t[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      int b = index / ${o};\n      index -= b * ${o};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(t,e);default:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],r=Math.ceil(t[t.length-1]/2),o=r*Math.ceil(t[t.length-2]/2);let s=o,i="",a="b, r, c";for(let e=2;e<t.length-1;e++)s*=t[t.length-e-1],i=`\n      int b${e} = index / ${s};\n      index -= b${e} * ${s};\n    `+i,a=`b${e}, `+a;return`\n    ivec${t.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${o};\n      index -= b * ${o};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec${t.length}(${a});\n    }\n  `}(t,e)}}(e.logicalShape,a),h=function(t){return`\n    void setOutput(vec4 val) {\n      ${t.output} = val;\n    }\n  `}(l)):(c=function(t,e){switch(t.length){case 0:return Rr();case 1:return function(t,e){if(1===e[0])return`\n      int getOutputCoords() {\n        return int(resultUV.x * ${e[1]}.0);\n      }\n    `;if(1===e[1])return`\n      int getOutputCoords() {\n        return int(resultUV.y * ${e[0]}.0);\n      }\n    `;return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      return resTexRC.x * ${e[1]} + resTexRC.y;\n    }\n  `}(0,e);case 2:return function(t,e){if(y(t,e))return`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${e[0]}, ${e[1]}));\n      }\n    `;if(1===t[1])return`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${e[0]}, ${e[1]}));\n        int index = resTexRC.x * ${e[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;if(1===t[0])return`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${e[0]}, ${e[1]}));\n        int index = resTexRC.x * ${e[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      int r = index / ${t[1]};\n      int c = index - r * ${t[1]};\n      return ivec2(r, c);\n    }\n  `}(t,e);case 3:return function(t,e){const n=fr(["r","c","d"],t);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      ${n}\n      return ivec3(r, c, d);\n    }\n  `}(t,e);case 4:return function(t,e){const n=fr(["r","c","d","d2"],t);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      ${n}\n      return ivec4(r, c, d, d2);\n    }\n  `}(t,e);case 5:return function(t,e){const n=fr(["r","c","d","d2","d3"],t);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${e[0]},\n                             ${e[1]}));\n\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(t,e);case 6:return function(t,e){const n=fr(["r","c","d","d2","d3","d4"],t);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(t,e);default:throw new Error(t.length+"-D output sampling is not yet supported")}}(e.logicalShape,a),h=function(t){return`\n    void setOutput(float val) {\n      ${t.output} = vec4(val, 0, 0, 0);\n    }\n  `}(l)),r&&(d+=br);return[d,u,h,s,c,i,n].join("\n")}function vr(t){const e=t.shapeInfo.logicalShape;switch(e.length){case 0:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return`float ${n}() {return ${e};}`;const[r,o]=t.shapeInfo.texShape;if(1===r&&1===o)return`\n      float ${n}() {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const[s,i]=t.shapeInfo.texShape,a=Ir(e);return`\n    float ${n}() {\n      vec2 uv = uvFromFlat(${s}, ${i}, ${a});\n      return sampleTexture(${e}, uv);\n    }\n  `}(t);case 1:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return`\n      float ${n}(int index) {\n        ${Er(t)}\n      }\n    `;const r=t.shapeInfo.texShape,o=r[0],s=r[1];if(1===s&&1===o)return`\n      float ${n}(int index) {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const i=Ir(e);if(1===s)return`\n      float ${n}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${o}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;if(1===o)return`\n      float ${n}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${s}.0, 0.5);\n        return sampleTexture(${e}, uv);\n      }\n    `;return`\n    float ${n}(int index) {\n      vec2 uv = uvFromFlat(${o}, ${s}, index + ${i});\n      return sampleTexture(${e}, uv);\n    }\n  `}(t);case 2:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),o=t.shapeInfo.texShape;if(null!=o&&y(e,o)){const t=o[0],e=o[1];return`\n    float ${r}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${e}.0, ${t}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `}const{newShape:s,keptDims:i}=E(e),a=s;if(a.length<e.length){const e=Tr(t,a),n=["row","col"];return`\n      ${vr(e)}\n      float ${r}(int row, int col) {\n        return ${r}(${Sr(n,i)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${e[1]}, 1)));\n        ${Er(t)}\n      }\n    `;const l=o[0],u=o[1],c=Ir(n);if(1===u)return`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${l}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;if(1===l)return`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${u}.0, 0.5);\n      return sampleTexture(${n}, uv);\n    }\n  `;return`\n  float ${r}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${e[1]} + col + ${c};\n    vec2 uv = uvFromFlat(${l}, ${u}, index);\n    return sampleTexture(${n}, uv);\n  }\n`}(t);case 3:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),o=e[1]*e[2],s=e[2],{newShape:i,keptDims:a}=E(e),l=i;if(l.length<e.length){const e=Tr(t,l),n=["row","col","depth"];return`\n        ${vr(e)}\n        float ${r}(int row, int col, int depth) {\n          return ${r}(${Sr(n,a)});\n        }\n      `}if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${o}, ${s}, 1)));\n        ${Er(t)}\n      }\n    `;const u=t.shapeInfo.texShape,c=u[0],h=u[1],d=t.shapeInfo.flatOffset;if(h===o&&null==d)return`\n        float ${r}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${s}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${h}.0, ${c}.0);\n          return sampleTexture(${n}, uv);\n        }\n      `;if(h===s&&null==d)return`\n    float ${r}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${e[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}.0, ${c}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;const f=Ir(n);return`\n      float ${r}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${o} + col * ${s} + depth + ${f};\n        vec2 uv = uvFromFlat(${c}, ${h}, index);\n        return sampleTexture(${n}, uv);\n      }\n  `}(t);case 4:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),o=e[3],s=e[2]*o,i=e[1]*s,{newShape:a,keptDims:l}=E(e);if(a.length<e.length){const e=Tr(t,a),n=["row","col","depth","depth2"];return`\n      ${vr(e)}\n      float ${r}(int row, int col, int depth, int depth2) {\n        return ${r}(${Sr(n,l)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${i}, ${s}, ${o}, 1)));\n        ${Er(t)}\n      }\n    `;const u=t.shapeInfo.flatOffset,c=t.shapeInfo.texShape,h=c[0],d=c[1];if(d===i&&null==u)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${s}, ${o}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(d===o&&null==u)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${e[1]*e[2]}, ${e[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const f=Ir(n);return`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${s} +\n          depth * ${o} + depth2;\n      vec2 uv = uvFromFlat(${h}, ${d}, index + ${f});\n      return sampleTexture(${n}, uv);\n    }\n  `}(t);case 5:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),o=e[4],s=e[3]*o,i=e[2]*s,a=e[1]*i,{newShape:l,keptDims:u}=E(e);if(l.length<e.length){const e=Tr(t,l),n=["row","col","depth","depth2","depth3"];return`\n      ${vr(e)}\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        return ${r}(${Sr(n,u)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${a}, ${i}, ${s}, ${o})) +\n          depth3;\n        ${Er(t)}\n      }\n    `;const c=t.shapeInfo.flatOffset,h=t.shapeInfo.texShape,d=h[0],f=h[1];if(f===a&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${i}, ${s}, ${o}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===o&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${e[1]*e[2]*e[3]},\n               ${e[2]*e[3]}, ${e[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const p=Ir(n);return`\n    float ${r}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${a} + col * ${i} + depth * ${s} +\n          depth2 * ${o} + depth3 + ${p};\n      vec2 uv = uvFromFlat(${d}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(t);case 6:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:o,keptDims:s}=E(e);if(o.length<e.length){const e=Tr(t,o),n=["row","col","depth","depth2","depth3","depth4"];return`\n      ${vr(e)}\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${r}(${Sr(n,s)});\n      }\n    `}const i=e[5],a=e[4]*i,l=e[3]*a,u=e[2]*l,c=e[1]*u;if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${u}, ${l}, ${a})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${i}, 1)));\n        ${Er(t)}\n      }\n    `;const h=t.shapeInfo.flatOffset,d=t.shapeInfo.texShape,f=d[0],p=d[1];if(p===c&&null==h)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${u}, ${l}, ${a}, ${i})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${f}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(p===i&&null==h)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${e[1]*e[2]*e[3]*e[4]},\n               ${e[2]*e[3]*e[4]},\n               ${e[3]*e[4]},\n               ${e[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${f}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const g=Ir(n);return`\n    float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${u} + depth * ${l} +\n          depth2 * ${a} + depth3 * ${i} + depth4 + ${g};\n      vec2 uv = uvFromFlat(${f}, ${p}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(t);default:throw new Error(e.length+"-D input sampling is not yet supported")}}function yr(t){switch(t.shapeInfo.logicalShape.length){case 0:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1),r=dr();return`\n    vec4 ${n}() {\n      return ${r.texture2D}(${e}, halfCR);\n    }\n  `}(t);case 1:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1),r=t.shapeInfo.texShape,o=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],s=dr();return`\n    vec4 ${n}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${o[0]}, ${o[1]}, index);\n      return ${s.texture2D}(${e}, uv);\n    }\n  `}(t);case 2:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),o=t.shapeInfo.texShape,s=o[0],i=o[1],a=dr();if(null!=o&&y(e,o))return`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${s}.0);\n\n        return ${a.texture2D}(${n}, uv);\n      }\n    `;const l=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)],u=Math.ceil(e[1]/2);return`\n    vec4 ${r}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${u}, ${l[0]}, ${l[1]}, row, col);\n      return ${a.texture2D}(${n}, uv);\n    }\n  `}(t);case 3:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),o=t.shapeInfo.texShape,s=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)];if(1===e[0]){const n=e.slice(1),o=[1,2],s=Tr(t,n),i=["b","row","col"];return`\n        ${yr(s)}\n        vec4 ${r}(int b, int row, int col) {\n          return ${r}(${Sr(i,o)});\n        }\n      `}const i=s[0],a=s[1],l=Math.ceil(e[2]/2),u=l*Math.ceil(e[1]/2),c=dr();return`\n    vec4 ${r}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${i}, ${a}, ${u}, ${l}, b, row, col);\n      return ${c.texture2D}(${n}, uv);\n    }\n  `}(t);default:return function(t){const e=t.shapeInfo.logicalShape,n=e.length,r=t.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),s=t.shapeInfo.texShape,i=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)],a=i[0],l=i[1],u=Math.ceil(e[n-1]/2);let c=u*Math.ceil(e[n-2]/2),h="int b, int row, int col",d=`b * ${c} + (row / 2) * ${u} + (col / 2)`;for(let t=2;t<n-1;t++)h=`int b${t}, `+h,c*=e[n-t-1],d=`b${t} * ${c} + `+d;const f=dr();return`\n    vec4 ${o}(${h}) {\n      int index = ${d};\n      int texR = index / ${l};\n      int texC = index - texR * ${l};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${l}, ${a});\n      return ${f.texture2D}(${r}, uv);\n    }\n  `}(t)}}const Cr="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",$r="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",wr="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",br="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function Rr(){return"\n    int getOutputCoords() {\n      return 0;\n    }\n  "}function Ir(t){return"offset"+t}function Er(t){const e=t.name,n=v(t.shapeInfo.logicalShape);return n<2?`return ${e};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${e}[i];\n      }\n    }\n  `}function Ar(t){if(t<=1)return"int";if(2===t)return"ivec2";if(3===t)return"ivec3";if(4===t)return"ivec4";if(5===t)return"ivec5";if(6===t)return"ivec6";throw Error(`GPU for rank ${t} is not yet supported`)}function Tr(t,e){const n=JSON.parse(JSON.stringify(t));return n.shapeInfo.logicalShape=e,n}function Sr(t,e){return e.map(e=>t[e]).join(", ")}class Or{constructor(t,e,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,p(t.length>2,()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`);const o=t[t.length-1],s=Math.ceil(o/e);this.outputShape=t.slice(0,-1),s>1&&this.outputShape.push(s),r||this.variableNames.push("bestIndicesA");const i=this.outputShape,a=i.length,l=Ar(a),u=hr("coords",a);let c,h;if(1===s){h=a+1;const t=Ar(h);c=`\n        ${t} sourceLocR = ${t}(${u.join()}, 0);\n        ++${u[a-1]};\n        ${t} sourceLocG = ${t}(${u.join()}, 0);\n        ++${u[a-2]};\n        ${t} sourceLocA = ${t}(${u.join()}, 0);\n        --${u[a-1]};\n        ${t} sourceLocB = ${t}(${u.join()}, 0);\n        --${u[a-2]};`}else h=a,c=`\n        ${l} sourceLocR = coords;\n        ++${u[a-1]};\n        ${l} sourceLocG = coords;\n        ++${u[a-2]};\n        ${l} sourceLocA = coords;\n        --${u[a-1]};\n        ${l} sourceLocB = coords;\n        --${u[a-2]};`;const d=["x","y","z","w","u","v"].slice(0,h),f="."+d[h-1],g=d.map(t=>"int "+t),x=hr("sourceLocR",h-1).concat("inIdx.r"),m=hr("sourceLocG",h-1).concat("inIdx.g"),v=hr("sourceLocB",h-1).concat("inIdx.b"),y=hr("sourceLocA",h-1).concat("inIdx.a"),C="max"===n?"greaterThan":"lessThan",$=r?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${x.join()}),\n                             getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${v.join()}),\n                             getBestIndicesAChannel(${y.join()})));`,w=`vec4(\n            getAChannel(${x.join()}),\n            hasNextCol ? getAChannel(${m.join()}) : 0.,\n            hasNextRow ? getAChannel(${v.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${y.join()}) : 0.)`,b=r?"":`\n      float getBestIndicesAChannel(${g.join()}) {\n        return getChannel(getBestIndicesA(${d.join()}),\n                                          vec2(${d.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${g.join()}) {\n        return getChannel(getA(${d.join()}),\n                               vec2(${d.slice(-2).join()}));\n      }\n      ${b}\n      void main() {\n        ${l} coords = getOutputCoords();\n        bool hasNextCol = ${u[a-1]} < ${i[a-1]-1};\n        bool hasNextRow = ${u[a-2]} < ${i[a-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${f}, sourceLocG${f},\n          sourceLocB${f}, sourceLocA${f}) * ${e};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${w};\n\n        for (int i = 0; i < ${e}; i++) {\n          inIdx = srcIdx;\n          ${$}\n          vec4 candidate = ${w};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${C}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}class Nr{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,o=t.strideWidth,s=t.dilationHeight,i=t.dilationWidth,a=t.effectiveFilterHeight,l=t.effectiveFilterWidth,u=a-1-t.padInfo.top,c=l-1-t.padInfo.left,h=1/(e*n);this.userCode=`\n      const ivec2 pads = ivec2(${u}, ${c});\n      const float avgMultiplier = float(${h});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${a};\n            wR += ${s}) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${l};\n            wC+= ${i}) {\n            float dyC = float(dyCCorner + wC) / ${o}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class kr{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const e=t.filterDepth,n=t.filterHeight,r=t.filterWidth,o=t.strideDepth,s=t.strideHeight,i=t.strideWidth,a=t.dilationDepth,l=t.dilationHeight,u=t.dilationWidth,c=t.effectiveFilterDepth,h=t.effectiveFilterHeight,d=t.effectiveFilterWidth,f=c-1-t.padInfo.front,p=h-1-t.padInfo.top,g=d-1-t.padInfo.left,x=1/(e*n*r);this.userCode=`\n      const ivec3 pads = ivec3(${f}, ${p}, ${g});\n      const float avgMultiplier = float(${x});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${a}) {\n          float dyD = float(dyDCorner + wD) / ${o}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${l}) {\n            float dyR = float(dyRCorner + wR) / ${s}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${d};\n                wC += ${u}) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Fr{constructor(t,e,n,r,o,s){this.outputShape=[],this.variableNames=["x","mean","variance"],oe(t,e),oe(t,n);let i="0.0";null!=r&&(oe(t,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let a="1.0";null!=o&&(oe(t,o),this.variableNames.push("scale"),a="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${a};\n        float inv = scale * inversesqrt(variance + float(${s}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class Dr{constructor(t,e,n,r,o,s){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],oe(t,e),oe(t,n);let i="vec4(0.0)";null!=r&&(oe(t,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let a="vec4(1.0)";null!=o&&(oe(t,o),this.variableNames.push("scale"),a="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${a};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${s}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const _r="return areal * breal - aimag * bimag;",Br="return areal * bimag + aimag * breal;";class Mr{constructor(t,e,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=oe(e,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${t}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const Pr="return a + b;",Lr="return a - b;",Wr="return a * b;",Ur="return (a < 0.) ? b * a : a;";class Vr{constructor(t,e,n){this.variableNames=["A","B"],this.outputShape=oe(e,n),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${t}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}const zr="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";class Gr{constructor(t,e,n,r=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=oe(e,n);const o=this.outputShape.length;let s="";if(r)if(0===o||1===v(this.outputShape))s="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else{if(s=`\n          ${Ar(o)} coords = getOutputCoords();\n        `,1===o)s+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const t=hr("coords",o);s+=`\n            bool nextRowOutOfBounds =\n              (${t[o-2]} + 1) >= ${this.outputShape[o-2]};\n            bool nextColOutOfBounds =\n              (${t[o-1]} + 1) >= ${this.outputShape[o-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${t}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${s}\n\n        setOutput(result);\n      }\n    `}}class Hr{constructor(t){this.variableNames=["A"],this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}getCustomSetupFunc(t,e){return(n,r)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(r,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(r,"maxVal")),n.gl.uniform1f(this.minLoc,t),n.gl.uniform1f(this.maxLoc,e)}}}class Xr{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}getCustomSetupFunc(t,e){return(n,r)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(r,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(r,"maxVal")),n.gl.uniform1f(this.minLoc,t),n.gl.uniform1f(this.maxLoc,e)}}}class jr{constructor(t){this.variableNames=["real","imag"],this.outputShape=t,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}class Kr{constructor(t){this.outputShape=[],this.outputShape=Qt(t,1),this.variableNames=t.map((t,e)=>"T"+e);const e=new Array(t.length-1);e[0]=t[0][1];for(let n=1;n<e.length;n++)e[n]=e[n-1]+t[n][1];const n=[`if (yC < ${e[0]}) setOutput(getT0(yR, yC));`];for(let t=1;t<e.length;t++){const r=e[t-1];n.push(`else if (yC < ${e[t]}) setOutput(getT${t}(yR, yC-${r}));`)}const r=e.length,o=e[e.length-1];n.push(`else setOutput(getT${r}(yR, yC-${o}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class qr{constructor(t,e){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=Qt(t,e);const n=this.outputShape,r=n.length,o=Ar(r),s=hr("coords",r),i=["x","y","z","w","u","v"].slice(0,r);this.variableNames=t.map((t,e)=>"T"+e);const a=new Array(t.length-1);a[0]=t[0][e];for(let n=1;n<a.length;n++)a[n]=a[n-1]+t[n][e];const l=i[e],u=i.slice(-2),c=i.join();let h=`if (${l} < ${a[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${u.join()}));\n        }`;for(let t=1;t<a.length;t++){const e=a[t-1];h+=`\n        if (${l} < ${a[t]}  && ${l} >= ${a[t-1]}) {\n          return getChannel(\n            getT${t}(${Yr(i,l,e)}),\n            vec2(${Yr(u,l,e)}));\n        }`}const d=a.length,f=a[a.length-1];h+=`\n        return getChannel(\n          getT${d}(${Yr(i,l,f)}),\n          vec2(${Yr(u,l,f)}));`,this.userCode=`\n      float getValue(${i.map(t=>"int "+t)}) {\n        ${h}\n      }\n\n      void main() {\n        ${o} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${s}), 0., 0., 0.);\n\n        ${s[r-1]} = ${s[r-1]} + 1;\n        if (${s[r-1]} < ${n[r-1]}) {\n          result.g = getValue(${s});\n        }\n\n        ${s[r-2]} = ${s[r-2]} + 1;\n        if (${s[r-2]} < ${n[r-2]}) {\n          result.a = getValue(${s});\n        }\n\n        ${s[r-1]} = ${s[r-1]} - 1;\n        if (${s[r-2]} < ${n[r-2]} &&\n            ${s[r-1]} < ${n[r-1]}) {\n          result.b = getValue(${s});\n        }\n        setOutput(result);\n      }\n    `}}function Yr(t,e,n){const r=t.indexOf(e);return t.map((t,e)=>e===r?`${t} - ${n}`:t).join()}class Qr{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideHeight,n=t.strideWidth,r=t.padInfo.top,o=t.padInfo.left,s="channelsLast"===t.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${e} - ${r};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${o};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              if (${s}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Zr{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,o=t.strideWidth,s="channelsLast"===t.dataFormat,i=e-1-t.padInfo.top,a=n-1-t.padInfo.left,l=s?1:2,u=s?2:3,c=s?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${a});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${l}], coords[${u}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${o}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n\n              if (${s}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Jr{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideDepth,n=t.strideHeight,r=t.strideWidth,o=t.padInfo.front,s=t.padInfo.top,i=t.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yF = 0; yF < ${t.outDepth}; yF++) {\n            int xF = wF + yF * ${e} - ${o};\n\n            if (xF < 0 || xF >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${t.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${s};\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${t.outWidth}; yC++) {\n                int xC = wC + yC * ${r} - ${i};\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class to{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterDepth,n=t.filterHeight,r=t.filterWidth,o=t.strideDepth,s=t.strideHeight,i=t.strideWidth,a=e-1-t.padInfo.front,l=n-1-t.padInfo.top,u=r-1-t.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${a}, ${l}, ${u});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${e}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${o}.0;\n\n          if (dyF < 0.0 || dyF >= ${t.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${e} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${s}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class eo{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideHeight,n=t.strideWidth,r=t.padInfo.top,o=t.padInfo.left,s=t.outChannels/t.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${s} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${e} - ${r};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${o};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class no{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,o=t.strideWidth,s=e-1-t.padInfo.top,i=n-1-t.padInfo.left,a=t.outChannels/t.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${s}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${o}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${a}; dm++) {\n              int d2 = d1 * ${a} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class ro{constructor(t,e=!1,n=null,r=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;const o=t.padInfo.top,s=t.padInfo.left,i=t.strideHeight,a=t.strideWidth,l=t.dilationHeight,u=t.dilationWidth,c=t.filterHeight,h=t.filterWidth,d=4*Math.floor(t.inChannels/4),f=t.inChannels%4,p="channelsLast"===t.dataFormat,g=p?1:2,x=p?2:3,m=p?3:1;let v="",y="";n&&(v=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,y="result = activation(result);");const C=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${v}\n\n      const ivec2 strides = ivec2(${i}, ${a});\n      const ivec2 pads = ivec2(${o}, ${s});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${m}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${x}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${c}; wR++) {\n          int xR = xRCorner + wR * ${l};\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${h}; wC++) {\n            int xC = xCCorner + wC * ${u};\n\n            if (xC < 0 || xC >= ${t.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${d}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${p}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${p}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${d}) *\n                    getW(wR, wC, ${d}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${d}, xR, xC) *\n                    getW(wR, wC, ${d}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2)\n              );\n\n              if (${p}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2),\n                getW(wR, wC, ${d} + 2, d2)\n              );\n\n              if (${p}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1),\n                  getX(batch, xR, xC, ${d} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC),\n                  getX(batch, ${d} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${C}\n        ${y}\n        setOutput(result);\n      }\n    `}}class oo{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;const e=t.padInfo.front,n=t.padInfo.top,r=t.padInfo.left,o=t.strideDepth,s=t.strideHeight,i=t.strideWidth,a=t.dilationDepth,l=t.dilationHeight,u=t.dilationWidth,c=t.filterDepth,h=t.filterHeight,d=t.filterWidth,f=4*Math.floor(t.inChannels/4),p=t.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${o}, ${s}, ${i});\n      const ivec3 pads = ivec3(${e}, ${n}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${a};\n\n          if (xF < 0 || xF >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${l};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${d}; wC++) {\n              int xC = xCCorner + wC * ${u};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${f}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===p}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${f}) *\n                  getW(wF, wR, wC, ${f}, d2);\n              } else if (${2===p}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${f}),\n                  getX(batch, xF, xR, xC, ${f} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${f}, d2),\n                  getW(wF, wR, wC, ${f} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===p}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${f}),\n                  getX(batch, xF, xR, xC, ${f} + 1),\n                  getX(batch, xF, xR, xC, ${f} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${f}, d2),\n                  getW(wF, wR, wC, ${f} + 1, d2),\n                  getW(wF, wR, wC, ${f} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class so{constructor(t,e=!1,n=null,r=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;const o=t.inHeight,s=t.inWidth,i=t.padInfo.top,a=t.padInfo.left,l=t.strideHeight,u=t.strideWidth,c=t.dilationHeight,h=t.dilationWidth,d=t.filterHeight,f=t.filterWidth,p=t.outChannels/t.inChannels;let g="",x="";n&&(g=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,x="result = activation(result);");const m=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${g}\n\n      const ivec2 strides = ivec2(${l}, ${u});\n      const ivec2 pads = ivec2(${i}, ${a});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${p};\n        int q = d2 - d1 * ${p};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${d}; wR++) {\n          int xR = xRCorner + wR * ${c};\n\n          if (xR < 0 || xR >= ${o}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${f}; wC++) {\n            int xC = xCCorner + wC * ${h};\n\n            if (xC < 0 || xC >= ${s}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${m}\n        ${x}\n        setOutput(result);\n      }\n    `}}class io{constructor(t,e=!1,n=null,r=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.outShape;const o=t.inHeight,s=t.inWidth,i=t.padInfo.top,a=t.padInfo.left,l=t.strideHeight,u=t.strideWidth,c=t.dilationHeight,h=t.dilationWidth,d=t.filterHeight,p=t.filterWidth,g=p;let x="int xR; int xC; int xCOffset;";for(let t=0;t<d;t++)for(let e=0;e<p;e++)x+=`\n          vec4 xTexelR${t}C${2*e} = vec4(0.);\n          vec4 wR${t}C${e} = vec4(0.);\n          vec4 xR${t}C${e} = vec4(0.);`;for(let t=0;t<d;t++)for(let e=0;e<g;e++){const n=2*e;if(x+=`\n          xR = xRCorner + ${t*c};\n          xC = xCCorner + ${n*h};\n        `,1===u){if(n<p&&(x+=a%2==1?`\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < ${o} && xCOffset >= 0 && xCOffset < ${s}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${s}) {\n                    xTexelR${t}C${n}.zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < ${o} && xCOffset >= 0 && xCOffset < ${s}) {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${s}) {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR${t}C${n} = vec4(previous.zw, xTexelR${t}C${n}.xy);\n                } else {\n                  xR${t}C${n} = vec4(0, 0, xTexelR${t}C${n}.xy);\n                }\n              `:`\n                if(xR >= 0 && xR < ${o} && xC >= 0 && xC < ${s}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xR${t}C${n} = xTexelR${t}C${n};\n              `,n+1<p)){const e=a%2==0?f(h):h;h%2==0&&a%2==1||h%2!=0&&a%2!=1?(x+=`\n                  xCOffset = xC + ${a%2} + ${e};\n\n                  if(xR >= 0 && xR < ${o} &&\n                    xCOffset >= 0 && xCOffset < ${s}) {\n                    xTexelR${t}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n                `,h>1&&(x+=`\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < ${o} &&\n                      xCOffset >= 0 && xCOffset < ${s}) {\n                      xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR${t}C${n} = vec4(0.);\n                    }\n                  `),x+=`\n                  xR${t}C${n+1} = vec4(\n                    xTexelR${t}C${n}.zw, xTexelR${t}C${n+2}.xy);\n                `):x+=`\n                  xCOffset = xC + ${e};\n\n                  if(xR >= 0 && xR < ${o} &&\n                    xCOffset >= 0 && xCOffset < ${s}) {\n                    xTexelR${t}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR${t}C${n+1} = xTexelR${t}C${n+2};\n                `}}else n<p&&(x+=`\n              if(xR >= 0 && xR < ${o}) {\n            `,a%2==1?(x+=`\n                xCOffset = xC + 1 - ${u};\n                if(xCOffset >= 0 && xCOffset < ${s}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${s}) {\n                  xTexelR${t}C${n+2} = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR${t}C${n+2} = vec4(0.);\n                }\n\n                xR${t}C${n} = vec4(\n                  xTexelR${t}C${n}.zw, xTexelR${t}C${n+2}.zw);\n              `,n+1<p&&(x+=`\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + ${u};\n                  if(xCOffset >= 0 && xCOffset < ${s}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR${t}C${n+1} = vec4(xTexelR${t}C${n+2}.xy, final.xy);\n                `)):(x+=`\n                if(xC >= 0 && xC < ${s}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + ${u};\n                if(xCOffset >= 0 && xCOffset < ${s}) {\n                  xTexelR${t}C${n+2} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${t}C${n+2} = vec4(0.);\n                }\n\n                xR${t}C${n} = vec4(\n                  xTexelR${t}C${n}.xy, xTexelR${t}C${n+2}.xy);\n              `,n+1<p&&(x+=`\n                  xR${t}C${n+1} = vec4(\n                    xTexelR${t}C${n}.zw, xTexelR${t}C${n+2}.zw);\n                `)),x+="}");n<p&&(x+=`\n            vec4 wTexelR${t}C${n} = getW(${t}, ${n}, d1, q);\n            wR${t}C${n} = vec4(wTexelR${t}C${n}.xz, wTexelR${t}C${n}.xz);\n          `,n+1<p&&(x+=`\n              vec4 wTexelR${t}C${n+1} = getW(${t}, ${n+1}, d1, q);\n              wR${t}C${n+1} =\n                vec4(wTexelR${t}C${n+1}.xz, wTexelR${t}C${n+1}.xz);`))}for(let t=0;t<d;t++)for(let e=0;e<p;e++)x+=`dotProd += xR${t}C${e} * wR${t}C${e};`;let m="",v="";n&&(m=r?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,v="result = activation(result);");const y=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${m}\n\n      const ivec2 strides = ivec2(${l}, ${u});\n      const ivec2 pads = ivec2(${i}, ${a});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        ${x}\n\n        vec4 result = dotProd;\n        ${y}\n        ${v}\n        setOutput(result);\n      }\n    `}}class ao{constructor(t,e,n,r,o){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[s,i,a,l]=t,[u]=e,[c,h]=n;this.outputShape=[u,c,h,l];const d="bilinear"===r?1:0,[f,p]=[i-1+".0",a-1+".0"],[g,x,m]=c>1?[""+(i-1)/(c-1),"(y2-y1) * height_ratio",`y1*${f} + float(y)*(height_scale)`]:["0.0","0.0","0.5 * (y1+y2) * "+f],[v,y,C]=h>1?[""+(a-1)/(h-1),"(x2-x1) * width_ratio",`x1*${p} + float(x)*(width_scale)`]:["0.0","0.0","0.5 * (x1+x2) * "+p];this.userCode=`\n      const float height_ratio = float(${g});\n      const float width_ratio = float(${v});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${s}) {\n          return;\n        }\n\n        float height_scale = ${x};\n        float width_scale = ${y};\n\n        float in_y = ${m};\n        if( in_y < 0.0 || in_y > ${f} ) {\n          setOutput(float(${o}));\n          return;\n        }\n        float in_x = ${C};\n        if( in_x < 0.0 || in_x > ${p} ) {\n          setOutput(float(${o}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${d} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}class lo{constructor(t,e,n){this.variableNames=["x"],this.outputShape=t;const r=t.length,o=e?"0.0":`getX(${uo(r,"coords")})`,s=t[t.length-1];let i="",a="";e?(i=n?"end != "+(s-1):"end != 0",a=n?"end + 1":"end - 1"):(i=n?"end + pow2 < "+s:"end >= pow2",a=n?"end + pow2":"end - pow2"),this.userCode=`\n      uniform float index;\n      void main() {\n        ${Ar(r)} coords = getOutputCoords();\n        int end = ${co(r,"coords")};\n        float val = ${o};\n        int pow2 = int(pow(2.0, index));\n        if (${i}) {\n          int idx = ${a};\n          ${co(r,"coords")} = idx;\n          val += getX(${uo(r,"coords")});\n        }\n        setOutput(val);\n      }\n    `}getCustomSetupFunc(t){return(e,n)=>{null==this.index&&(this.index=e.getUniformLocation(n,"index")),e.gl.uniform1f(this.index,t)}}}function uo(t,e){if(1===t)return""+e;if(2===t)return`${e}.x, ${e}.y`;if(3===t)return`${e}.x, ${e}.y, ${e}.z`;if(4===t)return`${e}.x, ${e}.y, ${e}.z, ${e}.w`;throw Error(`Cumulative sum for rank ${t} is not yet supported`)}function co(t,e){if(1===t)return""+e;if(2===t)return e+".y";if(3===t)return e+".z";if(4===t)return e+".w";throw Error(`Cumulative sum for rank ${t} is not yet supported`)}class ho{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=On.DENSE;const e=Dn(t),n=dr();this.outputShape=t,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${fr(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${e[0]}, ${e[1]}));\n        int index = 4 * (resTexRC.x * ${e[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${n.output} = result;\n      }\n    `}}class fo{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=On.DENSE;const e=Dn(t),n=dr();this.outputShape=t,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${fr(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${e[0]}, ${e[1]}));\n        int index = 4 * (resTexRC.x * ${e[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${n.output} = result;\n      }\n    `}}class po{constructor(t,e,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=t,this.blockSize=e,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${e};\n      int offset_h = imod(h, ${e});\n      int in_w = w / ${e};\n      int offset_w = imod(w, ${e});\n      int offset_d = (offset_h * ${e} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}class go{constructor(t){this.variableNames=["X"],this.outputShape=[t,t],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}class xo{constructor(t){this.variableNames=["A"],this.outTexUsage=Nn.DOWNLOAD;const e=dr();this.outputShape=t,this.userCode=`\n      ${gr}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${e.output} = encode_float(x);\n      }\n    `}}class mo{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=Nn.DOWNLOAD;const e=dr();this.outputShape=t,this.userCode=`\n      ${gr}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${e.output} = encode_float(x);\n      }\n    `}}class vo{constructor(t,e,n=!1){this.variableNames=["A"];const r=dr(),[o,s]=e;this.outputShape=t;let i="result";n&&(i="floor(result * 255. + 0.5)"),this.userCode=`\n      ${pr(t)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / ${s};\n        int c = imod(flatIndex, ${s});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${s}.0, ${o}.0);\n        vec4 values = ${r.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${r.output} = vec4(${i}, 0., 0., 0.);\n      }\n    `}}class yo{constructor(t,e,n=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const r=dr(),[o,s]=e;this.outputShape=t;let i="",a="result";n&&(a="floor(result * 255. + 0.5)");for(let e=0;e<=1;e++)for(let n=0;n<=1;n++){const a=2*e+n;i+=`\n          localCoords = coords;\n          if(localCoords[2] + ${n} < ${t[2]}) {\n            localCoords[2] += ${n};\n            if(localCoords[1] + ${e} < ${t[1]}) {\n              localCoords[1] += ${e};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${s};\n              c = imod(flatIndex, ${s});\n              uv = (vec2(c, r) + halfCR) / vec2(${s}.0, ${o}.0);\n              values = ${r.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${a}] = values[0];\n              } else if(offset == 1) {\n                result[${a}] = values[1];\n              } else if(offset == 2) {\n                result[${a}] = values[2];\n              } else {\n                result[${a}] = values[3];\n              }\n            }\n          }\n        `}this.userCode=`\n      ${pr(t)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${i}\n\n        ${r.output} = ${a};\n      }\n    `}}const Co="return real * expR - imag * expI;",$o="return real * expI + imag * expR;";class wo{constructor(t,e,n){this.variableNames=["real","imag"];const r=e[1];this.outputShape=e;const o=n?"2.0 * "+Math.PI:"-2.0 * "+Math.PI,s=n?r+".0":"1.0";this.userCode=`\n      const float exponentMultiplier = ${o};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${t}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${r});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${r}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${s};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}class bo{constructor(t,e){this.outputShape=[],this.variableNames=["x"],this.outputShape=t,this.userCode="\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}getCustomSetupFunc(t){return(e,n)=>{null==this.valueLoc&&(this.valueLoc=e.getUniformLocationNoThrow(n,"value")),e.gl.uniform1f(this.valueLoc,t)}}}class Ro{constructor(t,e,n){this.variableNames=["A","indices"];const r=t.slice();r[n]=e,this.outputShape=r,this.rank=r.length;const o=Ar(this.rank),s=function(t,e){const n=t.length;if(n>4)throw Error(`Gather for rank ${n} is not yet supported`);if(1===n)return"int(getIndices(resRC))";const r=["resRC.x","resRC.y","resRC.z","resRC.w"],o=[];for(let n=0;n<t.length;n++)n===e?o.push(`int(getIndices(${r[n]}))`):o.push(""+r[n]);return o.join()}(t,n);this.userCode=`\n      void main() {\n        ${o} resRC = getOutputCoords();\n        setOutput(getA(${s}));\n      }\n    `}}class Io{constructor(t,e,n){this.sliceDim=t,this.strides=e,this.variableNames=["x","indices"],this.outputShape=n;const r=Ar(e.length),o=Ar(n.length),s=this.sliceDim>1?"strides[j]":"strides";this.userCode=`\n        ${r} strides = ${r}(${this.strides});\n         void main() {\n          ${o} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${s};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}function Eo(t){const e=dr();return function(t,e){const n=Kn(t,()=>t.createShader(t.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(Mn(t,()=>t.shaderSource(n,e)),Mn(t,()=>t.compileShader(n)),!1===t.getShaderParameter(n,t.COMPILE_STATUS))throw console.log(t.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(t,`${e.version}\n    precision highp float;\n    ${e.attribute} vec3 clipSpacePos;\n    ${e.attribute} vec2 uv;\n    ${e.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function Ao(t){return function(t,e){const n=Kn(t,()=>t.createBuffer(),"Unable to create WebGLBuffer");return Mn(t,()=>t.bindBuffer(t.ARRAY_BUFFER,n)),Mn(t,()=>t.bufferData(t.ARRAY_BUFFER,e,t.STATIC_DRAW)),n}(t,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function To(t){return function(t,e){const n=Kn(t,()=>t.createBuffer(),"Unable to create WebGLBuffer");return Mn(t,()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,n)),Mn(t,()=>t.bufferData(t.ELEMENT_ARRAY_BUFFER,e,t.STATIC_DRAW)),n}(t,new Uint16Array([0,1,2,2,1,3]))}function So(t,e,r,o,s,i){!function(t,e){const r=n().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t<=0||e<=0){throw new Error("Requested texture size "+`[${t}x${e}]`+" is invalid.")}if(t>r||e>r){throw new Error("Requested texture size "+`[${t}x${e}]`+" greater than WebGL maximum on this browser / GPU "+`[${r}x${r}]`+".")}}(e,r);const a=function(t){return Kn(t,()=>t.createTexture(),"Unable to create WebGLTexture.")}(t),l=t.TEXTURE_2D;return Mn(t,()=>t.bindTexture(l,a)),Mn(t,()=>t.texParameteri(l,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE)),Mn(t,()=>t.texParameteri(l,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE)),Mn(t,()=>t.texParameteri(l,t.TEXTURE_MIN_FILTER,t.NEAREST)),Mn(t,()=>t.texParameteri(l,t.TEXTURE_MAG_FILTER,t.NEAREST)),Mn(t,()=>t.texImage2D(l,0,o,e,r,0,s,i,null)),Mn(t,()=>t.bindTexture(t.TEXTURE_2D,null)),a}function Oo(t){return t.internalFormatFloat}function No(t){return t.internalFormatHalfFloat}function ko(t){return t.downloadTextureFormat}function Fo(t){return t.internalFormatPackedFloat}function Do(t){return t.internalFormatPackedHalfFloat}function _o(t,e,n,r,o,s,i,a){const l=t,u=new Float32Array(function(t,e){const[n,r]=_n(t,e);return n*r*4}(s,i));return l.bindBuffer(l.PIXEL_PACK_BUFFER,e),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}class Bo{constructor(t){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const e=n().getNumber("WEBGL_VERSION");null!=t?(this.gl=t,function(t,e){An[t]=e}(e,t)):this.gl=Sn(e);let r="WEBGL_color_buffer_float";if(1===n().getNumber("WEBGL_VERSION")){const t="OES_texture_float",e="OES_texture_half_float";if(this.textureFloatExtension=Ln(this.gl,t),nr(this.gl,e))this.textureHalfFloatExtension=Ln(this.gl,e);else if(n().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(r),nr(this.gl,"EXT_color_buffer_half_float"))this.colorBufferHalfFloatExtension=Ln(this.gl,"EXT_color_buffer_half_float");else if(n().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(r="EXT_color_buffer_float",nr(this.gl,r))this.colorBufferFloatExtension=this.gl.getExtension(r);else{if(!nr(this.gl,"EXT_color_buffer_half_float"))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension("EXT_color_buffer_half_float")}this.vertexBuffer=Ao(this.gl),this.indexBuffer=To(this.gl),this.framebuffer=function(t){return Kn(t,()=>t.createFramebuffer(),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=Bn(this.gl,this.textureHalfFloatExtension)}get debug(){return n().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const t=this.gl;Mn(t,()=>t.finish()),Mn(t,()=>t.bindFramebuffer(t.FRAMEBUFFER,null)),Mn(t,()=>t.deleteFramebuffer(this.framebuffer)),Mn(t,()=>t.bindBuffer(t.ARRAY_BUFFER,null)),Mn(t,()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null)),Mn(t,()=>t.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[o,s]=Fn(e,n);return So(t,o,s,Oo(r),r.textureFormatFloat,t.FLOAT)}(this.gl,t,e,this.textureConfig)}createFloat16MatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[o,s]=Fn(e,n);return So(t,o,s,No(r),r.textureFormatFloat,r.textureTypeHalfFloat)}(this.gl,t,e,this.textureConfig)}createUnsignedBytesMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[o,s]=Fn(e,n);return So(t,o,s,ko(r),t.RGBA,t.UNSIGNED_BYTE)}(this.gl,t,e,this.textureConfig)}uploadPixelDataToTexture(t,e){this.throwIfDisposed(),function(t,e,n){Mn(t,()=>t.bindTexture(t.TEXTURE_2D,e)),n.data instanceof Uint8Array?Mn(t,()=>t.texImage2D(t.TEXTURE_2D,0,t.RGBA,n.width,n.height,0,t.RGBA,t.UNSIGNED_BYTE,n.data)):Mn(t,()=>t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,n)),Mn(t,()=>t.bindTexture(t.TEXTURE_2D,null))}(this.gl,t,e)}uploadDenseMatrixToTexture(t,e,n,r){this.throwIfDisposed(),function(t,e,n,r,o,s){let i,a,l;Mn(t,()=>t.bindTexture(t.TEXTURE_2D,e)),o instanceof Uint8Array?(i=new Uint8Array(n*r*4),a=t.UNSIGNED_BYTE,l=t.RGBA):(i=new Float32Array(n*r*4),a=t.FLOAT,l=s.internalFormatPackedFloat),i.set(o),Mn(t,()=>t.texImage2D(t.TEXTURE_2D,0,l,n,r,0,t.RGBA,a,i)),Mn(t,()=>t.bindTexture(t.TEXTURE_2D,null))}(this.gl,t,e,n,r,this.textureConfig)}createFloat16PackedMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[o,s]=_n(e,n);return So(t,o,s,Do(r),t.RGBA,r.textureTypeHalfFloat)}(this.gl,t,e,this.textureConfig)}createPackedMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[o,s]=_n(e,n);return So(t,o,s,Fo(r),t.RGBA,t.FLOAT)}(this.gl,t,e,this.textureConfig)}deleteMatrixTexture(t){this.throwIfDisposed(),this.outputTexture===t&&(Xn(this.gl,this.framebuffer),this.outputTexture=null),Mn(this.gl,()=>this.gl.deleteTexture(t))}downloadByteEncodedFloatMatrixFromOutputTexture(t,e,n){return this.downloadMatrixDriver(t,()=>function(t,e,n,r){const[o,s]=Fn(e,n),i=new Uint8Array(e*n*4);return Mn(t,()=>t.readPixels(0,0,o,s,r.downloadTextureFormat,t.UNSIGNED_BYTE,i)),new Float32Array(i.buffer)}(this.gl,e,n,this.textureConfig))}downloadPackedMatrixFromBuffer(t,e,n,r,o,s){return _o(this.gl,t,0,0,0,o,s,this.textureConfig)}downloadFloat32MatrixFromBuffer(t,e){return function(t,e,n){const r=t,o=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,e),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,o),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),o}(this.gl,t,e)}createBufferFromTexture(t,e,n){this.bindTextureToFrameBuffer(t);const r=function(t,e,n,r){const o=t.createBuffer();Mn(t,()=>t.bindBuffer(t.PIXEL_PACK_BUFFER,o));const s=16*e*n;return Mn(t,()=>t.bufferData(t.PIXEL_PACK_BUFFER,s,t.STREAM_READ)),Mn(t,()=>t.readPixels(0,0,n,e,t.RGBA,t.FLOAT,0)),Mn(t,()=>t.bindBuffer(t.PIXEL_PACK_BUFFER,null)),o}(this.gl,e,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const t=this.createFence(this.gl);return this.pollFence(t)}createFence(t){let e,r;if(n().getBool("WEBGL_FENCE_API_ENABLED")){const n=t,o=n.fenceSync(n.SYNC_GPU_COMMANDS_COMPLETE,0);t.flush(),r=()=>{const t=n.clientWaitSync(o,0,0);return t===n.ALREADY_SIGNALED||t===n.CONDITION_SATISFIED},e=o}else n().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(e=this.beginQuery(),this.endQuery(),r=()=>this.isQueryAvailable(e,n().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):r=()=>!0;return{query:e,isFencePassed:r}}downloadMatrixFromPackedTexture(t,e,n){return this.downloadMatrixDriver(t,()=>function(t,e,n){const r=new Float32Array(e*n*4);return Mn(t,()=>t.readPixels(0,0,n,e,t.RGBA,t.FLOAT,r)),r}(this.gl,e,n))}createProgram(t){this.throwIfDisposed();const e=this.gl,n=Wn(e,t),r=Eo(e),o=function(t){return Kn(t,()=>t.createProgram(),"Unable to create WebGLProgram.")}(e);return Mn(e,()=>e.attachShader(o,r)),Mn(e,()=>e.attachShader(o,n)),function(t,e){if(Mn(t,()=>t.linkProgram(e)),!1===t.getProgramParameter(e,t.LINK_STATUS))throw console.log(t.getProgramInfoLog(e)),new Error("Failed to link vertex and fragment shaders.")}(e,o),this.debug&&Vn(e,o),this.vertexAttrsAreBound||(this.setProgram(o),this.vertexAttrsAreBound=function(t,e,n){return Mn(t,()=>t.bindBuffer(t.ARRAY_BUFFER,n)),zn(t,e,"clipSpacePos",n,3,20,0)&&zn(t,e,"uv",n,2,20,12)}(e,this.program,this.vertexBuffer)),o}deleteProgram(t){this.throwIfDisposed(),t===this.program&&(this.program=null),null!=t&&Mn(this.gl,()=>this.gl.deleteProgram(t))}setProgram(t){this.throwIfDisposed(),this.program=t,null!=this.program&&this.debug&&Vn(this.gl,this.program),Mn(this.gl,()=>this.gl.useProgram(t))}getUniformLocation(t,e,n=!0){return this.throwIfDisposed(),n?function(t,e,n){return Kn(t,()=>t.getUniformLocation(e,n),'uniform "'+n+'" not present in program.')}(this.gl,t,e):function(t,e,n){return t.getUniformLocation(e,n)}(this.gl,t,e)}getAttributeLocation(t,e){return this.throwIfDisposed(),Mn(this.gl,()=>this.gl.getAttribLocation(t,e))}getUniformLocationNoThrow(t,e){return this.throwIfDisposed(),this.gl.getUniformLocation(t,e)}setInputMatrixTexture(t,e,n){this.throwIfDisposed(),this.throwIfNoProgram(),function(t,e,n,r){Mn(t,()=>Gn(t,e,r)),Mn(t,()=>t.uniform1i(n,r))}(this.gl,t,e,n)}setOutputMatrixTexture(t,e,n){this.setOutputMatrixTextureDriver(t,n,e)}setOutputPackedMatrixTexture(t,e,n){this.throwIfDisposed();const[r,o]=_n(e,n);this.setOutputMatrixTextureDriver(t,r,o)}setOutputMatrixWriteRegion(t,e,n,r){this.setOutputMatrixWriteRegionDriver(n,t,r,e)}setOutputPackedMatrixWriteRegion(t,e,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&Vn(this.gl,this.program),jn(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const t=this.gl;this.debug&&this.debugValidate(),Mn(t,()=>t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),Mn(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=Ln(this.gl,2===n().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===n().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const t=this.gl,e=this.getQueryTimerExtensionWebGL2(),n=t.createQuery();return t.beginQuery(e.TIME_ELAPSED_EXT,n),n}const t=this.getQueryTimerExtensionWebGL1(),e=t.createQueryEXT();return t.beginQueryEXT(t.TIME_ELAPSED_EXT,e),e}endQuery(){if(2===n().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const t=this.gl,e=this.getQueryTimerExtensionWebGL2();return void t.endQuery(e.TIME_ELAPSED_EXT)}const t=this.getQueryTimerExtensionWebGL1();t.endQueryEXT(t.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(t){return await R(()=>this.disposed||this.isQueryAvailable(t,n().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),this.getQueryTime(t,n().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(t,e){if(0===e)return null;if(2===e){const e=this.gl;return e.getQueryParameter(t,e.QUERY_RESULT)/1e6}{const e=this.getQueryTimerExtensionWebGL1();return e.getQueryObjectEXT(t,e.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(t,e){if(0===e)return!0;if(2===e){const e=this.gl,n=this.getQueryTimerExtensionWebGL2(),r=e.getQueryParameter(t,e.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),r&&!this.disjoint}{const e=this.getQueryTimerExtensionWebGL1(),n=e.getQueryObjectEXT(t,e.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(e.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(t){return new Promise(e=>{this.addItemToPoll(()=>t.isFencePassed(),()=>e())})}pollItems(){const t=function(t){let e=0;for(;e<t.length;++e){if(!t[e]())break}return e-1}(this.itemsToPoll.map(t=>t.isDoneFn));for(let e=0;e<=t;++e){const{resolveFn:t}=this.itemsToPoll[e];t()}this.itemsToPoll=this.itemsToPoll.slice(t+1)}addItemToPoll(t,e){this.itemsToPoll.push({isDoneFn:t,resolveFn:e}),this.itemsToPoll.length>1||R(()=>(this.pollItems(),0===this.itemsToPoll.length))}bindTextureToFrameBuffer(t){this.throwIfDisposed(),Hn(this.gl,t,this.framebuffer),this.debug&&jn(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(Hn(this.gl,this.outputTexture,this.framebuffer),this.debug&&jn(this.gl)):Xn(this.gl,this.framebuffer)}downloadMatrixDriver(t,e){this.bindTextureToFrameBuffer(t);const n=e();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(t,e,n){this.throwIfDisposed();const r=this.gl;Hn(r,t,this.framebuffer),this.debug&&jn(r),this.outputTexture=t,Mn(r,()=>r.viewport(0,0,e,n)),Mn(r,()=>r.scissor(0,0,e,n))}setOutputMatrixWriteRegionDriver(t,e,n,r){this.throwIfDisposed(),Mn(this.gl,()=>this.gl.scissor(t,e,n,r))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}function Mo(t,e){if(t.length!==e.length)throw Error(`Binary was compiled with ${t.length} inputs, but was executed with ${e.length} inputs`);t.forEach((t,n)=>{const r=t.logicalShape,o=e[n],s=o.shape;if(!y(r,s))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${s} must match`);if(t.isUniform&&o.isUniform)return;const i=t.texShape,a=o.isUniform?null:o.texData.texShape;if(!y(i,a))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${a} must match`)})}class Po{constructor(t,e,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;const{filterWidth:r,inChannels:o,strideWidth:s,strideHeight:i,padInfo:a,outWidth:l,dilationWidth:u,dilationHeight:c,dataFormat:h}=n,{left:d,top:f}=a,p=o*r,g=dr(),x="channelsLast"===h,m=x?0:1,v=x?1:2;let y="";for(let n=0;n<=1;n++)for(let r=0;r<=1;r++)y+=`\n          blockIndex = rc.y + ${r};\n          pos = rc.x + ${n};\n\n          if(blockIndex < ${t[1]} && pos < ${t[0]}) {\n            offsetY = int(blockIndex / (${l})) * ${i} - ${f};\n            d0 = offsetY + ${c} * (pos / ${p});\n\n            if(d0 < ${e[m]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${l}.) * ${s}. - ${d}.);\n              d1 = offsetX + ${u} * (int(mod(float(pos), ${p}.) / ${o}.));\n\n              if(d1 < ${e[v]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${o}.));\n\n                if (${x}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*n+r}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*n+r}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${y}\n\n        ${g.output} = result;\n      }\n    `}}class Lo{constructor(t,e,n,r,o){this.variableNames=["x"],this.outputShape=[];const s=e,i=t[3]-1;let a;this.outputShape=t;const l=`float(${n}) + float(${r}) * sum`;a=.5===o?`inversesqrt(${l})`:1===o?`1.0/(${l})`:`exp(log(${l}) * float(-${o}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${s}; j <= ${s}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${a};\n        setOutput(val);\n      }\n    `}}class Wo{constructor(t,e,n,r,o){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=t,this.depth=t[3],this.depthRadius=e,this.bias=n,this.alpha=r,this.beta=o,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${e})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${e} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${o})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${o});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}class Uo{constructor(t,e,n,r,o){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const s=e,i=t[3]-1;let a;this.outputShape=t;const l=`float(${n}) + float(${r}) * sum`;a=.5===o?`inversesqrt(${l})`:1===o?`1.0/(${l})`:`exp(log(${l}) * float(-${o}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${s};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${s}; j <= ${s}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${a};\n        setOutput(result);\n      }\n    `}}class Vo{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const e=t.strideHeight,n=t.strideWidth,r=t.dilationHeight,o=t.effectiveFilterHeight,s=t.effectiveFilterWidth,i=o-1-t.padInfo.top,a=s-1-t.padInfo.left,l=o*s-1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${a});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n          wR += ${r}) {\n          float dyR = float(dyRCorner + wR) / ${e}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${s}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${l} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${s} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class zo{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const e=t.strideDepth,n=t.strideHeight,r=t.strideWidth,o=t.dilationDepth,s=t.dilationHeight,i=t.dilationWidth,a=t.effectiveFilterDepth,l=t.effectiveFilterHeight,u=t.effectiveFilterWidth,c=a-1-t.padInfo.front,h=l-1-t.padInfo.top,d=u-1-t.padInfo.left,f=a*l*u-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${h}, ${d});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${a};\n           wD += ${o}) {\n          float dyD = float(dyDCorner + wD) / ${e}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${l};\n              wR += ${s}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${u};\n                wC += ${i}) {\n              float dyC = float(dyCCorner + wC) / ${r}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${f} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${l} * ${u} +\n                  wR * ${u} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Go{constructor(t,e,n=!1,r=!1,o=!1,s=null,i=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;const a=n?t[1]:t[2],l=Math.ceil(a/2),u=n?"i * 2, rc.y":"rc.y, i * 2",c=r?"rc.z, i * 2":"i * 2, rc.z",h=n?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],d=r?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let f="",p="";s&&(f=i?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${s}\n        }`:`vec4 activation(vec4 x) {\n          ${s}\n        }`,p="result = activation(result);");const g=o?"result += getBiasAtOutCoords();":"";o&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${f}\n\n      const float sharedDimension = ${l}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${l}; i++) {\n          vec4 a = getMatrixA(rc.x, ${u});\n          vec4 b = getMatrixB(rc.x, ${c});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${h[0]} * ${d[0]});\n          result += (${h[1]} * ${d[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${g}\n\n        ${p}\n\n        setOutput(result);\n      }\n    `}}class Ho{constructor(t,e,n){this.variableNames=["probs"],this.outputShape=[t,n],this.userCode=`\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${e-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${e-1}));\n      }\n    `}getCustomSetupFunc(t){return(e,n)=>{null==this.seedLoc&&(this.seedLoc=e.getUniformLocation(n,"seed")),e.gl.uniform1f(this.seedLoc,t)}}}class Xo{constructor(t,e,n,r){this.variableNames=["indices"],this.outputShape=[t,e],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}class jo{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=t;const e=t.length;if(0===e)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const n=hr("rc",e),r=Ar(e),o=function(t,e,n){if(1===t)return"rc > "+e[0];let r="";for(let o=t-2;o<t;o++)r+=`${n[o]} >= ${e[o]}`,o<t-1&&(r+="||");return r}(e,t,n),s=function(t,e,n,r){if(1===t)return"";const o=r.slice(-2);return`\n    int r = ${o[0]};\n    int c = ${o[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${e};\n    bool rEdge = rp1 >= ${n};\n  `}(e,t[t.length-1],t[t.length-2],n),i=function(t,e){const n=t.length,r=function(t,e){const n=[];for(let r=0;r<=1;r++)for(let o=0;o<=1;o++){let s=`${0===r?"r":"rp1"}, ${0===o?"c":"cp1"}`;for(let n=2;n<t;n++)s=e[e.length-1-n]+","+s;n.push(s)}return n}(n,e);if(1===n)return`getA(rc),\n            rc + 1 >= ${t[0]} ? 0. : getA(rc + 1),\n            0, 0`;return`getA(${r[0]}),\n          cEdge ? 0. : getA(${r[1]}),\n          rEdge ? 0. : getA(${r[2]}),\n          rEdge || cEdge ? 0. : getA(${r[3]})`}(t,n);this.userCode=`\n        void main() {\n          ${r} rc = getOutputCoords();\n\n          if(${o}) {\n            setOutput(vec4(0));\n          } else {\n            ${s}\n\n            setOutput(vec4(${i}));\n          }\n        }\n      `}}}class Ko{constructor(t,e,n){this.variableNames=["x"],this.outputShape=e.map((e,n)=>e[0]+t[n]+e[1]);const r=t.length,o=Ar(r),s=e.map(t=>t[0]).join(","),i=e.map((e,n)=>e[0]+t[n]).join(","),a=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${o} start = ${o}(${s});\n      ${o} end = ${o}(${i});\n\n      void main() {\n        ${o} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(${n}));\n        } else {\n          ${o} coords = outC - start;\n          setOutput(getX(${a}));\n        }\n      }\n    `:`\n        int start = ${s};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(${n}));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class qo{constructor(t,e,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map((e,n)=>e[0]+t[n]+e[1]);const r=t.length,o=Ar(r),s=e.map(t=>t[0]).join(","),i=e.map((e,n)=>e[0]+t[n]).join(","),a=hr("rc",r),l=hr("source",r),u=`${a[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${l.slice(-2).join()})`,h=[o+" rc = outputLoc;",`${a[r-1]} += 1;\n       if(${u}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${a[r-2]} += 1;\n       if(${a[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${a[r-1]} += 1;\n         if(${u}) {`],d=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let f="";for(let t=0,e=1===r?2:4;t<e;t++)f+=`\n        ${h[t]}\n        if (${d}) {\n          result[${t}] = float(${n});\n        } else {\n          ${o} source = rc - start;\n          result[${t}] = getChannel(getX(${l.join()}), ${c});\n        }\n      `;f+=1===r?"} ":"}}",this.userCode=`\n      const ${o} start = ${o}(${s});\n      const ${o} end = ${o}(${i});\n\n      void main() {\n        ${o} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${f}\n        setOutput(result);\n      }\n    `}}class Yo{constructor(t,e,n,r=!1,o=!1){if(this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");const s=t.filterWidth,i=t.strideHeight,a=t.strideWidth,l=t.dilationHeight,u=t.dilationWidth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,d=t.padInfo.top,f=t.padInfo.left;this.outputShape=t.outShape;const p="avg"===e,g=`((batch  * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + d`,x=`(xR * ${t.inWidth} + xC) * ${t.inChannels} + d`;let m="0.0";if(p||(m="-1.0 / 1e-20"),n){const e=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${a});\n        const ivec2 pads = ivec2(${d}, ${f});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${l}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${u}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${e} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?o?g:x:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let v=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(v="avgValue / count");const y=4*Math.floor(s/4),C=s%4,$=`\n      if (${p}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${a});\n      const ivec2 pads = ivec2(${d}, ${f});\n      const float initializationValue = ${m};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${m});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${l}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${y}; wC += 4) {\n            int xC = xCCorner + wC * ${u};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              getValue(batch, xR, xC + 3 * ${u}, d)\n            );\n\n            ${$}\n          }\n\n          int xC = xCCorner + ${y};\n          if (${1===C}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${$}\n          } else if (${2===C}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${$}\n          } else if (${3===C}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              initializationValue\n            );\n\n            ${$}\n          }\n        }\n        setOutput(${v});\n      }\n    `}}class Qo{constructor(t,e,n,r=!1,o=!1){if(this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");const s=t.filterWidth,i=t.strideDepth,a=t.strideHeight,l=t.strideWidth,u=t.dilationDepth,c=t.dilationHeight,h=t.dilationWidth,d=t.effectiveFilterDepth,f=t.effectiveFilterHeight,p=t.effectiveFilterWidth,g=t.padInfo.front,x=t.padInfo.top,m=t.padInfo.left;this.outputShape=t.outShape;const v="avg"===e;let y="0.0";if(v||(y="-1.0 / 1e-20"),n){const e=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${a}, ${l});\n        const ivec3 pads = ivec3(${g}, ${x}, ${m});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${d};\n              wD += ${u}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${f};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${p};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${e} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r?o?`(((batch * ${t.inDepth} + xD) * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`((xD * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`wD * ${f} * ${p} +\n                      wR * ${p} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let C=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(C="avgValue / count");const $=4*Math.floor(s/4),w=s%4,b=`\n      if (${v}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${a}, ${l});\n      const ivec3 pads = ivec3(${g}, ${x}, ${m});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${d};\n            wD += ${u}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${f};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${$}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${b}\n            }\n\n            int xC = xCCorner + ${$};\n            if (${1===w}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${b}\n            } else if (${2===w}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${b}\n            } else if (${3===w}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${b}\n            }\n          }\n          setOutput(${C});\n        }\n      }\n    `}}class Zo{constructor(t,e){this.variableNames=["x"];const n=t.windowSize,r=t.batchSize,o=t.inSize,s=Math.ceil(o/n);this.outputShape=[r,s];let i="0.0",a="";"prod"===e?i="1.0":"min"===e?(i="1.0 / 1e-20",a="min"):"max"===e&&(i="-1.0 / 1e-20",a="max");let l=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===e?l="sumValue":"prod"===e?l="prodValue":"all"===e?l="allValue":"any"===e&&(l="anyValue");const u=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===e}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===e}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${a}(values, minMaxValue);\n      }\n    `,d="vec4";"all"===e?(i="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",d="bvec4"):"any"===e&&(i="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",d="bvec4");let f="";o%n>0&&(f=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${f}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${u}; i += 4) {\n          int inIdx = inOffset + i;\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${u};\n        if (${1===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${l});\n      }\n    `}}class Jo{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;let n="";for(let t=0;t<4;t++){let e="thisRC = rc;";t%2==1&&(e+="thisRC.z += 1;"),t>1&&(e+="thisRC.y += 1;"),n+=`\n        ${e}\n        ${t>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${t}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${t>0?"}":""}\n      `}var r;this.userCode=`\n      ${r=e,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${fr(["r","c","d"],r)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${pr(t)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${t[1]};\n        int cols = ${t[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class ts{constructor(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e.shape;const[,r,o]=e.shape,[,s,i]=t.shape,a=[n&&s>1?r-1:r,n&&i>1?o-1:o],l=[n&&s>1?s-1:s,n&&i>1?i-1:i],u=a[0]/l[0],c=a[1]/l[1],h=1/u,d=1/c,f=2*Math.ceil(h)+2,p=2*Math.ceil(d)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${d});\n\n        const int winHeight = int(${f});\n        const int winWidth = int(${p});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${s}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${o-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}class es{constructor(t,e,n,r){this.variableNames=["A"],this.outputShape=[];const[o,s,i,a]=t;this.outputShape=[o,e,n,a];const l=[r&&e>1?s-1:s,r&&n>1?i-1:i],u=[r&&e>1?e-1:e,r&&n>1?n-1:n];this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/u[0]},\n          ${l[1]/u[1]});\n      const vec2 inputShapeRC = vec2(${s}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class ns{constructor(t,e,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[o,s,i,a]=t;this.outputShape=[o,e,n,a];const l=[r&&e>1?s-1:s,r&&n>1?i-1:i],u=[r&&e>1?e-1:e,r&&n>1?n-1:n];this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${l[0]/u[0]},\n          ${l[1]/u[1]},\n          ${l[1]/u[1]});\n      const vec3 inputShapeRC = vec3(${s}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${a-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}class rs{constructor(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e.shape;const[,r,o]=e.shape,[,s,i]=t.shape,a=[n&&s>1?r-1:r,n&&i>1?o-1:o],l=[n&&s>1?s-1:s,n&&i>1?i-1:i],u=a[0]/l[0],c=a[1]/l[1],h=1/u,d=1/c,f=2*Math.ceil(h)+2,p=2*Math.ceil(d)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${d});\n\n        const int winHeight = int(${f});\n        const int winWidth = int(${p});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${s}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${a[0]}) *\n                (float(dyR) / float(${l[0]}));\n\n            float sourceFracCol =\n                float(${a[1]}) *\n                  (float(dyC) / float(${l[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${o}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}class os{constructor(t,e,n,r){this.variableNames=["A"],this.outputShape=[];const[o,s,i,a]=t;this.outputShape=[o,e,n,a];const l=[r&&e>1?s-1:s,r&&n>1?i-1:i],u=[r&&e>1?e-1:e,r&&n>1?n-1:n],c=r?"0.5":"0.0";this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/u[0]},\n          ${l[1]/u[1]});\n      const vec2 inputShapeRC = vec2(${s}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${c})));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class ss{constructor(t,e){this.variableNames=["x"];const n=t.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=t,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${t[0]} - coord - 1));\n        }\n      `);const r=t.map((n,r)=>(n=>-1!==e.indexOf(n)&&1!==t[n]?`${t[n]} - coords[${n}] - 1`:`coords[${n}]`)(r)).join(","),o=Ar(n);this.userCode=`\n      void main() {\n        ${o} coords = getOutputCoords();\n        setOutput(getX(${r}));\n      }\n    `}}class is{constructor(t,e){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=t.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=t;const r=hr("rc",n),o=`${r[n-1]} + 1 < ${this.outputShape[n-1]}`,s=`${r[n-2]} + 1 < ${this.outputShape[n-2]}`,i=Ar(n);function a(n){const r=t.map((r,o)=>function(n,r){return-1!==e.indexOf(n)&&1!==t[n]?`${t[n]} - ${r[n]} - 1`:""+r[n]}(o,n));return`getChannel(getX(${r.join(",")}), vec2(${r.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${t[0]} - rc - 1),\n            ${t[0]} - rc - 1);\n          if(${o}){\n              result.g = getChannel(getX(${t[0]} - (rc  + 1) - 1),\n                ${t[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(t){return a(t)}(r.slice())};\n          if(${o}){\n            result.g = ${function(t){return t[n-1]="("+t[n-1]+" + 1)",a(t)}(r.slice())};\n          }\n          if(${s}) {\n            result.b = ${function(t){return t[n-2]="("+t[n-2]+" + 1)",a(t)}(r.slice())};\n            if(${o}) {\n              result.a = ${function(t){return t[n-1]="("+t[n-1]+" + 1)",t[n-2]="("+t[n-2]+" + 1)",a(t)}(r.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}class as{constructor(t,e,n,r,o,s,i=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=s;const a=Ar(o.length),l=Ar(s.length);let u="";1===n?u="i":2===n&&(u="i, j");const c=`getIndices(${u})`;let h="";1===r?h="i":2===r&&(h="i, coords[1]");const d=`getUpdates(${h})`,f=e>1?"strides[j]":"strides";this.userCode=`\n        ${a} strides = ${a}(${o});\n\n        void main() {\n          ${l} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${t}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${e}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${f};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${d};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}class ls{constructor(t,e){this.variableNames=["x","segmentIds"];const n=t.windowSize,r=t.batchSize,o=t.inSize,s=t.numSegments,i=s*Math.ceil(o/n);this.outputShape=[r,i];const a=4*Math.floor(n/4),l=n%4,u="\n        sumValue += dot(values, segFilter);\n    ";let c="";o%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return initializationValue;\n        }\n      `);let h="";o%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${s})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${s})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${a}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${a};\n        if (${1===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}class us{constructor(t,e,n){let r,o;if(this.variableNames=["c","a","b"],this.outputShape=e,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)o="resRC",r="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[],i=[];for(let r=0;r<e.length;r++)i.push(""+n[r]),r<t&&s.push(""+n[r]);r=s.join(),o=i.join()}const s=Ar(n);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${o}));\n        } else {\n          setOutput(getB(${o}));\n        }\n      }\n    `}}class cs{constructor(t){this.variableNames=["source"],this.outputShape=t,this.rank=t.length;const e=Ar(this.rank),n=`uniform int start[${this.rank}];`,r=function(t){if(1===t)return"sourceLoc";if(t<=6)return hs.slice(0,t).map(t=>"sourceLoc."+t).join(",");throw Error(`Slicing for rank ${t} is not yet supported`)}(this.rank);let o;o=`\n        ${e} sourceLoc;\n        ${e} coords = getOutputCoords();\n        ${t.map((t,e)=>`sourceLoc.${hs[e]} = start[${e}] + coords.${hs[e]};`).join("\n")}\n      `,this.userCode=`\n      ${n}\n      void main() {\n        ${o}\n        setOutput(getSource(${r}));\n      }\n    `}getCustomSetupFunc(t){if(t.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${t.length})`);return(e,n)=>{null==this.startLoc&&(this.startLoc=e.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||e.gl.uniform1iv(this.startLoc,t)}}}const hs=["x","y","z","w","u","v"];class ds{constructor(t){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.rank=t.length;const e=Ar(this.rank),n=hr("coords",this.rank),r=hr("sourceLoc",this.rank),o=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,s=`getChannel(getSource(${r.join()}), ${o})`,i=`\n      result.x = ${s};\n      if (++${n[this.rank-1]} < ${t[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${s};\n        --${r[this.rank-1]};\n      }\n    `,a=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${t[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${s};\n        if (++${n[this.rank-1]} < ${t[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${s};\n        }\n      }\n    `,l=this.rank<=4?`sourceLoc = coords +\n            ${e}(${t.map((t,e)=>`start[${e}]`).join()});`:t.map((t,e)=>`${r[e]} = ${n[e]} + start[${e}];`).join("\n");this.userCode=`\n      uniform int start[${this.rank}];\n      void main() {\n        ${e} coords = getOutputCoords();\n        ${e} sourceLoc;\n        ${l}\n        vec4 result = vec4(0.);\n        ${i}\n        ${a}\n        setOutput(result);\n      }\n    `}getCustomSetupFunc(t){if(t.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${t.length})`);return(e,n)=>{null==this.startLoc&&(this.startLoc=e.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||e.gl.uniform1iv(this.startLoc,t)}}}class fs{constructor(t,e,n){this.variableNames=["x"],this.outputShape=n;const r=n.length,o=Ar(n.length),s=Ar(n.length);let i="";if(1===r)i="coords * strides + begin";else{let t=0;i=n.map((e,r)=>(t++,1===n.length?`coords * strides[${r}] + begin[${r}]`:`coords[${t-1}] * strides[${r}] + begin[${r}]`)).join(",")}this.userCode=`\n      ${o} begin = ${o}(${t});\n      ${o} strides = ${o}(${e});\n\n      void main() {\n        ${s} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}class ps{constructor(t){this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(t,e,n){const r=xs(e,n),o=ms(t,r,n);o in this.freeTextures||(this.freeTextures[o]=[]),o in this.usedTextures||(this.usedTextures[o]=[]);const s=gs(t,r,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[o].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=s,this.log();const t=this.freeTextures[o].shift();return this.usedTextures[o].push(t),t}let i;return r===kn.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(t[0],t[1]):r===kn.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(t[0],t[1]):r===kn.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(t[0],t[1]):r===kn.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(t[0],t[1]):r===kn.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(t[0],t[1])),this.usedTextures[o].push(i),this.numUsedTextures++,this._numBytesAllocated+=s,this.log(),i}releaseTexture(t,e,r,o){if(null==this.freeTextures)return;const s=xs(r,o),i=ms(e,s,o);i in this.freeTextures||(this.freeTextures[i]=[]);const a=gs(e,s,this.gpgpu.gl,this.gpgpu.textureConfig,o),l=n().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==l&&this._numBytesAllocated>l?(this.gpgpu.deleteMatrixTexture(t),this._numBytesAllocated-=a):(this.freeTextures[i].push(t),this.numFreeTextures++,this._numBytesFree+=a),this.numUsedTextures--;const u=this.usedTextures[i],c=u.indexOf(t);if(c<0)throw new Error("Cannot release a texture that was never provided by this texture manager");u.splice(c,1),this.log()}log(){if(!this.logEnabled)return;const t=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${t})`);const e=this._numBytesFree/this._numBytesAllocated;console.log("Bytes allocated: "+this._numBytesAllocated),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*e)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const t in this.freeTextures)this.freeTextures[t].forEach(t=>{this.gpgpu.deleteMatrixTexture(t)});for(const t in this.usedTextures)this.usedTextures[t].forEach(t=>{this.gpgpu.deleteMatrixTexture(t)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function gs(t,e,n,r,o){const s=function(t,e){switch(t){case kn.PACKED_2X2_FLOAT32:return Fo(e);case kn.PACKED_2X2_FLOAT16:return Do(e);case kn.UNPACKED_FLOAT32:return Oo(e);case kn.UNPACKED_FLOAT16:return No(e);case kn.PACKED_4X1_UNSIGNED_BYTE:return ko(e);default:throw new Error("Unknown physical texture type "+t)}}(e,r);let i;if(o){const[e,n]=_n(t[0],t[1]);i=e*n}else{const[e,n]=Fn(t[0],t[1]);i=e*n}return i*function(t,e){const n=t;if(e===n.R32F)return 4;if(e===n.R16F)return 2;if(e===n.RGBA32F)return 16;if(e===t.RGBA)return 16;if(e===n.RGBA16F)return 8;throw new Error("Unknown internal format "+e)}(n,s)}function xs(t,e){if(t===Nn.UPLOAD)return kn.PACKED_2X2_FLOAT32;if(t===Nn.RENDER||null==t)return function(t){return n().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?t?kn.PACKED_2X2_FLOAT32:kn.UNPACKED_FLOAT32:t?kn.PACKED_2X2_FLOAT16:kn.UNPACKED_FLOAT16}(e);if(t===Nn.DOWNLOAD||t===Nn.PIXELS)return kn.PACKED_4X1_UNSIGNED_BYTE;throw new Error("Unknown logical texture type "+t)}function ms(t,e,n){return`${t[0]}_${t[1]}_${e}_${n}`}class vs{constructor(t,e){this.variableNames=["A"];const n=new Array(t.length);for(let r=0;r<n.length;r++)n[r]=t[r]*e[r];this.outputShape=n,this.rank=n.length;const r=Ar(this.rank),o=function(t){const e=t.length;if(e>5)throw Error(`Tile for rank ${e} is not yet supported`);if(1===e)return`imod(resRC, ${t[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[];for(let e=0;e<t.length;e++)r.push(`imod(${n[e]}, ${t[e]})`);return r.join()}(t);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${o}));\n      }\n    `}}class ys{constructor(t,e){this.variableNames=["A"],this.outputShape=t,this.userCode=`\n      float unaryOperation(float x) {\n        ${e}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const Cs="if (isnan(x)) return x;",$s="return abs(x);",ws=Cs+"\n  return (x < 0.0) ? 0.0 : x;\n",bs=Cs+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",Rs="return (x >= 0.0) ? x : (exp(x) - 1.0);";const Is="return -x;",Es="return ceil(x);",As="return floor(x);",Ts="return exp(x);",Ss="return exp(x) - 1.0;",Os="return x;",Ns="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",ks="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",Fs="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n";class Ds{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${e}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class _s{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=t;const e=t.length,n=hr("rc",e),r=Ar(e),o=function(t,e){if(1===t)return"rc";let n="";for(let r=0;r<t;r++)n+=e[r],r<t-1&&(n+=",");return n}(e,n),s=n.slice(-2),i=e<=1?"rc":`vec2(${s.join(",")})`;this.userCode=`\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${o});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const{segment_util:Bs}=Je,Ms=nn,Ps=rn,Ls=on,Ws=Oe,Us={};function Vs(t,e=!1){if("linear"===t)return"return x;";if("relu"===t)return e?Ns:ws;if("elu"===t)return e?Fs:Rs;if("relu6"===t)return e?ks:bs;if("prelu"===t)return e?zr:Ur;throw new Error(`Activation ${t} has not been implemented for the WebGL backend.`)}class zs extends an{constructor(t){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.warnedAboutMemory=!1,this.warnedAboutCPUBackend=!1,this.pendingDeletes=0,this.disposed=!1,!n().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==t){const t=Sn(n().getNumber("WEBGL_VERSION"));this.binaryCache=((e=n().getNumber("WEBGL_VERSION"))in Us||(Us[e]={}),Us[e]),this.gpgpu=new Bo(t),this.canvas=t.canvas,this.gpgpuCreatedLocally=!0}else this.gpgpu=t,this.binaryCache={},this.gpgpuCreatedLocally=!1,this.canvas=t.gl.canvas;var e;this.textureManager=new ps(this.gpgpu),this.numMBBeforeWarning=null==n().global.screen?1024:n().global.screen.height*n().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new sn(this,Lt())}numDataIds(){return this.texData.numDataIds()+(this.cpuBackend?this.cpuBackend.numDataIds():0)-this.pendingDeletes}write(t,e,r){if((n().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||n().getBool("DEBUG"))&&this.checkNumericalProblems(t),"complex64"===r&&null!=t)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const o={};return this.texData.set(o,{shape:e,dtype:r,values:t,usage:Nn.UPLOAD}),o}move(t,e,r,o){if(n().getBool("DEBUG")&&this.checkNumericalProblems(e),"complex64"===o)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(t,{shape:r,dtype:o,values:e,usage:Nn.UPLOAD})}readSync(t){const e=this.texData.get(t),{values:n,dtype:r,complexTensors:o,slice:s,shape:i,isPacked:a}=e;if(null!=s){let e;e=a?new Ds(i,Os):new ys(i,Os);const n=this.runWebGLProgram(e,[{dataId:t,shape:i,dtype:r}],r),o=this.readSync(n.dataId);return this.disposeData(n.dataId),o}if(null!=n)return this.convertAndCacheOnCPU(t);if("string"===r)return n;const l=null!=this.activeTimers;let u,c;if(l&&(u=L()),"complex64"===r){c=Ve(o.real.dataSync(),o.imag.dataSync())}else c=this.getValuesFromTexture(t);return l&&(this.downloadWaitMs+=L()-u),this.convertAndCacheOnCPU(t,c)}async read(t){if(this.pendingRead.has(t)){const e=this.pendingRead.get(t);return new Promise(t=>e.push(t))}const e=this.texData.get(t),{values:r,shape:o,slice:s,dtype:i,complexTensors:a,isPacked:l}=e;if(null!=s){let e;e=l?new Ds(o,Os):new ys(o,Os);const n=this.runWebGLProgram(e,[{dataId:t,shape:o,dtype:i}],i),r=this.read(n.dataId);return this.disposeData(n.dataId),r}if(null!=r)return this.convertAndCacheOnCPU(t);if(!n().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===n().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let u,c,h=null;if("complex64"!==i&&n().get("WEBGL_BUFFER_SUPPORTED")){u=this.decode(t);const e=this.texData.get(u.dataId);h=this.gpgpu.createBufferFromTexture(e.texture,...Dn(o))}if(this.pendingRead.set(t,[]),"complex64"!==i&&await this.gpgpu.createAndWaitForFence(),"complex64"===i){const t=await Promise.all([a.real.data(),a.imag.data()]);c=Ve(t[0],t[1])}else if(null==h)c=this.getValuesFromTexture(t);else{const t=v(o);c=this.gpgpu.downloadFloat32MatrixFromBuffer(h,t)}null!=u&&this.disposeData(u.dataId);const d=this.convertAndCacheOnCPU(t,c),f=this.pendingRead.get(t);return this.pendingRead.delete(t),f.forEach(t=>t(d)),this.pendingDisposal.has(t)&&(this.pendingDisposal.delete(t),this.disposeData(t),this.pendingDeletes--),d}checkNumericalProblems(t){if(null!=t)for(let e=0;e<t.length;e++){const r=t[e];if(!Pn(r)){if(n().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${r} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${r} cannot be represented on this device.`)}}}getValuesFromTexture(t){const{shape:e,dtype:r,isPacked:o}=this.texData.get(t),s=v(e);if(n().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(t),r=this.texData.get(n.dataId),o=this.gpgpu.downloadMatrixFromPackedTexture(r.texture,...Dn(e)).subarray(0,s);return this.disposeData(n.dataId),o}const i=n().getBool("WEBGL_PACK")&&!0===o,a=i?Qn(e):e,l=i?new mo(a):new xo(a),u=this.runWebGLProgram(l,[{shape:a,dtype:r,dataId:t}],"float32"),c=this.texData.get(u.dataId),h=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(c.texture,c.texShape[0],c.texShape[1]).subarray(0,s);return this.disposeData(u.dataId),h}async time(t){const e=this.activeTimers,r=[];let o=!1;null==this.programTimersStack?(this.programTimersStack=r,o=!0):this.activeTimers.push(r),this.activeTimers=r,t();const s=m(this.activeTimers.map(t=>t.query)).filter(t=>null!=t),i=m(this.activeTimers.map(t=>t.name)).filter(t=>null!=t);this.activeTimers=e,o&&(this.programTimersStack=null);const a={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};if(n().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const t=await Promise.all(s);a.kernelMs=function(t){let e=0;for(let n=0;n<t.length;n++)e+=t[n];return e}(t),a.getExtraProfileInfo=()=>t.map((t,e)=>({name:i[e],ms:t})).map(t=>`${t.name}: ${t.ms}`).join(", ")}else a.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,a}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return n().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:L(),endMs:null}}endTimer(t){return n().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),t):(t.endMs=L(),t)}async getQueryTime(t){if(n().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(t);const e=t;return e.endMs-e.startMs}disposeData(t){if(this.pendingDisposal.has(t))return;if(this.pendingRead.has(t))return this.pendingDisposal.add(t),void this.pendingDeletes++;if(!this.texData.has(t))return;this.releaseGPUData(t);const{complexTensors:e}=this.texData.get(t);null!=e&&(e.real.dispose(),e.imag.dispose()),this.texData.delete(t)}releaseGPUData(t){const{texture:e,dtype:n,texShape:r,usage:o,isPacked:s,slice:i}=this.texData.get(t),a=i&&i.origDataId||t,l=this.dataRefCount.get(a);l>1?this.dataRefCount.set(a,l-1):(this.dataRefCount.delete(a),null!=e&&(this.numBytesInGPU-=this.computeBytes(r,n),this.textureManager.releaseTexture(e,r,o,s)));const u=this.texData.get(t);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(t){return this.uploadToGPU(t),this.texData.get(t).texture}getDataInfo(t){return this.texData.get(t)}getCPUBackend(){return n().getBool("WEBGL_CPU_FORWARD")?(null==this.cpuBackend&&(this.cpuBackend=Lt().findBackend("cpu")),this.cpuBackend):null}shouldExecuteOnCPU(t,e=128){const r=this.getCPUBackend();return this.warnedAboutCPUBackend||null!=r||n().getBool("IS_TEST")||(console.warn("Your application contains ops that are small enough to be executed on the CPU backend, however the CPU backend cannot be found. Consider importing the CPU backend (@tensorflow/tfjs-backend-cpu) for better performance."),this.warnedAboutCPUBackend=!0),null!=r&&t.every(t=>null==this.texData.get(t.dataId).texture&&v(t.shape)<e)}getGPGPUContext(){return this.gpgpu}complex(t,e){const n=this.makeOutput(t.shape,"complex64");return this.texData.get(n.dataId).complexTensors={real:Lt().keep(t.clone()),imag:Lt().keep(e.clone())},n}real(t){return this.texData.get(t.dataId).complexTensors.real.clone()}imag(t){return this.texData.get(t.dataId).complexTensors.imag.clone()}slice(t,e,r){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.slice(t,e,r);if(0===v(r))return Ct([],r,t.dtype);const{isPacked:o}=this.texData.get(t.dataId),s=Mt(t.shape,e,r);if(o||!s){const o=n().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new ds(r):new cs(r),s=o.getCustomSetupFunc(e);return this.compileAndRun(o,[t],null,s)}return this.uploadToGPU(t.dataId),this.shallowSlice(t,e,r)}shallowSlice(t,e,n){const r=this.texData.get(t.dataId),o=this.makeOutput(n,t.dtype),s=this.texData.get(o.dataId);Object.assign(s,r),s.shape=n,s.dtype=t.dtype;let i=Pt(e,t.strides);r.slice&&(i+=r.slice.flatOffset),s.slice={flatOffset:i,origDataId:r.slice&&r.slice.origDataId||t.dataId};const a=this.dataRefCount.get(s.slice.origDataId)||1;return this.dataRefCount.set(s.slice.origDataId,a+1),o}stridedSlice(t,e,n,r){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.stridedSlice(t,e,n,r);const o=Bt(e,n,r);if(o.some(t=>0===t))return Ct([],o);const s=new fs(e,r,o);return this.compileAndRun(s,[t])}reverse(t,e){const r=n().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new is(t.shape,e):new ss(t.shape,e);return this.compileAndRun(r,[t])}concat(t,e){if("complex64"===t[0].dtype){const n=t.map(t=>he(t)),r=t.map(t=>ce(t));return vt(this.concat(n,e),this.concat(r,e))}if(this.shouldExecuteOnCPU(t))return this.cpuBackend.concat(t,e);if(1===t.length)return t[0];if(t.length>n().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const n=Math.floor(t.length/2),r=this.concat(t.slice(0,n),e),o=this.concat(t.slice(n),e);return this.concat([r,o],e)}if(n().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&t[0].rank>1){const n=new qr(t.map(t=>t.shape),e);return this.compileAndRun(n,t)}const r=Qt(t.map(t=>t.shape),e),o=t.map(t=>t.as2D(-1,v(t.shape.slice(e)))),s=new Kr(o.map(t=>t.shape));return this.compileAndRun(s,o).reshape(r)}neg(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.neg(t);if(n().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Is,t.dtype);const e=new ys(t.shape,Is);return this.compileAndRun(e,[t])}batchMatMul(t,e,n,r){const o=n?t.shape[2]:t.shape[1],s=r?e.shape[1]:e.shape[2],i=n?t.shape[1]:t.shape[2],[a,,]=t.shape;if((1===o||1===s)&&i>1e3){n&&(t=Nt(t,[0,2,1])),r&&(e=Nt(e,[0,2,1]));const o=1===s?t:t.as3D(a,i,1),l=1===s?2:1,u=1===s?e.as3D(a,1,i):e;return this.multiply(o,u).sum(l,!0)}const l=it(t.dtype,e.dtype),u=new Go(t.shape,[a,o,s],n,r);return this.compileAndRun(u,[t,e],l)}fusedBatchMatMul({a:t,b:e,transposeA:n,transposeB:r,bias:o,activation:s,preluActivationWeights:i}){const a=n?t.shape[2]:t.shape[1],l=r?e.shape[1]:e.shape[2],[u,,]=t.shape,c=it(t.dtype,e.dtype),h=null!=o,d=null!=i,f=s?Vs(s,!0):null,p=new Go(t.shape,[u,a,l],n,r,h,f,d),g=[t,e];return o&&g.push(o),i&&g.push(i),this.compileAndRun(p,g,c)}multiply(t,e){if("complex64"===t.dtype){const n=this.texData.get(t.dataId),r=this.texData.get(e.dataId),o=new Mr(_r,t.shape,e.shape),s=new Mr(Br,t.shape,e.shape),i=[this.makeComplexComponentTensorInfo(t,n.complexTensors.real),this.makeComplexComponentTensorInfo(t,n.complexTensors.imag),this.makeComplexComponentTensorInfo(e,r.complexTensors.real),this.makeComplexComponentTensorInfo(e,r.complexTensors.imag)],a=this.compileAndRun(o,i),l=this.compileAndRun(s,i),u=this.complex(a,l);return a.dispose(),l.dispose(),u}if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.multiply(t,e);if(n().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,Wr,t.dtype);const r=new Vr(Wr,t.shape,e.shape);return this.compileAndRun(r,[t,e],t.dtype)}batchNorm(t,e,r,o,s,i){const a=[t,e,r];let l=null;null!=o&&(l=o.shape,a.push(o));let u=null;if(null!=s&&(u=s.shape,a.push(s)),n().getBool("WEBGL_PACK_NORMALIZATION")){const n=new Dr(t.shape,e.shape,r.shape,l,u,i);return this.compileAndRun(n,a)}const c=new Fr(t.shape,e.shape,r.shape,l,u,i);return this.compileAndRun(c,a)}localResponseNormalization4D(t,e,r,o,s){const i=n().getBool("WEBGL_PACK_NORMALIZATION")?new Uo(t.shape,e,r,o,s):new Lo(t.shape,e,r,o,s);return this.compileAndRun(i,[t])}LRNGrad(t,e,n,r,o,s,i){const a=new Wo(e.shape,r,o,s,i);return this.compileAndRun(a,[e,n,t])}tile(t,e){if("string"===t.dtype){const n=this.readSync(t.dataId).map(t=>U(t)),r=Jt(t.shape,t.dtype,n);return Ps(r,e)}const n=new vs(t.shape,e);return this.compileAndRun(n,[t])}pad(t,e,r){const o=n().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new qo(t.shape,e,r):new Ko(t.shape,e,r);return this.compileAndRun(o,[t])}gather(t,e,n){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.gather(t,e,n);const r=new Ro(t.shape,e.size,n);return this.compileAndRun(r,[t,e])}batchToSpaceND(t,e,n){p(t.rank<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");const r=e.reduce((t,e)=>t*e),o=Be(t.shape,e,r),s=Me(o.length,e.length),i=Pe(t.shape,e,r),a=Le(n,e.length),l=We(i,n,e.length);return Nt(t.reshape(o),s).reshape(i).slice(a,l)}spaceToBatchND(t,e,n){p(t.rank<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");const r=e.reduce((t,e)=>t*e),o=[[0,0]];o.push(...n);for(let n=1+e.length;n<t.shape.length;++n)o.push([0,0]);const s=t.pad(o),i=Be(s.shape,e,r,!1),a=Me(i.length,e.length,!1),l=Pe(s.shape,e,r,!1),u=Nt(s.reshape(i),a);return $t(u,l)}reduce(t,e,n){const r=t.shape[0],o=t.shape[1],s=le(o),i=new Zo({windowSize:s,inSize:o,batchSize:r},e),a=this.compileAndRun(i,[t],n);return 1===a.shape[1]?a:this.reduce(a,e,n)}argReduce(t,e,n=null){let r=t.shape[0],o=t.shape[1];null!=n&&(r=n.shape[0],o=n.shape[1]);const s=le(o),i=new ur({windowSize:s,inSize:o,batchSize:r},e,null==n),a=[t];null!=n&&a.push(n);const l=this.compileAndRun(i,a,"int32");return 1===l.shape[1]?l:this.argReduce(t,e,l)}argReducePacked(t,e,n=null){const r=null!=n?n.shape:t.shape,o=le(r[r.length-1]),s=new Or(r,o,e,null==n),i=null==n?[t]:[t,n],a=this.compileAndRun(s,i,"int32");return a.rank===t.rank?this.argReducePacked(t,e,a):a}sum(t,e){At("sum",e,t.rank);const[n,r]=It(t.shape,e),o=v(r),s=t.as2D(-1,o),i=at(t.dtype);return this.reduce(s,"sum",i).reshape(n)}prod(t,e){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.prod(t,e);const[n,r]=It(t.shape,e),o=v(r),s=t.as2D(-1,o),i=at(t.dtype);return this.reduce(s,"prod",i).reshape(n)}unsortedSegmentSum(t,e,n){let r=0;const o=Tt([r],t.rank);let s=t;null!=o&&(s=Nt(t,o),r=Ot(1,t.rank)[0]);const i=Bs.computeOutShape(s.shape,r,n),a=v([s.shape[r]]),l=s.as2D(-1,a),u=at(t.dtype);let c=this.segOpCompute(l,"unsortedSegmentSum",e,u,n).reshape(i);return null!=o&&(c=Nt(c,St(o))),c}segOpCompute(t,e,n,r,o){const s=t.shape[0],i=t.shape[1],a=Bs.segOpComputeOptimalWindowSize(i,o),l=new ls({windowSize:a,inSize:i,batchSize:s,numSegments:o},e),u=this.compileAndRun(l,[t,n],r);return u.shape[1]===o?u:(n=function(t,e,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");const o={start:t,stop:e,step:n,dtype:r};return dt.runKernelFunc(()=>{if(t===e||t<e&&n<0||e<t&&n>1)return fe([0],r);const o=P(Math.abs(Math.ceil((e-t)/n)),r);e<t&&1===n&&(n=-1),o[0]=t;for(let t=1;t<o.length;t++)o[t]=o[t-1]+n;return Re(o,r)},{},null,"Range",o)}(0,o).tile([i/a]),this.segOpCompute(u,e,n,r,o))}argMinMaxReduce(t,e,r){const o=[e];if(At("arg"+r.charAt(0).toUpperCase()+r.slice(1),o,t.rank),!n().getBool("WEBGL_PACK_REDUCE")||t.rank<=2){const[e,n]=It(t.shape,o),s=v(n),i=t.as2D(-1,s);return this.argReduce(i,r).reshape(e)}return this.argReducePacked(t,r)}argMin(t,e){return this.argMinMaxReduce(t,e,"min")}argMax(t,e){return this.argMinMaxReduce(t,e,"max")}cumsum(t,e,n,r){if(e!==t.rank-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${t.rank-1} but got axis=`+e);const o=t.shape[e];let s=t;for(let e=0;e<=Math.ceil(Math.log2(o))-1;e++){const n=new lo(t.shape,!1,r),o=n.getCustomSetupFunc(e),i=s;s=this.compileAndRun(n,[s],s.dtype,o),i.dispose()}if(n){const e=new lo(t.shape,n,r),o=s;s=this.compileAndRun(e,[s]),o.dispose()}return s}equal(t,e){if(n().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(equal(a, b));\n","bool");const r=new Vr("return float(a == b);",t.shape,e.shape);return this.compileAndRun(r,[t,e],"bool")}notEqual(t,e){if(n().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(notEqual(a, b));\n","bool");const r=new Vr("return float(a != b);",t.shape,e.shape);return this.compileAndRun(r,[t,e],"bool")}less(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.less(t,e);if(n().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(lessThan(a, b));\n","bool");const r=new Vr("return float(a < b);",t.shape,e.shape);return this.compileAndRun(r,[t,e],"bool")}lessEqual(t,e){if(n().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(lessThanEqual(a, b));\n","bool");const r=new Vr("return float(a <= b);",t.shape,e.shape);return this.compileAndRun(r,[t,e],"bool")}greater(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.greater(t,e);if(n().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(greaterThan(a, b));\n","bool");const r=new Vr("return float(a > b);",t.shape,e.shape);return this.compileAndRun(r,[t,e],"bool")}greaterEqual(t,e){if(n().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(greaterThanEqual(a, b));\n","bool");const r=new Vr("return float(a >= b);",t.shape,e.shape);return this.compileAndRun(r,[t,e],"bool")}logicalNot(t){const e=new ys(t.shape,"return float(!(x >= 1.0));");return this.compileAndRun(e,[t])}logicalAnd(t,e){if(n().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n","bool");const r=new Vr("return float(a >= 1.0 && b >= 1.0);",t.shape,e.shape);return this.compileAndRun(r,[t,e],"bool")}logicalOr(t,e){if(n().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n","bool");const r=new Vr("return float(a >= 1.0 || b >= 1.0);",t.shape,e.shape);return this.compileAndRun(r,[t,e],"bool")}select(t,e,n){const r=new us(t.rank,e.shape,e.rank);return this.compileAndRun(r,[t,e,n],it(e.dtype,n.dtype))}where(t){Ue("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const e=t.dataSync();return Ws(t.shape,e)}topk(t,e,n){const r=t.dataSync();return Ls(r,t.shape,t.dtype,e)}min(t,e){At("min",e,t.rank);const[n,r]=It(t.shape,e),o=v(r),s=t.as2D(-1,o);return this.reduce(s,"min",s.dtype).reshape(n)}minimum(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.minimum(t,e);const r=n().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Gr("\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Vr("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",t.shape,e.shape);return this.compileAndRun(r,[t,e])}mod(t,e){const r=n().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Gr("\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Vr("if (b == 0.0) return NAN;\n  return mod(a, b);",t.shape,e.shape);return this.compileAndRun(r,[t,e])}maximum(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.maximum(t,e);const r=n().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Gr("\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Vr("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",t.shape,e.shape);return this.compileAndRun(r,[t,e])}all(t,e){At("all",e,t.rank);const[n,r]=It(t.shape,e),o=v(r),s=t.as2D(-1,o);return this.reduce(s,"all",s.dtype).reshape(n)}any(t,e){At("any",e,t.rank);const[n,r]=It(t.shape,e),o=v(r),s=t.as2D(-1,o);return this.reduce(s,"any",s.dtype).reshape(n)}floorDiv(t,e){if(n().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n","int32");const r=new Vr("\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",t.shape,e.shape);return this.compileAndRun(r,[t,e],"int32")}add(t,e){if("complex64"===t.dtype&&"complex64"===e.dtype)return this.complexSeparableBinaryOp(t,e,Pr);if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.add(t,e);const r=it(t.dtype,e.dtype);if(n().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,Pr,r);const o=new Vr(Pr,t.shape,e.shape);return this.compileAndRun(o,[t,e],r)}packedUnaryOp(t,e,n){const r=new Ds(t.shape,e);return this.compileAndRun(r,[t],n)}packedBinaryOp(t,e,n,r,o=!1){const s=new Gr(n,t.shape,e.shape,o);return this.compileAndRun(s,[t,e],r)}complexSeparableBinaryOp(t,e,n){const r=this.texData.get(t.dataId),o=this.texData.get(e.dataId),[s,i]=[[r.complexTensors.real,o.complexTensors.real],[r.complexTensors.imag,o.complexTensors.imag]].map(r=>{const[o,s]=r,i=this.makeComplexComponentTensorInfo(t,o),a=this.makeComplexComponentTensorInfo(e,s),l=new Vr(n,t.shape,e.shape);return this.compileAndRun(l,[i,a],it(o.dtype,s.dtype))}),a=this.complex(s,i);return s.dispose(),i.dispose(),a}makeComplexComponentTensorInfo(t,e){return{dataId:e.dataId,dtype:e.dtype,shape:t.shape}}addN(t){if(1===t.length)return t[0];if(t.length>n().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const e=Math.floor(t.length/2),n=this.addN(t.slice(0,e)),r=this.addN(t.slice(e));return this.addN([n,r])}const e=t.map(t=>t.dtype).reduce((t,e)=>it(t,e)),r=t.map(t=>t.shape),o=n().getBool("WEBGL_PACK")?new lr(t[0].shape,r):new ar(t[0].shape,r);return this.compileAndRun(o,t,e)}subtract(t,e){if("complex64"===t.dtype&&"complex64"===e.dtype)return this.complexSeparableBinaryOp(t,e,Lr);if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.subtract(t,e);const r=it(t.dtype,e.dtype);if(n().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,Lr,t.dtype);const o=new Vr(Lr,t.shape,e.shape);return this.compileAndRun(o,[t,e],r)}pow(t,e){const r=n().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Gr("\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Vr("\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nif (b == 0.0) {\n  return 1.0;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",t.shape,e.shape),o=it(t.dtype,e.dtype);return this.compileAndRun(r,[t,e],o)}ceil(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.ceil(t);if(n().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Es,t.dtype);const e=new ys(t.shape,Es);return this.compileAndRun(e,[t])}floor(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.floor(t);if(n().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,As,t.dtype);const e=new ys(t.shape,As);return this.compileAndRun(e,[t])}sign(t){const e=new ys(t.shape,"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n");return this.compileAndRun(e,[t])}isNaN(t){const e=new ys(t.shape,"return float(isnan(x));");return this.compileAndRun(e,[t],"bool")}isInf(t){const e=new ys(t.shape,"return float(isinf(x));");return this.compileAndRun(e,[t],"bool")}isFinite(t){const e=new ys(t.shape,"return float(!isnan(x) && !isinf(x));");return this.compileAndRun(e,[t],"bool")}round(t){const e=new ys(t.shape,"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n");return this.compileAndRun(e,[t])}exp(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.exp(t);if(n().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Ts,t.dtype);const e=new ys(t.shape,Ts);return this.compileAndRun(e,[t])}expm1(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.expm1(t);if(n().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Ss,t.dtype);const e=new ys(t.shape,Ss);return this.compileAndRun(e,[t])}softmax(t,e){const n=I([e],t.shape),r=kt(t,n),o=Et(r.shape,n),s=this.subtract(t,r.reshape(o)),i=this.exp(s),a=this.sum(i,n).reshape(o);return ee(i,a)}log(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.log(t);if(n().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",t.dtype);const e=new ys(t.shape,"if (x < 0.0) return NAN;\n  return log(x);");return this.compileAndRun(e,[t])}log1p(t){const e=new ys(t.shape,"return log(1.0 + x);");return this.compileAndRun(e,[t])}sqrt(t){const e=new ys(t.shape,"return sqrt(x);");return this.compileAndRun(e,[t])}rsqrt(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.rsqrt(t);const e=new ys(t.shape,"return inversesqrt(x);");return this.compileAndRun(e,[t])}reciprocal(t){const e=new ys(t.shape,"return 1.0 / x;");return this.compileAndRun(e,[t])}relu(t){let e;return e=n().getBool("WEBGL_PACK")?new Ds(t.shape,Ns):new ys(t.shape,ws),this.compileAndRun(e,[t])}relu6(t){let e;return e=n().getBool("WEBGL_PACK")?new Ds(t.shape,ks):new ys(t.shape,bs),this.compileAndRun(e,[t])}prelu(t,e){const r=n().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Gr(zr,t.shape,e.shape):new Vr(Ur,t.shape,e.shape);return this.compileAndRun(r,[t,e])}elu(t){if(n().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Fs,t.dtype);const e=new ys(t.shape,Rs);return this.compileAndRun(e,[t])}eluDer(t,e){const r=n().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Gr("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",t.shape,e.shape):new Vr("return (b >= 1.0) ? a : a * (b + 1.0);",t.shape,e.shape);return this.compileAndRun(r,[t,e])}selu(t){const e=new ys(t.shape,"\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = 1.7580993408473768;\n  float scale = 1.0507009873554805;\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n");return this.compileAndRun(e,[t])}int(t){const e=new ys(t.shape,"return float(int(x));");return this.compileAndRun(e,[t],"int32")}clip(t,e,r){let o;o=n().getBool("WEBGL_PACK_CLIP")?new Xr(t.shape):new Hr(t.shape);const s=o.getCustomSetupFunc(e,r);return this.compileAndRun(o,[t],null,s)}abs(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.abs(t);if(n().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,$s,t.dtype);const e=new ys(t.shape,$s);return this.compileAndRun(e,[t])}complexAbs(t){const e=this.texData.get(t.dataId),n=new jr(t.shape),r=[this.makeComplexComponentTensorInfo(t,e.complexTensors.real),this.makeComplexComponentTensorInfo(t,e.complexTensors.imag)];return this.compileAndRun(n,r)}sigmoid(t){const e=new ys(t.shape,"return 1.0 / (1.0 + exp(-1.0 * x));");return this.compileAndRun(e,[t])}softplus(t){const e=new ys(t.shape,"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n");return this.compileAndRun(e,[t])}sin(t){const e=new ys(t.shape,"if (isnan(x)) return x;\n  return sin(x);\n");return this.compileAndRun(e,[t])}cos(t){const e=new ys(t.shape,"if (isnan(x)) return x;\n  return cos(x);\n");return this.compileAndRun(e,[t])}tan(t){const e=new ys(t.shape,"return tan(x);");return this.compileAndRun(e,[t])}asin(t){const e=new ys(t.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n");return this.compileAndRun(e,[t])}acos(t){const e=new ys(t.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n");return this.compileAndRun(e,[t])}atan(t){const e=new ys(t.shape,"if (isnan(x)) return x;\n  return atan(x);\n");return this.compileAndRun(e,[t])}atan2(t,e){const r=n().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Gr("\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Vr("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",t.shape,e.shape);return this.compileAndRun(r,[t,e])}sinh(t){const e=new ys(t.shape,"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n");return this.compileAndRun(e,[t])}cosh(t){const e=new ys(t.shape,"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n");return this.compileAndRun(e,[t])}tanh(t){const e=new ys(t.shape,"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n");return this.compileAndRun(e,[t])}asinh(t){const e=new ys(t.shape,"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));");return this.compileAndRun(e,[t])}acosh(t){const e=new ys(t.shape,"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\n  return log(x + sqrt(x * x - 1.0));");return this.compileAndRun(e,[t])}atanh(t){const e=new ys(t.shape,"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;");return this.compileAndRun(e,[t])}erf(t){const e=new ys(t.shape,'\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = 0.3275911;\n  float a1 = 0.254829592;\n  float a2 = -0.284496736;\n  float a3 = 1.421413741;\n  float a4 = -1.453152027;\n  float a5 = 1.061405429;\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n');return this.compileAndRun(e,[t])}step(t,e){const n=new ys(t.shape,function(t=0){return`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t});\n  `}(e));return this.compileAndRun(n,[t])}conv2dByMatMul(t,e,r,o,s,i){const a=t.shape,l=this.texData.get(t.dataId),u=r.inChannels,c=a[0]*a[1]*a[2],h=r.outChannels,d="channelsLast"===r.dataFormat,f=(1===c||1===h)&&u>1e3,g=a[2]%2!=0&&!!l.isPacked;if(f||!n().getBool("WEBGL_LAZILY_UNPACK")||!n().getBool("WEBGL_PACK_BINARY_OPERATIONS")||!g){const n=d?a[0]*a[1]*a[2]:a[0]*a[2]*a[3],l=this.reshape(t,[1,n,r.inChannels]),u=this.reshape(e,[1,r.inChannels,r.outChannels]);return this.reshape(this.fusedBatchMatMul({a:l,b:u,transposeA:!1,transposeB:!1,bias:o,activation:s,preluActivationWeights:i}),r.outShape)}const x=d?a[0]*a[1]*(a[2]+1):a[0]*a[2]*(a[3]+1),m={dataId:t.dataId,shape:[1,x,r.inChannels],dtype:t.dtype},v=l.shape;l.shape=l.shape.slice(),l.shape[l.shape.length-2]++,p(Jn(l.shape,m.shape),()=>`packed reshape ${l.shape} to ${m.shape} isn't free`);const y=this.reshape(e,[1,r.inChannels,r.outChannels]),C=this.fusedBatchMatMul({a:m,b:y,transposeA:!1,transposeB:!1,bias:o,activation:s,preluActivationWeights:i}),$=this.texData.get(C.dataId);return p($.isPacked,()=>"batchMatMul result is expected to be packed"),l.shape=v,$.shape=r.outShape,Lt().makeTensorFromDataId(C.dataId,r.outShape,C.dtype)}conv2dWithIm2Row(t,e,n,r,o,s){const{filterWidth:i,filterHeight:a,inChannels:l,outWidth:u,outHeight:c,dataFormat:h}=n,d="channelsLast"===h,f=i*a*l,p=c*u,g=[f,p],x=t.squeeze([0]),m=e.reshape([1,f,-1]),v=new Po(g,x.shape,n),y=this.compileAndRun(v,[x]).reshape([1,g[0],g[1]]),C=null!=r,$=null!=s,w=o?Vs(o,!0):null,b=new Go(y.shape,[1,p,n.outChannels],!0,!1,C,w,$),R=[y,m];r&&R.push(r),$&&R.push(s);const I=this.compileAndRun(b,R);return d?I.reshape([1,c,u,n.outChannels]):I.reshape([1,n.outChannels,c,u])}fusedConv2d({input:t,filter:e,convInfo:r,bias:o,activation:s,preluActivationWeights:i}){if(1===r.filterHeight&&1===r.filterWidth&&1===r.dilationHeight&&1===r.dilationWidth&&1===r.strideHeight&&1===r.strideWidth&&("SAME"===r.padInfo.type||"VALID"===r.padInfo.type))return this.conv2dByMatMul(t,e,r,o,s,i);if(n().getBool("WEBGL_CONV_IM2COL")&&1===t.shape[0])return this.conv2dWithIm2Row(t,e,r,o,s,i);const a=null!=o,l=null!=i,u=s?Vs(s,!1):null,c=new ro(r,a,u,l),h=[t,e];return o&&h.push(o),i&&h.push(i),this.compileAndRun(c,h)}conv2d(t,e,r){if(1===r.filterHeight&&1===r.filterWidth&&1===r.dilationHeight&&1===r.dilationWidth&&1===r.strideHeight&&1===r.strideWidth&&("SAME"===r.padInfo.type||"VALID"===r.padInfo.type))return this.conv2dByMatMul(t,e,r);if(n().getBool("WEBGL_CONV_IM2COL")&&1===t.shape[0])return this.conv2dWithIm2Row(t,e,r);const o=new ro(r);return this.compileAndRun(o,[t,e])}conv2dDerInput(t,e,n){const r=new Zr(n);return this.compileAndRun(r,[t,e])}conv2dDerFilter(t,e,n){const r=new Qr(n);return this.compileAndRun(r,[t,e])}fusedDepthwiseConv2D({input:t,filter:e,convInfo:r,bias:o,activation:s,preluActivationWeights:i}){const a=n().getBool("WEBGL_PACK_DEPTHWISECONV")&&r.strideWidth<=2&&r.outChannels/r.inChannels==1,l=s?Vs(s,a):null,u=[t,e],c=null!=o,h=null!=i;let d;return c&&u.push(o),h&&u.push(i),a?(d=new io(r,c,l,h),this.compileAndRun(d,u)):(d=new so(r,c,l,h),this.compileAndRun(d,u))}depthwiseConv2D(t,e,r){let o;return n().getBool("WEBGL_PACK_DEPTHWISECONV")&&r.strideWidth<=2&&r.outChannels/r.inChannels==1?(o=new io(r),this.compileAndRun(o,[t,e])):(o=new so(r),this.compileAndRun(o,[t,e]))}depthwiseConv2DDerInput(t,e,n){const r=new no(n);return this.compileAndRun(r,[t,e])}depthwiseConv2DDerFilter(t,e,n){const r=new eo(n);return this.compileAndRun(r,[t,e])}conv3d(t,e,n){const r=new oo(n);return this.compileAndRun(r,[t,e])}conv3dDerInput(t,e,n){const r=new to(n);return this.compileAndRun(r,[t,e])}conv3dDerFilter(t,e,n){const r=new Jr(n);return this.compileAndRun(r,[t,e])}maxPool(t,e){const n=new Yo(e,"max",!1);return this.compileAndRun(n,[t])}avgPool(t,e){const n=new Yo(e,"avg",!1);return this.compileAndRun(n,[t],"float32")}maxPoolBackprop(t,e,n,r){const o=new Yo(r,"max",!0),s=this.compileAndRun(o,[e]),i=new Vo(r),a=this.compileAndRun(i,[t,s],e.dtype);return s.dispose(),a}avgPoolBackprop(t,e,n){const r=new Nr(n);return this.compileAndRun(r,[t],e.dtype)}cast(t,e){return Ye(t,e,this)}unstack(t,e){const n=t.shape[e],r=new Array(t.rank-1);let o=0;for(let n=0;n<t.rank;n++)n!==e&&(r[o++]=t.shape[n]);const s=new Array(t.rank).fill(0),i=t.shape.slice();i[e]=1;const a=new Array(n);for(let n=0;n<a.length;n++)s[e]=n,a[n]=this.slice(t,s,i).reshape(r);return a}avgPool3d(t,e){const n=new Qo(e,"avg",!1);return this.compileAndRun(n,[t],"float32")}avgPool3dBackprop(t,e,n){const r=new kr(n);return this.compileAndRun(r,[t],e.dtype)}maxPool3d(t,e){const n=new Qo(e,"max",!1);return this.compileAndRun(n,[t],"float32")}maxPool3dBackprop(t,e,n,r){const o=new Qo(r,"max",!0),s=this.compileAndRun(o,[e]),i=new zo(r),a=this.compileAndRun(i,[t,s],e.dtype);return s.dispose(),a}reshape(t,e){const n=this.texData.get(t.dataId);if(n.isPacked&&!Jn(t.shape,e)&&(null===n.texture||!Jn(n.shape,e))){const n=this.packedReshape(t,e);return Lt().makeTensorFromDataId(n.dataId,n.shape,n.dtype)}return Qe(t,e)}resizeBilinear(t,e,r,o){const s=n().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new ns(t.shape,e,r,o):new es(t.shape,e,r,o);return this.compileAndRun(s,[t],"float32")}resizeBilinearBackprop(t,e,n){const r=new ts(t,e,n);return this.compileAndRun(r,[t])}resizeNearestNeighbor(t,e,n,r){const o=new os(t.shape,e,n,r);return this.compileAndRun(o,[t])}resizeNearestNeighborBackprop(t,e,n){const r=new rs(t,e,n);return this.compileAndRun(r,[t])}multinomial(t,e,n,r){const o=e?t:Ae(t),s=o.shape[0],i=o.shape[1],a=new Ho(s,i,n),l=a.getCustomSetupFunc(r);return this.compileAndRun(a,[o],"int32",l)}oneHot(t,e,n,r){const o=new Xo(t.size,e,n,r);return this.compileAndRun(o,[t])}diag(t){const e=new go(t.size);return this.compileAndRun(e,[t])}cropAndResize(t,e,n,r,o,s){const i=new ao(t.shape,e.shape,r,o,s);return this.compileAndRun(i,[t,e,n],"float32")}depthToSpace(t,e,n){p(e>1,()=>"blockSize should be > 1 for depthToSpace, but was: "+e);const r=t.shape[0],o="NHWC"===n?t.shape[1]:t.shape[2],s="NHWC"===n?t.shape[2]:t.shape[3],i="NHWC"===n?t.shape[3]:t.shape[1],a=o*e,l=s*e,u=i/(e*e),c=new po("NHWC"===n?[r,a,l,u]:[r,u,a,l],e,n);return this.compileAndRun(c,[t])}split(t,e,n){return Ms(t,e,n)}scatterND(t,e,n){const{sliceRank:r,numUpdates:o,sliceSize:s,strides:i,outputSize:a}=_t(0,t,n),l=[a/s,s],u=t.reshape([o,r]),c=e.reshape([o,s]);if(0===a)return Qe(Ct([]),n);const h=de(0),d=new as(o,r,u.rank,c.rank,i,l);return this.compileAndRun(d,[c,u,h]).reshape(n)}sparseToDense(t,e,n,r){const{sliceRank:o,numUpdates:s,strides:i,outputSize:a}=_t(0,t,n),l=new as(s,o,t.rank,e.rank,i,[a,1],!1);return this.compileAndRun(l,[e,t,r]).reshape(n)}fft(t){return this.fftImpl(t,!1)}ifft(t){return this.fftImpl(t,!0)}fftImpl(t,e){const n=this.texData.get(t.dataId),r=new wo(Co,t.shape,e),o=new wo($o,t.shape,e),s=[this.makeComplexComponentTensorInfo(t,n.complexTensors.real),this.makeComplexComponentTensorInfo(t,n.complexTensors.imag)],i=this.compileAndRun(r,s),a=this.compileAndRun(o,s),l=this.complex(i,a).as2D(t.shape[0],t.shape[1]);return i.dispose(),a.dispose(),l}gatherND(t,e){const n=e.shape,r=n[n.length-1],[o,s,i,a]=Ft(t,e),l=e.reshape([s,r]),u=t.reshape([t.size/i,i]),c=new Io(r,a,[s,i]);return this.compileAndRun(c,[u,l]).reshape(o)}fill(t,e,n){if("string"===(n=n||k(e))){const r=T(n,v(t));return r.fill(e),Lt().makeTensor(r,t,n,this)}{const r=new bo(t,e),o=r.getCustomSetupFunc(e);return this.compileAndRun(r,[],n,o)}}onesLike(t){if("string"===t.dtype)throw new Error("onesLike is not supported under string dtype");return this.fill(t.shape,1,t.dtype)}zerosLike(t){return this.fill(t.shape,"string"===t.dtype?"":0,t.dtype)}linspace(t,e,n){return Ze(t,e,n)}makeTensorInfo(t,e){const n=this.write(null,t,e);return this.texData.get(n).usage=null,{dataId:n,shape:t,dtype:e}}makeOutput(t,e){const{dataId:n}=this.makeTensorInfo(t,e);return Lt().makeTensorFromDataId(n,t,e,this)}unpackTensor(t){const e=new _s(t.shape);return this.runWebGLProgram(e,[t],t.dtype)}packTensor(t){const e=new jo(t.shape);return this.runWebGLProgram(e,[t],t.dtype,null,!0)}packedReshape(t,e){const n=[qn(t.shape),...Yn(t.shape)],r={dtype:t.dtype,shape:n,dataId:t.dataId},o=[qn(e),...Yn(e)],s=new Jo(o,n),i=this.runWebGLProgram(s,[r],t.dtype,null,!0);return{dataId:i.dataId,shape:e,dtype:i.dtype}}decode(t){const e=this.texData.get(t),{isPacked:n,shape:r,dtype:o}=e,s=Qn(r);let i;i=n?new fo(s):new ho(s);return{dtype:o,shape:r,dataId:this.runWebGLProgram(i,[{shape:s,dtype:o,dataId:t}],o,null,!0).dataId}}runWebGLProgram(t,e,r,o,s=!1){const i=this.makeTensorInfo(t.outputShape,r),a=this.texData.get(i.dataId);if(t.packedOutput&&(a.isPacked=!0),t.outPackingScheme===On.DENSE){const e=Dn(t.outputShape);a.texShape=e.map(t=>2*t)}if(null!=t.outTexUsage&&(a.usage=t.outTexUsage),0===v(i.shape))return a.values=A(i.dtype,0),i;const l=[],u=e.map(e=>{if("complex64"===e.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let r=this.texData.get(e.dataId);if(null==r.texture){if(!t.packedInputs&&v(e.shape)<=n().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:e.shape,texData:null,isUniform:!0,uniformValues:r.values};t.packedInputs&&(r.isPacked=!0,r.shape=e.shape)}else if(!!r.isPacked!=!!t.packedInputs)e=r.isPacked?this.unpackTensor(e):this.packTensor(e),l.push(e),r=this.texData.get(e.dataId);else if(r.isPacked&&!Jn(r.shape,e.shape)){const t=e,n=e.shape;e.shape=r.shape,e=this.packedReshape(e,n),l.push(e),r=this.texData.get(e.dataId),t.shape=n}return this.uploadToGPU(e.dataId),{shape:e.shape,texData:r,isUniform:!1}});this.uploadToGPU(i.dataId);const c={shape:i.shape,texData:a,isUniform:!1},h=function(t,e,n){let r="";e.concat(n).forEach(t=>{const e=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0,n=t.isUniform?"uniform":t.texData.texShape;r+=`${t.shape}_${n}_${e}`});const o=t.userCode;let s=t.constructor.name;return s+="_"+r+"_"+o,s}(t,u,c),d=this.getAndSaveBinary(h,()=>function(t,e,r,o){const s=e.userCode,i=r.map((t,n)=>{const r={logicalShape:t.shape,texShape:t.isUniform?null:t.texData.texShape,isUniform:t.isUniform,isPacked:!t.isUniform&&t.texData.isPacked,flatOffset:null};return null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0&&(r.flatOffset=t.texData.slice.flatOffset),{name:e.variableNames[n],shapeInfo:r}}),a=i.map(t=>t.shapeInfo),l={logicalShape:o.shape,texShape:o.texData.texShape,isUniform:!1,isPacked:o.texData.isPacked,flatOffset:null},u=mr(i,l,s,e.packedInputs),c=t.createProgram(u);let h=null;const d=t.getUniformLocation(c,"NAN",!1);1===n().getNumber("WEBGL_VERSION")&&(h=t.getUniformLocation(c,"INFINITY",!1));const f={};for(let n=0;n<e.variableNames.length;n++){const r=e.variableNames[n],o=!1;f[r]=t.getUniformLocation(c,r,o),f["offset"+r]=t.getUniformLocation(c,"offset"+r,o)}return{program:e,source:u,webGLProgram:c,uniformLocations:f,inShapeInfos:a,outShapeInfo:l,infLoc:h,nanLoc:d}}(this.gpgpu,t,u,c)),f=null!=this.activeTimers;let p;if(f&&(p=this.startTimer()),function(t,e,r,o,s){Mo(e.inShapeInfos,r),Mo([e.outShapeInfo],[o]);const i=o.texData.texture,a=o.texData.texShape;o.texData.isPacked?t.setOutputPackedMatrixTexture(i,a[0],a[1]):t.setOutputMatrixTexture(i,a[0],a[1]),t.setProgram(e.webGLProgram),1===n().getNumber("WEBGL_VERSION")&&null!==e.infLoc&&t.gl.uniform1f(e.infLoc,1/0),null!==e.nanLoc&&t.gl.uniform1f(e.nanLoc,NaN),r.forEach((n,r)=>{const o=e.program.variableNames[r],s=e.uniformLocations[o],i=e.uniformLocations["offset"+o];if(null!=s)if(n.isUniform)if(v(n.shape)<2)t.gl.uniform1f(s,n.uniformValues[0]);else{let e=n.uniformValues;e instanceof Float32Array||(e=new Float32Array(e)),t.gl.uniform1fv(s,e)}else null!=n.texData.slice&&null!=i&&t.gl.uniform1i(i,n.texData.slice.flatOffset),t.setInputMatrixTexture(n.texData.texture,s,r)}),null!=s&&s(t,e.webGLProgram),t.executeProgram()}(this.gpgpu,d,u,c,o),l.forEach(t=>this.disposeData(t.dataId)),f&&(p=this.endTimer(p),this.activeTimers.push({name:t.constructor.name,query:this.getQueryTime(p)})),!n().getBool("WEBGL_LAZILY_UNPACK")&&a.isPacked&&!1===s){const t=this.unpackTensor(i);return this.disposeData(i.dataId),t}return i}compileAndRun(t,e,n,r,o=!1){n=n||e[0].dtype;const s=this.runWebGLProgram(t,e,n,r,o);return Lt().makeTensorFromDataId(s.dataId,s.shape,s.dtype)}getAndSaveBinary(t,e){return t in this.binaryCache||(this.binaryCache[t]=e()),this.binaryCache[t]}getTextureManager(){return this.textureManager}dispose(){if(!this.disposed){if(!n().getBool("IS_TEST")){Object.keys(this.binaryCache).forEach(t=>{this.gpgpu.deleteProgram(this.binaryCache[t].webGLProgram),delete this.binaryCache[t]})}this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}}floatPrecision(){var t,e;return null==this.floatPrecisionValue&&(this.floatPrecisionValue=(t=()=>{if(!n().get("WEBGL_RENDER_FLOAT32_ENABLED")){const t=n().getBool("DEBUG");n().set("DEBUG",!1);const e=this.abs(de(1e-8)).dataSync()[0];if(n().set("DEBUG",t),e>0)return 32}return 16},dt.tidy(t,e))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(t){const e=this.texData.get(t),{shape:r,dtype:o,values:s,texture:i,usage:a,isPacked:l}=e;if(null!=i)return;const u=null!=this.activeTimers;let c;u&&(c=L());let h=e.texShape;if(null==h&&(h=function(t,e=!1){let r=n().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e&&(r*=2,1===(t=t.map((e,n)=>n>=t.length-2?f(t[n]):t[n])).length&&(t=[2,t[0]])),2!==t.length){const e=E(t);t=e.newShape}let o=v(t);if(t.length<=1&&o<=r)return[1,o];if(2===t.length&&t[0]<=r&&t[1]<=r)return t;if(3===t.length&&t[0]*t[1]<=r&&t[2]<=r)return[t[0]*t[1],t[2]];if(3===t.length&&t[0]<=r&&t[1]*t[2]<=r)return[t[0],t[1]*t[2]];if(4===t.length&&t[0]*t[1]*t[2]<=r&&t[3]<=r)return[t[0]*t[1]*t[2],t[3]];if(4===t.length&&t[0]<=r&&t[1]*t[2]*t[3]<=r)return[t[0],t[1]*t[2]*t[3]];if(e){const e=qn(t);let n=2,r=2;return t.length&&([n,r]=Yn(t)),o=e*(n/2)*(r/2),w(o).map(t=>2*t)}return w(o)}(r,l),e.texShape=h),null!=s){const t=Qn(r);let n,i=h[1],a=h[0];const d=s instanceof Uint8Array;l?([i,a]=_n(h[0],h[1]),n=new yo(t,[a,i],d)):n=new vo(t,[a,i],d);const f=this.makeTensorInfo([a,i],o);this.texData.get(f.dataId).usage=d?Nn.PIXELS:Nn.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(f.dataId),i,a,s);const p=!0,g=this.runWebGLProgram(n,[f],o,null,p),x=this.texData.get(g.dataId);e.texture=x.texture,e.texShape=x.texShape,e.isPacked=x.isPacked,e.usage=x.usage,this.disposeData(f.dataId),this.texData.delete(g.dataId),e.values=null,u&&(this.uploadWaitMs+=L()-c)}else{const t=this.acquireTexture(h,a,o,l);e.texture=t}}convertAndCacheOnCPU(t,e){const n=this.texData.get(t),{dtype:r}=n;return this.releaseGPUData(t),null!=e&&(n.values=function(t,e){if("float32"===e||"complex64"===e)return t;if("int32"===e||"bool"===e){const n="int32"===e?new Int32Array(t.length):new Uint8Array(t.length);for(let e=0;e<n.length;++e)n[e]=Math.round(t[e]);return n}throw new Error("Unknown dtype "+e)}(e,r)),n.values}acquireTexture(t,e,n,r){if(this.numBytesInGPU+=this.computeBytes(t,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const t=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${t} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(t,e,r)}computeBytes(t,e){return t[0]*t[1]*O(e)}}en()&&Wt("webgl",()=>new zs,2);const{maxImpl:Gs,transposeImpl:Hs}=In;function Xs(t,e,n){const r=n.texData.get(t.dataId);return!r.isPacked||Jn(t.shape,e)||null!==r.texture&&Jn(r.shape,e)?{dataId:t.dataId,shape:e,dtype:t.dtype}:function(t,e,n){const r=[qn(t.shape),...Yn(t.shape)],o={dtype:t.dtype,shape:r,dataId:t.dataId},s=[qn(e),...Yn(e)],i=new Jo(s,r),a=n.runWebGLProgram(i,[o],t.dtype,null,!0);return{dataId:a.dataId,shape:e,dtype:a.dtype}}(t,e,n)}function js(t,e,n,r){const o=v(e),s=Xs(t,[v(t.shape)/o,o],r),i=function t(e,n,r,o){const[s,i]=e.shape,a=le(i),l=new Zo({windowSize:a,inSize:i,batchSize:s},r),u=o.runWebGLProgram(l,[e],n);return 1===u.shape[1]?u:t(u,n,r,o)}(s,t.dtype,"max",r);return s.dataId!==t.dataId&&r.disposeData(s.dataId),Xs(i,n,r)}class Ks{constructor(t,e){this.variableNames=["A"];const n=new Array(t.length);for(let r=0;r<n.length;r++)n[r]=t[e[r]];this.outputShape=n,this.rank=n.length;const r=Ar(this.rank),o=function(t){const e=t.length;if(e>6)throw Error(`Transpose for rank ${e} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(e);for(let e=0;e<t.length;e++)r[t[e]]=n[e];return r.join()}(e);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${o}));\n    }\n    `}}class qs{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(t.length);for(let r=0;r<n.length;r++)n[r]=t[e[r]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=Ar(this.rank),o=cr("rc",this.rank),s=new Array(this.rank);for(let t=0;t<e.length;t++)s[e[t]]=o[t];const i=`vec2(${s.slice(-2).join()})`,a=`++${o[this.rank-1]} < ${n[this.rank-1]}`,l=`getChannel(getA(${s.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${l};\n      if(${a}) {\n        result[1] = ${l};\n      }\n      --${o[this.rank-1]};\n      if(++${o[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${l};\n        if(${a}) {\n          result[3] = ${l};\n        }\n      }\n      setOutput(result);\n    }\n    `}}const Ys={kernelName:"Max",backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:r})=>{const{x:o}=t,{reductionIndices:s,keepDims:i}=e,a=r,l=o.shape.length,u=I(s,o.shape);let c=u;const h=Tt(c,l),d=null!=h,f=a.shouldExecuteOnCPU([o]);let p=o;if(d){if(f){const t=a.texData.get(p.dataId).values,e=new Array(l);for(let t=0;t<e.length;t++)e[t]=o.shape[h[t]];const n=Hs(t,o.shape,o.dtype,h,e);p=a.makeTensorInfo(e,o.dtype);a.texData.get(p.dataId).values=n}else p=function(t,e,r){const o=n().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new qs(t.shape,e):new Ks(t.shape,e);return r.runWebGLProgram(o,[t],t.dtype)}(o,h,a);c=Ot(c.length,l)}At("max",c,l);const[g,x]=It(p.shape,c);let m,y=g;if(i&&(y=Et(g,u)),f){const t=a.texData.get(p.dataId).values,e=Gs(t,v(x),y,o.dtype);m=a.makeTensorInfo(y,o.dtype);a.texData.get(m.dataId).values=e}else m=js(p,x,y,a);return d&&a.disposeData(p.dataId),m}};h(En),h(Ys);const Qs=kt([1,2,3,4]);console.log("Max result",Qs.dataSync())}));
