!function(e){"function"==typeof define&&define.amd?define(e):e()}((function(){"use strict";class e{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(t instanceof Promise)throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=function(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("="))),t}(this.global.location.search);if("tfjsflags"in e){e.tfjsflags.split(",").forEach(e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)})}}}function t(){return r}let n,r=null;function o(){if(null==n){let e;if("undefined"!=typeof window)e=window;else if("undefined"!=typeof global)e=global;else if("undefined"!=typeof process)e=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}n=e}return n}function i(e,t){const n=function(){const e=o();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const r=t();return n.set(e,r),n.get(e)}}const s=i("kernelRegistry",()=>new Map),a=i("gradRegistry",()=>new Map);function u(e){return a.get(e)}function l(e){const t=s.entries(),n=[];for(;;){const{done:r,value:o}=t.next();if(r)break;const[i,s]=o,[a]=i.split("_");a===e&&n.push(s)}return n}function c(e,t){return`${t}_${e}`}function h(e){return e%2==0?e:e+1}function d(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function p(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||b(e)&&!n)for(let r=0;r<e.length;++r)p(e[r],t,n);else t.push(e);return t}function f(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function g(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function x(e){return e%1==0}function m(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function C(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function v(e,t=(e=>0),n){return new Promise((r,o)=>{let i=0;const s=()=>{if(e())return void r();i++;const a=t(i);null!=n&&i>=n?o():setTimeout(s,a)};s()})}function $(e,t){const n=t.length;return d((e=null==e?t.map((e,t)=>t):[].concat(e)).every(e=>e>=-n&&e<n),()=>`All values in axis param must be in range [-${n}, ${n}) but got axis `+e),d(e.every(e=>x(e)),()=>"All values in axis param must be integers but got axis "+e),e.map(e=>e<0?n+e:e)}function R(e,t){const n=[],r=[],o=null!=t&&Array.isArray(t)&&0===t.length,i=null==t||o?null:$(t,e).sort();let s=0;for(let t=0;t<e.length;++t){if(null!=i){if(i[s]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==i[s]||i[s]>t)&&1===e[t]&&(n.push(e[t]),r.push(t)),i[s]<=t&&s++}1!==e[t]&&(n.push(e[t]),r.push(t))}return{newShape:n,keptDims:r}}function y(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error("Unknown data type "+e);n=new Uint8Array(t)}return n}function w(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error("Unknown data type "+e);n=new Array(t)}return n}function b(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array}function E(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error("Unknown dtype "+e)}function I(e){return"string"==typeof e||e instanceof String}function A(e){return Array.isArray(e)?A(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array?"int32":"number"==typeof e?"float32":I(e)?"string":function(e){return"boolean"==typeof e}(e)?"bool":"float32"}function T(e){return!!(e&&e.constructor&&e.call&&e.apply)}function _(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function N(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n}function O(e,n){if("string"===n)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=p(e)),t().getBool("DEBUG")&&function(e,t){for(let n=0;n<e.length;n++){const r=e[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${t} being uploaded contains ${r}.`)}}(e,n),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,n))return e;if(null==n||"float32"===n||"complex64"===n)return new Float32Array(e);if("int32"===n)return new Int32Array(e);if("bool"===n){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error("Unknown data type "+n)}function D(e,t){if(0===e.length)return t[0];const n=e.reduce((e,t)=>e*t);if(0===n)return[];if(n!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}.`);return function e(t,n,r){const o=new Array;if(1===n.length){const e=n[0];for(let n=0;n<e;n++)o[n]=r[t+n]}else{const i=n[0],s=n.slice(1),a=s.reduce((e,t)=>e*t);for(let n=0;n<i;n++)o[n]=e(t+n*a,s,r)}return o}(0,e,t)}function F(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error("Unknown data type "+t)}function S(){return t().platform.now()}function k(e){e.forEach(t=>{d(Number.isInteger(t)&&t>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`)})}function B(e,n="utf-8"){return n=n||"utf-8",t().platform.decode(e,n)}function L(e,t,n){if(0===t)return 0;if(1===t)return e[0];let r=e[e.length-1];for(let t=0;t<e.length-1;++t)r+=n[t]*e[t];return r}function P(e,t,n){if(0===t)return[];if(1===t)return[e];const r=new Array(t);for(let t=0;t<r.length-1;++t)r[t]=Math.floor(e/n[t]),e-=r[t]*n[t];return r[r.length-1]=e,r}class M{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new U)}profileKernel(e,t,n){let r;const o=this.backendTimer.time(()=>{r=n()});r.map(t=>{t.data().then(n=>{!function(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const r=e[t];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${n}'`),!0}}(n,t.dtype,e)})});return{kernelName:e,outputs:r,inputs:t,timeMs:o.then(e=>e.kernelMs),extraInfo:o.then(e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():"")}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:r,inputs:o,extraInfo:i}=e;n.forEach(e=>{Promise.all([e.data(),r,i]).then(n=>{this.logger.logKernelProfile(t,e,n[0],n[1],o,n[2])})})}}class U{logKernelProfile(e,t,n,r,o,i){const s="number"==typeof r?C(r+"ms",9):r.error,a=C(e,25),u=t.rank,l=t.size,c=C(t.shape.toString(),14);let h="";for(const e in o){const n=o[e].shape||t.shape,r=n.length;h+=`${e}: ${r}D ${r>0?n:""} `}console.log(`%c${a}\t%c${s}\t%c${u}D ${c}\t%c${l}\t%c${h}\t%c${i}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function V(e,t,n,r){const o=N(t),i=function(e,t,n,r){const o=f(t),i=r[r.length-1],s=new Array(i).fill(0),a=t.length,u="complex64"===n?z(e):e;if(a>1)for(let e=0;e<o/i;e++){const t=e*i;for(let e=0;e<i;e++)s[e]=Math.max(s[e],W(u[t+e],0,n).length)}return s}(e,t,n,o),s=t.length,a=function e(t,n,r,o,i,s=!0){const a="complex64"===r?2:1,u=n[0],l=n.length;if(0===l){if("complex64"===r){return[W(z(t)[0],0,r)]}return"bool"===r?[G(t[0])]:[t[0].toString()]}if(1===l){if(u>20){const e=3*a;let n=Array.from(t.slice(0,e)),o=Array.from(t.slice((u-3)*a,u*a));return"complex64"===r&&(n=z(n),o=z(o)),["["+n.map((e,t)=>W(e,i[t],r)).join(", ")+", ..., "+o.map((e,t)=>W(e,i[u-3+t],r)).join(", ")+"]"]}return["["+("complex64"===r?z(t):Array.from(t)).map((e,t)=>W(e,i[t],r)).join(", ")+"]"]}const c=n.slice(1),h=o.slice(1),d=o[0]*a,p=[];if(u>20){for(let n=0;n<3;n++){const o=n*d,s=o+d;p.push(...e(t.slice(o,s),c,r,h,i,!1))}p.push("...");for(let n=u-3;n<u;n++){const o=n*d,s=o+d;p.push(...e(t.slice(o,s),c,r,h,i,n===u-1))}}else for(let n=0;n<u;n++){const o=n*d,s=o+d;p.push(...e(t.slice(o,s),c,r,h,i,n===u-1))}const f=2===l?",":"";p[0]="["+p[0]+f;for(let e=1;e<p.length-1;e++)p[e]=" "+p[e]+f;let g=",\n";for(let e=2;e<l;e++)g+="\n";return p[p.length-1]=" "+p[p.length-1]+"]"+(s?"":g),p}(e,t,n,o,i),u=["Tensor"];return r&&(u.push("  dtype: "+n),u.push("  rank: "+s),u.push(`  shape: [${t}]`),u.push("  values:")),u.push(a.map(e=>"    "+e).join("\n")),u.join("\n")}function W(e,t,n){let r;return r=Array.isArray(e)?parseFloat(e[0].toFixed(7))+" + "+parseFloat(e[1].toFixed(7))+"j":I(e)?`'${e}'`:"bool"===n?G(e):parseFloat(e.toFixed(7)).toString(),C(r,t)}function G(e){return 0===e?"false":"true"}function z(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class X{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=f(e),null!=n){const e=n.length;d(e===this.size,()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`)}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||w(t,this.size),this.strides=N(e)}set(e,...t){0===t.length&&(t=[0]),d(t.length===this.rank,()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`);const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=`+this.shape;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return H().makeTensor(this.values,this.shape,this.dtype)}}let H=null;class K{constructor(e,t,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=f(e),this.strides=N(e),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return null.buffer(this.shape,this.dtype,e)}bufferSync(){return null.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return D(this.shape,e)}arraySync(){return D(this.shape,this.dataSync())}async data(){this.throwIfDisposed();const e=H().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map(e=>B(e))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataSync(){this.throwIfDisposed();const e=H().readSync(this.dataId);if("string"===this.dtype)try{return e.map(e=>B(e))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await H().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(H().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return null.print(this,e)}clone(){return this.throwIfDisposed(),null.clone(this)}toString(e=!1){return V(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),null.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),H().makeVariable(this,e,t,n)}}Object.defineProperty(K,Symbol.hasInstance,{value:e=>!!e&&null!=e.dataId&&null!=e.shape&&null!=e.dtype});class j extends K{constructor(e,t,n,r){super(e.shape,e.dtype,e.dataId,r),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!g(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);H().disposeTensor(this),this.dataId=e.dataId,H().incRef(this,null)}dispose(){H().disposeVariable(this),this.isDisposedInternal=!0}}var Y,q,Q,Z,J;Object.defineProperty(j,Symbol.hasInstance,{value:e=>e instanceof K&&null!=e.assign&&e.assign instanceof Function}),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(Y||(Y={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(q||(q={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(Q||(Q={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(Z||(Z={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(J||(J={}));const ee={float32:Z,int32:q,bool:Q,complex64:J};function te(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return ee[e][t]}function ne(e){return te(e,"int32")}function re(e,t){if(e.dtype===t.dtype)return[e,t];const n=te(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function oe(e){const t=[];return function e(t,n,r){if(null==t)return;if(t instanceof K)return void n.push(t);if(o=t,!Array.isArray(o)&&"object"!=typeof o)return;var o;const i=t;for(const t in i){const o=i[t];r.has(o)||(r.add(o),e(o,n,r))}}(e,t,new Set),t}class ie{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class se{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new ie}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then(()=>{});if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(console.warn(e+" backend was already registered. Reusing existing backend factory."),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new M(this.backendInstance),!0}setupRegisteredKernels(){l(this.backendName).forEach(e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)})}disposeRegisteredKernels(e){l(e).forEach(t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])})}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(Promise.resolve(n)===n){const t=++this.pendingBackendInitId,r=n.then(n=>!(t<this.pendingBackendInitId)&&(this.registry[e]=n,this.pendingBackendInit=null,!0)).catch(n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,console.warn(`Initialization of backend ${e} failed`),console.warn(n.stack||n.message)),!1));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}return this.registry[e]=n,{success:!0,asyncInit:!1}}catch(t){return console.warn(`Initialization of backend ${e} failed`),console.warn(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(e+" backend not found in registry");this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority)}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:r,asyncInit:o}=this.initializeBackend(n);if(o||r)return{name:n,asyncInit:o}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),r=n.backend,o=this.readSync(t);r.disposeData(t),n.backend=e,e.move(t,o,n.shape,n.dtype),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,r=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun(()=>this.startScope(r),()=>this.endScope(n),()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return se.nextTensorId++}nextVariableId(){return se.nextVariableId++}clone(e){const t=this.makeTensorFromDataId(e.dataId,e.shape,e.dtype),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],e=>({x:()=>{const t={x:e},n={dtype:"float32"};return ae.runKernelFunc(t=>t.cast(e,"float32"),t,null,"Cast",n)}}),[],{}),t}runKernel(e,t,n,r,o){return this.runKernelFunc(null,t,null,e,n,r,o)}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const r=this.backend.numDataIds();let o=0;n.forEach(e=>{o+="complex64"===e.dtype?3:1});const i=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],s=r-t-o-i;if(s>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${s} data ids) after running '${e}'`)}runKernelFunc(e,t,n,r,o,i,a){let u,l=[];const h=this.isTapeOn();null==r&&(r=null!=this.state.activeScope?this.state.activeScope.name:"");const d=this.state.numBytes,p=this.state.numTensors;let f;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);const g=function(e,t){const n=c(e,t);return s.get(n)}(r,this.backendName);let x,m;if(null!=g)f=()=>{const e=this.backend.numDataIds();x=g.kernelFunc({inputs:t,attrs:o,backend:this.backend});const n=Array.isArray(x)?x:[x];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(r,e,n);const s=n.map(({dataId:e,shape:t,dtype:n})=>this.makeTensorFromDataId(e,t,n));if(h){let e=this.getTensorsForGradient(r,t,s);if(null==e){null==a&&(a=[]);const t=s.filter((e,t)=>a[t]);e=(i||[]).slice().concat(t)}l=this.saveTensorsForBackwardMode(e)}return s};else{const t=e=>{h&&(l=e.map(e=>this.keep(this.clone(e))))};f=()=>{const n=this.backend.numDataIds();x=this.tidy(()=>e(this.backend,t));const o=Array.isArray(x)?x:[x];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(r,n,o),o}}return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(m=this.profiler.profileKernel(r,t,()=>f()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(m),u=m.outputs):u=f()}),h&&this.addTapeNode(r,t,u,n,l,o),this.state.profiling&&this.state.activeProfile.kernels.push({name:r,bytesAdded:this.state.numBytes-d,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-p,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(t).map(e=>null!=t[e]?t[e].shape:null),outputShapes:u.map(e=>e.shape),kernelTimeMs:m.timeMs,extraInfo:m.extraInfo}),Array.isArray(x)?u:u[0]}saveTensorsForBackwardMode(e){return e.map(e=>this.keep(this.clone(e)))}getTensorsForGradient(e,t,n){const r=u(e);if(null!=r){const e=r.inputsToSave||[],o=r.outputsToSave||[];let i;r.saveAllInputs?(d(Array.isArray(t),()=>"saveAllInputs is true, expected inputs to be an array."),i=Object.keys(t).map(e=>t[e])):i=e.map(e=>t[e]);const s=n.filter((e,t)=>o[t]);return i.concat(s)}return null}makeTensor(e,n,r,o){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");r=r||"float32",o=o||this.backend;let i=e;"string"===r&&I(e[0])&&(i=e.map(e=>function(e,n="utf-8"){return n=n||"utf-8",t().platform.encode(e,n)}(e)));const s=o.write(i,n,r),a=new K(n,r,s,this.nextTensorId());if(this.incRef(a,o),"string"===r){const e=this.state.tensorInfo.get(s),t=function(e){if(null==e)return 0;let t=0;return e.forEach(e=>t+=e.length),t}(i);this.state.numBytes+=t-e.bytes,e.bytes=t}return a}makeTensorFromDataId(e,t,n,r){const o=new K(t,n=n||"float32",e,this.nextTensorId());return this.incRef(o,r),o}makeVariable(e,t=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==e.dtype&&(e=e.cast(r));const o=new j(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[o.name])throw new Error(`Variable with name ${o.name} was already registered`);return this.state.registeredVariables[o.name]=o,this.incRef(o,this.backend),o}incRef(e,t){const n=this.state.tensorInfo.has(e.dataId)?this.state.tensorInfo.get(e.dataId).refCount:0;if(this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++,0===n){this.state.numDataBuffers++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*E(e.dtype)),this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n,refCount:0}),this.state.numBytes+=n}this.state.tensorInfo.get(e.dataId).refCount++,e instanceof j||this.track(e)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;this.state.numTensors--,"string"===e.dtype&&this.state.numStringTensors--;const t=this.state.tensorInfo.get(e.dataId);t.refCount<=1?("complex64"!==e.dtype&&(this.state.numBytes-=t.bytes),this.state.numDataBuffers--,t.backend.disposeData(e.dataId),this.state.tensorInfo.delete(e.dataId)):this.state.tensorInfo.get(e.dataId).refCount--}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map(e=>e.totalBytesSnapshot)),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,r,o,i){const s={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:o},a=u(e);null!=a&&(r=a.gradFunc),null!=r&&(s.gradient=e=>(e=e.map((e,t)=>{if(null==e){const e=n[t],r=F(e.size,e.dtype);return this.makeTensor(r,e.shape,e.dtype)}return e}),r(e.length>1?e:e[0],o,i))),this.state.activeTape.push(s)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=oe(e),n=new Set(t.map(e=>e.id));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach(e=>{e.kept||e.scopeId!==r.id||this.track(e)})}gradients(e,t,n,r=!1){if(d(t.length>0,()=>"gradients() received an empty list of xs."),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const o=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",e));d(o instanceof K,()=>"The result y returned by f() must be a tensor.");const i=function(e,t,n){const r={},o={};for(let e=0;e<t.length;e++)r[t[e].id]=!0;for(let n=0;n<e.length;n++){const i=e[n],s=i.inputs;for(const e in s){const n=s[e];let a=!1;for(let e=0;e<t.length;e++)if(r[n.id]){i.outputs.forEach(e=>r[e.id]=!0),a=!0,o[i.id]=!0;break}if(a)break}}const i={};i[n.id]=!0;const s={};for(let t=e.length-1;t>=0;t--){const n=e[t],r=n.inputs;for(let e=0;e<n.outputs.length;e++)if(i[n.outputs[e].id]){for(const e in r)i[r[e].id]=!0,s[n.id]=!0;break}}const a=[];for(let t=0;t<e.length;t++){const n=e[t];if(o[n.id]&&s[n.id]){const e={};for(const t in n.inputs){const o=n.inputs[t];r[o.id]&&(e[t]=o)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,a.push(t)}}return a}(this.state.activeTape,t,o);if(!r&&0===i.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{const e={};e[o.id]=null==n?function(e){const t=function(e,t){const n=F(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}(f(e),"float32");return ae.makeTensor(t,e,"float32")}(o.shape):n,function(e,t,n,r){for(let o=t.length-1;o>=0;o--){const i=t[o],s=[];if(i.outputs.forEach(t=>{const n=e[t.id];null!=n?s.push(n):s.push(null)}),null==i.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${i.kernelName}.`);const a=i.gradient(s);for(const t in i.inputs){if(!(t in a))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(a)}.`);const o=n(()=>a[t]());if("float32"!==o.dtype)throw new Error(`Error in gradient for op ${i.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${o.dtype}'`);const s=i.inputs[t];if(!g(o.shape,s.shape))throw new Error(`Error in gradient for op ${i.kernelName}. The gradient of input '${t}' has shape '${o.shape}', which does not match the shape of the input '${s.shape}'`);if(null==e[s.id])e[s.id]=o;else{const t=e[s.id];e[s.id]=r(t,o),t.dispose()}}}}(e,i,e=>this.tidy(e),ue);const r=t.map(t=>e[t.id]);return 0===this.state.gradientDepth&&(this.state.activeTape.forEach(e=>{for(const t of e.saved)t.dispose()}),this.state.activeTape=null),{value:o,grads:r}})}customGrad(e){return d(T(e),()=>"The f passed in customGrad(f) must be a function."),(...t)=>{let n;d(t.every(e=>e instanceof K),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");const r={};return t.forEach((e,t)=>{r[t]=e}),this.runKernelFunc((r,o)=>(n=e(...t,o),d(n.value instanceof K,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),d(T(n.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),n.value),r,(e,r)=>{const o=n.gradFunc(e,r),i=Array.isArray(o)?o:[o];d(i.length===t.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),d(i.every(e=>e instanceof K),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");const s={};return i.forEach((e,t)=>{s[t]=()=>e}),s})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}async time(e){const t=S(),n=await this.backend.time(e);return n.wallMs=S()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new ie;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}se.nextTensorId=0,se.nextVariableId=0;const ae=function(){const t=o();if(null==t._tfengine){const n=new e(t);t._tfengine=new se(n)}var n;return n=t._tfengine.ENV,r=n,H=()=>t._tfengine,t._tfengine}();function ue(e,t){const n={a:e,b:t};return ae.runKernelFunc((n,r)=>{const o=n.add(e,t);return r([e,t]),o},n,null,"Add")}function le(e,n){let r=e;if(b(e))return"string"===n?[]:[e.length];if(!Array.isArray(e))return[];const o=[];for(;Array.isArray(r)||b(r)&&"string"!==n;)o.push(r.length),r=r[0];return Array.isArray(e)&&t().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&function e(t,n,r){if(r=r||[],!Array.isArray(t)&&!b(t))return void d(0===n.length,()=>`Element arr[${r.join("][")}] is a primitive, but should be an array/TypedArray of ${n[0]} elements`);d(n.length>0,()=>`Element arr[${r.join("][")}] should be a primitive, but is an array of ${t.length} elements`),d(t.length===n[0],()=>`Element arr[${r.join("][")}] should have ${n[0]} elements, but has ${t.length} elements`);const o=n.slice(1);for(let n=0;n<t.length;++n)e(t[n],o,r.concat(n))}(e,o,[]),o}function ce(e,t,n,r){if(null!=e&&("numeric"!==e&&e!==t||"numeric"===e&&"string"===t))throw new Error(`Argument '${n}' passed to '${r}' must be ${e} tensor, but got ${t} tensor`)}function he(e,t,n,r="numeric"){if(e instanceof K)return ce(r,e.dtype,t,n),e;let o=A(e);if("string"!==o&&["bool","int32","float32"].indexOf(r)>=0&&(o=r),ce(r,o,t,n),null==e||!b(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const r=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const i=le(e,o);b(e)||Array.isArray(e)||(e=[e]);const s="string"!==o?O(e,o):p(e,[],!0);return ae.makeTensor(s,i,o)}function de(e){const t=Object.keys(e);if(1!==t.length)throw new Error("Please provide an object with a single key (operation name) mapping to a function. Got an object with "+t.length+" keys.");let n=t[0];const r=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1));const o=(...e)=>{ae.startScope(n);try{const t=r(...e);return t instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),ae.endScope(t),t}catch(e){throw ae.endScope(null),e}};return Object.defineProperty(o,"name",{value:n,configurable:!0}),o}const pe=de({complex_:function(e,t){const n=he(e,"real","complex"),r=he(t,"imag","complex");!function(e,t,n=""){d(g(e,t),()=>n+` Shapes ${e} and ${t} must match`)}(n.shape,r.shape,`real and imag shapes, ${n.shape} and ${r.shape}, must match in call to tf.complex().`);const o={real:n,imag:r};return ae.runKernelFunc(e=>e.complex(n,r),o,null,"Complex")}});function fe(e,t,n,r){if(null==r&&(r=A(e)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!b(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){k(t);const e=f(t),r=f(n);d(e===r,()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${r}`);for(let e=0;e<n.length;++e){const r=n[e],o=e!==n.length-1||r!==f(t.slice(e));d(n[e]===t[e]||!o,()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `)}}return b(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==r?O(e,r):p(e,[],!0),ae.makeTensor(e,t,r)}function ge(e,t,n){return fe(e,t,le(e,n),n)}const xe=de({cast_:function(e,t){const n=he(e,"x","cast");if(!function(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}(t))throw new Error("Failed to cast to unknown dtype "+t);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const r={x:n},o={dtype:t};return ae.runKernelFunc(e=>e.cast(n,t),r,null,"Cast",o)}});const me=de({reshape_:function(e,t){const n=he(e,"x","reshape",null);t=function(e,t){let n=1,r=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${t}`);r=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===r){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const o=e.slice();return o[r]=t/n,o}(t,n.size),d(n.size===f(t),()=>"new shape and old shape must have the same number of elements.");const r={x:n},o={shape:t};return ae.runKernelFunc((e,r)=>(r([n]),e.reshape(n,t)),r,null,"Reshape",o)}});const Ce=de({transpose_:function(e,t){const n=he(e,"x","transpose");if(null==t&&(t=n.shape.map((e,t)=>t).reverse()),d(n.rank===t.length,()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${t}.`),t.forEach(e=>{d(e>=0&&e<n.rank,()=>"All entries in 'perm' must be between 0 and "+(n.rank-1)+" but got "+t)}),n.rank<=1)return n.clone();const r={x:n},o={perm:t};return ae.runKernelFunc(e=>e.transpose(n,t),r,null,"Transpose",o)}});function ve(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function $e(e,t,n){const r=e.length+t.length,o=[];let i=0,s=0;for(let a=0;a<r;a++)-1===n.indexOf(a)?o.push(e[i++]):o.push(t[s++]);return o}function Re(e,t){const n=[],r=e.length;for(let o=0;o<r;o++)-1===t.indexOf(o)&&n.push(e[o]);return[n,t.map(t=>e[t])]}function ye(e,t){return $e(e,t.map(e=>1),t)}function we(e,t,n){d(ve(t,n),()=>e+" supports only inner-most axes for now. "+`Got axes ${t} and rank-${n} input.`)}function be(e,t){if(ve(e,t))return null;const n=[];for(let r=0;r<t;++r)-1===e.indexOf(r)&&n.push(r);return e.forEach(e=>n.push(e)),n}function Ee(e){return e.map((e,t)=>[t,e]).sort((e,t)=>e[1]-t[1]).map(e=>e[0])}function Ie(e,t){const n=[];for(let r=t-e;r<t;++r)n.push(r);return n}const Ae=de({max_:function(e,t=null,n=!1){const r=he(e,"x","max"),o={x:r},i={reductionIndices:t,keepDims:n};return ae.runKernelFunc((e,o)=>{let i=$(t,r.shape);const s=be(i,r.rank);let a=r;null!=s&&(a=Ce(r,s),i=Ie(i.length,a.rank));const u=e.max(a,i);null!=s&&a.dispose();let l=u;if(n){const e=ye(l.shape,$(t,r.shape));l=me(l,e),u.dispose()}return o([r,l]),l},o,null,"Max",i)}});function Te(e,t){if(e.rank<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${e.rank}.`);if(t.rank<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[t.rank-1]>e.rank)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[t.rank-1]} vs. ${e.rank}`);if(0===e.size)throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const n=t.shape,r=n[n.length-1];let o=1;for(let e=0;e<n.length-1;++e)o*=n[e];const i=e.shape,s=n.slice();s.pop();let a=1;for(let t=r;t<e.rank;++t)a*=i[t],s.push(i[t]);const u=[...N(e.shape).map(e=>e/a),1].slice(0,r);return[s,o,a,u]}function _e(e,t,n){const r=t.rank>1?t.shape[t.rank-1]:1,o=t.rank>1?t.rank-1:1,i="Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: "+n.shape+`, indices.shape: ${t.shape}, shape: ${e}`+`, sliceDim: ${r}, and batchDim: ${o}.`;if(n.rank<o)throw new Error(i+` update.rank < ${o}. `);if(e.length<r+(n.rank-o))throw new Error(i+" Output shape length < "+(r+(n.rank-o)));if(n.rank!==o+e.length-r)throw new Error(i+" update.rank != "+(o+e.length-r));for(let e=0;e<o;++e)if(n.shape[e]!==t.shape[e])throw new Error(i+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-o;++t)if(n.shape[t+o]!==e[t+r])throw new Error(i+` updates.shape[${t+o}] (${n.shape[t+o]}) != shape[${t+o}] (${e[t+o]})`)}function Ne(e,t,n){const r=t.shape.length,o=r>1?t.shape[r-1]:1,i=n.length;let s=1;for(let e=o;e<i;++e)s*=n[e];const a=o<1?1:o;return{sliceRank:o,numUpdates:f(t.shape)/a,sliceSize:s,strides:[...N(n.slice(0,o)),1],outputSize:f(n)}}function Oe(){return ae}const De=de({floorDiv_:function(e,t){let n=he(e,"a","floorDiv"),r=he(t,"b","floorDiv");[n,r]=re(n,r);const o={a:n,b:r};return ae.runKernelFunc((e,t)=>{const o=e.floorDiv(n,r);return t([n,r]),o},o,null,"FloorDiv")}});const Fe=de({div_:function(e,t){let n=he(e,"a","div"),r=he(t,"b","div");if([n,r]=re(n,r),"int32"===n.dtype&&"int32"===r.dtype)return De(n,r);const o={a:n,b:r};return ae.runKernelFunc((e,t)=>{const o=e.realDivide(n,r);return t([n,r]),o},o,null,"Div",{})}});const Se=de({mul_:function(e,t){let n=he(e,"a","mul"),r=he(t,"b","mul");[n,r]=re(n,r);const o={a:n,b:r};return ae.runKernelFunc((e,t)=>{const o=e.multiply(n,r);return t([n,r]),o},o,null,"Multiply")}});function ke(e,t,n,r,o,i,s=!1,a="channelsLast"){let[u,l,c,h]=[-1,-1,-1,-1];if("channelsLast"===a)[u,l,c,h]=e;else{if("channelsFirst"!==a)throw new Error("Unknown dataFormat "+a);[u,h,l,c]=e}const[p,f,,g]=t,[m,C]=Pe(n),[v,$]=Pe(r),R=Ue(p,v),y=Ue(f,$),{padInfo:w,outHeight:b,outWidth:E}=function(e,t,n,r,o,i,s,a,u){let l,c,h;if("number"==typeof e){l={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const o=function(e,t,n,r,o){null==r&&(r=Le(e,t,n));const i=e[0],s=e[1],a=Ve((i-t+2*r)/n+1,o);d(x(a),()=>`The output # of rows (${a}) must be an integer. Change the stride and/or zero pad parameters`);const u=Ve((s-t+2*r)/n+1,o);return d(x(u),()=>`The output # of columns (${u}) must be an integer. Change the stride and/or zero pad parameters`),[a,u]}([t,n],i,r,e,a);c=o[0],h=o[1]}else if("same"===e){c=Math.ceil(t/r),h=Math.ceil(n/o);const e=Math.max(0,(c-1)*r+i-t),a=Math.max(0,(h-1)*o+s-n),u=Math.floor(e/2),d=e-u,p=Math.floor(a/2);l={top:u,bottom:d,left:p,right:a-p,type:"SAME"}}else if("valid"===e)l={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-i+1)/r),h=Math.ceil((n-s+1)/o);else{if("object"!=typeof e)throw Error("Unknown padding parameter: "+e);{const d="channelsLast"===u?e[1][0]:e[2][0],p="channelsLast"===u?e[1][1]:e[2][1],f="channelsLast"===u?e[2][0]:e[3][0],g="channelsLast"===u?e[2][1]:e[3][1];l={top:d,bottom:p,left:f,right:g,type:0===d&&0===p&&0===f&&0===g?"VALID":"EXPLICIT"},c=Ve((t-i+d+p)/r+1,a),h=Ve((n-s+f+g)/o+1,a)}}return{padInfo:l,outHeight:c,outWidth:h}}(o,l,c,m,C,R,y,i,a),I=s?g*h:g;let A;return"channelsFirst"===a?A=[u,I,b,E]:"channelsLast"===a&&(A=[u,b,E,I]),{batchSize:u,dataFormat:a,inHeight:l,inWidth:c,inChannels:h,outHeight:b,outWidth:E,outChannels:I,padInfo:w,strideHeight:m,strideWidth:C,filterHeight:p,filterWidth:f,effectiveFilterHeight:R,effectiveFilterWidth:y,dilationHeight:v,dilationWidth:$,inShape:e,outShape:A,filterShape:t}}function Be(e,t,n,r,o,i=!1,s="channelsLast",a){let[u,l,c,h,p]=[-1,-1,-1,-1,-1];if("channelsLast"===s)[u,l,c,h,p]=e;else{if("channelsFirst"!==s)throw new Error("Unknown dataFormat "+s);[u,p,l,c,h]=e}const[f,g,m,,C]=t,[v,$,R]=Me(n),[y,w,b]=Me(r),E=Ue(f,y),I=Ue(g,w),A=Ue(m,b),{padInfo:T,outDepth:_,outHeight:N,outWidth:O}=function(e,t,n,r,o,i,s,a,u,l,c){let h,p,f,g;if("number"==typeof e){h={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const i=function(e,t,n,r,o,i){null==o&&(o=Le(e,t,r));const s=e[0],a=e[1],u=e[2],l=Ve((s-t+2*o)/r+1,i);d(x(l),()=>`The output # of depths (${l}) must be an integer. Change the stride and/or zero pad parameters`);const c=Ve((a-t+2*o)/r+1,i);d(x(c),()=>`The output # of rows (${c}) must be an integer. Change the stride and/or zero pad parameters`);const h=Ve((u-t+2*o)/r+1,i);return d(x(h),()=>`The output # of columns (${h}) must be an integer. Change the stride and/or zero pad parameters`),[l,c,h,n]}([t,n,r,1],a,1,o,e,c);p=i[0],f=i[1],g=i[2]}else if("same"===e){p=Math.ceil(t/o),f=Math.ceil(n/i),g=Math.ceil(r/s);const e=(p-1)*o+a-t,c=(f-1)*i+u-n,d=(g-1)*s+l-r,x=Math.floor(e/2),m=e-x,C=Math.floor(c/2),v=c-C,$=Math.floor(d/2);h={top:C,bottom:v,left:$,right:d-$,front:x,back:m,type:"SAME"}}else{if("valid"!==e)throw Error("Unknown padding parameter: "+e);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},p=Math.ceil((t-a+1)/o),f=Math.ceil((n-u+1)/i),g=Math.ceil((r-l+1)/s)}return{padInfo:h,outDepth:p,outHeight:f,outWidth:g}}(o,l,c,h,v,$,R,E,I,A,a),D=i?C*p:C;let F;return"channelsFirst"===s?F=[u,D,_,N,O]:"channelsLast"===s&&(F=[u,_,N,O,D]),{batchSize:u,dataFormat:s,inDepth:l,inHeight:c,inWidth:h,inChannels:p,outDepth:_,outHeight:N,outWidth:O,outChannels:D,padInfo:T,strideDepth:v,strideHeight:$,strideWidth:R,filterDepth:f,filterHeight:g,filterWidth:m,effectiveFilterDepth:E,effectiveFilterHeight:I,effectiveFilterWidth:A,dilationDepth:y,dilationHeight:w,dilationWidth:b,inShape:e,outShape:F,filterShape:t}}function Le(e,t,n,r=1){const o=Ue(t,r);return Math.floor((e[0]*(n-1)-n+o)/2)}function Pe(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function Me(e){return"number"==typeof e?[e,e,e]:e}function Ue(e,t){return t<=1?e:e+(e-1)*(t-1)}function Ve(e,t){if(!t)return e;switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error("Unknown roundingMode "+t)}}function We(e){const[t,n,r]=Pe(e);return 1===t&&1===n&&1===r}function Ge(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error("Unknown dataFormat "+e)}function ze(e,t){const n=e[0].slice();for(let r=1;r<e.length;r++)n[t]+=e[r][t];return n}const Xe=de({slice_:function(e,t,n){const r=he(e,"x","slice");if(0===r.rank)throw new Error("Slicing scalar is not possible");const[o,i]=function(e,t,n){let r,o;return r="number"==typeof t?[t,...new Array(e.rank-1).fill(0)]:t.length<e.rank?t.concat(new Array(e.rank-t.length).fill(0)):t.slice(),r.forEach(e=>{d(-1!==e,()=>"slice() does not support negative begin indexing.")}),o=null==n?new Array(e.rank).fill(-1):"number"==typeof n?[n,...new Array(e.rank-1).fill(-1)]:n.length<e.rank?n.concat(new Array(e.rank-n.length).fill(-1)):n,o=o.map((t,n)=>t>=0?t:(d(-1===t,()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`),e.shape[n]-r[n])),[r,o]}(r,t,n);!function(e,t,n){d(e.rank===t.length,()=>`Error in slice${e.rank}D: Length of begin ${t} must match the rank of the array (${e.rank}).`),d(e.rank===n.length,()=>`Error in slice${e.rank}D: Length of size ${n} must match the rank of the array (${e.rank}).`);for(let r=0;r<e.rank;++r)d(t[r]+n[r]<=e.shape[r],()=>`Error in slice${e.rank}D: begin[${r}] + size[${r}] (${t[r]+n[r]}) would overflow input.shape[${r}] (${e.shape[r]})`)}(r,o,i);const s={x:r},a={begin:t,size:n};return ae.runKernelFunc((e,t)=>(t([r]),e.slice(r,o,i)),s,null,"Slice",a)}});function He(e,t="float32",n){return t=t||"float32",k(e),new X(e,t,n)}function Ke(e,t){const n=[];for(let r=0;r<t.length;r++){const o=e[e.length-r-1],i=t.length-r-1,s=t[i];(null==o||1===o&&s>1)&&n.unshift(i)}return n}function je(e,t){const n=[],r=Math.max(e.length,t.length);for(let o=0;o<r;o++){let r=e[e.length-o-1];null==r&&(r=1);let i=t[t.length-o-1];if(null==i&&(i=1),1===r)n.unshift(i);else if(1===i)n.unshift(r);else{if(r!==i){throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`)}n.unshift(r)}}return n}const Ye=de({elu_:function(e){const t=he(e,"x","elu"),n={x:t};return ae.runKernelFunc((e,n)=>{const r=e.elu(t);return n([r]),r},n,null,"Elu")}});function qe(e){return e<=30?e:_(e,Math.floor(Math.sqrt(e)))}var Qe=Object.freeze({__proto__:null,segOpComputeOptimalWindowSize:function(e,t){let n,r=!1;for(e<=30?(n=e,r=!0):n=_(e,Math.floor(Math.sqrt(e)));!r;)n>t||n===e?r=!0:n=_(e,n+1);return n},computeOutShape:function(e,t,n){const r=[],o=e.length;for(let i=0;i<o;i++)i!==t?r.push(e[i]):r.push(n);return r},collectGatherOpShapeInfo:function(e,t,n){const r=e.shape[n],o=[];let i=1,s=1;for(let t=0;t<n;t++)o.push(e.shape[t]),i*=e.shape[t];for(let e=0;e<t.rank;e++)o.push(t.shape[e]);for(let t=n+1;t<e.rank;t++)o.push(e.shape[t]),s*=e.shape[t];return{batchSize:i,sliceSize:s,dimSize:r,outputShape:o}}});const Ze=de({imag_:function(e){const t=he(e,"input","imag"),n={input:t};return ae.runKernelFunc(e=>e.imag(t),n,null,"Imag")}});const Je=de({real_:function(e){const t=he(e,"input","real"),n={input:t};return ae.runKernelFunc(e=>e.real(t),n,null,"Real")}});function et(e,t){if((b(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&b(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return fe(e,[],[],t)}const tt=de({sum_:function(e,t=null,n=!1){let r=he(e,"x","sum");"bool"===r.dtype&&(r=xe(r,"int32"));const o={x:r},i={axis:t,keepDims:n};return ae.runKernelFunc((e,o)=>{o([r]);const i=$(t,r.shape),s=be(i,r.rank);let a=i,u=r;null!=s&&(u=Ce(r,s),a=Ie(a.length,r.rank));let l=e.sum(u,a);if(n){const e=ye(l.shape,i);l=me(l,e)}return l},o,null,"Sum",i)}});function nt(e,t="float32"){if("complex64"===t){const t=nt(e,"float32"),n=nt(e,"float32");return pe(t,n)}const n=F(f(e),t);return ae.makeTensor(n,e,t)}const rt=de({prelu_:function(e,t){const n=he(e,"x","prelu"),r=he(t,"alpha","prelu"),o={x:n,alpha:r};return ae.runKernelFunc((e,t)=>{const o=e.prelu(n,r);return t([n,r]),o},o,null,"Prelu")}});function ot(e,t){d(null!=e,()=>"The input to the tensor constructor must be a non-null value.");const n=le(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return fe(e,null,n,t)}const it=de({relu_:function(e){const t=he(e,"x","relu"),n={x:t};return ae.runKernelFunc((e,n)=>(n([t]),"bool"===t.dtype?xe(t,"int32"):e.relu(t)),n,null,"Relu")}});const st=de({relu6_:function(e){const t=he(e,"x","relu6"),n={x:t};return ae.runKernelFunc((e,n)=>(n([t]),"bool"===t.dtype?xe(t,"int32"):e.relu6(t)),n,null,"Relu6")}});const at=de({softmax_:function(e,t=-1){const n=he(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const r={logits:n},o={dim:t};return ae.runKernelFunc((e,r)=>{const o=e.softmax(n,t);return r([o]),o},r,null,"Softmax",o)}});const ut=de({step_:function(e,t=0){const n=he(e,"x","step"),r={x:n},o={alpha:t};return ae.runKernelFunc(e=>e.step(n,t),r,null,"Step",o)}});function lt(e,t,n,r=!0){let o=[];if(r)o=o.concat(t.slice(0)),o.push(e[0]/n),o=o.concat(e.slice(1));else{o=o.concat(e[0]);const n=t.length;for(let r=0;r<n;++r)o=o.concat([e[r+1]/t[r],t[r]]);o=o.concat(e.slice(n+1))}return o}function ct(e,t,n=!0){const r=[];if(n){r.push(t);for(let n=t+1;n<e;++n)n<=2*t?(r.push(n),r.push(n-(t+1))):r.push(n)}else{const n=[],o=[];for(let r=1;r<e;++r)r>=2*t+1||r%2==1?o.push(r):n.push(r);r.push(...n),r.push(0),r.push(...o)}return r}function ht(e,t,n,r=!0){const o=[];r?o.push(e[0]/n):o.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?r?o.push(t[n-1]*e[n]):o.push(e[n]/t[n-1]):o.push(e[n]);return o}function dt(e,t){const n=[0];for(let r=0;r<t;++r)n.push(e[r][0]);return n}function pt(e,t,n){const r=e.slice(0,1);for(let o=0;o<n;++o)r.push(e[o+1]-t[o][0]-t[o][1]);return r}function ft(...e){t().getBool("IS_TEST")||console.warn(...e)}function gt(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let r=0;r<n.length;r+=2)n[r]=e[r/2],n[r+1]=t[r/2];return n}function xt(e,t,n){if("complex64"===t){if("complex64"===e.dtype)return e.clone();const t=nt(e.shape),r=xe(e,"float32"),o=n.complex(r,t);return t.dispose(),r.dispose(),o}if(r=e.dtype,"complex64"===(o=t)||"float32"===o&&"complex64"!==r||"int32"===o&&"float32"!==r&&"complex64"!==r||"bool"===o&&"bool"===r)return ae.makeTensorFromDataId(e.dataId,e.shape,t);var r,o;if("complex64"===e.dtype){const r=n.real(e),o=xe(r,t);return r.dispose(),o}if("int32"===t)return n.int(e);if("bool"===t){const t=et(0,e.dtype),r=n.notEqual(e,t);return t.dispose(),r}throw new Error(`Error in Cast: failed to cast ${e.dtype} to ${t}`)}function mt(e,t){return ae.makeTensorFromDataId(e.dataId,t,e.dtype)}function Ct(e,t,n){const r=(t-e)/(n-1),o=F(n,"float32");o[0]=e;for(let e=1;e<o.length;e++)o[e]=o[e-1]+r;return ot(o,"float32")}var vt=Object.freeze({__proto__:null,segment_util:Qe,castTensor:xt,reshapeTensor:mt,linspaceImpl:Ct,upcastType:te,axesAreInnerMostDims:ve,combineLocations:$e,computeOutAndReduceShapes:Re,expandShapeToKeepDim:ye,assertAxesAreInnerMostDims:we,getAxesPermutation:be,getUndoAxesPermutation:Ee,getInnerMostAxes:Ie,getBroadcastDims:function(e,t){const n=e.length,r=[];for(let o=0;o<n;o++){const i=n-1-o,s=e[i]||1;(t[t.length-1-o]||1)>1&&1===s&&r.unshift(i)}return r},getReductionAxes:Ke,assertAndGetBroadcastShape:je,assertParamsConsistent:function(e,t){const n=e[0].length;e.forEach((e,t)=>{d(e.length===n,()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`)}),d(t>=0&&t<n,()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`);const r=e[0];e.forEach((e,o)=>{for(let i=0;i<n;i++)d(i===t||e[i]===r[i],()=>`Error in concat${n}D: Shape of tensors[${o}] (${e}) does not match the shape of the rest (${r}) along the non-concatenated axis ${o}.`)})},computeOutShape:ze,computeDilation2DInfo:function(e,t,n,r,o="NHWC",i){return ke(e,[...t,e[3]],n,i,r,null,null,Ge(o))},computePool2DInfo:function(e,t,n,r,o,i,s="channelsLast"){const[a,u]=Pe(t);let l;if("channelsLast"===s)l=[a,u,e[3],e[3]];else{if("channelsFirst"!==s)throw new Error("Unknown dataFormat "+s);l=[a,u,e[1],e[1]]}return ke(e,l,n,r,o,i,!1,s)},computePool3DInfo:function(e,t,n,r,o,i,s="NDHWC"){const[a,u,l]=Me(t);let c,h;if("NDHWC"===s)h="channelsLast",c=[a,u,l,e[4],e[4]];else{if("NCDHW"!==s)throw new Error("Unknown dataFormat "+s);h="channelsFirst",c=[a,u,l,e[1],e[1]]}return Be(e,c,n,r,o,!1,h,i)},computeConv2DInfo:ke,computeConv3DInfo:Be,computeDefaultPad:Le,tupleValuesAreOne:We,eitherStridesOrDilationsAreOne:function(e,t){return We(e)||We(t)},convertConv2DDataFormat:Ge,getFusedDyActivation:function(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return Se(e,ut(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)},getFusedBiasGradient:function(e,t){let n=t;const r=Ke(e.shape,t.shape);return r.length>0&&(n=tt(n,r)),me(n,e.shape)},applyActivation:function(e,t,n){if("linear"===t)return e;if("relu"===t)return it(e);if("elu"===t)return Ye(e);if("relu6"===t)return st(e);if("prelu"===t)return rt(e,n);throw new Error(`Unknown fused activation ${t}.`)},shouldFuse:(e,t)=>!(e>0)||"linear"===t,PARALLELIZE_THRESHOLD:30,computeOptimalWindowSize:qe,getImageCenter:function(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]},getReshaped:lt,getPermuted:ct,getReshapedPermuted:ht,getSliceBeginCoords:dt,getSliceSize:pt,prepareAndValidate:Te,validateUpdateShape:_e,validateInput:function(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error("The dtype of 'indices' should be int32, but got dtype: "+t.dtype);if(n.length<1)throw new Error("Output rank must be greater or equal to 1, but got shape: "+n);if(0===n.length){if(0===t.size)throw new Error("Indices specified for empty output. indices shape: "+t.shape);if(0===e.size)throw new Error("Updates specified for empty output. updates shape: "+e.shape)}_e(n,t,e)},calculateShapes:Ne,SELU_SCALEALPHA:1.7580993408473768,SELU_SCALE:1.0507009873554805,ERF_P:.3275911,ERF_A1:.254829592,ERF_A2:-.284496736,ERF_A3:1.421413741,ERF_A4:-1.453152027,ERF_A5:1.061405429,warn:ft,log:function(...e){t().getBool("IS_TEST")||console.log(...e)},mergeRealAndImagArrays:gt,splitRealAndImagArrays:function(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let r=0;r<e.length;r+=2)t[r/2]=e[r],n[r/2]=e[r+1];return{real:t,imag:n}},complexWithEvenIndex:function(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}},complexWithOddIndex:function(e){const t=Math.floor(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}},getComplexWithIndex:function(e,t){return{real:e[2*t],imag:e[2*t+1]}},assignToTypedArray:function(e,t,n,r){e[2*r]=t,e[2*r+1]=n},exponents:function(e,t){const n=new Float32Array(e/2),r=new Float32Array(e/2);for(let o=0;o<Math.ceil(e/2);o++){const i=(t?2:-2)*Math.PI*(o/e);n[o]=Math.cos(i),r[o]=Math.sin(i)}return{real:n,imag:r}},exponent:function(e,t,n){const r=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(r),imag:Math.sin(r)}},prepareSplitSize:function(e,t,n=0){let r=[];if("number"==typeof t)d(e.shape[n]%t==0,()=>"Number of splits must evenly divide the axis."),r=new Array(t).fill(e.shape[n]/t);else{d(t.reduce((e,t)=>(-1===t&&(e+=1),e),0)<=1,()=>"There should be only one negative value in split array.");const o=t.indexOf(-1);if(-1!==o){const r=t.reduce((e,t)=>t>0?e+t:e);t[o]=e.shape[n]-r}d(e.shape[n]===t.reduce((e,t)=>e+t),()=>"The sum of sizes must match the size of the axis dimension."),r=t}return r}});function $t(){if("undefined"!=typeof navigator&&null!=navigator){const e=navigator.userAgent||navigator.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(e)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0,4))}return!1}function Rt(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}class yt{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}function wt(e){throw new Error(`'${e}' not yet implemented or not found in the registry. Did you forget to import the kernel?`)}const bt=t();bt.registerFlag("DEBUG",()=>!1,e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}),bt.registerFlag("IS_BROWSER",()=>Rt()),bt.registerFlag("IS_NODE",()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node),bt.registerFlag("IS_CHROME",()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),bt.registerFlag("PROD",()=>!1),bt.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>bt.getBool("DEBUG")),bt.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),bt.registerFlag("IS_TEST",()=>!1);class Et{fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error("Browser's encoder only supports utf-8, but got "+t);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}}t().get("IS_BROWSER")&&t().setPlatform("browser",new Et);const It=()=>require("node-fetch");let At;class Tt{constructor(){this.util=require("util"),this.textEncoder=new this.util.TextEncoder}fetch(e,n){return null!=t().global.fetch?t().global.fetch(e,n):(null==At&&(At=It()),At(e,n))}now(){const e=process.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error("Node built-in encoder only supports utf-8, but got "+t);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}}var _t,Nt;t().get("IS_NODE")&&t().setPlatform("node",new Tt),function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF"}(_t||(_t={})),function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(Nt||(Nt={}));const Ot={},Dt={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function Ft(e){e in Ot||(Ot[e]=function(e){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const t=function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e);if(t.addEventListener("webglcontextlost",t=>{t.preventDefault(),delete Ot[e]},!1),1===e)return t.getContext("webgl",Dt)||t.getContext("experimental-webgl",Dt);return t.getContext("webgl2",Dt)}(e));const t=Ot[e];return t.isContextLost()?(delete Ot[e],Ft(e)):(t.disable(t.DEPTH_TEST),t.disable(t.STENCIL_TEST),t.disable(t.BLEND),t.disable(t.DITHER),t.disable(t.POLYGON_OFFSET_FILL),t.disable(t.SAMPLE_COVERAGE),t.enable(t.SCISSOR_TEST),t.enable(t.CULL_FACE),t.cullFace(t.BACK),Ot[e])}var St,kt,Bt;function Lt(e,t){return[t,e]}function Pt(e){const t=f(e);return m(Math.ceil(t/4))}function Mt(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function Ut(e,n){const r=e;let o,i,s,a,u,l,c,h,d,p;return 2===t().getNumber("WEBGL_VERSION")?(o=r.R32F,i=r.R16F,s=r.RGBA16F,a=r.RGBA32F,u=r.RED,c=4,h=1,d=r.HALF_FLOAT,p=r.FLOAT):(o=e.RGBA,i=e.RGBA,s=e.RGBA,a=r.RGBA,u=e.RGBA,c=4,h=4,d=null!=n?n.HALF_FLOAT_OES:null,p=e.FLOAT),l=e.RGBA,{internalFormatFloat:o,internalFormatHalfFloat:i,internalFormatPackedHalfFloat:s,internalFormatPackedFloat:a,textureFormatFloat:u,downloadTextureFormat:l,downloadUnpackNumChannels:c,defaultNumChannels:h,textureTypeHalfFloat:d,textureTypeFloat:p}}function Vt(e,n){const r=n();return t().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return"Unknown error code "+t}}(e,t))}(e),r}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(St||(St={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(kt||(kt={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(Bt||(Bt={}));function Wt(e){return!!(t().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function Gt(e,t){return Zt(e,()=>e.getExtension(t),'Extension "'+t+'" not supported on this browser.')}function zt(e,t){const n=Zt(e,()=>e.createShader(e.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(Vt(e,()=>e.shaderSource(n,t)),Vt(e,()=>e.compileShader(n)),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw function(e,t){const n=Xt.exec(t);if(null==n)return console.log("Couldn't parse line number in error: "+t),void console.log(e);const r=+n[1],o=e.split("\n"),i=o.length.toString().length+2,s=o.map((e,t)=>C((t+1).toString(),i)+e);let a=0;for(let e=0;e<s.length;e++)a=Math.max(s[e].length,a);const u=s.slice(0,r-1),l=s.slice(r-1,r),c=s.slice(r);console.log(u.join("\n")),console.log(t.split("\n")[0]),console.log("%c "+C(l[0],a),"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}const Xt=/ERROR: [0-9]+:([0-9]+):/g;function Ht(e,t){if(Vt(e,()=>e.validateProgram(t)),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function Kt(e,t,n,r,o,i,s){const a=e.getAttribLocation(t,n);return-1!==a&&(Vt(e,()=>e.bindBuffer(e.ARRAY_BUFFER,r)),Vt(e,()=>e.vertexAttribPointer(a,o,e.FLOAT,!1,i,s)),Vt(e,()=>e.enableVertexAttribArray(a)),!0)}function jt(e,t,n){!function(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=t+e.TEXTURE0;if(r<e.TEXTURE0||r>n){throw new Error(`textureUnit must be in ${`[gl.TEXTURE0, gl.TEXTURE${n}]`}.`)}}(e,n),Vt(e,()=>e.activeTexture(e.TEXTURE0+n)),Vt(e,()=>e.bindTexture(e.TEXTURE_2D,t))}function Yt(e,t,n){Vt(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,n)),Vt(e,()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0))}function qt(e,t){Vt(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,t)),Vt(e,()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0))}function Qt(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return"unknown error "+t}}(e,t))}function Zt(e,t,n){const r=Vt(e,()=>t());if(null==r)throw new Error(n);return r}function Jt(e,t=2){return f(e.slice(0,e.length-t))}function en(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function tn(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[Jt(e),...en(e)]),t}function nn(e){return e%2==0}function rn(e,t){if(g(e=e.slice(-2),t=t.slice(-2)))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e.slice(-1)[0],r=t.slice(-1)[0];if(n===r)return!0;if(nn(n)&&nn(r)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&nn(e[0])&&nn(t[0])}let on,sn;function an(e,t){return null!=e.getExtension(t)}function un(e){try{if(null!=Ft(e))return!0}catch(e){return!1}return!1}function ln(e){if(0===e)return!1;const t=Ft(e);if(1!==e){if(an(t,"EXT_color_buffer_float"))return cn(t);const e="EXT_color_buffer_half_float";if(an(t,e)){const n=t.getExtension(e);return function(e,t){const n=Ut(e,t),r=e.createTexture();e.bindTexture(e.TEXTURE_2D,r);e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const o=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,o),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,r,0);const i=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(r),e.deleteFramebuffer(o),i}(t,n)}return!1}if(!an(t,"OES_texture_float"))return!1;if(!an(t,"WEBGL_color_buffer_float"))return!1;return cn(t)}function cn(e){const t=Ut(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n);e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const r=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,r),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const o=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(r),o}const hn=t();hn.registerFlag("HAS_WEBGL",()=>hn.getNumber("WEBGL_VERSION")>0),hn.registerFlag("WEBGL_VERSION",()=>un(2)?2:un(1)?1:0),hn.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1),hn.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>2===hn.get("WEBGL_VERSION")),hn.registerFlag("WEBGL_CPU_FORWARD",()=>!0),hn.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1),hn.registerFlag("WEBGL_PACK",()=>hn.getBool("HAS_WEBGL")),hn.registerFlag("WEBGL_PACK_NORMALIZATION",()=>hn.getBool("WEBGL_PACK")),hn.registerFlag("WEBGL_PACK_CLIP",()=>hn.getBool("WEBGL_PACK")),hn.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>!1),hn.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>hn.getBool("WEBGL_PACK")),hn.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>hn.getBool("WEBGL_PACK")),hn.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>hn.getBool("WEBGL_PACK")),hn.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>hn.getBool("WEBGL_PACK")),hn.registerFlag("WEBGL_PACK_REDUCE",()=>hn.getBool("WEBGL_PACK")),hn.registerFlag("WEBGL_LAZILY_UNPACK",()=>hn.getBool("WEBGL_PACK")),hn.registerFlag("WEBGL_CONV_IM2COL",()=>hn.getBool("WEBGL_PACK")),hn.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>function(e){if(null==on){const t=Ft(e);on=t.getParameter(t.MAX_TEXTURE_SIZE)}return on}(hn.getNumber("WEBGL_VERSION"))),hn.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>function(e){if(null==sn){const t=Ft(e);sn=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,sn)}(hn.getNumber("WEBGL_VERSION"))),hn.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{const e=hn.getNumber("WEBGL_VERSION");return 0===e?0:function(e){if(0===e)return 0;let t;const n=Ft(e);return t=an(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:an(n,"EXT_disjoint_timer_query")?1:0,t}(e)}),hn.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>hn.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!$t()),hn.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>function(e){if(0===e)return!1;const t=Ft(e);if(1===e){if(!an(t,"OES_texture_float"))return!1}else if(!an(t,"EXT_color_buffer_float"))return!1;return cn(t)}(hn.getNumber("WEBGL_VERSION"))),hn.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>!hn.getBool("WEBGL_FORCE_F16_TEXTURES")&&hn.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")),hn.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>ln(hn.getNumber("WEBGL_VERSION"))),hn.registerFlag("WEBGL_FENCE_API_ENABLED",()=>{return 2===(e=hn.getNumber("WEBGL_VERSION"))&&null!=Ft(e).fenceSync;var e}),hn.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>hn.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0),hn.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)});class dn{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map((e,t)=>"T"+t);const n=[];this.variableNames.forEach(e=>{n.push(`float v${e} = get${e}AtOutCoords();`)});const r=this.variableNames.map(e=>"v"+e).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `}}class pn{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map((e,t)=>"T"+t);const n=[];this.variableNames.forEach(e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)});const r=this.variableNames.map(e=>"v"+e).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `}}class fn{constructor(e,t,n){this.variableNames=["A"];const r=e.windowSize,o=e.batchSize,i=e.inSize,s=Math.ceil(i/r);n||this.variableNames.push("bestIndicesA"),this.outputShape=[o,s];const a="max"===t?">":"<",u=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${u};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${a} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}function gn(e,t){return["x","y","z","w","u","v"].slice(0,t).map(t=>`${e}.${t}`)}function xn(e,t){return 1===t?[e]:gn(e,t)}function mn(){let e,n,r,o,i,s,a,u,l,c;return 2===t().getNumber("WEBGL_VERSION")?(e="#version 300 es",n="in",r="out",o="in",i="texture",s="outputColor",a="out vec4 outputColor;",u="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",l="",c="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",n="attribute",r="varying",o="varying",i="texture2D",s="gl_FragColor",a="",u="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",c="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:n,varyingVs:r,varyingFs:o,texture2D:i,output:s,defineOutput:a,defineSpecialNaN:u,defineSpecialInf:l,defineRound:c}}function Cn(e,t,n="index"){const r=N(t);return r.map((t,o)=>`${`int ${e[o]} = ${n} / ${t}`}; ${o===r.length-1?`int ${e[o+1]} = ${n} - ${e[o]} * ${t}`:`index -= ${e[o]} * ${t}`};`).join("")}function vn(e){const t=N(e).map(e=>e.toString());return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}const $n="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:Rn}=vt;function yn(e,t,n,r){const o=[];e.forEach(e=>{const t=f(e.shapeInfo.logicalShape);e.shapeInfo.isUniform?o.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(o.push(`uniform sampler2D ${e.name};`),o.push(`uniform int offset${e.name};`))});const i=o.join("\n"),s=e.map(e=>function(e,t,n=!1){let r="";r+=n?bn(e):wn(e);const o=e.shapeInfo.logicalShape,i=t.logicalShape;o.length<=i.length&&(r+=n?function(e,t){const n=e.name,r=n.charAt(0).toUpperCase()+n.slice(1),o="get"+r+"AtOutCoords",i=e.shapeInfo.logicalShape.length,s=t.logicalShape.length,a=Rn(e.shapeInfo.logicalShape,t.logicalShape),u=Dn(s),l=s-i;let c;const h=["x","y","z","w","u","v"];c=0===i?"":s<2&&a.length>=1?"coords = 0;":a.map(e=>`coords.${h[e+l]} = 0;`).join("\n");let d="";d=s<2&&i>0?"coords":e.shapeInfo.logicalShape.map((e,t)=>"coords."+h[t+l]).join(", ");let p="return outputValue;";const g=1===f(e.shapeInfo.logicalShape),x=1===f(t.logicalShape);if(1!==i||g||x){if(g&&!x)p=1===s?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(a.length){const e=i-2,t=i-1;a.indexOf(e)>-1&&a.indexOf(t)>-1?p="return vec4(outputValue.x);":a.indexOf(e)>-1?p="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":a.indexOf(t)>-1&&(p="return vec4(outputValue.xx, outputValue.zz);")}}else p="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${o}() {\n      ${u} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${r}(${d});\n      ${p}\n    }\n  `}(e,t):function(e,t){const n=e.name,r=n.charAt(0).toUpperCase()+n.slice(1),o="get"+r+"AtOutCoords",i=t.texShape,s=e.shapeInfo.texShape,a=e.shapeInfo.logicalShape.length,u=t.logicalShape.length;if(!e.shapeInfo.isUniform&&a===u&&null==e.shapeInfo.flatOffset&&g(s,i))return`\n      float ${o}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const l=Dn(u),c=Rn(e.shapeInfo.logicalShape,t.logicalShape),h=u-a;let d;const p=["x","y","z","w","u","v"];d=0===a?"":u<2&&c.length>=1?"coords = 0;":c.map(e=>`coords.${p[e+h]} = 0;`).join("\n");let f="";f=u<2&&a>0?"coords":e.shapeInfo.logicalShape.map((e,t)=>"coords."+p[t+h]).join(", ");return`\n    float ${o}() {\n      ${l} coords = getOutputCoords();\n      ${d}\n      return get${r}(${f});\n    }\n  `}(e,t));return r}(e,t,r)).join("\n"),a=t.texShape,u=mn(),l=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(u);let c,h,d=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${En}\n    ${In}\n    ${An}\n  `}(u);t.isPacked?(c=function(e,t){switch(e.length){case 0:return _n();case 1:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(1===n[0])return`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${n[1]}.0);\n      }\n    `;if(1===n[1])return`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${n[0]}.0);\n      }\n    `;return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return 2 * (resTexRC.x * ${n[1]} + resTexRC.y);\n    }\n  `}(0,t);case 2:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(g(e,t))return`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${n[0]}, ${n[1]}));\n      }\n    `;const r=Math.ceil(e[1]/2);return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t);case 3:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(e[2]/2),o=r*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      int b = index / ${o};\n      index -= b * ${o};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t);default:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(e[e.length-1]/2),o=r*Math.ceil(e[e.length-2]/2);let i=o,s="",a="b, r, c";for(let t=2;t<e.length-1;t++)i*=e[e.length-t-1],s=`\n      int b${t} = index / ${i};\n      index -= b${t} * ${i};\n    `+s,a=`b${t}, `+a;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      ${s}\n\n      int b = index / ${o};\n      index -= b * ${o};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec${e.length}(${a});\n    }\n  `}(e,t)}}(t.logicalShape,a),h=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(u)):(c=function(e,t){switch(e.length){case 0:return _n();case 1:return function(e,t){if(1===t[0])return`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `;if(1===t[1])return`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `;return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t);case 2:return function(e,t){if(g(e,t))return`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `;if(1===e[1])return`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;if(1===e[0])return`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t);case 3:return function(e,t){const n=Cn(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${n}\n      return ivec3(r, c, d);\n    }\n  `}(e,t);case 4:return function(e,t){const n=Cn(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${n}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t);case 5:return function(e,t){const n=Cn(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=Cn(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(e.length+"-D output sampling is not yet supported")}}(t.logicalShape,a),h=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(u)),r&&(d+=Tn);return[d,l,h,i,c,s,n].join("\n")}function wn(e){const t=e.shapeInfo.logicalShape;switch(t.length){case 0:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1);if(e.shapeInfo.isUniform)return`float ${n}() {return ${t};}`;const[r,o]=e.shapeInfo.texShape;if(1===r&&1===o)return`\n      float ${n}() {\n        return sampleTexture(${t}, halfCR);\n      }\n    `;const[i,s]=e.shapeInfo.texShape,a=Nn(t);return`\n    float ${n}() {\n      vec2 uv = uvFromFlat(${i}, ${s}, ${a});\n      return sampleTexture(${t}, uv);\n    }\n  `}(e);case 1:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${n}(int index) {\n        ${On(e)}\n      }\n    `;const r=e.shapeInfo.texShape,o=r[0],i=r[1];if(1===i&&1===o)return`\n      float ${n}(int index) {\n        return sampleTexture(${t}, halfCR);\n      }\n    `;const s=Nn(t);if(1===i)return`\n      float ${n}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${s}) + 0.5) / ${o}.0);\n        return sampleTexture(${t}, uv);\n      }\n    `;if(1===o)return`\n      float ${n}(int index) {\n        vec2 uv = vec2((float(index + ${s}) + 0.5) / ${i}.0, 0.5);\n        return sampleTexture(${t}, uv);\n      }\n    `;return`\n    float ${n}(int index) {\n      vec2 uv = uvFromFlat(${o}, ${i}, index + ${s});\n      return sampleTexture(${t}, uv);\n    }\n  `}(e);case 2:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),o=e.shapeInfo.texShape;if(null!=o&&g(t,o)){const e=o[0],t=o[1];return`\n    float ${r}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${t}.0, ${e}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `}const{newShape:i,keptDims:s}=R(t),a=i;if(a.length<t.length){const t=Fn(e,a),n=["row","col"];return`\n      ${wn(t)}\n      float ${r}(int row, int col) {\n        return ${r}(${Sn(n,s)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${t[1]}, 1)));\n        ${On(e)}\n      }\n    `;const u=o[0],l=o[1],c=Nn(n);if(1===l)return`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${t[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;if(1===u)return`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${t[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${l}.0, 0.5);\n      return sampleTexture(${n}, uv);\n    }\n  `;return`\n  float ${r}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${t[1]} + col + ${c};\n    vec2 uv = uvFromFlat(${u}, ${l}, index);\n    return sampleTexture(${n}, uv);\n  }\n`}(e);case 3:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),o=t[1]*t[2],i=t[2],{newShape:s,keptDims:a}=R(t),u=s;if(u.length<t.length){const t=Fn(e,u),n=["row","col","depth"];return`\n        ${wn(t)}\n        float ${r}(int row, int col, int depth) {\n          return ${r}(${Sn(n,a)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${o}, ${i}, 1)));\n        ${On(e)}\n      }\n    `;const l=e.shapeInfo.texShape,c=l[0],h=l[1],d=e.shapeInfo.flatOffset;if(h===o&&null==d)return`\n        float ${r}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${i}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${h}.0, ${c}.0);\n          return sampleTexture(${n}, uv);\n        }\n      `;if(h===i&&null==d)return`\n    float ${r}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${t[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}.0, ${c}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;const p=Nn(n);return`\n      float ${r}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${o} + col * ${i} + depth + ${p};\n        vec2 uv = uvFromFlat(${c}, ${h}, index);\n        return sampleTexture(${n}, uv);\n      }\n  `}(e);case 4:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),o=t[3],i=t[2]*o,s=t[1]*i,{newShape:a,keptDims:u}=R(t);if(a.length<t.length){const t=Fn(e,a),n=["row","col","depth","depth2"];return`\n      ${wn(t)}\n      float ${r}(int row, int col, int depth, int depth2) {\n        return ${r}(${Sn(n,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${s}, ${i}, ${o}, 1)));\n        ${On(e)}\n      }\n    `;const l=e.shapeInfo.flatOffset,c=e.shapeInfo.texShape,h=c[0],d=c[1];if(d===s&&null==l)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${i}, ${o}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(d===o&&null==l)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${t[1]*t[2]}, ${t[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const p=Nn(n);return`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${s} + col * ${i} +\n          depth * ${o} + depth2;\n      vec2 uv = uvFromFlat(${h}, ${d}, index + ${p});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),o=t[4],i=t[3]*o,s=t[2]*i,a=t[1]*s,{newShape:u,keptDims:l}=R(t);if(u.length<t.length){const t=Fn(e,u),n=["row","col","depth","depth2","depth3"];return`\n      ${wn(t)}\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        return ${r}(${Sn(n,l)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${a}, ${s}, ${i}, ${o})) +\n          depth3;\n        ${On(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,d=h[0],p=h[1];if(p===a&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${s}, ${i}, ${o}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(p===o&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const f=Nn(n);return`\n    float ${r}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${a} + col * ${s} + depth * ${i} +\n          depth2 * ${o} + depth3 + ${f};\n      vec2 uv = uvFromFlat(${d}, ${p}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:o,keptDims:i}=R(t);if(o.length<t.length){const t=Fn(e,o),n=["row","col","depth","depth2","depth3","depth4"];return`\n      ${wn(t)}\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${r}(${Sn(n,i)});\n      }\n    `}const s=t[5],a=t[4]*s,u=t[3]*a,l=t[2]*u,c=t[1]*l;if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${l}, ${u}, ${a})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${s}, 1)));\n        ${On(e)}\n      }\n    `;const h=e.shapeInfo.flatOffset,d=e.shapeInfo.texShape,p=d[0],f=d[1];if(f===c&&null==h)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${l}, ${u}, ${a}, ${s})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===s&&null==h)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const g=Nn(n);return`\n    float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${l} + depth * ${u} +\n          depth2 * ${a} + depth3 * ${s} + depth4 + ${g};\n      vec2 uv = uvFromFlat(${p}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(t.length+"-D input sampling is not yet supported")}}function bn(e){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),r=mn();return`\n    vec4 ${n}() {\n      return ${r.texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),r=e.shapeInfo.texShape,o=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],i=mn();return`\n    vec4 ${n}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${o[0]}, ${o[1]}, index);\n      return ${i.texture2D}(${t}, uv);\n    }\n  `}(e);case 2:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),o=e.shapeInfo.texShape,i=o[0],s=o[1],a=mn();if(null!=o&&g(t,o))return`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}.0, ${i}.0);\n\n        return ${a.texture2D}(${n}, uv);\n      }\n    `;const u=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)],l=Math.ceil(t[1]/2);return`\n    vec4 ${r}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${l}, ${u[0]}, ${u[1]}, row, col);\n      return ${a.texture2D}(${n}, uv);\n    }\n  `}(e);case 3:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),o=e.shapeInfo.texShape,i=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)];if(1===t[0]){const n=t.slice(1),o=[1,2],i=Fn(e,n),s=["b","row","col"];return`\n        ${bn(i)}\n        vec4 ${r}(int b, int row, int col) {\n          return ${r}(${Sn(s,o)});\n        }\n      `}const s=i[0],a=i[1],u=Math.ceil(t[2]/2),l=u*Math.ceil(t[1]/2),c=mn();return`\n    vec4 ${r}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${s}, ${a}, ${l}, ${u}, b, row, col);\n      return ${c.texture2D}(${n}, uv);\n    }\n  `}(e);default:return function(e){const t=e.shapeInfo.logicalShape,n=t.length,r=e.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),i=e.shapeInfo.texShape,s=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)],a=s[0],u=s[1],l=Math.ceil(t[n-1]/2);let c=l*Math.ceil(t[n-2]/2),h="int b, int row, int col",d=`b * ${c} + (row / 2) * ${l} + (col / 2)`;for(let e=2;e<n-1;e++)h=`int b${e}, `+h,c*=t[n-e-1],d=`b${e} * ${c} + `+d;const p=mn();return`\n    vec4 ${o}(${h}) {\n      int index = ${d};\n      int texR = index / ${u};\n      int texC = index - texR * ${u};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${u}, ${a});\n      return ${p.texture2D}(${r}, uv);\n    }\n  `}(e)}}const En="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",In="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",An="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Tn="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function _n(){return"\n    int getOutputCoords() {\n      return 0;\n    }\n  "}function Nn(e){return"offset"+e}function On(e){const t=e.name,n=f(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function Dn(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function Fn(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function Sn(e,t){return t.map(t=>e[t]).join(", ")}class kn{constructor(e,t,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,d(e.length>2,()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`);const o=e[e.length-1],i=Math.ceil(o/t);this.outputShape=e.slice(0,-1),i>1&&this.outputShape.push(i),r||this.variableNames.push("bestIndicesA");const s=this.outputShape,a=s.length,u=Dn(a),l=xn("coords",a);let c,h;if(1===i){h=a+1;const e=Dn(h);c=`\n        ${e} sourceLocR = ${e}(${l.join()}, 0);\n        ++${l[a-1]};\n        ${e} sourceLocG = ${e}(${l.join()}, 0);\n        ++${l[a-2]};\n        ${e} sourceLocA = ${e}(${l.join()}, 0);\n        --${l[a-1]};\n        ${e} sourceLocB = ${e}(${l.join()}, 0);\n        --${l[a-2]};`}else h=a,c=`\n        ${u} sourceLocR = coords;\n        ++${l[a-1]};\n        ${u} sourceLocG = coords;\n        ++${l[a-2]};\n        ${u} sourceLocA = coords;\n        --${l[a-1]};\n        ${u} sourceLocB = coords;\n        --${l[a-2]};`;const p=["x","y","z","w","u","v"].slice(0,h),f="."+p[h-1],g=p.map(e=>"int "+e),x=xn("sourceLocR",h-1).concat("inIdx.r"),m=xn("sourceLocG",h-1).concat("inIdx.g"),C=xn("sourceLocB",h-1).concat("inIdx.b"),v=xn("sourceLocA",h-1).concat("inIdx.a"),$="max"===n?"greaterThan":"lessThan",R=r?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${x.join()}),\n                             getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${C.join()}),\n                             getBestIndicesAChannel(${v.join()})));`,y=`vec4(\n            getAChannel(${x.join()}),\n            hasNextCol ? getAChannel(${m.join()}) : 0.,\n            hasNextRow ? getAChannel(${C.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${v.join()}) : 0.)`,w=r?"":`\n      float getBestIndicesAChannel(${g.join()}) {\n        return getChannel(getBestIndicesA(${p.join()}),\n                                          vec2(${p.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${g.join()}) {\n        return getChannel(getA(${p.join()}),\n                               vec2(${p.slice(-2).join()}));\n      }\n      ${w}\n      void main() {\n        ${u} coords = getOutputCoords();\n        bool hasNextCol = ${l[a-1]} < ${s[a-1]-1};\n        bool hasNextRow = ${l[a-2]} < ${s[a-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${f}, sourceLocG${f},\n          sourceLocB${f}, sourceLocA${f}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${y};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${R}\n          vec4 candidate = ${y};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${$}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}class Bn{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,o=e.strideWidth,i=e.dilationHeight,s=e.dilationWidth,a=e.effectiveFilterHeight,u=e.effectiveFilterWidth,l=a-1-e.padInfo.top,c=u-1-e.padInfo.left,h=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${l}, ${c});\n      const float avgMultiplier = float(${h});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${a};\n            wR += ${i}) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${u};\n            wC+= ${s}) {\n            float dyC = float(dyCCorner + wC) / ${o}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Ln{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,o=e.strideDepth,i=e.strideHeight,s=e.strideWidth,a=e.dilationDepth,u=e.dilationHeight,l=e.dilationWidth,c=e.effectiveFilterDepth,h=e.effectiveFilterHeight,d=e.effectiveFilterWidth,p=c-1-e.padInfo.front,f=h-1-e.padInfo.top,g=d-1-e.padInfo.left,x=1/(t*n*r);this.userCode=`\n      const ivec3 pads = ivec3(${p}, ${f}, ${g});\n      const float avgMultiplier = float(${x});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${a}) {\n          float dyD = float(dyDCorner + wD) / ${o}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${u}) {\n            float dyR = float(dyRCorner + wR) / ${i}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${d};\n                wC += ${l}) {\n              float dyC = float(dyCCorner + wC) / ${s}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Pn{constructor(e,t,n,r,o,i){this.outputShape=[],this.variableNames=["x","mean","variance"],je(e,t),je(e,n);let s="0.0";null!=r&&(je(e,r),this.variableNames.push("offset"),s="getOffsetAtOutCoords()");let a="1.0";null!=o&&(je(e,o),this.variableNames.push("scale"),a="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${s};\n        float scale = ${a};\n        float inv = scale * inversesqrt(variance + float(${i}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class Mn{constructor(e,t,n,r,o,i){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],je(e,t),je(e,n);let s="vec4(0.0)";null!=r&&(je(e,r),this.variableNames.push("offset"),s="getOffsetAtOutCoords()");let a="vec4(1.0)";null!=o&&(je(e,o),this.variableNames.push("scale"),a="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${s};\n        vec4 scale = ${a};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${i}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const Un="return areal * breal - aimag * bimag;",Vn="return areal * bimag + aimag * breal;";class Wn{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=je(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const Gn="return a + b;",zn="return a - b;",Xn="return a * b;",Hn="return (a < 0.) ? b * a : a;";class Kn{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=je(t,n),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}const jn="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";class Yn{constructor(e,t,n,r=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=je(t,n);const o=this.outputShape.length;let i="";if(r)if(0===o||1===f(this.outputShape))i="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else{if(i=`\n          ${Dn(o)} coords = getOutputCoords();\n        `,1===o)i+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=xn("coords",o);i+=`\n            bool nextRowOutOfBounds =\n              (${e[o-2]} + 1) >= ${this.outputShape[o-2]};\n            bool nextColOutOfBounds =\n              (${e[o-1]} + 1) >= ${this.outputShape[o-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${i}\n\n        setOutput(result);\n      }\n    `}}class qn{constructor(e){this.variableNames=["A"],this.outputShape=e,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}getCustomSetupFunc(e,t){return(n,r)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(r,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(r,"maxVal")),n.gl.uniform1f(this.minLoc,e),n.gl.uniform1f(this.maxLoc,t)}}}class Qn{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}getCustomSetupFunc(e,t){return(n,r)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(r,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(r,"maxVal")),n.gl.uniform1f(this.minLoc,e),n.gl.uniform1f(this.maxLoc,t)}}}class Zn{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}class Jn{constructor(e){this.outputShape=[],this.outputShape=ze(e,1),this.variableNames=e.map((e,t)=>"T"+t);const t=new Array(e.length-1);t[0]=e[0][1];for(let n=1;n<t.length;n++)t[n]=t[n-1]+e[n][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++){const r=t[e-1];n.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${r}));`)}const r=t.length,o=t[t.length-1];n.push(`else setOutput(getT${r}(yR, yC-${o}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class er{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=ze(e,t);const n=this.outputShape,r=n.length,o=Dn(r),i=xn("coords",r),s=["x","y","z","w","u","v"].slice(0,r);this.variableNames=e.map((e,t)=>"T"+t);const a=new Array(e.length-1);a[0]=e[0][t];for(let n=1;n<a.length;n++)a[n]=a[n-1]+e[n][t];const u=s[t],l=s.slice(-2),c=s.join();let h=`if (${u} < ${a[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${l.join()}));\n        }`;for(let e=1;e<a.length;e++){const t=a[e-1];h+=`\n        if (${u} < ${a[e]}  && ${u} >= ${a[e-1]}) {\n          return getChannel(\n            getT${e}(${tr(s,u,t)}),\n            vec2(${tr(l,u,t)}));\n        }`}const d=a.length,p=a[a.length-1];h+=`\n        return getChannel(\n          getT${d}(${tr(s,u,p)}),\n          vec2(${tr(l,u,p)}));`,this.userCode=`\n      float getValue(${s.map(e=>"int "+e)}) {\n        ${h}\n      }\n\n      void main() {\n        ${o} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${i}), 0., 0., 0.);\n\n        ${i[r-1]} = ${i[r-1]} + 1;\n        if (${i[r-1]} < ${n[r-1]}) {\n          result.g = getValue(${i});\n        }\n\n        ${i[r-2]} = ${i[r-2]} + 1;\n        if (${i[r-2]} < ${n[r-2]}) {\n          result.a = getValue(${i});\n        }\n\n        ${i[r-1]} = ${i[r-1]} - 1;\n        if (${i[r-2]} < ${n[r-2]} &&\n            ${i[r-1]} < ${n[r-1]}) {\n          result.b = getValue(${i});\n        }\n        setOutput(result);\n      }\n    `}}function tr(e,t,n){const r=e.indexOf(t);return e.map((e,t)=>t===r?`${e} - ${n}`:e).join()}class nr{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,o=e.padInfo.left,i="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${r};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${o};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              if (${i}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class rr{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,o=e.strideWidth,i="channelsLast"===e.dataFormat,s=t-1-e.padInfo.top,a=n-1-e.padInfo.left,u=i?1:2,l=i?2:3,c=i?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${s}, ${a});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${u}], coords[${l}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${o}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${i}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class or{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,o=e.padInfo.front,i=e.padInfo.top,s=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${o};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${i};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${r} - ${s};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class ir{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,o=e.strideDepth,i=e.strideHeight,s=e.strideWidth,a=t-1-e.padInfo.front,u=n-1-e.padInfo.top,l=r-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${a}, ${u}, ${l});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${o}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${i}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${s}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class sr{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,o=e.padInfo.left,i=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${i} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${r};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${o};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class ar{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,o=e.strideWidth,i=t-1-e.padInfo.top,s=n-1-e.padInfo.left,a=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${s});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${o}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${a}; dm++) {\n              int d2 = d1 * ${a} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class ur{constructor(e,t=!1,n=null,r=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const o=e.padInfo.top,i=e.padInfo.left,s=e.strideHeight,a=e.strideWidth,u=e.dilationHeight,l=e.dilationWidth,c=e.filterHeight,h=e.filterWidth,d=4*Math.floor(e.inChannels/4),p=e.inChannels%4,f="channelsLast"===e.dataFormat,g=f?1:2,x=f?2:3,m=f?3:1;let C="",v="";n&&(C=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,v="result = activation(result);");const $=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${C}\n\n      const ivec2 strides = ivec2(${s}, ${a});\n      const ivec2 pads = ivec2(${o}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${m}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${x}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${c}; wR++) {\n          int xR = xRCorner + wR * ${u};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${h}; wC++) {\n            int xC = xCCorner + wC * ${l};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${d}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${f}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===p}) {\n\n              if (${f}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${d}) *\n                    getW(wR, wC, ${d}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${d}, xR, xC) *\n                    getW(wR, wC, ${d}, d2);\n              }\n\n            } else if (${2===p}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2)\n              );\n\n              if (${f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===p}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2),\n                getW(wR, wC, ${d} + 2, d2)\n              );\n\n              if (${f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1),\n                  getX(batch, xR, xC, ${d} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC),\n                  getX(batch, ${d} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${$}\n        ${v}\n        setOutput(result);\n      }\n    `}}class lr{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,r=e.padInfo.left,o=e.strideDepth,i=e.strideHeight,s=e.strideWidth,a=e.dilationDepth,u=e.dilationHeight,l=e.dilationWidth,c=e.filterDepth,h=e.filterHeight,d=e.filterWidth,p=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${o}, ${i}, ${s});\n      const ivec3 pads = ivec3(${t}, ${n}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${a};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${u};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${d}; wC++) {\n              int xC = xCCorner + wC * ${l};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${p}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${p}) *\n                  getW(wF, wR, wC, ${p}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${p}),\n                  getX(batch, xF, xR, xC, ${p} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${p}, d2),\n                  getW(wF, wR, wC, ${p} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${p}),\n                  getX(batch, xF, xR, xC, ${p} + 1),\n                  getX(batch, xF, xR, xC, ${p} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${p}, d2),\n                  getW(wF, wR, wC, ${p} + 1, d2),\n                  getW(wF, wR, wC, ${p} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class cr{constructor(e,t=!1,n=null,r=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const o=e.inHeight,i=e.inWidth,s=e.padInfo.top,a=e.padInfo.left,u=e.strideHeight,l=e.strideWidth,c=e.dilationHeight,h=e.dilationWidth,d=e.filterHeight,p=e.filterWidth,f=e.outChannels/e.inChannels;let g="",x="";n&&(g=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,x="result = activation(result);");const m=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${g}\n\n      const ivec2 strides = ivec2(${u}, ${l});\n      const ivec2 pads = ivec2(${s}, ${a});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${f};\n        int q = d2 - d1 * ${f};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${d}; wR++) {\n          int xR = xRCorner + wR * ${c};\n\n          if (xR < 0 || xR >= ${o}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${h};\n\n            if (xC < 0 || xC >= ${i}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${m}\n        ${x}\n        setOutput(result);\n      }\n    `}}class hr{constructor(e,t=!1,n=null,r=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.outShape;const o=e.inHeight,i=e.inWidth,s=e.padInfo.top,a=e.padInfo.left,u=e.strideHeight,l=e.strideWidth,c=e.dilationHeight,d=e.dilationWidth,p=e.filterHeight,f=e.filterWidth,g=f;let x="int xR; int xC; int xCOffset;";for(let e=0;e<p;e++)for(let t=0;t<f;t++)x+=`\n          vec4 xTexelR${e}C${2*t} = vec4(0.);\n          vec4 wR${e}C${t} = vec4(0.);\n          vec4 xR${e}C${t} = vec4(0.);`;for(let e=0;e<p;e++)for(let t=0;t<g;t++){const n=2*t;if(x+=`\n          xR = xRCorner + ${e*c};\n          xC = xCCorner + ${n*d};\n        `,1===l){if(n<f&&(x+=a%2==1?`\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < ${o} && xCOffset >= 0 && xCOffset < ${i}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${i}) {\n                    xTexelR${e}C${n}.zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < ${o} && xCOffset >= 0 && xCOffset < ${i}) {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${i}) {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR${e}C${n} = vec4(previous.zw, xTexelR${e}C${n}.xy);\n                } else {\n                  xR${e}C${n} = vec4(0, 0, xTexelR${e}C${n}.xy);\n                }\n              `:`\n                if(xR >= 0 && xR < ${o} && xC >= 0 && xC < ${i}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                xR${e}C${n} = xTexelR${e}C${n};\n              `,n+1<f)){const t=a%2==0?h(d):d;d%2==0&&a%2==1||d%2!=0&&a%2!=1?(x+=`\n                  xCOffset = xC + ${a%2} + ${t};\n\n                  if(xR >= 0 && xR < ${o} &&\n                    xCOffset >= 0 && xCOffset < ${i}) {\n                    xTexelR${e}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n                `,d>1&&(x+=`\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < ${o} &&\n                      xCOffset >= 0 && xCOffset < ${i}) {\n                      xTexelR${e}C${n} = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR${e}C${n} = vec4(0.);\n                    }\n                  `),x+=`\n                  xR${e}C${n+1} = vec4(\n                    xTexelR${e}C${n}.zw, xTexelR${e}C${n+2}.xy);\n                `):x+=`\n                  xCOffset = xC + ${t};\n\n                  if(xR >= 0 && xR < ${o} &&\n                    xCOffset >= 0 && xCOffset < ${i}) {\n                    xTexelR${e}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR${e}C${n+1} = xTexelR${e}C${n+2};\n                `}}else n<f&&(x+=`\n              if(xR >= 0 && xR < ${o}) {\n            `,a%2==1?(x+=`\n                xCOffset = xC + 1 - ${l};\n                if(xCOffset >= 0 && xCOffset < ${i}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${i}) {\n                  xTexelR${e}C${n+2} = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR${e}C${n+2} = vec4(0.);\n                }\n\n                xR${e}C${n} = vec4(\n                  xTexelR${e}C${n}.zw, xTexelR${e}C${n+2}.zw);\n              `,n+1<f&&(x+=`\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + ${l};\n                  if(xCOffset >= 0 && xCOffset < ${i}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR${e}C${n+1} = vec4(xTexelR${e}C${n+2}.xy, final.xy);\n                `)):(x+=`\n                if(xC >= 0 && xC < ${i}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + ${l};\n                if(xCOffset >= 0 && xCOffset < ${i}) {\n                  xTexelR${e}C${n+2} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${e}C${n+2} = vec4(0.);\n                }\n\n                xR${e}C${n} = vec4(\n                  xTexelR${e}C${n}.xy, xTexelR${e}C${n+2}.xy);\n              `,n+1<f&&(x+=`\n                  xR${e}C${n+1} = vec4(\n                    xTexelR${e}C${n}.zw, xTexelR${e}C${n+2}.zw);\n                `)),x+="}");n<f&&(x+=`\n            vec4 wTexelR${e}C${n} = getW(${e}, ${n}, d1, q);\n            wR${e}C${n} = vec4(wTexelR${e}C${n}.xz, wTexelR${e}C${n}.xz);\n          `,n+1<f&&(x+=`\n              vec4 wTexelR${e}C${n+1} = getW(${e}, ${n+1}, d1, q);\n              wR${e}C${n+1} =\n                vec4(wTexelR${e}C${n+1}.xz, wTexelR${e}C${n+1}.xz);`))}for(let e=0;e<p;e++)for(let t=0;t<f;t++)x+=`dotProd += xR${e}C${t} * wR${e}C${t};`;let m="",C="";n&&(m=r?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,C="result = activation(result);");const v=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${m}\n\n      const ivec2 strides = ivec2(${u}, ${l});\n      const ivec2 pads = ivec2(${s}, ${a});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        ${x}\n\n        vec4 result = dotProd;\n        ${v}\n        ${C}\n        setOutput(result);\n      }\n    `}}class dr{constructor(e,t,n,r,o){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[i,s,a,u]=e,[l]=t,[c,h]=n;this.outputShape=[l,c,h,u];const d="bilinear"===r?1:0,[p,f]=[s-1+".0",a-1+".0"],[g,x,m]=c>1?[""+(s-1)/(c-1),"(y2-y1) * height_ratio",`y1*${p} + float(y)*(height_scale)`]:["0.0","0.0","0.5 * (y1+y2) * "+p],[C,v,$]=h>1?[""+(a-1)/(h-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0","0.5 * (x1+x2) * "+f];this.userCode=`\n      const float height_ratio = float(${g});\n      const float width_ratio = float(${C});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${i}) {\n          return;\n        }\n\n        float height_scale = ${x};\n        float width_scale = ${v};\n\n        float in_y = ${m};\n        if( in_y < 0.0 || in_y > ${p} ) {\n          setOutput(float(${o}));\n          return;\n        }\n        float in_x = ${$};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${o}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${d} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}class pr{constructor(e,t,n){this.variableNames=["x"],this.outputShape=e;const r=e.length,o=t?"0.0":`getX(${fr(r,"coords")})`,i=e[e.length-1];let s="",a="";t?(s=n?"end != "+(i-1):"end != 0",a=n?"end + 1":"end - 1"):(s=n?"end + pow2 < "+i:"end >= pow2",a=n?"end + pow2":"end - pow2"),this.userCode=`\n      uniform float index;\n      void main() {\n        ${Dn(r)} coords = getOutputCoords();\n        int end = ${gr(r,"coords")};\n        float val = ${o};\n        int pow2 = int(pow(2.0, index));\n        if (${s}) {\n          int idx = ${a};\n          ${gr(r,"coords")} = idx;\n          val += getX(${fr(r,"coords")});\n        }\n        setOutput(val);\n      }\n    `}getCustomSetupFunc(e){return(t,n)=>{null==this.index&&(this.index=t.getUniformLocation(n,"index")),t.gl.uniform1f(this.index,e)}}}function fr(e,t){if(1===e)return""+t;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}function gr(e,t){if(1===e)return""+t;if(2===e)return t+".y";if(3===e)return t+".z";if(4===e)return t+".w";throw Error(`Cumulative sum for rank ${e} is not yet supported`)}class xr{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=St.DENSE;const t=Pt(e),n=mn();this.outputShape=e,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${Cn(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${t[0]}, ${t[1]}));\n        int index = 4 * (resTexRC.x * ${t[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${n.output} = result;\n      }\n    `}}class mr{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=St.DENSE;const t=Pt(e),n=mn();this.outputShape=e,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${Cn(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${t[0]}, ${t[1]}));\n        int index = 4 * (resTexRC.x * ${t[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${n.output} = result;\n      }\n    `}}class Cr{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}class vr{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}class $r{constructor(e){this.variableNames=["A"],this.outTexUsage=kt.DOWNLOAD;const t=mn();this.outputShape=e,this.userCode=`\n      ${$n}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class Rr{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=kt.DOWNLOAD;const t=mn();this.outputShape=e,this.userCode=`\n      ${$n}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}class yr{constructor(e,t,n=!1){this.variableNames=["A"];const r=mn(),[o,i]=t;this.outputShape=e;let s="result";n&&(s="floor(result * 255. + 0.5)"),this.userCode=`\n      ${vn(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / ${i};\n        int c = imod(flatIndex, ${i});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${i}.0, ${o}.0);\n        vec4 values = ${r.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${r.output} = vec4(${s}, 0., 0., 0.);\n      }\n    `}}class wr{constructor(e,t,n=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const r=mn(),[o,i]=t;this.outputShape=e;let s="",a="result";n&&(a="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let n=0;n<=1;n++){const a=2*t+n;s+=`\n          localCoords = coords;\n          if(localCoords[2] + ${n} < ${e[2]}) {\n            localCoords[2] += ${n};\n            if(localCoords[1] + ${t} < ${e[1]}) {\n              localCoords[1] += ${t};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${i};\n              c = imod(flatIndex, ${i});\n              uv = (vec2(c, r) + halfCR) / vec2(${i}.0, ${o}.0);\n              values = ${r.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${a}] = values[0];\n              } else if(offset == 1) {\n                result[${a}] = values[1];\n              } else if(offset == 2) {\n                result[${a}] = values[2];\n              } else {\n                result[${a}] = values[3];\n              }\n            }\n          }\n        `}this.userCode=`\n      ${vn(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${s}\n\n        ${r.output} = ${a};\n      }\n    `}}const br="return real * expR - imag * expI;",Er="return real * expI + imag * expR;";class Ir{constructor(e,t,n){this.variableNames=["real","imag"];const r=t[1];this.outputShape=t;const o=n?"2.0 * "+Math.PI:"-2.0 * "+Math.PI,i=n?r+".0":"1.0";this.userCode=`\n      const float exponentMultiplier = ${o};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${e}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${r});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${r}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${i};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}class Ar{constructor(e,t){this.outputShape=[],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}getCustomSetupFunc(e){return(t,n)=>{null==this.valueLoc&&(this.valueLoc=t.getUniformLocationNoThrow(n,"value")),t.gl.uniform1f(this.valueLoc,e)}}}class Tr{constructor(e,t,n){this.variableNames=["A","indices"];const r=e.slice();r[n]=t,this.outputShape=r,this.rank=r.length;const o=Dn(this.rank),i=function(e,t){const n=e.length;if(n>4)throw Error(`Gather for rank ${n} is not yet supported`);if(1===n)return"int(getIndices(resRC))";const r=["resRC.x","resRC.y","resRC.z","resRC.w"],o=[];for(let n=0;n<e.length;n++)n===t?o.push(`int(getIndices(${r[n]}))`):o.push(""+r[n]);return o.join()}(e,n);this.userCode=`\n      void main() {\n        ${o} resRC = getOutputCoords();\n        setOutput(getA(${i}));\n      }\n    `}}class _r{constructor(e,t,n){this.sliceDim=e,this.strides=t,this.variableNames=["x","indices"],this.outputShape=n;const r=Dn(t.length),o=Dn(n.length),i=this.sliceDim>1?"strides[j]":"strides";this.userCode=`\n        ${r} strides = ${r}(${this.strides});\n         void main() {\n          ${o} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${i};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}function Nr(e){const t=mn();return function(e,t){const n=Zt(e,()=>e.createShader(e.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(Vt(e,()=>e.shaderSource(n,t)),Vt(e,()=>e.compileShader(n)),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function Or(e){return function(e,t){const n=Zt(e,()=>e.createBuffer(),"Unable to create WebGLBuffer");return Vt(e,()=>e.bindBuffer(e.ARRAY_BUFFER,n)),Vt(e,()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW)),n}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function Dr(e){return function(e,t){const n=Zt(e,()=>e.createBuffer(),"Unable to create WebGLBuffer");return Vt(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n)),Vt(e,()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW)),n}(e,new Uint16Array([0,1,2,2,1,3]))}function Fr(e,n,r,o,i,s){!function(e,n){const r=t().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||n<=0){throw new Error("Requested texture size "+`[${e}x${n}]`+" is invalid.")}if(e>r||n>r){throw new Error("Requested texture size "+`[${e}x${n}]`+" greater than WebGL maximum on this browser / GPU "+`[${r}x${r}]`+".")}}(n,r);const a=function(e){return Zt(e,()=>e.createTexture(),"Unable to create WebGLTexture.")}(e),u=e.TEXTURE_2D;return Vt(e,()=>e.bindTexture(u,a)),Vt(e,()=>e.texParameteri(u,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE)),Vt(e,()=>e.texParameteri(u,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE)),Vt(e,()=>e.texParameteri(u,e.TEXTURE_MIN_FILTER,e.NEAREST)),Vt(e,()=>e.texParameteri(u,e.TEXTURE_MAG_FILTER,e.NEAREST)),Vt(e,()=>e.texImage2D(u,0,o,n,r,0,i,s,null)),Vt(e,()=>e.bindTexture(e.TEXTURE_2D,null)),a}function Sr(e){return e.internalFormatFloat}function kr(e){return e.internalFormatHalfFloat}function Br(e){return e.downloadTextureFormat}function Lr(e){return e.internalFormatPackedFloat}function Pr(e){return e.internalFormatPackedHalfFloat}function Mr(e,t,n,r,o,i,s,a){const u=e,l=new Float32Array(function(e,t){const[n,r]=Mt(e,t);return n*r*4}(i,s));return u.bindBuffer(u.PIXEL_PACK_BUFFER,t),u.getBufferSubData(u.PIXEL_PACK_BUFFER,0,l),u.bindBuffer(u.PIXEL_PACK_BUFFER,null),l}class Ur{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const n=t().getNumber("WEBGL_VERSION");null!=e?(this.gl=e,function(e,t){Ot[e]=t}(n,e)):this.gl=Ft(n);let r="WEBGL_color_buffer_float";if(1===t().getNumber("WEBGL_VERSION")){const e="OES_texture_float",n="OES_texture_half_float";if(this.textureFloatExtension=Gt(this.gl,e),an(this.gl,n))this.textureHalfFloatExtension=Gt(this.gl,n);else if(t().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(r),an(this.gl,"EXT_color_buffer_half_float"))this.colorBufferHalfFloatExtension=Gt(this.gl,"EXT_color_buffer_half_float");else if(t().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(r="EXT_color_buffer_float",an(this.gl,r))this.colorBufferFloatExtension=this.gl.getExtension(r);else{if(!an(this.gl,"EXT_color_buffer_half_float"))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension("EXT_color_buffer_half_float")}this.vertexBuffer=Or(this.gl),this.indexBuffer=Dr(this.gl),this.framebuffer=function(e){return Zt(e,()=>e.createFramebuffer(),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=Ut(this.gl,this.textureHalfFloatExtension)}get debug(){return t().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;Vt(e,()=>e.finish()),Vt(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,null)),Vt(e,()=>e.deleteFramebuffer(this.framebuffer)),Vt(e,()=>e.bindBuffer(e.ARRAY_BUFFER,null)),Vt(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)),Vt(e,()=>e.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[o,i]=Lt(t,n);return Fr(e,o,i,Sr(r),r.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[o,i]=Lt(t,n);return Fr(e,o,i,kr(r),r.textureFormatFloat,r.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[o,i]=Lt(t,n);return Fr(e,o,i,Br(r),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),function(e,t,n){Vt(e,()=>e.bindTexture(e.TEXTURE_2D,t)),n.data instanceof Uint8Array?Vt(e,()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data)):Vt(e,()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n)),Vt(e,()=>e.bindTexture(e.TEXTURE_2D,null))}(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,r){this.throwIfDisposed(),function(e,t,n,r,o,i){let s,a,u;Vt(e,()=>e.bindTexture(e.TEXTURE_2D,t)),o instanceof Uint8Array?(s=new Uint8Array(n*r*4),a=e.UNSIGNED_BYTE,u=e.RGBA):(s=new Float32Array(n*r*4),a=e.FLOAT,u=i.internalFormatPackedFloat),s.set(o),Vt(e,()=>e.texImage2D(e.TEXTURE_2D,0,u,n,r,0,e.RGBA,a,s)),Vt(e,()=>e.bindTexture(e.TEXTURE_2D,null))}(this.gl,e,t,n,r,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[o,i]=Mt(t,n);return Fr(e,o,i,Pr(r),e.RGBA,r.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[o,i]=Mt(t,n);return Fr(e,o,i,Lr(r),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(qt(this.gl,this.framebuffer),this.outputTexture=null),Vt(this.gl,()=>this.gl.deleteTexture(e))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,()=>function(e,t,n,r){const[o,i]=Lt(t,n),s=new Uint8Array(t*n*4);return Vt(e,()=>e.readPixels(0,0,o,i,r.downloadTextureFormat,e.UNSIGNED_BYTE,s)),new Float32Array(s.buffer)}(this.gl,t,n,this.textureConfig))}downloadPackedMatrixFromBuffer(e,t,n,r,o,i){return Mr(this.gl,e,0,0,0,o,i,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return function(e,t,n){const r=e,o=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,t),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,o),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),o}(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const r=function(e,t,n,r){const o=e.createBuffer();Vt(e,()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,o));const i=16*t*n;return Vt(e,()=>e.bufferData(e.PIXEL_PACK_BUFFER,i,e.STREAM_READ)),Vt(e,()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0)),Vt(e,()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null)),o}(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let n,r;if(t().getBool("WEBGL_FENCE_API_ENABLED")){const t=e,o=t.fenceSync(t.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),r=()=>{const e=t.clientWaitSync(o,0,0);return e===t.ALREADY_SIGNALED||e===t.CONDITION_SATISFIED},n=o}else t().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(n=this.beginQuery(),this.endQuery(),r=()=>this.isQueryAvailable(n,t().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):r=()=>!0;return{query:n,isFencePassed:r}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,()=>function(e,t,n){const r=new Float32Array(t*n*4);return Vt(e,()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,r)),r}(this.gl,t,n))}createProgram(e){this.throwIfDisposed();const t=this.gl,n=zt(t,e),r=Nr(t),o=function(e){return Zt(e,()=>e.createProgram(),"Unable to create WebGLProgram.")}(t);return Vt(t,()=>t.attachShader(o,r)),Vt(t,()=>t.attachShader(o,n)),function(e,t){if(Vt(e,()=>e.linkProgram(t)),!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(t,o),this.debug&&Ht(t,o),this.vertexAttrsAreBound||(this.setProgram(o),this.vertexAttrsAreBound=function(e,t,n){return Vt(e,()=>e.bindBuffer(e.ARRAY_BUFFER,n)),Kt(e,t,"clipSpacePos",n,3,20,0)&&Kt(e,t,"uv",n,2,20,12)}(t,this.program,this.vertexBuffer)),o}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&Vt(this.gl,()=>this.gl.deleteProgram(e))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&Ht(this.gl,this.program),Vt(this.gl,()=>this.gl.useProgram(e))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?function(e,t,n){return Zt(e,()=>e.getUniformLocation(t,n),'uniform "'+n+'" not present in program.')}(this.gl,e,t):function(e,t,n){return e.getUniformLocation(t,n)}(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),Vt(this.gl,()=>this.gl.getAttribLocation(e,t))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),function(e,t,n,r){Vt(e,()=>jt(e,t,r)),Vt(e,()=>e.uniform1i(n,r))}(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[r,o]=Mt(t,n);this.setOutputMatrixTextureDriver(e,r,o)}setOutputMatrixWriteRegion(e,t,n,r){this.setOutputMatrixWriteRegionDriver(n,e,r,t)}setOutputPackedMatrixWriteRegion(e,t,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&Ht(this.gl,this.program),Qt(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;this.debug&&this.debugValidate(),Vt(e,()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),Vt(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=Gt(this.gl,2===t().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===t().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),n=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,n),n}endQuery(){if(2===t().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await v(()=>this.disposed||this.isQueryAvailable(e,t().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),this.getQueryTime(e,t().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),r=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),r&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise(t=>{this.addItemToPoll(()=>e.isFencePassed(),()=>t())})}pollItems(){const e=function(e){let t=0;for(;t<e.length;++t){if(!e[t]())break}return t-1}(this.itemsToPoll.map(e=>e.isDoneFn));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1||v(()=>(this.pollItems(),0===this.itemsToPoll.length))}bindTextureToFrameBuffer(e){this.throwIfDisposed(),Yt(this.gl,e,this.framebuffer),this.debug&&Qt(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(Yt(this.gl,this.outputTexture,this.framebuffer),this.debug&&Qt(this.gl)):qt(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const r=this.gl;Yt(r,e,this.framebuffer),this.debug&&Qt(r),this.outputTexture=e,Vt(r,()=>r.viewport(0,0,t,n)),Vt(r,()=>r.scissor(0,0,t,n))}setOutputMatrixWriteRegionDriver(e,t,n,r){this.throwIfDisposed(),Vt(this.gl,()=>this.gl.scissor(e,t,n,r))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}function Vr(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach((e,n)=>{const r=e.logicalShape,o=t[n],i=o.shape;if(!g(r,i))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${i} must match`);if(e.isUniform&&o.isUniform)return;const s=e.texShape,a=o.isUniform?null:o.texData.texShape;if(!g(s,a))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${s} and ${a} must match`)})}class Wr{constructor(e,t,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;const{filterWidth:r,inChannels:o,strideWidth:i,strideHeight:s,padInfo:a,outWidth:u,dilationWidth:l,dilationHeight:c,dataFormat:h}=n,{left:d,top:p}=a,f=o*r,g=mn(),x="channelsLast"===h,m=x?0:1,C=x?1:2;let v="";for(let n=0;n<=1;n++)for(let r=0;r<=1;r++)v+=`\n          blockIndex = rc.y + ${r};\n          pos = rc.x + ${n};\n\n          if(blockIndex < ${e[1]} && pos < ${e[0]}) {\n            offsetY = int(blockIndex / (${u})) * ${s} - ${p};\n            d0 = offsetY + ${c} * (pos / ${f});\n\n            if(d0 < ${t[m]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${u}.) * ${i}. - ${d}.);\n              d1 = offsetX + ${l} * (int(mod(float(pos), ${f}.) / ${o}.));\n\n              if(d1 < ${t[C]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${o}.));\n\n                if (${x}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*n+r}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*n+r}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${v}\n\n        ${g.output} = result;\n      }\n    `}}class Gr{constructor(e,t,n,r,o){this.variableNames=["x"],this.outputShape=[];const i=t,s=e[3]-1;let a;this.outputShape=e;const u=`float(${n}) + float(${r}) * sum`;a=.5===o?`inversesqrt(${u})`:1===o?`1.0/(${u})`:`exp(log(${u}) * float(-${o}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${i}; j <= ${i}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${s}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${a};\n        setOutput(val);\n      }\n    `}}class zr{constructor(e,t,n,r,o){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=r,this.beta=o,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${o})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${o});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}class Xr{constructor(e,t,n,r,o){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const i=t,s=e[3]-1;let a;this.outputShape=e;const u=`float(${n}) + float(${r}) * sum`;a=.5===o?`inversesqrt(${u})`:1===o?`1.0/(${u})`:`exp(log(${u}) * float(-${o}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${i};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${i}; j <= ${i}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${s}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${a};\n        setOutput(result);\n      }\n    `}}class Hr{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,r=e.dilationHeight,o=e.effectiveFilterHeight,i=e.effectiveFilterWidth,s=o-1-e.padInfo.top,a=i-1-e.padInfo.left,u=o*i-1;this.userCode=`\n      const ivec2 pads = ivec2(${s}, ${a});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n          wR += ${r}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${i}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${u} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${i} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Kr{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,o=e.dilationDepth,i=e.dilationHeight,s=e.dilationWidth,a=e.effectiveFilterDepth,u=e.effectiveFilterHeight,l=e.effectiveFilterWidth,c=a-1-e.padInfo.front,h=u-1-e.padInfo.top,d=l-1-e.padInfo.left,p=a*u*l-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${h}, ${d});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${a};\n           wD += ${o}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${u};\n              wR += ${i}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${l};\n                wC += ${s}) {\n              float dyC = float(dyCCorner + wC) / ${r}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${p} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${u} * ${l} +\n                  wR * ${l} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class jr{constructor(e,t,n=!1,r=!1,o=!1,i=null,s=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;const a=n?e[1]:e[2],u=Math.ceil(a/2),l=n?"i * 2, rc.y":"rc.y, i * 2",c=r?"rc.z, i * 2":"i * 2, rc.z",h=n?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],d=r?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let p="",f="";i&&(p=s?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${i}\n        }`:`vec4 activation(vec4 x) {\n          ${i}\n        }`,f="result = activation(result);");const g=o?"result += getBiasAtOutCoords();":"";o&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${p}\n\n      const float sharedDimension = ${u}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${u}; i++) {\n          vec4 a = getMatrixA(rc.x, ${l});\n          vec4 b = getMatrixB(rc.x, ${c});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${h[0]} * ${d[0]});\n          result += (${h[1]} * ${d[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${g}\n\n        ${f}\n\n        setOutput(result);\n      }\n    `}}class Yr{constructor(e,t,n){this.variableNames=["probs"],this.outputShape=[e,n],this.userCode=`\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}getCustomSetupFunc(e){return(t,n)=>{null==this.seedLoc&&(this.seedLoc=t.getUniformLocation(n,"seed")),t.gl.uniform1f(this.seedLoc,e)}}}class qr{constructor(e,t,n,r){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}class Qr{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e;const t=e.length;if(0===t)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const n=xn("rc",t),r=Dn(t),o=function(e,t,n){if(1===e)return"rc > "+t[0];let r="";for(let o=e-2;o<e;o++)r+=`${n[o]} >= ${t[o]}`,o<e-1&&(r+="||");return r}(t,e,n),i=function(e,t,n,r){if(1===e)return"";const o=r.slice(-2);return`\n    int r = ${o[0]};\n    int c = ${o[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${t};\n    bool rEdge = rp1 >= ${n};\n  `}(t,e[e.length-1],e[e.length-2],n),s=function(e,t){const n=e.length,r=function(e,t){const n=[];for(let r=0;r<=1;r++)for(let o=0;o<=1;o++){let i=`${0===r?"r":"rp1"}, ${0===o?"c":"cp1"}`;for(let n=2;n<e;n++)i=t[t.length-1-n]+","+i;n.push(i)}return n}(n,t);if(1===n)return`getA(rc),\n            rc + 1 >= ${e[0]} ? 0. : getA(rc + 1),\n            0, 0`;return`getA(${r[0]}),\n          cEdge ? 0. : getA(${r[1]}),\n          rEdge ? 0. : getA(${r[2]}),\n          rEdge || cEdge ? 0. : getA(${r[3]})`}(e,n);this.userCode=`\n        void main() {\n          ${r} rc = getOutputCoords();\n\n          if(${o}) {\n            setOutput(vec4(0));\n          } else {\n            ${i}\n\n            setOutput(vec4(${s}));\n          }\n        }\n      `}}}class Zr{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);const r=e.length,o=Dn(r),i=t.map(e=>e[0]).join(","),s=t.map((t,n)=>t[0]+e[n]).join(","),a=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${o} start = ${o}(${i});\n      ${o} end = ${o}(${s});\n\n      void main() {\n        ${o} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(${n}));\n        } else {\n          ${o} coords = outC - start;\n          setOutput(getX(${a}));\n        }\n      }\n    `:`\n        int start = ${i};\n        int end = ${s};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(${n}));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class Jr{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);const r=e.length,o=Dn(r),i=t.map(e=>e[0]).join(","),s=t.map((t,n)=>t[0]+e[n]).join(","),a=xn("rc",r),u=xn("source",r),l=`${a[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${u.slice(-2).join()})`,h=[o+" rc = outputLoc;",`${a[r-1]} += 1;\n       if(${l}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${a[r-2]} += 1;\n       if(${a[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${a[r-1]} += 1;\n         if(${l}) {`],d=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let p="";for(let e=0,t=1===r?2:4;e<t;e++)p+=`\n        ${h[e]}\n        if (${d}) {\n          result[${e}] = float(${n});\n        } else {\n          ${o} source = rc - start;\n          result[${e}] = getChannel(getX(${u.join()}), ${c});\n        }\n      `;p+=1===r?"} ":"}}",this.userCode=`\n      const ${o} start = ${o}(${i});\n      const ${o} end = ${o}(${s});\n\n      void main() {\n        ${o} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}class eo{constructor(e,t,n,r=!1,o=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const i=e.filterWidth,s=e.strideHeight,a=e.strideWidth,u=e.dilationHeight,l=e.dilationWidth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,d=e.padInfo.top,p=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t,g=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,x=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let m="0.0";if(f||(m="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${s}, ${a});\n        const ivec2 pads = ivec2(${d}, ${p});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${u}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${l}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?o?g:x:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let C=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(C="avgValue / count");const v=4*Math.floor(i/4),$=i%4,R=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${s}, ${a});\n      const ivec2 pads = ivec2(${d}, ${p});\n      const float initializationValue = ${m};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${m});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${u}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${v}; wC += 4) {\n            int xC = xCCorner + wC * ${l};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              getValue(batch, xR, xC + 3 * ${l}, d)\n            );\n\n            ${R}\n          }\n\n          int xC = xCCorner + ${v};\n          if (${1===$}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${R}\n          } else if (${2===$}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${R}\n          } else if (${3===$}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              initializationValue\n            );\n\n            ${R}\n          }\n        }\n        setOutput(${C});\n      }\n    `}}class to{constructor(e,t,n,r=!1,o=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const i=e.filterWidth,s=e.strideDepth,a=e.strideHeight,u=e.strideWidth,l=e.dilationDepth,c=e.dilationHeight,h=e.dilationWidth,d=e.effectiveFilterDepth,p=e.effectiveFilterHeight,f=e.effectiveFilterWidth,g=e.padInfo.front,x=e.padInfo.top,m=e.padInfo.left;this.outputShape=e.outShape;const C="avg"===t;let v="0.0";if(C||(v="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${s}, ${a}, ${u});\n        const ivec3 pads = ivec3(${g}, ${x}, ${m});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${d};\n              wD += ${l}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${p};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r?o?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${p} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let $=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&($="avgValue / count");const R=4*Math.floor(i/4),y=i%4,w=`\n      if (${C}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${s}, ${a}, ${u});\n      const ivec3 pads = ivec3(${g}, ${x}, ${m});\n      const float initializationValue = ${v};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${v});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${d};\n            wD += ${l}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${p};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${R}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${w}\n            }\n\n            int xC = xCCorner + ${R};\n            if (${1===y}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${w}\n            } else if (${2===y}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${w}\n            } else if (${3===y}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${w}\n            }\n          }\n          setOutput(${$});\n        }\n      }\n    `}}class no{constructor(e,t){this.variableNames=["x"];const n=e.windowSize,r=e.batchSize,o=e.inSize,i=Math.ceil(o/n);this.outputShape=[r,i];let s="0.0",a="";"prod"===t?s="1.0":"min"===t?(s="1.0 / 1e-20",a="min"):"max"===t&&(s="-1.0 / 1e-20",a="max");let u=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?u="sumValue":"prod"===t?u="prodValue":"all"===t?u="allValue":"any"===t&&(u="anyValue");const l=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${a}(values, minMaxValue);\n      }\n    `,d="vec4";"all"===t?(s="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",d="bvec4"):"any"===t&&(s="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",d="bvec4");let p="";o%n>0&&(p=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${s};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${p}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${s});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${l}; i += 4) {\n          int inIdx = inOffset + i;\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${l};\n        if (${1===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${u});\n      }\n    `}}class ro{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;let n="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),n+=`\n        ${t}\n        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${e}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${e>0?"}":""}\n      `}var r;this.userCode=`\n      ${r=t,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${Cn(["r","c","d"],r)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${vn(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${e[1]};\n        int cols = ${e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class oo{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t.shape;const[,r,o]=t.shape,[,i,s]=e.shape,a=[n&&i>1?r-1:r,n&&s>1?o-1:o],u=[n&&i>1?i-1:i,n&&s>1?s-1:s],l=a[0]/u[0],c=a[1]/u[1],h=1/l,d=1/c,p=2*Math.ceil(h)+2,f=2*Math.ceil(d)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${d});\n\n        const int winHeight = int(${p});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${i}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${s}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${o-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}class io{constructor(e,t,n,r){this.variableNames=["A"],this.outputShape=[];const[o,i,s,a]=e;this.outputShape=[o,t,n,a];const u=[r&&t>1?i-1:i,r&&n>1?s-1:s],l=[r&&t>1?t-1:t,r&&n>1?n-1:n];this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/l[0]},\n          ${u[1]/l[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${s}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class so{constructor(e,t,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[o,i,s,a]=e;this.outputShape=[o,t,n,a];const u=[r&&t>1?i-1:i,r&&n>1?s-1:s],l=[r&&t>1?t-1:t,r&&n>1?n-1:n];this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/l[0]},\n          ${u[1]/l[1]},\n          ${u[1]/l[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${s}.0,\n                                     ${s}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${a-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}class ao{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t.shape;const[,r,o]=t.shape,[,i,s]=e.shape,a=[n&&i>1?r-1:r,n&&s>1?o-1:o],u=[n&&i>1?i-1:i,n&&s>1?s-1:s],l=a[0]/u[0],c=a[1]/u[1],h=1/l,d=1/c,p=2*Math.ceil(h)+2,f=2*Math.ceil(d)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${d});\n\n        const int winHeight = int(${p});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${i}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${s}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${a[0]}) *\n                (float(dyR) / float(${u[0]}));\n\n            float sourceFracCol =\n                float(${a[1]}) *\n                  (float(dyC) / float(${u[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${o}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}class uo{constructor(e,t,n,r){this.variableNames=["A"],this.outputShape=[];const[o,i,s,a]=e;this.outputShape=[o,t,n,a];const u=[r&&t>1?i-1:i,r&&n>1?s-1:s],l=[r&&t>1?t-1:t,r&&n>1?n-1:n],c=r?"0.5":"0.0";this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/l[0]},\n          ${u[1]/l[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${s}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${c})));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class lo{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const r=e.map((n,r)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(r)).join(","),o=Dn(n);this.userCode=`\n      void main() {\n        ${o} coords = getOutputCoords();\n        setOutput(getX(${r}));\n      }\n    `}}class co{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const r=xn("rc",n),o=`${r[n-1]} + 1 < ${this.outputShape[n-1]}`,i=`${r[n-2]} + 1 < ${this.outputShape[n-2]}`,s=Dn(n);function a(n){const r=e.map((r,o)=>function(n,r){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${r[n]} - 1`:""+r[n]}(o,n));return`getChannel(getX(${r.join(",")}), vec2(${r.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${o}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${s} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(e){return a(e)}(r.slice())};\n          if(${o}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",a(e)}(r.slice())};\n          }\n          if(${i}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",a(e)}(r.slice())};\n            if(${o}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",a(e)}(r.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}class ho{constructor(e,t,n,r,o,i,s=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=i;const a=Dn(o.length),u=Dn(i.length);let l="";1===n?l="i":2===n&&(l="i, j");const c=`getIndices(${l})`;let h="";1===r?h="i":2===r&&(h="i, coords[1]");const d=`getUpdates(${h})`,p=t>1?"strides[j]":"strides";this.userCode=`\n        ${a} strides = ${a}(${o});\n\n        void main() {\n          ${u} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${p};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${d};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}class po{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,r=e.batchSize,o=e.inSize,i=e.numSegments,s=i*Math.ceil(o/n);this.outputShape=[r,s];const a=4*Math.floor(n/4),u=n%4,l="\n        sumValue += dot(values, segFilter);\n    ";let c="";o%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return initializationValue;\n        }\n      `);let h="";o%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${i})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${i})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${a}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${a};\n        if (${1===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${l}\n        } else if (${2===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${l}\n        } else if (${3===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}class fo{constructor(e,t,n){let r,o;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)o="resRC",r="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],i=[],s=[];for(let r=0;r<t.length;r++)s.push(""+n[r]),r<e&&i.push(""+n[r]);r=i.join(),o=s.join()}const i=Dn(n);this.userCode=`\n      void main() {\n        ${i} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${o}));\n        } else {\n          setOutput(getB(${o}));\n        }\n      }\n    `}}class go{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=Dn(this.rank),n=`uniform int start[${this.rank}];`,r=function(e){if(1===e)return"sourceLoc";if(e<=6)return xo.slice(0,e).map(e=>"sourceLoc."+e).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let o;o=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map((e,t)=>`sourceLoc.${xo[t]} = start[${t}] + coords.${xo[t]};`).join("\n")}\n      `,this.userCode=`\n      ${n}\n      void main() {\n        ${o}\n        setOutput(getSource(${r}));\n      }\n    `}getCustomSetupFunc(e){if(e.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${e.length})`);return(t,n)=>{null==this.startLoc&&(this.startLoc=t.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||t.gl.uniform1iv(this.startLoc,e)}}}const xo=["x","y","z","w","u","v"];class mo{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length;const t=Dn(this.rank),n=xn("coords",this.rank),r=xn("sourceLoc",this.rank),o=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,i=`getChannel(getSource(${r.join()}), ${o})`,s=`\n      result.x = ${i};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${i};\n        --${r[this.rank-1]};\n      }\n    `,a=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${i};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${i};\n        }\n      }\n    `,u=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map((e,t)=>`start[${t}]`).join()});`:e.map((e,t)=>`${r[t]} = ${n[t]} + start[${t}];`).join("\n");this.userCode=`\n      uniform int start[${this.rank}];\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${u}\n        vec4 result = vec4(0.);\n        ${s}\n        ${a}\n        setOutput(result);\n      }\n    `}getCustomSetupFunc(e){if(e.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${e.length})`);return(t,n)=>{null==this.startLoc&&(this.startLoc=t.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||t.gl.uniform1iv(this.startLoc,e)}}}class Co{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const r=n.length,o=Dn(n.length),i=Dn(n.length);let s="";if(1===r)s="coords * strides + begin";else{let e=0;s=n.map((t,r)=>(e++,1===n.length?`coords * strides[${r}] + begin[${r}]`:`coords[${e-1}] * strides[${r}] + begin[${r}]`)).join(",")}this.userCode=`\n      ${o} begin = ${o}(${e});\n      ${o} strides = ${o}(${t});\n\n      void main() {\n        ${i} coords = getOutputCoords();\n        setOutput(getX(${s}));\n      }\n    `}}class vo{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,n){const r=Ro(t,n),o=yo(e,r,n);o in this.freeTextures||(this.freeTextures[o]=[]),o in this.usedTextures||(this.usedTextures[o]=[]);const i=$o(e,r,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[o].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=i,this.log();const e=this.freeTextures[o].shift();return this.usedTextures[o].push(e),e}let s;return r===Bt.PACKED_2X2_FLOAT32?s=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):r===Bt.PACKED_2X2_FLOAT16?s=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):r===Bt.UNPACKED_FLOAT32?s=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):r===Bt.UNPACKED_FLOAT16?s=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):r===Bt.PACKED_4X1_UNSIGNED_BYTE&&(s=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[o].push(s),this.numUsedTextures++,this._numBytesAllocated+=i,this.log(),s}releaseTexture(e,n,r,o){if(null==this.freeTextures)return;const i=Ro(r,o),s=yo(n,i,o);s in this.freeTextures||(this.freeTextures[s]=[]);const a=$o(n,i,this.gpgpu.gl,this.gpgpu.textureConfig,o),u=t().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==u&&this._numBytesAllocated>u?(this.gpgpu.deleteMatrixTexture(e),this._numBytesAllocated-=a):(this.freeTextures[s].push(e),this.numFreeTextures++,this._numBytesFree+=a),this.numUsedTextures--;const l=this.usedTextures[s],c=l.indexOf(e);if(c<0)throw new Error("Cannot release a texture that was never provided by this texture manager");l.splice(c,1),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log("Bytes allocated: "+this._numBytesAllocated),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach(e=>{this.gpgpu.deleteMatrixTexture(e)});for(const e in this.usedTextures)this.usedTextures[e].forEach(e=>{this.gpgpu.deleteMatrixTexture(e)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function $o(e,t,n,r,o){const i=function(e,t){switch(e){case Bt.PACKED_2X2_FLOAT32:return Lr(t);case Bt.PACKED_2X2_FLOAT16:return Pr(t);case Bt.UNPACKED_FLOAT32:return Sr(t);case Bt.UNPACKED_FLOAT16:return kr(t);case Bt.PACKED_4X1_UNSIGNED_BYTE:return Br(t);default:throw new Error("Unknown physical texture type "+e)}}(t,r);let s;if(o){const[t,n]=Mt(e[0],e[1]);s=t*n}else{const[t,n]=Lt(e[0],e[1]);s=t*n}return s*function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;throw new Error("Unknown internal format "+t)}(n,i)}function Ro(e,n){if(e===kt.UPLOAD)return Bt.PACKED_2X2_FLOAT32;if(e===kt.RENDER||null==e)return function(e){return t().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?Bt.PACKED_2X2_FLOAT32:Bt.UNPACKED_FLOAT32:e?Bt.PACKED_2X2_FLOAT16:Bt.UNPACKED_FLOAT16}(n);if(e===kt.DOWNLOAD||e===kt.PIXELS)return Bt.PACKED_4X1_UNSIGNED_BYTE;throw new Error("Unknown logical texture type "+e)}function yo(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class wo{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[r]*t[r];this.outputShape=n,this.rank=n.length;const r=Dn(this.rank),o=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[];for(let t=0;t<e.length;t++)r.push(`imod(${n[t]}, ${e[t]})`);return r.join()}(e);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${o}));\n      }\n    `}}class bo{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const Eo="if (isnan(x)) return x;",Io="return abs(x);",Ao=Eo+"\n  return (x < 0.0) ? 0.0 : x;\n",To=Eo+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",_o="return (x >= 0.0) ? x : (exp(x) - 1.0);";const No="return -x;",Oo="return ceil(x);",Do="return floor(x);",Fo="return exp(x);",So="return exp(x) - 1.0;",ko="return x;",Bo="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",Lo="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",Po="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n";class Mo{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class Uo{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e;const t=e.length,n=xn("rc",t),r=Dn(t),o=function(e,t){if(1===e)return"rc";let n="";for(let r=0;r<e;r++)n+=t[r],r<e-1&&(n+=",");return n}(t,n),i=n.slice(-2),s=t<=1?"rc":`vec2(${i.join(",")})`;this.userCode=`\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${o});\n\n        setOutput(getChannel(packedInput, ${s}));\n      }\n    `}}const{segment_util:Vo}=vt,Wo=function(e,t,n){const r=new Array(e.rank).fill(0),o=e.shape.slice();return t.map(t=>{const i=[...o];i[n]=t;const s=Xe(e,r,i);return r[n]+=t,s})},Go=function(e,t){const n=new Array(e.rank);for(let r=0;r<n.length;r++)n[r]=e.shape[r]*t[r];const r=He(n,e.dtype);for(let t=0;t<r.values.length;++t){const n=r.indexToLoc(t),o=new Array(e.rank);for(let t=0;t<o.length;t++)o[t]=n[t]%e.shape[t];const i=e.locToIndex(o);r.values[t]=e.values[i]}return r.toTensor()},zo=function(e,t,n,r,o){const i=t[t.length-1],[s,a]=[e.length/i,i],u=y(n,s*r),l=y("int32",s*r);for(let t=0;t<s;t++){const n=t*a,o=e.subarray(n,n+a),i=[];for(let e=0;e<o.length;e++)i.push({value:o[e],index:e});i.sort((e,t)=>t.value-e.value);const s=t*r,c=u.subarray(s,s+r),h=l.subarray(s,s+r);for(let e=0;e<r;e++)c[e]=i[e].value,h[e]=i[e].index}const c=t.slice();return c[c.length-1]=r,[ge(u,c,n),ge(l,c,"int32")]},Xo=function(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const r=He(e,"int32"),o=He([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const i=r.indexToLoc(n[t]),s=t*e.length;o.values.set(i,s)}return o.toTensor()},Ho={};function Ko(e,t=!1){if("linear"===e)return"return x;";if("relu"===e)return t?Bo:Ao;if("elu"===e)return t?Po:_o;if("relu6"===e)return t?Lo:To;if("prelu"===e)return t?jn:Hn;throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class jo extends class{time(e){return wt("time")}read(e){return wt("read")}readSync(e){return wt("readSync")}numDataIds(){return wt("numDataIds")}disposeData(e){return wt("disposeData")}write(e,t,n){return wt("write")}move(e,t,n,r){return wt("move")}memory(){return wt("memory")}floatPrecision(){return wt("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}batchMatMul(e,t,n,r){return wt("batchMatMul")}fusedBatchMatMul({a:e,b:t,transposeA:n,transposeB:r,bias:o,activation:i,preluActivationWeights:s}){return wt("fusedBatchMatMul")}slice(e,t,n){return wt("slice")}stridedSlice(e,t,n,r){return wt("stridedSlice")}unstack(e,t){return wt("unstack")}reverse(e,t){return wt("reverse")}concat(e,t){return wt("concat")}neg(e){return wt("neg")}add(e,t){return wt("add")}addN(e){return wt("addN")}subtract(e,t){return wt("subtract")}multiply(e,t){return wt("multiply")}realDivide(e,t){return wt("realDivide")}floorDiv(e,t){return wt("floorDiv")}sum(e,t){return wt("sum")}prod(e,t){return wt("prod")}unsortedSegmentSum(e,t,n){return wt("unsortedSegmentSum")}argMin(e,t){return wt("argMin")}argMax(e,t){return wt("argMax")}equal(e,t){return wt("equal")}notEqual(e,t){return wt("notEqual")}less(e,t){return wt("less")}lessEqual(e,t){return wt("lessEqual")}greater(e,t){return wt("greater")}greaterEqual(e,t){return wt("greaterEqual")}logicalNot(e){return wt("logicalNot")}logicalAnd(e,t){return wt("logicalAnd")}logicalOr(e,t){return wt("logicalOr")}where(e){return wt("where")}select(e,t,n){return wt("select")}topk(e,t,n){return wt("topk")}min(e,t){return wt("min")}minimum(e,t){return wt("minimum")}mod(e,t){return wt("mod")}max(e,t){return wt("max")}maximum(e,t){return wt("maximum")}all(e,t){return wt("all")}any(e,t){return wt("any")}squaredDifference(e,t){return wt("squaredDifference")}ceil(e){return wt("ceil")}floor(e){return wt("floor")}round(e){return wt("round")}sign(e){return wt("sign")}isNaN(e){return wt("isNaN")}isInf(e){return wt("isInf")}isFinite(e){return wt("isFinite")}pow(e,t){return wt("pow")}exp(e){return wt("exp")}expm1(e){return wt("expm1")}softmax(e,t){return wt("softmax")}log(e){return wt("log")}log1p(e){return wt("log1p")}sqrt(e){return wt("sqrt")}rsqrt(e){return wt("rsqrt")}square(e){return wt("square")}reciprocal(e){return wt("reciprocal")}relu(e){return wt("relu")}relu6(e){return wt("relu6")}prelu(e,t){return wt("prelu")}elu(e){return wt("elu")}eluDer(e,t){return wt("eluDer")}selu(e){return wt("selu")}int(e){return wt("int")}clip(e,t,n){return wt("clip")}abs(e){return wt("abs")}complexAbs(e){return wt("complexAbs")}sigmoid(e){return wt("sigmoid")}softplus(e){return wt("softplus")}sin(e){return wt("sin")}cos(e){return wt("cos")}tan(e){return wt("tan")}asin(e){return wt("asin")}acos(e){return wt("acos")}atan(e){return wt("atan")}atan2(e,t){return wt("atan2")}sinh(e){return wt("sinh")}cosh(e){return wt("cosh")}tanh(e){return wt("tanh")}asinh(e){return wt("asinh")}acosh(e){return wt("acosh")}atanh(e){return wt("atanh")}erf(e){return wt("erf")}step(e,t){return wt("step")}fusedConv2d({input:e,filter:t,convInfo:n,bias:r,activation:o,preluActivationWeights:i}){return wt("fusedConv2d")}conv2d(e,t,n){return wt("conv2d")}conv2dDerInput(e,t,n){return wt("conv2dDerInput")}conv2dDerFilter(e,t,n){return wt("conv2dDerFilter")}fusedDepthwiseConv2D({input:e,filter:t,convInfo:n,bias:r,activation:o,preluActivationWeights:i}){return wt("fusedDepthwiseConv2D")}depthwiseConv2D(e,t,n){return wt("depthwiseConv2D")}depthwiseConv2DDerInput(e,t,n){return wt("depthwiseConv2DDerInput")}depthwiseConv2DDerFilter(e,t,n){return wt("depthwiseConv2DDerFilter")}conv3d(e,t,n){return wt("conv3d")}conv3dDerInput(e,t,n){return wt("conv3dDerInput")}conv3dDerFilter(e,t,n){return wt("conv3dDerFilter")}maxPool(e,t){return wt("maxPool")}maxPoolBackprop(e,t,n,r){return wt("maxPoolBackprop")}avgPool(e,t){return wt("avgPool")}avgPoolBackprop(e,t,n){return wt("avgPoolBackprop")}avgPool3d(e,t){return wt("avgPool3d")}avgPool3dBackprop(e,t,n){return wt("avgPool3dBackprop")}maxPool3d(e,t){return wt("maxPool3d")}maxPool3dBackprop(e,t,n,r){return wt("maxPool3dBackprop")}reshape(e,t){return wt("reshape")}cast(e,t){return wt("cast")}tile(e,t){return wt("tile")}pad(e,t,n){return wt("pad")}transpose(e,t){return wt("transpose")}gather(e,t,n){return wt("gather")}gatherND(e,t){return wt("gatherND")}scatterND(e,t,n){return wt("scatterND")}batchToSpaceND(e,t,n){return wt("batchToSpaceND")}spaceToBatchND(e,t,n){return wt("spaceToBatchND")}resizeBilinear(e,t,n,r){return wt("resizeBilinear")}resizeBilinearBackprop(e,t,n){return wt("resizeBilinearBackprop")}resizeNearestNeighbor(e,t,n,r){return wt("resizeNearestNeighbor")}resizeNearestNeighborBackprop(e,t,n){return wt("resizeNearestNeighborBackprop")}batchNorm(e,t,n,r,o,i){return wt("batchNorm")}localResponseNormalization4D(e,t,n,r,o){return wt("localResponseNormalization4D")}LRNGrad(e,t,n,r,o,i,s){return wt("LRNGrad")}multinomial(e,t,n,r){return wt("multinomial")}oneHot(e,t,n,r){return wt("oneHot")}cumsum(e,t,n,r){return wt("cumsum")}nonMaxSuppression(e,t,n,r,o){return wt("nonMaxSuppression")}fft(e){return wt("fft")}ifft(e){return wt("ifft")}complex(e,t){return wt("complex")}real(e){return wt("real")}imag(e){return wt("imag")}cropAndResize(e,t,n,r,o,i){return wt("cropAndResize")}depthToSpace(e,t,n){return wt("depthToSpace")}split(e,t,n){return wt("split")}sparseToDense(e,t,n,r){return wt("sparseToDense")}diag(e){return wt("diag")}fill(e,t,n){return wt("fill")}onesLike(e){return wt("onesLike")}zerosLike(e){return wt("zerosLike")}linspace(e,t,n){return wt("linspace")}dispose(){return wt("dispose")}}{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.warnedAboutMemory=!1,this.warnedAboutCPUBackend=!1,this.pendingDeletes=0,this.disposed=!1,!t().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==e){const e=Ft(t().getNumber("WEBGL_VERSION"));this.binaryCache=((n=t().getNumber("WEBGL_VERSION"))in Ho||(Ho[n]={}),Ho[n]),this.gpgpu=new Ur(e),this.canvas=e.canvas,this.gpgpuCreatedLocally=!0}else this.gpgpu=e,this.binaryCache={},this.gpgpuCreatedLocally=!1,this.canvas=e.gl.canvas;var n;this.textureManager=new vo(this.gpgpu),this.numMBBeforeWarning=null==t().global.screen?1024:t().global.screen.height*t().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new yt(this,Oe())}numDataIds(){return this.texData.numDataIds()+(this.cpuBackend?this.cpuBackend.numDataIds():0)-this.pendingDeletes}write(e,n,r){if((t().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||t().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===r&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const o={};return this.texData.set(o,{shape:n,dtype:r,values:e,usage:kt.UPLOAD}),o}move(e,n,r,o){if(t().getBool("DEBUG")&&this.checkNumericalProblems(n),"complex64"===o)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:r,dtype:o,values:n,usage:kt.UPLOAD})}readSync(e){const t=this.texData.get(e),{values:n,dtype:r,complexTensors:o,slice:i,shape:s,isPacked:a}=t;if(null!=i){let t;t=a?new Mo(s,ko):new bo(s,ko);const n=this.runWebGLProgram(t,[{dataId:e,shape:s,dtype:r}],r),o=this.readSync(n.dataId);return this.disposeData(n.dataId),o}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===r)return n;const u=null!=this.activeTimers;let l,c;if(u&&(l=S()),"complex64"===r){c=gt(o.real.dataSync(),o.imag.dataSync())}else c=this.getValuesFromTexture(e);return u&&(this.downloadWaitMs+=S()-l),this.convertAndCacheOnCPU(e,c)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise(e=>t.push(e))}const n=this.texData.get(e),{values:r,shape:o,slice:i,dtype:s,complexTensors:a,isPacked:u}=n;if(null!=i){let t;t=u?new Mo(o,ko):new bo(o,ko);const n=this.runWebGLProgram(t,[{dataId:e,shape:o,dtype:s}],s),r=this.read(n.dataId);return this.disposeData(n.dataId),r}if(null!=r)return this.convertAndCacheOnCPU(e);if(!t().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===t().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let l,c,h=null;if("complex64"!==s&&t().get("WEBGL_BUFFER_SUPPORTED")){l=this.decode(e);const t=this.texData.get(l.dataId);h=this.gpgpu.createBufferFromTexture(t.texture,...Pt(o))}if(this.pendingRead.set(e,[]),"complex64"!==s&&await this.gpgpu.createAndWaitForFence(),"complex64"===s){const e=await Promise.all([a.real.data(),a.imag.data()]);c=gt(e[0],e[1])}else if(null==h)c=this.getValuesFromTexture(e);else{const e=f(o);c=this.gpgpu.downloadFloat32MatrixFromBuffer(h,e)}null!=l&&this.disposeData(l.dataId);const d=this.convertAndCacheOnCPU(e,c),p=this.pendingRead.get(e);return this.pendingRead.delete(e),p.forEach(e=>e(d)),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e),this.pendingDeletes--),d}checkNumericalProblems(e){if(null!=e)for(let n=0;n<e.length;n++){const r=e[n];if(!Wt(r)){if(t().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${r} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${r} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:n,dtype:r,isPacked:o}=this.texData.get(e),i=f(n);if(t().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const t=this.decode(e),r=this.texData.get(t.dataId),o=this.gpgpu.downloadMatrixFromPackedTexture(r.texture,...Pt(n)).subarray(0,i);return this.disposeData(t.dataId),o}const s=t().getBool("WEBGL_PACK")&&!0===o,a=s?tn(n):n,u=s?new Rr(a):new $r(a),l=this.runWebGLProgram(u,[{shape:a,dtype:r,dataId:e}],"float32"),c=this.texData.get(l.dataId),h=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(c.texture,c.texShape[0],c.texShape[1]).subarray(0,i);return this.disposeData(l.dataId),h}async time(e){const n=this.activeTimers,r=[];let o=!1;null==this.programTimersStack?(this.programTimersStack=r,o=!0):this.activeTimers.push(r),this.activeTimers=r,e();const i=p(this.activeTimers.map(e=>e.query)).filter(e=>null!=e),s=p(this.activeTimers.map(e=>e.name)).filter(e=>null!=e);this.activeTimers=n,o&&(this.programTimersStack=null);const a={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};if(t().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(i);a.kernelMs=function(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}(e),a.getExtraProfileInfo=()=>e.map((e,t)=>({name:s[t],ms:e})).map(e=>`${e.name}: ${e.ms}`).join(", ")}else a.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,a}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return t().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:S(),endMs:null}}endTimer(e){return t().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=S(),e)}async getQueryTime(e){if(t().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const n=e;return n.endMs-n.startMs}disposeData(e){if(this.pendingDisposal.has(e))return;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),void this.pendingDeletes++;if(!this.texData.has(e))return;this.releaseGPUData(e);const{complexTensors:t}=this.texData.get(e);null!=t&&(t.real.dispose(),t.imag.dispose()),this.texData.delete(e)}releaseGPUData(e){const{texture:t,dtype:n,texShape:r,usage:o,isPacked:i,slice:s}=this.texData.get(e),a=s&&s.origDataId||e,u=this.dataRefCount.get(a);u>1?this.dataRefCount.set(a,u-1):(this.dataRefCount.delete(a),null!=t&&(this.numBytesInGPU-=this.computeBytes(r,n),this.textureManager.releaseTexture(t,r,o,i)));const l=this.texData.get(e);l.texture=null,l.texShape=null,l.isPacked=!1,l.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture}getDataInfo(e){return this.texData.get(e)}getCPUBackend(){return t().getBool("WEBGL_CPU_FORWARD")?(null==this.cpuBackend&&(this.cpuBackend=Oe().findBackend("cpu")),this.cpuBackend):null}shouldExecuteOnCPU(e,n=128){const r=this.getCPUBackend();return this.warnedAboutCPUBackend||null!=r||t().getBool("IS_TEST")||(console.warn("Your application contains ops that are small enough to be executed on the CPU backend, however the CPU backend cannot be found. Consider importing the CPU backend (@tensorflow/tfjs-backend-cpu) for better performance."),this.warnedAboutCPUBackend=!0),null!=r&&e.every(e=>null==this.texData.get(e.dataId).texture&&f(e.shape)<n)}getGPGPUContext(){return this.gpgpu}complex(e,t){const n=this.makeOutput(e.shape,"complex64");return this.texData.get(n.dataId).complexTensors={real:Oe().keep(e.clone()),imag:Oe().keep(t.clone())},n}real(e){return this.texData.get(e.dataId).complexTensors.real.clone()}imag(e){return this.texData.get(e.dataId).complexTensors.imag.clone()}slice(e,n,r){if(this.shouldExecuteOnCPU([e]))return this.cpuBackend.slice(e,n,r);if(0===f(r))return ge([],r,e.dtype);const{isPacked:o}=this.texData.get(e.dataId),i=function(e,t,n){let r=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){r=e;break}for(let o=r+1;o<n.length;o++)if(t[o]>0||n[o]!==e[o])return!1;return!0}(e.shape,n,r);if(o||!i){const o=t().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new mo(r):new go(r),i=o.getCustomSetupFunc(n);return this.compileAndRun(o,[e],null,i)}return this.uploadToGPU(e.dataId),this.shallowSlice(e,n,r)}shallowSlice(e,t,n){const r=this.texData.get(e.dataId),o=this.makeOutput(n,e.dtype),i=this.texData.get(o.dataId);Object.assign(i,r),i.shape=n,i.dtype=e.dtype;let s=function(e,t){let n=e.length>0?e[e.length-1]:1;for(let r=0;r<e.length-1;r++)n+=e[r]*t[r];return n}(t,e.strides);r.slice&&(s+=r.slice.flatOffset),i.slice={flatOffset:s,origDataId:r.slice&&r.slice.origDataId||e.dataId};const a=this.dataRefCount.get(i.slice.origDataId)||1;return this.dataRefCount.set(i.slice.origDataId,a+1),o}stridedSlice(e,t,n,r){if(this.shouldExecuteOnCPU([e]))return this.cpuBackend.stridedSlice(e,t,n,r);const o=function(e,t,n){const r=[];for(let o=0;o<e.length;o++)r[o]=Math.ceil((t[o]-e[o])/n[o]);return r}(t,n,r);if(o.some(e=>0===e))return ge([],o);const i=new Co(t,r,o);return this.compileAndRun(i,[e])}reverse(e,n){const r=t().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new co(e.shape,n):new lo(e.shape,n);return this.compileAndRun(r,[e])}concat(e,n){if("complex64"===e[0].dtype){const t=e.map(e=>Je(e)),r=e.map(e=>Ze(e));return pe(this.concat(t,n),this.concat(r,n))}if(this.shouldExecuteOnCPU(e))return this.cpuBackend.concat(e,n);if(1===e.length)return e[0];if(e.length>t().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(e.length/2),r=this.concat(e.slice(0,t),n),o=this.concat(e.slice(t),n);return this.concat([r,o],n)}if(t().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&e[0].rank>1){const t=new er(e.map(e=>e.shape),n);return this.compileAndRun(t,e)}const r=ze(e.map(e=>e.shape),n),o=e.map(e=>e.as2D(-1,f(e.shape.slice(n)))),i=new Jn(o.map(e=>e.shape));return this.compileAndRun(i,o).reshape(r)}neg(e){if(this.shouldExecuteOnCPU([e]))return this.cpuBackend.neg(e);if(t().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,No,e.dtype);const n=new bo(e.shape,No);return this.compileAndRun(n,[e])}batchMatMul(e,t,n,r){const o=n?e.shape[2]:e.shape[1],i=r?t.shape[1]:t.shape[2],s=n?e.shape[1]:e.shape[2],[a,,]=e.shape;if((1===o||1===i)&&s>1e3){n&&(e=Ce(e,[0,2,1])),r&&(t=Ce(t,[0,2,1]));const o=1===i?e:e.as3D(a,s,1),u=1===i?2:1,l=1===i?t.as3D(a,1,s):t;return this.multiply(o,l).sum(u,!0)}const u=te(e.dtype,t.dtype),l=new jr(e.shape,[a,o,i],n,r);return this.compileAndRun(l,[e,t],u)}fusedBatchMatMul({a:e,b:t,transposeA:n,transposeB:r,bias:o,activation:i,preluActivationWeights:s}){const a=n?e.shape[2]:e.shape[1],u=r?t.shape[1]:t.shape[2],[l,,]=e.shape,c=te(e.dtype,t.dtype),h=null!=o,d=null!=s,p=i?Ko(i,!0):null,f=new jr(e.shape,[l,a,u],n,r,h,p,d),g=[e,t];return o&&g.push(o),s&&g.push(s),this.compileAndRun(f,g,c)}multiply(e,n){if("complex64"===e.dtype){const t=this.texData.get(e.dataId),r=this.texData.get(n.dataId),o=new Wn(Un,e.shape,n.shape),i=new Wn(Vn,e.shape,n.shape),s=[this.makeComplexComponentTensorInfo(e,t.complexTensors.real),this.makeComplexComponentTensorInfo(e,t.complexTensors.imag),this.makeComplexComponentTensorInfo(n,r.complexTensors.real),this.makeComplexComponentTensorInfo(n,r.complexTensors.imag)],a=this.compileAndRun(o,s),u=this.compileAndRun(i,s),l=this.complex(a,u);return a.dispose(),u.dispose(),l}if(this.shouldExecuteOnCPU([e,n]))return this.cpuBackend.multiply(e,n);if(t().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,n,Xn,e.dtype);const r=new Kn(Xn,e.shape,n.shape);return this.compileAndRun(r,[e,n],e.dtype)}batchNorm(e,n,r,o,i,s){const a=[e,n,r];let u=null;null!=o&&(u=o.shape,a.push(o));let l=null;if(null!=i&&(l=i.shape,a.push(i)),t().getBool("WEBGL_PACK_NORMALIZATION")){const t=new Mn(e.shape,n.shape,r.shape,u,l,s);return this.compileAndRun(t,a)}const c=new Pn(e.shape,n.shape,r.shape,u,l,s);return this.compileAndRun(c,a)}localResponseNormalization4D(e,n,r,o,i){const s=t().getBool("WEBGL_PACK_NORMALIZATION")?new Xr(e.shape,n,r,o,i):new Gr(e.shape,n,r,o,i);return this.compileAndRun(s,[e])}LRNGrad(e,t,n,r,o,i,s){const a=new zr(t.shape,r,o,i,s);return this.compileAndRun(a,[t,n,e])}tile(e,t){if("string"===e.dtype){const n=this.readSync(e.dataId).map(e=>B(e)),r=He(e.shape,e.dtype,n);return Go(r,t)}const n=new wo(e.shape,t);return this.compileAndRun(n,[e])}pad(e,n,r){const o=t().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Jr(e.shape,n,r):new Zr(e.shape,n,r);return this.compileAndRun(o,[e])}gather(e,t,n){if(this.shouldExecuteOnCPU([e,t]))return this.cpuBackend.gather(e,t,n);const r=new Tr(e.shape,t.size,n);return this.compileAndRun(r,[e,t])}batchToSpaceND(e,t,n){d(e.rank<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");const r=t.reduce((e,t)=>e*t),o=lt(e.shape,t,r),i=ct(o.length,t.length),s=ht(e.shape,t,r),a=dt(n,t.length),u=pt(s,n,t.length);return Ce(e.reshape(o),i).reshape(s).slice(a,u)}spaceToBatchND(e,t,n){d(e.rank<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");const r=t.reduce((e,t)=>e*t),o=[[0,0]];o.push(...n);for(let n=1+t.length;n<e.shape.length;++n)o.push([0,0]);const i=e.pad(o),s=lt(i.shape,t,r,!1),a=ct(s.length,t.length,!1),u=ht(i.shape,t,r,!1),l=Ce(i.reshape(s),a);return me(l,u)}reduce(e,t,n){const r=e.shape[0],o=e.shape[1],i=qe(o),s=new no({windowSize:i,inSize:o,batchSize:r},t),a=this.compileAndRun(s,[e],n);return 1===a.shape[1]?a:this.reduce(a,t,n)}argReduce(e,t,n=null){let r=e.shape[0],o=e.shape[1];null!=n&&(r=n.shape[0],o=n.shape[1]);const i=qe(o),s=new fn({windowSize:i,inSize:o,batchSize:r},t,null==n),a=[e];null!=n&&a.push(n);const u=this.compileAndRun(s,a,"int32");return 1===u.shape[1]?u:this.argReduce(e,t,u)}argReducePacked(e,t,n=null){const r=null!=n?n.shape:e.shape,o=qe(r[r.length-1]),i=new kn(r,o,t,null==n),s=null==n?[e]:[e,n],a=this.compileAndRun(i,s,"int32");return a.rank===e.rank?this.argReducePacked(e,t,a):a}sum(e,t){we("sum",t,e.rank);const[n,r]=Re(e.shape,t),o=f(r),i=e.as2D(-1,o),s=ne(e.dtype);return this.reduce(i,"sum",s).reshape(n)}prod(e,t){if(this.shouldExecuteOnCPU([e]))return this.cpuBackend.prod(e,t);const[n,r]=Re(e.shape,t),o=f(r),i=e.as2D(-1,o),s=ne(e.dtype);return this.reduce(i,"prod",s).reshape(n)}unsortedSegmentSum(e,t,n){let r=0;const o=be([r],e.rank);let i=e;null!=o&&(i=Ce(e,o),r=Ie(1,e.rank)[0]);const s=Vo.computeOutShape(i.shape,r,n),a=f([i.shape[r]]),u=i.as2D(-1,a),l=ne(e.dtype);let c=this.segOpCompute(u,"unsortedSegmentSum",t,l,n).reshape(s);return null!=o&&(c=Ce(c,Ee(o))),c}segOpCompute(e,t,n,r,o){const i=e.shape[0],s=e.shape[1],a=Vo.segOpComputeOptimalWindowSize(s,o),u=new po({windowSize:a,inSize:s,batchSize:i,numSegments:o},t),l=this.compileAndRun(u,[e,n],r);return l.shape[1]===o?l:(n=function(e,t,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");const o={start:e,stop:t,step:n,dtype:r};return ae.runKernelFunc(()=>{if(e===t||e<t&&n<0||t<e&&n>1)return nt([0],r);const o=F(Math.abs(Math.ceil((t-e)/n)),r);t<e&&1===n&&(n=-1),o[0]=e;for(let e=1;e<o.length;e++)o[e]=o[e-1]+n;return ot(o,r)},{},null,"Range",o)}(0,o).tile([s/a]),this.segOpCompute(l,t,n,r,o))}argMinMaxReduce(e,n,r){const o=[n];if(we("arg"+r.charAt(0).toUpperCase()+r.slice(1),o,e.rank),!t().getBool("WEBGL_PACK_REDUCE")||e.rank<=2){const[t,n]=Re(e.shape,o),i=f(n),s=e.as2D(-1,i);return this.argReduce(s,r).reshape(t)}return this.argReducePacked(e,r)}argMin(e,t){return this.argMinMaxReduce(e,t,"min")}argMax(e,t){return this.argMinMaxReduce(e,t,"max")}cumsum(e,t,n,r){if(t!==e.rank-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${e.rank-1} but got axis=`+t);const o=e.shape[t];let i=e;for(let t=0;t<=Math.ceil(Math.log2(o))-1;t++){const n=new pr(e.shape,!1,r),o=n.getCustomSetupFunc(t),s=i;i=this.compileAndRun(n,[i],i.dtype,o),s.dispose()}if(n){const t=new pr(e.shape,n,r),o=i;i=this.compileAndRun(t,[i]),o.dispose()}return i}equal(e,n){if(t().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,n,"\n  return vec4(equal(a, b));\n","bool");const r=new Kn("return float(a == b);",e.shape,n.shape);return this.compileAndRun(r,[e,n],"bool")}notEqual(e,n){if(t().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,n,"\n  return vec4(notEqual(a, b));\n","bool");const r=new Kn("return float(a != b);",e.shape,n.shape);return this.compileAndRun(r,[e,n],"bool")}less(e,n){if(this.shouldExecuteOnCPU([e,n]))return this.cpuBackend.less(e,n);if(t().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,n,"\n  return vec4(lessThan(a, b));\n","bool");const r=new Kn("return float(a < b);",e.shape,n.shape);return this.compileAndRun(r,[e,n],"bool")}lessEqual(e,n){if(t().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,n,"\n  return vec4(lessThanEqual(a, b));\n","bool");const r=new Kn("return float(a <= b);",e.shape,n.shape);return this.compileAndRun(r,[e,n],"bool")}greater(e,n){if(this.shouldExecuteOnCPU([e,n]))return this.cpuBackend.greater(e,n);if(t().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,n,"\n  return vec4(greaterThan(a, b));\n","bool");const r=new Kn("return float(a > b);",e.shape,n.shape);return this.compileAndRun(r,[e,n],"bool")}greaterEqual(e,n){if(t().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,n,"\n  return vec4(greaterThanEqual(a, b));\n","bool");const r=new Kn("return float(a >= b);",e.shape,n.shape);return this.compileAndRun(r,[e,n],"bool")}logicalNot(e){const t=new bo(e.shape,"return float(!(x >= 1.0));");return this.compileAndRun(t,[e])}logicalAnd(e,n){if(t().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,n,"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n","bool");const r=new Kn("return float(a >= 1.0 && b >= 1.0);",e.shape,n.shape);return this.compileAndRun(r,[e,n],"bool")}logicalOr(e,n){if(t().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,n,"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n","bool");const r=new Kn("return float(a >= 1.0 || b >= 1.0);",e.shape,n.shape);return this.compileAndRun(r,[e,n],"bool")}select(e,t,n){const r=new fo(e.rank,t.shape,t.rank);return this.compileAndRun(r,[e,t,n],te(t.dtype,n.dtype))}where(e){ft("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return Xo(e.shape,t)}topk(e,t,n){const r=e.dataSync();return zo(r,e.shape,e.dtype,t)}min(e,t){we("min",t,e.rank);const[n,r]=Re(e.shape,t),o=f(r),i=e.as2D(-1,o);return this.reduce(i,"min",i.dtype).reshape(n)}minimum(e,n){if(this.shouldExecuteOnCPU([e,n]))return this.cpuBackend.minimum(e,n);const r=t().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Yn("\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",e.shape,n.shape):new Kn("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",e.shape,n.shape);return this.compileAndRun(r,[e,n])}mod(e,n){const r=t().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Yn("\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",e.shape,n.shape):new Kn("if (b == 0.0) return NAN;\n  return mod(a, b);",e.shape,n.shape);return this.compileAndRun(r,[e,n])}maximum(e,n){if(this.shouldExecuteOnCPU([e,n]))return this.cpuBackend.maximum(e,n);const r=t().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Yn("\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",e.shape,n.shape):new Kn("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",e.shape,n.shape);return this.compileAndRun(r,[e,n])}all(e,t){we("all",t,e.rank);const[n,r]=Re(e.shape,t),o=f(r),i=e.as2D(-1,o);return this.reduce(i,"all",i.dtype).reshape(n)}any(e,t){we("any",t,e.rank);const[n,r]=Re(e.shape,t),o=f(r),i=e.as2D(-1,o);return this.reduce(i,"any",i.dtype).reshape(n)}floorDiv(e,n){if(t().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,n,"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n","int32");const r=new Kn("\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",e.shape,n.shape);return this.compileAndRun(r,[e,n],"int32")}add(e,n){if("complex64"===e.dtype&&"complex64"===n.dtype)return this.complexSeparableBinaryOp(e,n,Gn);if(this.shouldExecuteOnCPU([e,n]))return this.cpuBackend.add(e,n);const r=te(e.dtype,n.dtype);if(t().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,n,Gn,r);const o=new Kn(Gn,e.shape,n.shape);return this.compileAndRun(o,[e,n],r)}packedUnaryOp(e,t,n){const r=new Mo(e.shape,t);return this.compileAndRun(r,[e],n)}packedBinaryOp(e,t,n,r,o=!1){const i=new Yn(n,e.shape,t.shape,o);return this.compileAndRun(i,[e,t],r)}complexSeparableBinaryOp(e,t,n){const r=this.texData.get(e.dataId),o=this.texData.get(t.dataId),[i,s]=[[r.complexTensors.real,o.complexTensors.real],[r.complexTensors.imag,o.complexTensors.imag]].map(r=>{const[o,i]=r,s=this.makeComplexComponentTensorInfo(e,o),a=this.makeComplexComponentTensorInfo(t,i),u=new Kn(n,e.shape,t.shape);return this.compileAndRun(u,[s,a],te(o.dtype,i.dtype))}),a=this.complex(i,s);return i.dispose(),s.dispose(),a}makeComplexComponentTensorInfo(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}addN(e){if(1===e.length)return e[0];if(e.length>t().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(e.length/2),n=this.addN(e.slice(0,t)),r=this.addN(e.slice(t));return this.addN([n,r])}const n=e.map(e=>e.dtype).reduce((e,t)=>te(e,t)),r=e.map(e=>e.shape),o=t().getBool("WEBGL_PACK")?new pn(e[0].shape,r):new dn(e[0].shape,r);return this.compileAndRun(o,e,n)}subtract(e,n){if("complex64"===e.dtype&&"complex64"===n.dtype)return this.complexSeparableBinaryOp(e,n,zn);if(this.shouldExecuteOnCPU([e,n]))return this.cpuBackend.subtract(e,n);const r=te(e.dtype,n.dtype);if(t().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,n,zn,e.dtype);const o=new Kn(zn,e.shape,n.shape);return this.compileAndRun(o,[e,n],r)}pow(e,n){const r=t().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Yn("\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",e.shape,n.shape):new Kn("\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nif (b == 0.0) {\n  return 1.0;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",e.shape,n.shape),o=te(e.dtype,n.dtype);return this.compileAndRun(r,[e,n],o)}ceil(e){if(this.shouldExecuteOnCPU([e]))return this.cpuBackend.ceil(e);if(t().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,Oo,e.dtype);const n=new bo(e.shape,Oo);return this.compileAndRun(n,[e])}floor(e){if(this.shouldExecuteOnCPU([e]))return this.cpuBackend.floor(e);if(t().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,Do,e.dtype);const n=new bo(e.shape,Do);return this.compileAndRun(n,[e])}sign(e){const t=new bo(e.shape,"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n");return this.compileAndRun(t,[e])}isNaN(e){const t=new bo(e.shape,"return float(isnan(x));");return this.compileAndRun(t,[e],"bool")}isInf(e){const t=new bo(e.shape,"return float(isinf(x));");return this.compileAndRun(t,[e],"bool")}isFinite(e){const t=new bo(e.shape,"return float(!isnan(x) && !isinf(x));");return this.compileAndRun(t,[e],"bool")}round(e){const t=new bo(e.shape,"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n");return this.compileAndRun(t,[e])}exp(e){if(this.shouldExecuteOnCPU([e]))return this.cpuBackend.exp(e);if(t().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,Fo,e.dtype);const n=new bo(e.shape,Fo);return this.compileAndRun(n,[e])}expm1(e){if(this.shouldExecuteOnCPU([e]))return this.cpuBackend.expm1(e);if(t().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,So,e.dtype);const n=new bo(e.shape,So);return this.compileAndRun(n,[e])}softmax(e,t){const n=$([t],e.shape),r=Ae(e,n),o=ye(r.shape,n),i=this.subtract(e,r.reshape(o)),s=this.exp(i),a=this.sum(s,n).reshape(o);return Fe(s,a)}log(e){if(this.shouldExecuteOnCPU([e]))return this.cpuBackend.log(e);if(t().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",e.dtype);const n=new bo(e.shape,"if (x < 0.0) return NAN;\n  return log(x);");return this.compileAndRun(n,[e])}log1p(e){const t=new bo(e.shape,"return log(1.0 + x);");return this.compileAndRun(t,[e])}sqrt(e){const t=new bo(e.shape,"return sqrt(x);");return this.compileAndRun(t,[e])}rsqrt(e){if(this.shouldExecuteOnCPU([e]))return this.cpuBackend.rsqrt(e);const t=new bo(e.shape,"return inversesqrt(x);");return this.compileAndRun(t,[e])}reciprocal(e){const t=new bo(e.shape,"return 1.0 / x;");return this.compileAndRun(t,[e])}relu(e){let n;return n=t().getBool("WEBGL_PACK")?new Mo(e.shape,Bo):new bo(e.shape,Ao),this.compileAndRun(n,[e])}relu6(e){let n;return n=t().getBool("WEBGL_PACK")?new Mo(e.shape,Lo):new bo(e.shape,To),this.compileAndRun(n,[e])}prelu(e,n){const r=t().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Yn(jn,e.shape,n.shape):new Kn(Hn,e.shape,n.shape);return this.compileAndRun(r,[e,n])}elu(e){if(t().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,Po,e.dtype);const n=new bo(e.shape,_o);return this.compileAndRun(n,[e])}eluDer(e,n){const r=t().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Yn("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",e.shape,n.shape):new Kn("return (b >= 1.0) ? a : a * (b + 1.0);",e.shape,n.shape);return this.compileAndRun(r,[e,n])}selu(e){const t=new bo(e.shape,"\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = 1.7580993408473768;\n  float scale = 1.0507009873554805;\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n");return this.compileAndRun(t,[e])}int(e){const t=new bo(e.shape,"return float(int(x));");return this.compileAndRun(t,[e],"int32")}clip(e,n,r){let o;o=t().getBool("WEBGL_PACK_CLIP")?new Qn(e.shape):new qn(e.shape);const i=o.getCustomSetupFunc(n,r);return this.compileAndRun(o,[e],null,i)}abs(e){if(this.shouldExecuteOnCPU([e]))return this.cpuBackend.abs(e);if(t().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,Io,e.dtype);const n=new bo(e.shape,Io);return this.compileAndRun(n,[e])}complexAbs(e){const t=this.texData.get(e.dataId),n=new Zn(e.shape),r=[this.makeComplexComponentTensorInfo(e,t.complexTensors.real),this.makeComplexComponentTensorInfo(e,t.complexTensors.imag)];return this.compileAndRun(n,r)}sigmoid(e){const t=new bo(e.shape,"return 1.0 / (1.0 + exp(-1.0 * x));");return this.compileAndRun(t,[e])}softplus(e){const t=new bo(e.shape,"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n");return this.compileAndRun(t,[e])}sin(e){const t=new bo(e.shape,"if (isnan(x)) return x;\n  return sin(x);\n");return this.compileAndRun(t,[e])}cos(e){const t=new bo(e.shape,"if (isnan(x)) return x;\n  return cos(x);\n");return this.compileAndRun(t,[e])}tan(e){const t=new bo(e.shape,"return tan(x);");return this.compileAndRun(t,[e])}asin(e){const t=new bo(e.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n");return this.compileAndRun(t,[e])}acos(e){const t=new bo(e.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n");return this.compileAndRun(t,[e])}atan(e){const t=new bo(e.shape,"if (isnan(x)) return x;\n  return atan(x);\n");return this.compileAndRun(t,[e])}atan2(e,n){const r=t().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Yn("\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",e.shape,n.shape):new Kn("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",e.shape,n.shape);return this.compileAndRun(r,[e,n])}sinh(e){const t=new bo(e.shape,"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n");return this.compileAndRun(t,[e])}cosh(e){const t=new bo(e.shape,"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n");return this.compileAndRun(t,[e])}tanh(e){const t=new bo(e.shape,"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n");return this.compileAndRun(t,[e])}asinh(e){const t=new bo(e.shape,"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));");return this.compileAndRun(t,[e])}acosh(e){const t=new bo(e.shape,"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\n  return log(x + sqrt(x * x - 1.0));");return this.compileAndRun(t,[e])}atanh(e){const t=new bo(e.shape,"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;");return this.compileAndRun(t,[e])}erf(e){const t=new bo(e.shape,'\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = 0.3275911;\n  float a1 = 0.254829592;\n  float a2 = -0.284496736;\n  float a3 = 1.421413741;\n  float a4 = -1.453152027;\n  float a5 = 1.061405429;\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n');return this.compileAndRun(t,[e])}step(e,t){const n=new bo(e.shape,function(e=0){return`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${e});\n  `}(t));return this.compileAndRun(n,[e])}conv2dByMatMul(e,n,r,o,i,s){const a=e.shape,u=this.texData.get(e.dataId),l=r.inChannels,c=a[0]*a[1]*a[2],h=r.outChannels,p="channelsLast"===r.dataFormat,f=(1===c||1===h)&&l>1e3,g=a[2]%2!=0&&!!u.isPacked;if(f||!t().getBool("WEBGL_LAZILY_UNPACK")||!t().getBool("WEBGL_PACK_BINARY_OPERATIONS")||!g){const t=p?a[0]*a[1]*a[2]:a[0]*a[2]*a[3],u=this.reshape(e,[1,t,r.inChannels]),l=this.reshape(n,[1,r.inChannels,r.outChannels]);return this.reshape(this.fusedBatchMatMul({a:u,b:l,transposeA:!1,transposeB:!1,bias:o,activation:i,preluActivationWeights:s}),r.outShape)}const x=p?a[0]*a[1]*(a[2]+1):a[0]*a[2]*(a[3]+1),m={dataId:e.dataId,shape:[1,x,r.inChannels],dtype:e.dtype},C=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,d(rn(u.shape,m.shape),()=>`packed reshape ${u.shape} to ${m.shape} isn't free`);const v=this.reshape(n,[1,r.inChannels,r.outChannels]),$=this.fusedBatchMatMul({a:m,b:v,transposeA:!1,transposeB:!1,bias:o,activation:i,preluActivationWeights:s}),R=this.texData.get($.dataId);return d(R.isPacked,()=>"batchMatMul result is expected to be packed"),u.shape=C,R.shape=r.outShape,Oe().makeTensorFromDataId($.dataId,r.outShape,$.dtype)}conv2dWithIm2Row(e,t,n,r,o,i){const{filterWidth:s,filterHeight:a,inChannels:u,outWidth:l,outHeight:c,dataFormat:h}=n,d="channelsLast"===h,p=s*a*u,f=c*l,g=[p,f],x=e.squeeze([0]),m=t.reshape([1,p,-1]),C=new Wr(g,x.shape,n),v=this.compileAndRun(C,[x]).reshape([1,g[0],g[1]]),$=null!=r,R=null!=i,y=o?Ko(o,!0):null,w=new jr(v.shape,[1,f,n.outChannels],!0,!1,$,y,R),b=[v,m];r&&b.push(r),R&&b.push(i);const E=this.compileAndRun(w,b);return d?E.reshape([1,c,l,n.outChannels]):E.reshape([1,n.outChannels,c,l])}fusedConv2d({input:e,filter:n,convInfo:r,bias:o,activation:i,preluActivationWeights:s}){if(1===r.filterHeight&&1===r.filterWidth&&1===r.dilationHeight&&1===r.dilationWidth&&1===r.strideHeight&&1===r.strideWidth&&("SAME"===r.padInfo.type||"VALID"===r.padInfo.type))return this.conv2dByMatMul(e,n,r,o,i,s);if(t().getBool("WEBGL_CONV_IM2COL")&&1===e.shape[0])return this.conv2dWithIm2Row(e,n,r,o,i,s);const a=null!=o,u=null!=s,l=i?Ko(i,!1):null,c=new ur(r,a,l,u),h=[e,n];return o&&h.push(o),s&&h.push(s),this.compileAndRun(c,h)}conv2d(e,n,r){if(1===r.filterHeight&&1===r.filterWidth&&1===r.dilationHeight&&1===r.dilationWidth&&1===r.strideHeight&&1===r.strideWidth&&("SAME"===r.padInfo.type||"VALID"===r.padInfo.type))return this.conv2dByMatMul(e,n,r);if(t().getBool("WEBGL_CONV_IM2COL")&&1===e.shape[0])return this.conv2dWithIm2Row(e,n,r);const o=new ur(r);return this.compileAndRun(o,[e,n])}conv2dDerInput(e,t,n){const r=new rr(n);return this.compileAndRun(r,[e,t])}conv2dDerFilter(e,t,n){const r=new nr(n);return this.compileAndRun(r,[e,t])}fusedDepthwiseConv2D({input:e,filter:n,convInfo:r,bias:o,activation:i,preluActivationWeights:s}){const a=t().getBool("WEBGL_PACK_DEPTHWISECONV")&&r.strideWidth<=2&&r.outChannels/r.inChannels==1,u=i?Ko(i,a):null,l=[e,n],c=null!=o,h=null!=s;let d;return c&&l.push(o),h&&l.push(s),a?(d=new hr(r,c,u,h),this.compileAndRun(d,l)):(d=new cr(r,c,u,h),this.compileAndRun(d,l))}depthwiseConv2D(e,n,r){let o;return t().getBool("WEBGL_PACK_DEPTHWISECONV")&&r.strideWidth<=2&&r.outChannels/r.inChannels==1?(o=new hr(r),this.compileAndRun(o,[e,n])):(o=new cr(r),this.compileAndRun(o,[e,n]))}depthwiseConv2DDerInput(e,t,n){const r=new ar(n);return this.compileAndRun(r,[e,t])}depthwiseConv2DDerFilter(e,t,n){const r=new sr(n);return this.compileAndRun(r,[e,t])}conv3d(e,t,n){const r=new lr(n);return this.compileAndRun(r,[e,t])}conv3dDerInput(e,t,n){const r=new ir(n);return this.compileAndRun(r,[e,t])}conv3dDerFilter(e,t,n){const r=new or(n);return this.compileAndRun(r,[e,t])}maxPool(e,t){const n=new eo(t,"max",!1);return this.compileAndRun(n,[e])}avgPool(e,t){const n=new eo(t,"avg",!1);return this.compileAndRun(n,[e],"float32")}maxPoolBackprop(e,t,n,r){const o=new eo(r,"max",!0),i=this.compileAndRun(o,[t]),s=new Hr(r),a=this.compileAndRun(s,[e,i],t.dtype);return i.dispose(),a}avgPoolBackprop(e,t,n){const r=new Bn(n);return this.compileAndRun(r,[e],t.dtype)}cast(e,t){return xt(e,t,this)}unstack(e,t){const n=e.shape[t],r=new Array(e.rank-1);let o=0;for(let n=0;n<e.rank;n++)n!==t&&(r[o++]=e.shape[n]);const i=new Array(e.rank).fill(0),s=e.shape.slice();s[t]=1;const a=new Array(n);for(let n=0;n<a.length;n++)i[t]=n,a[n]=this.slice(e,i,s).reshape(r);return a}avgPool3d(e,t){const n=new to(t,"avg",!1);return this.compileAndRun(n,[e],"float32")}avgPool3dBackprop(e,t,n){const r=new Ln(n);return this.compileAndRun(r,[e],t.dtype)}maxPool3d(e,t){const n=new to(t,"max",!1);return this.compileAndRun(n,[e],"float32")}maxPool3dBackprop(e,t,n,r){const o=new to(r,"max",!0),i=this.compileAndRun(o,[t]),s=new Kr(r),a=this.compileAndRun(s,[e,i],t.dtype);return i.dispose(),a}reshape(e,t){const n=this.texData.get(e.dataId);if(n.isPacked&&!rn(e.shape,t)&&(null===n.texture||!rn(n.shape,t))){const n=this.packedReshape(e,t);return Oe().makeTensorFromDataId(n.dataId,n.shape,n.dtype)}return mt(e,t)}resizeBilinear(e,n,r,o){const i=t().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new so(e.shape,n,r,o):new io(e.shape,n,r,o);return this.compileAndRun(i,[e],"float32")}resizeBilinearBackprop(e,t,n){const r=new oo(e,t,n);return this.compileAndRun(r,[e])}resizeNearestNeighbor(e,t,n,r){const o=new uo(e.shape,t,n,r);return this.compileAndRun(o,[e])}resizeNearestNeighborBackprop(e,t,n){const r=new ao(e,t,n);return this.compileAndRun(r,[e])}multinomial(e,t,n,r){const o=t?e:at(e),i=o.shape[0],s=o.shape[1],a=new Yr(i,s,n),u=a.getCustomSetupFunc(r);return this.compileAndRun(a,[o],"int32",u)}oneHot(e,t,n,r){const o=new qr(e.size,t,n,r);return this.compileAndRun(o,[e])}diag(e){const t=new vr(e.size);return this.compileAndRun(t,[e])}cropAndResize(e,t,n,r,o,i){const s=new dr(e.shape,t.shape,r,o,i);return this.compileAndRun(s,[e,t,n],"float32")}depthToSpace(e,t,n){d(t>1,()=>"blockSize should be > 1 for depthToSpace, but was: "+t);const r=e.shape[0],o="NHWC"===n?e.shape[1]:e.shape[2],i="NHWC"===n?e.shape[2]:e.shape[3],s="NHWC"===n?e.shape[3]:e.shape[1],a=o*t,u=i*t,l=s/(t*t),c=new Cr("NHWC"===n?[r,a,u,l]:[r,l,a,u],t,n);return this.compileAndRun(c,[e])}split(e,t,n){return Wo(e,t,n)}scatterND(e,t,n){const{sliceRank:r,numUpdates:o,sliceSize:i,strides:s,outputSize:a}=Ne(0,e,n),u=[a/i,i],l=e.reshape([o,r]),c=t.reshape([o,i]);if(0===a)return mt(ge([]),n);const h=et(0),d=new ho(o,r,l.rank,c.rank,s,u);return this.compileAndRun(d,[c,l,h]).reshape(n)}sparseToDense(e,t,n,r){const{sliceRank:o,numUpdates:i,strides:s,outputSize:a}=Ne(0,e,n),u=new ho(i,o,e.rank,t.rank,s,[a,1],!1);return this.compileAndRun(u,[t,e,r]).reshape(n)}fft(e){return this.fftImpl(e,!1)}ifft(e){return this.fftImpl(e,!0)}fftImpl(e,t){const n=this.texData.get(e.dataId),r=new Ir(br,e.shape,t),o=new Ir(Er,e.shape,t),i=[this.makeComplexComponentTensorInfo(e,n.complexTensors.real),this.makeComplexComponentTensorInfo(e,n.complexTensors.imag)],s=this.compileAndRun(r,i),a=this.compileAndRun(o,i),u=this.complex(s,a).as2D(e.shape[0],e.shape[1]);return s.dispose(),a.dispose(),u}gatherND(e,t){const n=t.shape,r=n[n.length-1],[o,i,s,a]=Te(e,t),u=t.reshape([i,r]),l=e.reshape([e.size/s,s]),c=new _r(r,a,[i,s]);return this.compileAndRun(c,[l,u]).reshape(o)}fill(e,t,n){if("string"===(n=n||A(t))){const r=w(n,f(e));return r.fill(t),Oe().makeTensor(r,e,n,this)}{const r=new Ar(e,t),o=r.getCustomSetupFunc(t);return this.compileAndRun(r,[],n,o)}}onesLike(e){if("string"===e.dtype)throw new Error("onesLike is not supported under string dtype");return this.fill(e.shape,1,e.dtype)}zerosLike(e){return this.fill(e.shape,"string"===e.dtype?"":0,e.dtype)}linspace(e,t,n){return Ct(e,t,n)}makeTensorInfo(e,t){const n=this.write(null,e,t);return this.texData.get(n).usage=null,{dataId:n,shape:e,dtype:t}}makeOutput(e,t){const{dataId:n}=this.makeTensorInfo(e,t);return Oe().makeTensorFromDataId(n,e,t,this)}unpackTensor(e){const t=new Uo(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new Qr(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[Jt(e.shape),...en(e.shape)],r={dtype:e.dtype,shape:n,dataId:e.dataId},o=[Jt(t),...en(t)],i=new ro(o,n),s=this.runWebGLProgram(i,[r],e.dtype,null,!0);return{dataId:s.dataId,shape:t,dtype:s.dtype}}decode(e){const t=this.texData.get(e),{isPacked:n,shape:r,dtype:o}=t,i=tn(r);let s;s=n?new mr(i):new xr(i);return{dtype:o,shape:r,dataId:this.runWebGLProgram(s,[{shape:i,dtype:o,dataId:e}],o,null,!0).dataId}}runWebGLProgram(e,n,r,o,i=!1){const s=this.makeTensorInfo(e.outputShape,r),a=this.texData.get(s.dataId);if(e.packedOutput&&(a.isPacked=!0),e.outPackingScheme===St.DENSE){const t=Pt(e.outputShape);a.texShape=t.map(e=>2*e)}if(null!=e.outTexUsage&&(a.usage=e.outTexUsage),0===f(s.shape))return a.values=y(s.dtype,0),s;const u=[],l=n.map(n=>{if("complex64"===n.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let r=this.texData.get(n.dataId);if(null==r.texture){if(!e.packedInputs&&f(n.shape)<=t().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:n.shape,texData:null,isUniform:!0,uniformValues:r.values};e.packedInputs&&(r.isPacked=!0,r.shape=n.shape)}else if(!!r.isPacked!=!!e.packedInputs)n=r.isPacked?this.unpackTensor(n):this.packTensor(n),u.push(n),r=this.texData.get(n.dataId);else if(r.isPacked&&!rn(r.shape,n.shape)){const e=n,t=n.shape;n.shape=r.shape,n=this.packedReshape(n,t),u.push(n),r=this.texData.get(n.dataId),e.shape=t}return this.uploadToGPU(n.dataId),{shape:n.shape,texData:r,isUniform:!1}});this.uploadToGPU(s.dataId);const c={shape:s.shape,texData:a,isUniform:!1},h=function(e,t,n){let r="";t.concat(n).forEach(e=>{const t=null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0,n=e.isUniform?"uniform":e.texData.texShape;r+=`${e.shape}_${n}_${t}`});const o=e.userCode;let i=e.constructor.name;return i+="_"+r+"_"+o,i}(e,l,c),d=this.getAndSaveBinary(h,()=>function(e,n,r,o){const i=n.userCode,s=r.map((e,t)=>{const r={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(r.flatOffset=e.texData.slice.flatOffset),{name:n.variableNames[t],shapeInfo:r}}),a=s.map(e=>e.shapeInfo),u={logicalShape:o.shape,texShape:o.texData.texShape,isUniform:!1,isPacked:o.texData.isPacked,flatOffset:null},l=yn(s,u,i,n.packedInputs),c=e.createProgram(l);let h=null;const d=e.getUniformLocation(c,"NAN",!1);1===t().getNumber("WEBGL_VERSION")&&(h=e.getUniformLocation(c,"INFINITY",!1));const p={};for(let t=0;t<n.variableNames.length;t++){const r=n.variableNames[t],o=!1;p[r]=e.getUniformLocation(c,r,o),p["offset"+r]=e.getUniformLocation(c,"offset"+r,o)}return{program:n,source:l,webGLProgram:c,uniformLocations:p,inShapeInfos:a,outShapeInfo:u,infLoc:h,nanLoc:d}}(this.gpgpu,e,l,c)),p=null!=this.activeTimers;let g;if(p&&(g=this.startTimer()),function(e,n,r,o,i){Vr(n.inShapeInfos,r),Vr([n.outShapeInfo],[o]);const s=o.texData.texture,a=o.texData.texShape;o.texData.isPacked?e.setOutputPackedMatrixTexture(s,a[0],a[1]):e.setOutputMatrixTexture(s,a[0],a[1]),e.setProgram(n.webGLProgram),1===t().getNumber("WEBGL_VERSION")&&null!==n.infLoc&&e.gl.uniform1f(n.infLoc,1/0),null!==n.nanLoc&&e.gl.uniform1f(n.nanLoc,NaN),r.forEach((t,r)=>{const o=n.program.variableNames[r],i=n.uniformLocations[o],s=n.uniformLocations["offset"+o];if(null!=i)if(t.isUniform)if(f(t.shape)<2)e.gl.uniform1f(i,t.uniformValues[0]);else{let n=t.uniformValues;n instanceof Float32Array||(n=new Float32Array(n)),e.gl.uniform1fv(i,n)}else null!=t.texData.slice&&null!=s&&e.gl.uniform1i(s,t.texData.slice.flatOffset),e.setInputMatrixTexture(t.texData.texture,i,r)}),null!=i&&i(e,n.webGLProgram),e.executeProgram()}(this.gpgpu,d,l,c,o),u.forEach(e=>this.disposeData(e.dataId)),p&&(g=this.endTimer(g),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(g)})),!t().getBool("WEBGL_LAZILY_UNPACK")&&a.isPacked&&!1===i){const e=this.unpackTensor(s);return this.disposeData(s.dataId),e}return s}compileAndRun(e,t,n,r,o=!1){n=n||t[0].dtype;const i=this.runWebGLProgram(e,t,n,r,o);return Oe().makeTensorFromDataId(i.dataId,i.shape,i.dtype)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){if(!this.disposed){if(!t().getBool("IS_TEST")){Object.keys(this.binaryCache).forEach(e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]})}this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}}floatPrecision(){var e,n;return null==this.floatPrecisionValue&&(this.floatPrecisionValue=(e=()=>{if(!t().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=t().getBool("DEBUG");t().set("DEBUG",!1);const n=this.abs(et(1e-8)).dataSync()[0];if(t().set("DEBUG",e),n>0)return 32}return 16},ae.tidy(e,n))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const n=this.texData.get(e),{shape:r,dtype:o,values:i,texture:s,usage:a,isPacked:u}=n;if(null!=s)return;const l=null!=this.activeTimers;let c;l&&(c=S());let d=n.texShape;if(null==d&&(d=function(e,n=!1){let r=t().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(n&&(r*=2,1===(e=e.map((t,n)=>n>=e.length-2?h(e[n]):e[n])).length&&(e=[2,e[0]])),2!==e.length){const t=R(e);e=t.newShape}let o=f(e);if(e.length<=1&&o<=r)return[1,o];if(2===e.length&&e[0]<=r&&e[1]<=r)return e;if(3===e.length&&e[0]*e[1]<=r&&e[2]<=r)return[e[0]*e[1],e[2]];if(3===e.length&&e[0]<=r&&e[1]*e[2]<=r)return[e[0],e[1]*e[2]];if(4===e.length&&e[0]*e[1]*e[2]<=r&&e[3]<=r)return[e[0]*e[1]*e[2],e[3]];if(4===e.length&&e[0]<=r&&e[1]*e[2]*e[3]<=r)return[e[0],e[1]*e[2]*e[3]];if(n){const t=Jt(e);let n=2,r=2;return e.length&&([n,r]=en(e)),o=t*(n/2)*(r/2),m(o).map(e=>2*e)}return m(o)}(r,u),n.texShape=d),null!=i){const e=tn(r);let t,s=d[1],a=d[0];const h=i instanceof Uint8Array;u?([s,a]=Mt(d[0],d[1]),t=new wr(e,[a,s],h)):t=new yr(e,[a,s],h);const p=this.makeTensorInfo([a,s],o);this.texData.get(p.dataId).usage=h?kt.PIXELS:kt.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(p.dataId),s,a,i);const f=!0,g=this.runWebGLProgram(t,[p],o,null,f),x=this.texData.get(g.dataId);n.texture=x.texture,n.texShape=x.texShape,n.isPacked=x.isPacked,n.usage=x.usage,this.disposeData(p.dataId),this.texData.delete(g.dataId),n.values=null,l&&(this.uploadWaitMs+=S()-c)}else{const e=this.acquireTexture(d,a,o,u);n.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:r}=n;return this.releaseGPUData(e),null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error("Unknown dtype "+t)}(t,r)),n.values}acquireTexture(e,t,n,r){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,r)}computeBytes(e,t){return e[0]*e[1]*E(t)}}Rt()&&function(e,t,n=1){ae.registerBackend(e,t,n)}("webgl",()=>new jo,2);var Yo=Object.freeze({__proto__:null,maxImpl:function(e,t,n,r){const o=y(r,f(n));for(let n=0;n<o.length;++n){const r=n*t;let i=e[r];for(let n=0;n<t;++n){const t=e[r+n];t>i&&(i=t)}o[n]=i}return o},transposeImpl:function(e,t,n,r,o){const i=t.length,s=f(t),a=N(t),u=N(o),l=y(n,f(o));for(let t=0;t<s;++t){const n=P(t,i,a),o=new Array(n.length);for(let e=0;e<o.length;e++)o[e]=n[r[e]];l[L(o,i,u)]=e[t]}return l}});const{maxImpl:qo,transposeImpl:Qo}=Yo;function Zo(e,t,n){const r=n.texData.get(e.dataId);return!r.isPacked||rn(e.shape,t)||null!==r.texture&&rn(r.shape,t)?{dataId:e.dataId,shape:t,dtype:e.dtype}:function(e,t,n){const r=[Jt(e.shape),...en(e.shape)],o={dtype:e.dtype,shape:r,dataId:e.dataId},i=[Jt(t),...en(t)],s=new ro(i,r),a=n.runWebGLProgram(s,[o],e.dtype,null,!0);return{dataId:a.dataId,shape:t,dtype:a.dtype}}(e,t,n)}function Jo(e,t,n,r){const o=f(t),i=Zo(e,[f(e.shape)/o,o],r),s=function e(t,n,r,o){const[i,s]=t.shape,a=qe(s),u=new no({windowSize:a,inSize:s,batchSize:i},r),l=o.runWebGLProgram(u,[t],n);return 1===l.shape[1]?l:e(l,n,r,o)}(i,e.dtype,"max",r);return i.dataId!==e.dataId&&r.disposeData(i.dataId),Zo(s,n,r)}class ei{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];this.outputShape=n,this.rank=n.length;const r=Dn(this.rank),o=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(t);for(let t=0;t<e.length;t++)r[e[t]]=n[t];return r.join()}(t);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${o}));\n    }\n    `}}class ti{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=Dn(this.rank),o=gn("rc",this.rank),i=new Array(this.rank);for(let e=0;e<t.length;e++)i[t[e]]=o[e];const s=`vec2(${i.slice(-2).join()})`,a=`++${o[this.rank-1]} < ${n[this.rank-1]}`,u=`getChannel(getA(${i.join()}), ${s})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${u};\n      if(${a}) {\n        result[1] = ${u};\n      }\n      --${o[this.rank-1]};\n      if(++${o[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${u};\n        if(${a}) {\n          result[3] = ${u};\n        }\n      }\n      setOutput(result);\n    }\n    `}}!function(e){const{kernelName:t,backendName:n}=e,r=c(t,n);s.has(r)&&console.warn(`The kernel '${t}' for backend '${n}' is already registered`),s.set(r,e)}({kernelName:"Max",backendName:"webgl",kernelFunc:({inputs:e,attrs:n,backend:r})=>{const{x:o}=e,{reductionIndices:i,keepDims:s}=n,a=r,u=o.shape.length,l=$(i,o.shape);let c=l;const h=be(c,u),d=null!=h,p=a.shouldExecuteOnCPU([o]);let g=o;if(d){if(p){const e=a.texData.get(g.dataId).values,t=new Array(u);for(let e=0;e<t.length;e++)t[e]=o.shape[h[e]];const n=Qo(e,o.shape,o.dtype,h,t);g=a.makeTensorInfo(t,o.dtype);a.texData.get(g.dataId).values=n}else g=function(e,n,r){const o=t().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new ti(e.shape,n):new ei(e.shape,n);return r.runWebGLProgram(o,[e],e.dtype)}(o,h,a);c=Ie(c.length,u)}we("max",c,u);const[x,m]=Re(g.shape,c);let C,v=x;if(s&&(v=ye(x,l)),p){const e=a.texData.get(g.dataId).values,t=qo(e,f(m),v,o.dtype);C=a.makeTensorInfo(v,o.dtype);a.texData.get(C.dataId).values=t}else C=Jo(g,m,v,a);return d&&a.disposeData(g.dataId),C}});const ni=Ae([1,2,3,4]);console.log("Max result",ni.dataSync())}));
//# sourceMappingURL=forward_mode_webgl.js.map
