!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(require("crypto")):"function"==typeof define&&define.amd?define(["crypto"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).crypto)}(this,(function(e){"use strict";function t(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var n=t(e);class r{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(t instanceof Promise)throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=function(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("="))),t}(this.global.location.search);if("tfjsflags"in e){e.tfjsflags.split(",").forEach(e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)})}}}function s(){return o}let a,o=null;function i(){if(null==a){let e;if("undefined"!=typeof window)e=window;else if("undefined"!=typeof global)e=global;else if("undefined"!=typeof process)e=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}a=e}return a}function u(e,t){const n=function(){const e=i();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const r=t();return n.set(e,r),n.get(e)}}const l=u("kernelRegistry",()=>new Map),c=u("gradRegistry",()=>new Map);function p(e,t){const n=g(e,t);return l.get(n)}function d(e){return c.get(e)}function h(e){const t=l.entries(),n=[];for(;;){const{done:r,value:s}=t.next();if(r)break;const[a,o]=s,[i]=a.split("_");i===e&&n.push(o)}return n}function f(e){const{kernelName:t,backendName:n}=e,r=g(t,n);l.has(r)&&console.warn(`The kernel '${t}' for backend '${n}' is already registered`),l.set(r,e)}function m(e){const{kernelName:t}=e;c.has(t)&&s().getBool("DEBUG")&&console.warn(`Overriding the gradient for '${t}'`),c.set(t,e)}function g(e,t){return`${t}_${e}`}function y(e){let t=e.length,n=0,r=0;for(;t>0;)r=Math.random()*t|0,t--,n=e[t],e[t]=e[r],e[r]=n}function x(e,t,n){return Math.max(e,Math.min(t,n))}function b(e){return e%2==0?e:e+1}function v(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function w(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function C(e,t,n=""){w(k(e,t),()=>n+` Shapes ${e} and ${t} must match`)}function N(e){w(null!=e,()=>"The input to the tensor constructor must be a non-null value.")}function $(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||L(e)&&!n)for(let r=0;r<e.length;++r)$(e[r],t,n);else t.push(e);return t}function E(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function k(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function S(e){return e%1==0}function T(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function R(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function I(e,t=(e=>0),n){return new Promise((r,s)=>{let a=0;const o=()=>{if(e())return void r();a++;const i=t(a);null!=n&&a>=n?s():setTimeout(o,i)};o()})}function A(e,t){let n=1,r=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${t}`);r=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===r){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const s=e.slice();return s[r]=t/n,s}function _(e,t){const n=t.length;return w((e=null==e?t.map((e,t)=>t):[].concat(e)).every(e=>e>=-n&&e<n),()=>`All values in axis param must be in range [-${n}, ${n}) but got axis `+e),w(e.every(e=>S(e)),()=>"All values in axis param must be integers but got axis "+e),e.map(e=>e<0?n+e:e)}function D(e,t){const n=[],r=[],s=null!=t&&Array.isArray(t)&&0===t.length,a=null==t||s?null:_(t,e).sort();let o=0;for(let t=0;t<e.length;++t){if(null!=a){if(a[o]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==a[o]||a[o]>t)&&1===e[t]&&(n.push(e[t]),r.push(t)),a[o]<=t&&o++}1!==e[t]&&(n.push(e[t]),r.push(t))}return{newShape:n,keptDims:r}}function F(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error("Unknown data type "+e);n=new Uint8Array(t)}return n}function O(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error("Unknown data type "+e);n=new Array(t)}return n}function M(e,t){for(let n=0;n<e.length;n++){const r=e[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${t} being uploaded contains ${r}.`)}}function B(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function P(e,t){return"complex64"!==t&&(("float32"!==t||"complex64"===e)&&(("int32"!==t||"float32"===e||"complex64"===e)&&("bool"!==t||"bool"!==e)))}function L(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array}function V(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error("Unknown dtype "+e)}function W(e){if(null==e)return 0;let t=0;return e.forEach(e=>t+=e.length),t}function z(e){return"string"==typeof e||e instanceof String}function U(e){return"boolean"==typeof e}function G(e){return"number"==typeof e}function q(e){return Array.isArray(e)?q(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array?"int32":G(e)?"float32":z(e)?"string":U(e)?"bool":"float32"}function H(e){return!!(e&&e.constructor&&e.call&&e.apply)}function j(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function K(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n}function X(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=$(e)),s().getBool("DEBUG")&&M(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error("Unknown data type "+t)}function Y(e,t){if(0===e.length)return t[0];const n=e.reduce((e,t)=>e*t);if(0===n)return[];if(n!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}.`);return function e(t,n,r){const s=new Array;if(1===n.length){const e=n[0];for(let n=0;n<e;n++)s[n]=r[t+n]}else{const a=n[0],o=n.slice(1),i=o.reduce((e,t)=>e*t);for(let n=0;n<a;n++)s[n]=e(t+n*i,o,r)}return s}(0,e,t)}function Q(e,t){const n=J(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function J(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error("Unknown data type "+t)}function Z(){return s().platform.now()}function ee(e){e.forEach(t=>{w(Number.isInteger(t)&&t>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`)})}function te(e,t="utf-8"){return t=t||"utf-8",s().platform.encode(e,t)}function ne(e,t="utf-8"){return t=t||"utf-8",s().platform.decode(e,t)}function re(e,t,n){if(0===t)return 0;if(1===t)return e[0];let r=e[e.length-1];for(let t=0;t<e.length-1;++t)r+=n[t]*e[t];return r}function se(e,t,n){if(0===t)return[];if(1===t)return[e];const r=new Array(t);for(let t=0;t<r.length-1;++t)r[t]=Math.floor(e/n[t]),e-=r[t]*n[t];return r[r.length-1]=e,r}var ae=Object.freeze({__proto__:null,shuffle:y,clamp:x,nearestLargerEven:b,sum:v,randUniform:function(e,t){const n=Math.random();return t*n+(1-n)*e},distSquared:function(e,t){let n=0;for(let r=0;r<e.length;r++){const s=Number(e[r])-Number(t[r]);n+=s*s}return n},assert:w,assertShapesMatch:C,assertNonNull:N,flatten:$,sizeFromShape:E,isScalarShape:function(e){return 0===e.length},arraysEqual:k,isInt:S,tanh:function(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}},sizeToSquarishShape:T,createShuffledIndices:function(e){const t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return y(t),t},rightPad:R,repeatedTry:I,inferFromImplicitShape:A,parseAxisParam:_,squeezeShape:D,getTypedArrayFromDType:F,getArrayFromDType:O,checkConversionForErrors:M,isValidDtype:B,hasEncodingLoss:P,isTypedArray:L,bytesPerElement:V,bytesFromStringArray:W,isString:z,isBoolean:U,isNumber:G,inferDtype:q,isFunction:H,nearestDivisor:j,computeStrides:K,toTypedArray:X,toNestedArray:Y,makeOnesTypedArray:Q,makeZerosTypedArray:J,makeZerosNestedTypedArray:function(e,t){const n=e.reduce((e,t)=>e*t,1);if(null==t||"float32"===t)return Y(e,new Float32Array(n));if("int32"===t)return Y(e,new Int32Array(n));if("bool"===t)return Y(e,new Uint8Array(n));throw new Error("Unknown data type "+t)},now:Z,assertNonNegativeIntegerDimensions:ee,fetch:function(e,t){return s().platform.fetch(e,t)},encodeString:te,decodeString:ne,locToIndex:re,indexToLoc:se});class oe{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new ie)}profileKernel(e,t,n){let r;const s=this.backendTimer.time(()=>{r=n()});r.map(t=>{t.data().then(n=>{!function(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const r=e[t];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${n}'`),!0}}(n,t.dtype,e)})});return{kernelName:e,outputs:r,inputs:t,timeMs:s.then(e=>e.kernelMs),extraInfo:s.then(e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():"")}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:r,inputs:s,extraInfo:a}=e;n.forEach(e=>{Promise.all([e.data(),r,a]).then(n=>{this.logger.logKernelProfile(t,e,n[0],n[1],s,n[2])})})}}class ie{logKernelProfile(e,t,n,r,s,a){const o="number"==typeof r?R(r+"ms",9):r.error,i=R(e,25),u=t.rank,l=t.size,c=R(t.shape.toString(),14);let p="";for(const e in s){const n=s[e].shape||t.shape,r=n.length;p+=`${e}: ${r}D ${r>0?n:""} `}console.log(`%c${i}\t%c${o}\t%c${u}D ${c}\t%c${l}\t%c${p}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function ue(e,t,n,r){const s=K(t),a=function(e,t,n,r){const s=E(t),a=r[r.length-1],o=new Array(a).fill(0),i=t.length,u="complex64"===n?pe(e):e;if(i>1)for(let e=0;e<s/a;e++){const t=e*a;for(let e=0;e<a;e++)o[e]=Math.max(o[e],le(u[t+e],0,n).length)}return o}(e,t,n,s),o=t.length,i=function e(t,n,r,s,a,o=!0){const i="complex64"===r?2:1,u=n[0],l=n.length;if(0===l){if("complex64"===r){return[le(pe(t)[0],0,r)]}return"bool"===r?[ce(t[0])]:[t[0].toString()]}if(1===l){if(u>20){const e=3*i;let n=Array.from(t.slice(0,e)),s=Array.from(t.slice((u-3)*i,u*i));return"complex64"===r&&(n=pe(n),s=pe(s)),["["+n.map((e,t)=>le(e,a[t],r)).join(", ")+", ..., "+s.map((e,t)=>le(e,a[u-3+t],r)).join(", ")+"]"]}return["["+("complex64"===r?pe(t):Array.from(t)).map((e,t)=>le(e,a[t],r)).join(", ")+"]"]}const c=n.slice(1),p=s.slice(1),d=s[0]*i,h=[];if(u>20){for(let n=0;n<3;n++){const s=n*d,o=s+d;h.push(...e(t.slice(s,o),c,r,p,a,!1))}h.push("...");for(let n=u-3;n<u;n++){const s=n*d,o=s+d;h.push(...e(t.slice(s,o),c,r,p,a,n===u-1))}}else for(let n=0;n<u;n++){const s=n*d,o=s+d;h.push(...e(t.slice(s,o),c,r,p,a,n===u-1))}const f=2===l?",":"";h[0]="["+h[0]+f;for(let e=1;e<h.length-1;e++)h[e]=" "+h[e]+f;let m=",\n";for(let e=2;e<l;e++)m+="\n";return h[h.length-1]=" "+h[h.length-1]+"]"+(o?"":m),h}(e,t,n,s,a),u=["Tensor"];return r&&(u.push("  dtype: "+n),u.push("  rank: "+o),u.push(`  shape: [${t}]`),u.push("  values:")),u.push(i.map(e=>"    "+e).join("\n")),u.join("\n")}function le(e,t,n){let r;return r=Array.isArray(e)?parseFloat(e[0].toFixed(7))+" + "+parseFloat(e[1].toFixed(7))+"j":z(e)?`'${e}'`:"bool"===n?ce(e):parseFloat(e.toFixed(7)).toString(),R(r,t)}function ce(e){return 0===e?"false":"true"}function pe(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class de{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=E(e),null!=n){const e=n.length;w(e===this.size,()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`)}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||O(t,this.size),this.strides=K(e)}set(e,...t){0===t.length&&(t=[0]),w(t.length===this.rank,()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`);const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=`+this.shape;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return he().makeTensor(this.values,this.shape,this.dtype)}}let he=null,fe=null;class me{constructor(e,t,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=E(e),this.strides=K(e),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return fe.buffer(this.shape,this.dtype,e)}bufferSync(){return fe.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return Y(this.shape,e)}arraySync(){return Y(this.shape,this.dataSync())}async data(){this.throwIfDisposed();const e=he().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map(e=>ne(e))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataSync(){this.throwIfDisposed();const e=he().readSync(this.dataId);if("string"===this.dtype)try{return e.map(e=>ne(e))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await he().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(he().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return fe.print(this,e)}clone(){return this.throwIfDisposed(),fe.clone(this)}toString(e=!1){return ue(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),fe.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),he().makeVariable(this,e,t,n)}}Object.defineProperty(me,Symbol.hasInstance,{value:e=>!!e&&null!=e.dataId&&null!=e.shape&&null!=e.dtype});class ge extends me{constructor(e,t,n,r){super(e.shape,e.dtype,e.dataId,r),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!k(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);he().disposeTensor(this),this.dataId=e.dataId,he().incRef(this,null)}dispose(){he().disposeVariable(this),this.isDisposedInternal=!0}}var ye,xe,be,ve,we;Object.defineProperty(ge,Symbol.hasInstance,{value:e=>e instanceof me&&null!=e.assign&&e.assign instanceof Function}),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(ye||(ye={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(xe||(xe={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(be||(be={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(ve||(ve={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(we||(we={}));const Ce={float32:ve,int32:xe,bool:be,complex64:we};function Ne(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return Ce[e][t]}function $e(e){return Ne(e,"int32")}function Ee(e,t){if(e.dtype===t.dtype)return[e,t];const n=Ne(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function ke(e,t){w(e.dtype===t.dtype,()=>`The dtypes of the first(${e.dtype}) and second(${t.dtype}) input must match`)}function Se(e){const t=[];return function e(t,n,r){if(null==t)return;if(t instanceof me)return void n.push(t);if(s=t,!Array.isArray(s)&&"object"!=typeof s)return;var s;const a=t;for(const t in a){const s=a[t];r.has(s)||(r.add(s),e(s,n,r))}}(e,t,new Set),t}var Te=Object.freeze({__proto__:null,makeTypesMatch:Ee,assertTypesMatch:ke,isTensorInList:function(e,t){return t.some(t=>t.id===e.id)},getTensorsInContainer:Se});class Re{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class Ie{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Re}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then(()=>{});if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(console.warn(e+" backend was already registered. Reusing existing backend factory."),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new oe(this.backendInstance),!0}setupRegisteredKernels(){h(this.backendName).forEach(e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)})}disposeRegisteredKernels(e){h(e).forEach(t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])})}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(Promise.resolve(n)===n){const t=++this.pendingBackendInitId,r=n.then(n=>!(t<this.pendingBackendInitId)&&(this.registry[e]=n,this.pendingBackendInit=null,!0)).catch(n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,console.warn(`Initialization of backend ${e} failed`),console.warn(n.stack||n.message)),!1));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}return this.registry[e]=n,{success:!0,asyncInit:!1}}catch(t){return console.warn(`Initialization of backend ${e} failed`),console.warn(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(e+" backend not found in registry");this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority)}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:r,asyncInit:s}=this.initializeBackend(n);if(s||r)return{name:n,asyncInit:s}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),r=n.backend,s=this.readSync(t);r.disposeData(t),n.backend=e,e.move(t,s,n.shape,n.dtype),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,r=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun(()=>this.startScope(r),()=>this.endScope(n),()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return Ie.nextTensorId++}nextVariableId(){return Ie.nextVariableId++}clone(e){const t=this.makeTensorFromDataId(e.dataId,e.shape,e.dtype),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],e=>({x:()=>e.toFloat()}),[],{}),t}runKernel(e,t,n,r,s){return this.runKernelFunc(null,t,null,e,n,r,s)}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const r=this.backend.numDataIds();let s=0;n.forEach(e=>{s+="complex64"===e.dtype?3:1});const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],o=r-t-s-a;if(o>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${o} data ids) after running '${e}'`)}runKernelFunc(e,t,n,r,s,a,o){let i,u=[];const l=this.isTapeOn();null==r&&(r=null!=this.state.activeScope?this.state.activeScope.name:"");const c=this.state.numBytes,d=this.state.numTensors;let h;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);const f=p(r,this.backendName);let m;if(null!=f)h=()=>{const e=this.backend.numDataIds();m=f.kernelFunc({inputs:t,attrs:s,backend:this.backend});const n=Array.isArray(m)?m:[m];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(r,e,n);const i=n.map(({dataId:e,shape:t,dtype:n})=>this.makeTensorFromDataId(e,t,n));if(l){let e=this.getTensorsForGradient(r,t,i);if(null==e){null==o&&(o=[]);const t=i.filter((e,t)=>o[t]);e=(a||[]).slice().concat(t)}u=this.saveTensorsForBackwardMode(e)}return i};else{const t=e=>{l&&(u=e.map(e=>this.keep(this.clone(e))))};h=()=>{const n=this.backend.numDataIds();m=this.tidy(()=>e(this.backend,t));const s=Array.isArray(m)?m:[m];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(r,n,s),s}}return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{if(this.ENV.getBool("DEBUG")){let e;e=this.profiler.profileKernel(r,t,()=>h()),this.profiler.logKernelProfile(e),i=e.outputs}else i=h()}),l&&this.addTapeNode(r,t,i,n,u,s),this.state.profiling&&this.state.activeProfile.kernels.push({name:r,bytesAdded:this.state.numBytes-c,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-d,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(t).map(e=>null!=t[e]?t[e].shape:null),outputShapes:i.map(e=>e.shape)}),Array.isArray(m)?i:i[0]}saveTensorsForBackwardMode(e){return e.map(e=>this.keep(this.clone(e)))}getTensorsForGradient(e,t,n){const r=d(e);if(null!=r){const e=r.inputsToSave||[],s=r.outputsToSave||[];let a;r.saveAllInputs?(w(Array.isArray(t),()=>"saveAllInputs is true, expected inputs to be an array."),a=Object.keys(t).map(e=>t[e])):a=e.map(e=>t[e]);const o=n.filter((e,t)=>s[t]);return a.concat(o)}return null}makeTensor(e,t,n,r){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let s=e;"string"===n&&z(e[0])&&(s=e.map(e=>te(e)));const a=r.write(s,t,n),o=new me(t,n,a,this.nextTensorId());if(this.incRef(o,r),"string"===n){const e=this.state.tensorInfo.get(a),t=W(s);this.state.numBytes+=t-e.bytes,e.bytes=t}return o}makeTensorFromDataId(e,t,n,r){const s=new me(t,n=n||"float32",e,this.nextTensorId());return this.incRef(s,r),s}makeVariable(e,t=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==e.dtype&&(e=e.cast(r));const s=new ge(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[s.name])throw new Error(`Variable with name ${s.name} was already registered`);return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}incRef(e,t){const n=this.state.tensorInfo.has(e.dataId)?this.state.tensorInfo.get(e.dataId).refCount:0;if(this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++,0===n){this.state.numDataBuffers++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*V(e.dtype)),this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n,refCount:0}),this.state.numBytes+=n}this.state.tensorInfo.get(e.dataId).refCount++,e instanceof ge||this.track(e)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;this.state.numTensors--,"string"===e.dtype&&this.state.numStringTensors--;const t=this.state.tensorInfo.get(e.dataId);t.refCount<=1?("complex64"!==e.dtype&&(this.state.numBytes-=t.bytes),this.state.numDataBuffers--,t.backend.disposeData(e.dataId),this.state.tensorInfo.delete(e.dataId)):this.state.tensorInfo.get(e.dataId).refCount--}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;return this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map(e=>e.totalBytesSnapshot)),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n,this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,r,s,a){const o={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:s},i=d(e);null!=i&&(r=i.gradFunc),null!=r&&(o.gradient=e=>(e=e.map((e,t)=>{if(null==e){const e=n[t],r=J(e.size,e.dtype);return this.makeTensor(r,e.shape,e.dtype)}return e}),r(e.length>1?e:e[0],s,a))),this.state.activeTape.push(o)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=Se(e),n=new Set(t.map(e=>e.id));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach(e=>{e.kept||e.scopeId!==r.id||this.track(e)})}gradients(e,t,n,r=!1){if(w(t.length>0,()=>"gradients() received an empty list of xs."),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const s=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",e));w(s instanceof me,()=>"The result y returned by f() must be a tensor.");const a=function(e,t,n){const r={},s={};for(let e=0;e<t.length;e++)r[t[e].id]=!0;for(let n=0;n<e.length;n++){const a=e[n],o=a.inputs;for(const e in o){const n=o[e];let i=!1;for(let e=0;e<t.length;e++)if(r[n.id]){a.outputs.forEach(e=>r[e.id]=!0),i=!0,s[a.id]=!0;break}if(i)break}}const a={};a[n.id]=!0;const o={};for(let t=e.length-1;t>=0;t--){const n=e[t],r=n.inputs;for(let e=0;e<n.outputs.length;e++)if(a[n.outputs[e].id]){for(const e in r)a[r[e].id]=!0,o[n.id]=!0;break}}const i=[];for(let t=0;t<e.length;t++){const n=e[t];if(s[n.id]&&o[n.id]){const e={};for(const t in n.inputs){const s=n.inputs[t];r[s.id]&&(e[t]=s)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,i.push(t)}}return i}(this.state.activeTape,t,s);if(!r&&0===a.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{const e={};e[s.id]=null==n?function(e){const t=Q(E(e),"float32");return Ae.makeTensor(t,e,"float32")}(s.shape):n,function(e,t,n){for(let r=t.length-1;r>=0;r--){const s=t[r],a=[];if(s.outputs.forEach(t=>{const n=e[t.id];null!=n?a.push(n):a.push(null)}),null==s.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${s.kernelName}.`);const o=s.gradient(a);for(const t in s.inputs){if(!(t in o))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(o)}.`);const r=n(()=>o[t]());if("float32"!==r.dtype)throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${r.dtype}'`);const a=s.inputs[t];if(!k(r.shape,a.shape))throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input '${t}' has shape '${r.shape}', which does not match the shape of the input '${a.shape}'`);if(null==e[a.id])e[a.id]=r;else{const t=e[a.id];e[a.id]=t.add(r),t.dispose()}}}}(e,a,e=>this.tidy(e));const r=t.map(t=>e[t.id]);return 0===this.state.gradientDepth&&(this.state.activeTape.forEach(e=>{for(const t of e.saved)t.dispose()}),this.state.activeTape=null),{value:s,grads:r}})}customGrad(e){return w(H(e),()=>"The f passed in customGrad(f) must be a function."),(...t)=>{let n;w(t.every(e=>e instanceof me),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");const r={};return t.forEach((e,t)=>{r[t]=e}),this.runKernelFunc((r,s)=>(n=e(...t,s),w(n.value instanceof me,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),w(H(n.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),n.value),r,(e,r)=>{const s=n.gradFunc(e,r),a=Array.isArray(s)?s:[s];w(a.length===t.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),w(a.every(e=>e instanceof me),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");const o={};return a.forEach((e,t)=>{o[t]=()=>e}),o})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}async time(e){const t=Z(),n=await this.backend.time(e);return n.wallMs=Z()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Re;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}Ie.nextTensorId=0,Ie.nextVariableId=0;const Ae=function(){const e=i();if(null==e._tfengine){const t=new r(e);e._tfengine=new Ie(t)}var t;return t=e._tfengine.ENV,o=t,he=()=>e._tfengine,e._tfengine}();function _e(){if("undefined"!=typeof navigator&&null!=navigator){const e=navigator.userAgent||navigator.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(e)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0,4))}return!1}function De(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}var Fe=Object.freeze({__proto__:null,isMobile:_e,isBrowser:De});const Oe=s();Oe.registerFlag("DEBUG",()=>!1,e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}),Oe.registerFlag("IS_BROWSER",()=>De()),Oe.registerFlag("IS_NODE",()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node),Oe.registerFlag("IS_CHROME",()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),Oe.registerFlag("PROD",()=>!1),Oe.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>Oe.getBool("DEBUG")),Oe.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),Oe.registerFlag("IS_TEST",()=>!1);function Me(e,t){let n=e;if(L(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];const r=[];for(;Array.isArray(n)||L(n)&&"string"!==t;)r.push(n.length),n=n[0];return Array.isArray(e)&&s().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&function e(t,n,r){if(r=r||[],!Array.isArray(t)&&!L(t))return void w(0===n.length,()=>`Element arr[${r.join("][")}] is a primitive, but should be an array/TypedArray of ${n[0]} elements`);w(n.length>0,()=>`Element arr[${r.join("][")}] should be a primitive, but is an array of ${t.length} elements`),w(t.length===n[0],()=>`Element arr[${r.join("][")}] should have ${n[0]} elements, but has ${t.length} elements`);const s=n.slice(1);for(let n=0;n<t.length;++n)e(t[n],s,r.concat(n))}(e,r,[]),r}function Be(e,t,n,r){if(null!=e&&("numeric"!==e&&e!==t||"numeric"===e&&"string"===t))throw new Error(`Argument '${n}' passed to '${r}' must be ${e} tensor, but got ${t} tensor`)}function Pe(e,t,n,r="numeric"){if(e instanceof me)return Be(r,e.dtype,t,n),e;let s=q(e);if("string"!==s&&["bool","int32","float32"].indexOf(r)>=0&&(s=r),Be(r,s,t,n),null==e||!L(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const r=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const a=Me(e,s);L(e)||Array.isArray(e)||(e=[e]);const o="string"!==s?X(e,s):$(e,[],!0);return Ae.makeTensor(o,a,s)}function Le(e,t,n,r="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map((e,r)=>Pe(e,`${t}[${r}]`,n),r)}function Ve(e){const t=Object.keys(e);if(1!==t.length)throw new Error("Please provide an object with a single key (operation name) mapping to a function. Got an object with "+t.length+" keys.");let n=t[0];const r=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1));const s=(...e)=>{Ae.startScope(n);try{const t=r(...e);return t instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),Ae.endScope(t),t}catch(e){throw Ae.endScope(null),e}};return Object.defineProperty(s,"name",{value:n,configurable:!0}),s}const We=Ve({cast_:function(e,t){const n=Pe(e,"x","cast");if(!B(t))throw new Error("Failed to cast to unknown dtype "+t);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const r={x:n},s={dtype:t};return Ae.runKernelFunc(e=>e.cast(n,t),r,null,"Cast",s)}});const ze=Ve({mul_:function(e,t){let n=Pe(e,"a","mul"),r=Pe(t,"b","mul");[n,r]=Ee(n,r);const s={a:n,b:r};return Ae.runKernelFunc((e,t)=>{const s=e.multiply(n,r);return t([n,r]),s},s,null,"Multiply")}});const Ue=Ve({step_:function(e,t=0){const n=Pe(e,"x","step"),r={x:n},s={alpha:t};return Ae.runKernelFunc(e=>e.step(n,t),r,null,"Step",s)}}),Ge={kernelName:"Abs",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ze(e,Ue(We(n,"float32"),-1))}}};const qe=Ve({floorDiv_:function(e,t){let n=Pe(e,"a","floorDiv"),r=Pe(t,"b","floorDiv");[n,r]=Ee(n,r);const s={a:n,b:r};return Ae.runKernelFunc((e,t)=>{const s=e.floorDiv(n,r);return t([n,r]),s},s,null,"FloorDiv")}});const He=Ve({div_:function(e,t){let n=Pe(e,"a","div"),r=Pe(t,"b","div");if([n,r]=Ee(n,r),"int32"===n.dtype&&"int32"===r.dtype)return qe(n,r);const s={a:n,b:r};return Ae.runKernelFunc((e,t)=>{const s=e.realDivide(n,r);return t([n,r]),s},s,null,"Div",{})}});const je=Ve({neg_:function(e){const t=Pe(e,"x","neg"),n={x:t};return Ae.runKernelFunc(e=>e.neg(t),n,null,"Negate")}});function Ke(e,t,n,r){if(null==r&&(r=q(e)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!L(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){ee(t);const e=E(t),r=E(n);w(e===r,()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${r}`);for(let e=0;e<n.length;++e){const r=n[e],s=e!==n.length-1||r!==E(t.slice(e));w(n[e]===t[e]||!s,()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `)}}return L(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==r?X(e,r):$(e,[],!0),Ae.makeTensor(e,t,r)}function Xe(e,t){if((L(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&L(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Ke(e,[],[],t)}const Ye=Ve({sqrt_:function(e){const t=Pe(e,"x","sqrt"),n={x:t};return Ae.runKernelFunc((e,n)=>{const r=e.sqrt(t);return n([t]),r},n,null,"Sqrt")}});const Qe=Ve({square_:function(e){const t=Pe(e,"x","square"),n=[t];return Ae.runKernelFunc((e,n)=>(n([t]),e.square(t)),{x:t},null,"Square",{},n,[])}});const Je=Ve({sub_:function(e,t){let n=Pe(e,"a","sub"),r=Pe(t,"b","sub");[n,r]=Ee(n,r);const s={a:n,b:r};return Ae.runKernelFunc((e,t)=>{const s=e.subtract(n,r);return t([n,r]),s},s,null,"Sub")}}),Ze={kernelName:"Acos",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Qe(We(n,"float32")),r=Ye(Je(Xe(1),t));return je(He(e,r))}}}},et={kernelName:"Acosh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Ye(Je(Qe(We(n,"float32")),1));return He(e,t)}}}};function tt(e,t){const n=[];for(let r=0;r<t.length;r++){const s=e[e.length-r-1],a=t.length-r-1,o=t[a];(null==s||1===s&&o>1)&&n.unshift(a)}return n}function nt(e,t){const n=[],r=Math.max(e.length,t.length);for(let s=0;s<r;s++){let r=e[e.length-s-1];null==r&&(r=1);let a=t[t.length-s-1];if(null==a&&(a=1),1===r)n.unshift(a);else if(1===a)n.unshift(r);else{if(r!==a){throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`)}n.unshift(r)}}return n}const rt={kernelName:"Add",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=nt(n.shape,r.shape);return{a:()=>{let t=e;const r=tt(n.shape,s);return r.length>0&&(t=t.sum(r)),t.reshape(n.shape)},b:()=>{let t=e;const n=tt(r.shape,s);return n.length>0&&(t=t.sum(n)),t.reshape(r.shape)}}}},st={kernelName:"AddN",saveAllInputs:!0,gradFunc:(e,t)=>{const n={};return t.forEach((t,r)=>{n[r]=()=>e.clone()}),n}};const at=Ve({zerosLike_:function(e){const t=Pe(e,"x","zerosLike"),n={x:t};return Ae.runKernelFunc(e=>e.zerosLike(t),n,null,"ZerosLike")}}),ot={kernelName:"ArgMax",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>at(n)}}},it={kernelName:"ArgMin",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>at(n)}}},ut={kernelName:"Asin",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>He(e,Ye(Je(Xe(1),Qe(We(n,"float32")))))}}};const lt=Ve({add_:function(e,t){let n=Pe(e,"a","add"),r=Pe(t,"b","add");[n,r]=Ee(n,r);const s={a:n,b:r};return Ae.runKernelFunc((e,t)=>{const s=e.add(n,r);return t([n,r]),s},s,null,"Add")}}),ct={kernelName:"Asinh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Ye(lt(Xe(1),Qe(We(n,"float32"))));return He(e,t)}}}};const pt=Ve({reshape_:function(e,t){const n=Pe(e,"x","reshape",null);t=A(t,n.size),w(n.size===E(t),()=>"new shape and old shape must have the same number of elements.");const r={x:n},s={shape:t};return Ae.runKernelFunc((e,r)=>(r([n]),e.reshape(n,t)),r,null,"Reshape",s)}});function dt(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function ht(e,t,n){const r=e.length+t.length,s=[];let a=0,o=0;for(let i=0;i<r;i++)-1===n.indexOf(i)?s.push(e[a++]):s.push(t[o++]);return s}function ft(e,t){const n=[],r=e.length;for(let s=0;s<r;s++)-1===t.indexOf(s)&&n.push(e[s]);return[n,t.map(t=>e[t])]}function mt(e,t){return ht(e,t.map(e=>1),t)}function gt(e,t,n){w(dt(t,n),()=>e+" supports only inner-most axes for now. "+`Got axes ${t} and rank-${n} input.`)}function yt(e,t){if(dt(e,t))return null;const n=[];for(let r=0;r<t;++r)-1===e.indexOf(r)&&n.push(r);return e.forEach(e=>n.push(e)),n}function xt(e){return e.map((e,t)=>[t,e]).sort((e,t)=>e[1]-t[1]).map(e=>e[0])}function bt(e,t){const n=[];for(let r=t-e;r<t;++r)n.push(r);return n}const vt=Ve({sum_:function(e,t=null,n=!1){let r=Pe(e,"x","sum");"bool"===r.dtype&&(r=r.toInt());const s={x:r},a={axis:t,keepDims:n};return Ae.runKernelFunc((e,s)=>{s([r]);const a=_(t,r.shape),o=yt(a,r.rank);let i=a,u=r;null!=o&&(u=r.transpose(o),i=bt(i.length,r.rank));let l=e.sum(u,i);if(n){const e=mt(l.shape,a);l=l.reshape(e)}return l},s,null,"Sum",a)}}),wt={kernelName:"Atan2",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=nt(n.shape,r.shape);return{a:()=>{const t=lt(Qe(n),Qe(r));let a=ze(e,He(r,t));const o=tt(n.shape,s);return o.length>0&&(a=vt(a,o)),pt(a,n.shape)},b:()=>{const t=lt(Qe(n),Qe(r));let a=je(ze(e,He(n,t)));const o=tt(r.shape,s);return o.length>0&&(a=vt(a,o)),pt(a,r.shape)}}}},Ct={kernelName:"Atan",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>He(e,lt(Qe(We(n,"float32")),1))}}},Nt={kernelName:"Atanh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>He(e,Je(Xe(1),Qe(We(n,"float32"))))}}};function $t(e,t,n,r,s,a,o="channelsLast"){const[i,u]=Rt(t);let l;if("channelsLast"===o)l=[i,u,e[3],e[3]];else{if("channelsFirst"!==o)throw new Error("Unknown dataFormat "+o);l=[i,u,e[1],e[1]]}return kt(e,l,n,r,s,a,!1,o)}function Et(e,t,n,r,s,a,o="NDHWC"){const[i,u,l]=It(t);let c,p;if("NDHWC"===o)p="channelsLast",c=[i,u,l,e[4],e[4]];else{if("NCDHW"!==o)throw new Error("Unknown dataFormat "+o);p="channelsFirst",c=[i,u,l,e[1],e[1]]}return St(e,c,n,r,s,!1,p,a)}function kt(e,t,n,r,s,a,o=!1,i="channelsLast"){let[u,l,c,p]=[-1,-1,-1,-1];if("channelsLast"===i)[u,l,c,p]=e;else{if("channelsFirst"!==i)throw new Error("Unknown dataFormat "+i);[u,p,l,c]=e}const[d,h,,f]=t,[m,g]=Rt(n),[y,x]=Rt(r),b=At(d,y),v=At(h,x),{padInfo:C,outHeight:N,outWidth:$}=function(e,t,n,r,s,a,o,i,u){let l,c,p;if("number"==typeof e){l={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const s=function(e,t,n,r,s){null==r&&(r=Tt(e,t,n));const a=e[0],o=e[1],i=_t((a-t+2*r)/n+1,s);w(S(i),()=>`The output # of rows (${i}) must be an integer. Change the stride and/or zero pad parameters`);const u=_t((o-t+2*r)/n+1,s);return w(S(u),()=>`The output # of columns (${u}) must be an integer. Change the stride and/or zero pad parameters`),[i,u]}([t,n],a,r,e,i);c=s[0],p=s[1]}else if("same"===e){c=Math.ceil(t/r),p=Math.ceil(n/s);const e=Math.max(0,(c-1)*r+a-t),i=Math.max(0,(p-1)*s+o-n),u=Math.floor(e/2),d=e-u,h=Math.floor(i/2);l={top:u,bottom:d,left:h,right:i-h,type:"SAME"}}else if("valid"===e)l={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-a+1)/r),p=Math.ceil((n-o+1)/s);else{if("object"!=typeof e)throw Error("Unknown padding parameter: "+e);{const d="channelsLast"===u?e[1][0]:e[2][0],h="channelsLast"===u?e[1][1]:e[2][1],f="channelsLast"===u?e[2][0]:e[3][0],m="channelsLast"===u?e[2][1]:e[3][1];l={top:d,bottom:h,left:f,right:m,type:0===d&&0===h&&0===f&&0===m?"VALID":"EXPLICIT"},c=_t((t-a+d+h)/r+1,i),p=_t((n-o+f+m)/s+1,i)}}return{padInfo:l,outHeight:c,outWidth:p}}(s,l,c,m,g,b,v,a,i),E=o?f*p:f;let k;return"channelsFirst"===i?k=[u,E,N,$]:"channelsLast"===i&&(k=[u,N,$,E]),{batchSize:u,dataFormat:i,inHeight:l,inWidth:c,inChannels:p,outHeight:N,outWidth:$,outChannels:E,padInfo:C,strideHeight:m,strideWidth:g,filterHeight:d,filterWidth:h,effectiveFilterHeight:b,effectiveFilterWidth:v,dilationHeight:y,dilationWidth:x,inShape:e,outShape:k,filterShape:t}}function St(e,t,n,r,s,a=!1,o="channelsLast",i){let[u,l,c,p,d]=[-1,-1,-1,-1,-1];if("channelsLast"===o)[u,l,c,p,d]=e;else{if("channelsFirst"!==o)throw new Error("Unknown dataFormat "+o);[u,d,l,c,p]=e}const[h,f,m,,g]=t,[y,x,b]=It(n),[v,C,N]=It(r),$=At(h,v),E=At(f,C),k=At(m,N),{padInfo:T,outDepth:R,outHeight:I,outWidth:A}=function(e,t,n,r,s,a,o,i,u,l,c){let p,d,h,f;if("number"==typeof e){p={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const a=function(e,t,n,r,s,a){null==s&&(s=Tt(e,t,r));const o=e[0],i=e[1],u=e[2],l=_t((o-t+2*s)/r+1,a);w(S(l),()=>`The output # of depths (${l}) must be an integer. Change the stride and/or zero pad parameters`);const c=_t((i-t+2*s)/r+1,a);w(S(c),()=>`The output # of rows (${c}) must be an integer. Change the stride and/or zero pad parameters`);const p=_t((u-t+2*s)/r+1,a);return w(S(p),()=>`The output # of columns (${p}) must be an integer. Change the stride and/or zero pad parameters`),[l,c,p,n]}([t,n,r,1],i,1,s,e,c);d=a[0],h=a[1],f=a[2]}else if("same"===e){d=Math.ceil(t/s),h=Math.ceil(n/a),f=Math.ceil(r/o);const e=(d-1)*s+i-t,c=(h-1)*a+u-n,m=(f-1)*o+l-r,g=Math.floor(e/2),y=e-g,x=Math.floor(c/2),b=c-x,v=Math.floor(m/2);p={top:x,bottom:b,left:v,right:m-v,front:g,back:y,type:"SAME"}}else{if("valid"!==e)throw Error("Unknown padding parameter: "+e);p={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},d=Math.ceil((t-i+1)/s),h=Math.ceil((n-u+1)/a),f=Math.ceil((r-l+1)/o)}return{padInfo:p,outDepth:d,outHeight:h,outWidth:f}}(s,l,c,p,y,x,b,$,E,k,i),_=a?g*d:g;let D;return"channelsFirst"===o?D=[u,_,R,I,A]:"channelsLast"===o&&(D=[u,R,I,A,_]),{batchSize:u,dataFormat:o,inDepth:l,inHeight:c,inWidth:p,inChannels:d,outDepth:R,outHeight:I,outWidth:A,outChannels:_,padInfo:T,strideDepth:y,strideHeight:x,strideWidth:b,filterDepth:h,filterHeight:f,filterWidth:m,effectiveFilterDepth:$,effectiveFilterHeight:E,effectiveFilterWidth:k,dilationDepth:v,dilationHeight:C,dilationWidth:N,inShape:e,outShape:D,filterShape:t}}function Tt(e,t,n,r=1){const s=At(t,r);return Math.floor((e[0]*(n-1)-n+s)/2)}function Rt(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function It(e){return"number"==typeof e?[e,e,e]:e}function At(e,t){return t<=1?e:e+(e-1)*(t-1)}function _t(e,t){if(!t)return e;switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error("Unknown roundingMode "+t)}}function Dt(e){const[t,n,r]=Rt(e);return 1===t&&1===n&&1===r}function Ft(e,t){return Dt(e)||Dt(t)}function Ot(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error("Unknown dataFormat "+e)}const Mt=Ve({avgPool3dBackprop_:function(e,t,n,r,s=[1,1,1],a,o){const i=Pe(e,"dy","avgPool3dBackprop"),u=Pe(t,"input","avgPool3dBackprop");let l=i,c=u,p=!1;4===u.rank&&(p=!0,l=pt(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),c=pt(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),w(5===l.rank,()=>"Error in avgPool3dBackprop: dy must be rank 5 but got rank "+l.rank+"."),w(5===c.rank,()=>"Error in avgPool3dBackprop: input must be rank 5 but got rank "+c.rank+"."),w(Ft(r,s),()=>`Error in avgPool3dBackprop: Either strides or dilations must be 1. Got strides ${r} and dilations '${s}'`),null!=o&&w(S(a),()=>`Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode ${o} but got pad ${a}.`);const d={dy:l,input:c},h={filterSize:n,strides:r,dilations:s,pad:a,dimRoundingMode:o},f=Ae.runKernelFunc(e=>{const t=Et(c.shape,n,r,s,a,o);return e.avgPool3dBackprop(l,c,t)},d,null,"AvgPool3DBackprop",h);return p?pt(f,[f.shape[1],f.shape[2],f.shape[3],f.shape[4]]):f}}),Bt={kernelName:"AvgPool3D",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{filterSize:s,strides:a,dilations:o,pad:i,dimRoundingMode:u}=n,l=null==o?[1,1,1]:o;return{x:()=>Mt(e,r,s,a,l,i,u)}}};const Pt=Ve({avgPoolBackprop_:function(e,t,n,r,s){const a=Pe(e,"dy","avgPoolBackprop"),o=Pe(t,"input","avgPoolBackprop");w(o.rank===a.rank,()=>`Rank of input (${o.rank}) does not match rank of dy (${a.rank})`);let i=o,u=a,l=!1;3===o.rank&&(l=!0,i=pt(o,[1,o.shape[0],o.shape[1],o.shape[2]]),u=pt(a,[1,a.shape[0],a.shape[1],a.shape[2]])),w(4===u.rank,()=>"Error in avgPoolBackprop: dy must be rank 4 but got rank "+u.rank+"."),w(4===i.rank,()=>"Error in avgPoolBackprop: input must be rank 4 but got rank "+i.rank+".");const c={dy:u,input:i},p={filterSize:n,strides:r,pad:s},d=Ae.runKernelFunc(e=>{const t=$t(i.shape,n,r,1,s);return e.avgPoolBackprop(u,i,t)},c,null,"AvgPoolBackprop",p);return l?pt(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),Lt={kernelName:"AvgPool",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{filterSize:s,strides:a,pad:o}=n;return{x:()=>Pt(e,r,s,a,o)}}};const Vt=Ve({matMul_:function(e,t,n=!1,r=!1){let s=Pe(e,"a","matMul"),a=Pe(t,"b","matMul");[s,a]=Ee(s,a),w(s.rank>=2&&a.rank>=2&&s.rank===a.rank,()=>`Error in matMul: inputs must have the same rank of at least 2, got ranks ${s.rank} and ${a.rank}.`);const o=n?s.shape[s.rank-2]:s.shape[s.rank-1],i=r?a.shape[a.rank-1]:a.shape[a.rank-2],u=n?s.shape[s.rank-1]:s.shape[s.rank-2],l=r?a.shape[a.rank-2]:a.shape[a.rank-1],c=s.shape.slice(0,-2),p=a.shape.slice(0,-2),d=E(c),h=E(p);w(k(c,p),()=>`Error in matMul: outer dimensions (${c}) and (${p}) of Tensors with shapes ${s.shape} and `+a.shape+" must match."),w(o===i,()=>`Error in matMul: inner shapes (${o}) and (${i}) of Tensors with shapes ${s.shape} and ${a.shape} and transposeA=${n} and transposeB=${r} must match.`);const f=s.shape.slice(0,-2).concat([u,l]),m=pt(s,n?[d,o,u]:[d,u,o]),g=pt(a,r?[h,l,i]:[h,i,l]),y={a:m,b:g},x={transposeA:n,transposeB:r},b=Ae.runKernelFunc((e,t)=>(t([m,g]),e.batchMatMul(m,g,n,r)),y,null,"BatchMatMul",x);return pt(b,f)}}),Wt={kernelName:"BatchMatMul",inputsToSave:["a","b"],gradFunc:(e,t,n)=>{const[r,s]=t,{transposeA:a,transposeB:o}=n;return a||o?!a&&o?{a:()=>Vt(e,s,!1,!1),b:()=>Vt(e,r,!0,!1)}:a&&!o?{a:()=>Vt(s,e,!1,!0),b:()=>Vt(r,e,!1,!1)}:{a:()=>Vt(s,e,!0,!0),b:()=>Vt(e,r,!0,!0)}:{a:()=>Vt(e,s,!1,!0),b:()=>Vt(r,e,!0,!1)}}};const zt=Ve({spaceToBatchND_:function(e,t,n){const r=Pe(e,"x","spaceToBatchND");w(r.rank>=1+t.length,()=>`input rank ${r.rank} should be > than [blockShape] ${t.length}`),w(n.length===t.length,()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`),w(r.shape.reduce((e,r,s)=>s>0&&s<=t.length?e&&(r+n[s-1][0]+n[s-1][1])%t[s-1]==0:e,!0),()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`);const s={x:r},a={blockShape:t,paddings:n};return Ae.runKernelFunc(e=>e.spaceToBatchND(r,t,n),s,null,"SpaceToBatchND",a)}}),Ut={kernelName:"BatchToSpaceND",gradFunc:(e,t,n)=>{const{blockShape:r,crops:s}=n;return{x:()=>zt(e,r,s)}}},Gt={kernelName:"BroadcastTo",gradFunc:(e,t,n)=>{const r=n,s=r.inputShape,a=r.shape,o=Array.from(a);for(let e=s.length-1;e>=0;e--)if(s[e]===a[e])o[e]=1;else if(1!==s[e])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${a}].`);const i=[];for(let e=0;e<o.length;e++)o[e]>1&&i.push(e);return{x:()=>vt(e,i,!0)}}},qt={kernelName:"Cast",gradFunc:e=>({x:()=>e.clone()})},Ht={kernelName:"Ceil",gradFunc:e=>({x:()=>at(e)})};const jt=Ve({greaterEqual_:function(e,t){let n=Pe(e,"a","greaterEqual"),r=Pe(t,"b","greaterEqual");[n,r]=Ee(n,r),nt(n.shape,r.shape);const s={a:n,b:r};return Ae.runKernelFunc((e,t)=>{const s=e.greaterEqual(n,r);return t([n,r]),s},s,null,"GreaterEqual")}});const Kt=Ve({lessEqual_:function(e,t){let n=Pe(e,"a","lessEqual"),r=Pe(t,"b","lessEqual");[n,r]=Ee(n,r),nt(n.shape,r.shape);const s={a:n,b:r};return Ae.runKernelFunc((e,t)=>{const s=e.lessEqual(n,r);return t([n,r]),s},s,null,"LessEqual")}});const Xt=Ve({logicalAnd_:function(e,t){const n=Pe(e,"a","logicalAnd","bool"),r=Pe(t,"b","logicalAnd","bool");nt(n.shape,r.shape);const s={a:n,b:r};return Ae.runKernelFunc(e=>e.logicalAnd(n,r),s,null,"LogicalAnd")}});const Yt=Ve({where_:function(e,t,n){const r=Pe(t,"a","where"),s=Pe(n,"b","where"),a=Pe(e,"condition","where","bool"),o=nt(r.shape,s.shape),i=r.broadcastTo(o),u=s.broadcastTo(o);1===a.rank&&w(a.shape[0]===r.shape[0],()=>"The first dimension of `a` must match the size of `condition`."),1!==a.rank&&C(a.shape,u.shape,"Error in where: ");const l={condition:a,t:i,e:u};return Ae.runKernelFunc((e,t)=>{const n=e.select(a,i,u);return t([a]),n},l,null,"SelectV2")}}),Qt={kernelName:"ClipByValue",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{clipValueMin:s,clipValueMax:a}=n;return{x:()=>Yt(Xt(jt(r,s),Kt(r,a)),e,at(e))}}};function Jt(e,t,n=0){let r=[];if("number"==typeof t)w(e.shape[n]%t==0,()=>"Number of splits must evenly divide the axis."),r=new Array(t).fill(e.shape[n]/t);else{w(t.reduce((e,t)=>(-1===t&&(e+=1),e),0)<=1,()=>"There should be only one negative value in split array.");const s=t.indexOf(-1);if(-1!==s){const r=t.reduce((e,t)=>t>0?e+t:e);t[s]=e.shape[n]-r}w(e.shape[n]===t.reduce((e,t)=>e+t),()=>"The sum of sizes must match the size of the axis dimension."),r=t}return r}const Zt=Ve({split_:function(e,t,n=0){const r=Pe(e,"x","split"),s={x:r},a={numOrSizeSplits:t,axis:n};return Ae.runKernelFunc((e,s)=>{const a=_(n,r.shape)[0],o=Jt(r,t,a);return e.split(r,o,a)},s,null,"SplitV",a)}}),en={kernelName:"Concat",saveAllInputs:!0,gradFunc:(e,t,n)=>{const r=t.map(e=>e.shape),{axis:s}=n,a=_(s,t[0].shape)[0],o=r.map(e=>e[a]);return Zt(e,o,a).map(e=>()=>e)}};const tn=Ve({conv2DBackpropFilter_:function(e,t,n,r,s,a="NHWC",o){let i=e;3===e.rank&&(i=pt(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let u=t;3===u.rank&&(u=pt(t,[1,t.shape[0],t.shape[1],t.shape[2]])),w(4===i.rank,()=>"Error in conv2dDerFilter: input must be rank 4, but got shape "+i.shape+"."),w(4===u.rank,()=>"Error in conv2dDerFilter: dy must be rank 4, but got shape "+u.shape+"."),w(4===n.length,()=>"Error in conv2dDerFilter: filterShape must be length 4, but got "+n+".");const l="NHWC"===a?i.shape[3]:i.shape[1],c="NHWC"===a?u.shape[3]:u.shape[1];w(l===n[2],()=>`Error in conv2dDerFilter: depth of input ${l}) must match input depth in filter (${n[2]}.`),w(c===n[3],()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`),null!=o&&w(S(s),()=>`Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode ${o} but got pad ${s}.`);const p={x:i,dy:u},d={strides:r,pad:s,dataFormat:a,dimRoundingMode:o};return Ae.runKernelFunc(e=>{const t=Ot(a),l=kt(i.shape,n,r,1,s,o,!1,t);return e.conv2dDerFilter(i,u,l)},p,null,"Conv2DBackpropFilter",d)}});const nn=Ve({conv2DBackpropInput_:function(e,t,n,r,s,a="NHWC",o){w(e.length===t.rank,()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`);let i=e,u=t,l=!1;3===t.rank&&(l=!0,u=pt(t,[1,t.shape[0],t.shape[1],t.shape[2]]),i=[1,e[0],e[1],e[2]]),w(4===i.length,()=>"Error in conv2dDerInput: inShape must be length 4, but got length "+i.length+"."),w(4===u.rank,()=>"Error in conv2dDerInput: dy must be rank 4, but got rank "+u.rank),w(4===n.rank,()=>"Error in conv2dDerInput: filter must be rank 4, but got rank "+n.rank);const c="NHWC"===a?i[3]:i[1],p="NHWC"===a?u.shape[3]:u.shape[1];w(c===n.shape[2],()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`),w(p===n.shape[3],()=>`Error in conv2dDerInput: depth of output (${p}) must match output depth for filter ${n.shape[3]}.`),null!=o&&w(S(s),()=>`Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode ${o} but got pad ${s}.`);const d={dy:u,filter:n},h={strides:r,pad:s,dataFormat:a,dimRoundingMode:o,inputShape:i},f=Ae.runKernelFunc((e,t)=>{const l=Ot(a),c=kt(i,n.shape,r,1,s,o,!1,l),p=e.conv2dDerInput(u,n,c);return t([u,n]),p},d,null,"Conv2DBackpropInput",h);return l?pt(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),rn={kernelName:"Conv2D",inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,{dilations:a,strides:o,pad:i,dataFormat:u}=n;return w(Dt(a),()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`),{x:()=>nn(r.shape,e,s,o,i,u),filter:()=>tn(r,e,s.shape,o,i,u)}}};const sn=Ve({conv2d_:function(e,t,n,r,s="NHWC",a=[1,1],o){const i=Pe(e,"x","conv2d"),u=Pe(t,"filter","conv2d");let l=i,c=!1;3===i.rank&&(c=!0,l=pt(i,[1,i.shape[0],i.shape[1],i.shape[2]])),w(4===l.rank,()=>`Error in conv2d: input must be rank 4, but got rank ${l.rank}.`),w(4===u.rank,()=>"Error in conv2d: filter must be rank 4, but got rank "+u.rank+"."),null!=o&&w(S(r),()=>`Error in conv2d: pad must be an integer when using, dimRoundingMode ${o} but got pad ${r}.`);const p="NHWC"===s?l.shape[3]:l.shape[1];w(p===u.shape[2],()=>`Error in conv2d: depth of input (${p}) must match input depth for filter ${u.shape[2]}.`),w(Ft(n,a),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`);const d={x:l,filter:u},h={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o},f=Ae.runKernelFunc((e,t)=>{const i=Ot(s),c=kt(l.shape,u.shape,n,a,r,o,!1,i),p=e.conv2d(l,u,c);return t([l,u]),p},d,null,"Conv2D",h);return c?pt(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),an={kernelName:"Conv2DBackpropInput",inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,{strides:a,pad:o,dataFormat:i,dimRoundingMode:u}=n;return{dy:()=>sn(e,s,a,o,i,1,u),filter:()=>tn(e,r,s.shape,a,o,i,u)}}};const on=Ve({conv3DBackpropFilter_:function(e,t,n,r,s){let a=e;4===e.rank&&(a=pt(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let o=t;4===o.rank&&(o=pt(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),w(5===a.rank,()=>"Error in conv3dDerFilter: input must be rank 5, but got shape "+a.shape+"."),w(5===o.rank,()=>"Error in conv3dDerFilter: dy must be rank 5, but got shape "+o.shape+"."),w(5===n.length,()=>"Error in conv3dDerFilter: filterShape must be length 5, but got "+n+"."),w(a.shape[4]===n[3],()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${n[3]}.`),w(o.shape[4]===n[4],()=>`Error in conv3dDerFilter: depth of dy (${o.shape[4]}) must match output depth for filter (${n[4]}).`);const i={x:a,y:o},u={strides:r,pad:s};return Ae.runKernelFunc(e=>{const t=St(a.shape,n,r,1,s);return e.conv3dDerFilter(a,o,t)},i,null,"Conv3DBackpropFilterV2",u)}});const un=Ve({conv3DBackpropInput_:function(e,t,n,r,s){w(e.length===t.rank,()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`);let a=e,o=t,i=!1;4===t.rank&&(i=!0,o=pt(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),a=[1,e[0],e[1],e[2],e[3]]);const u=a[4],l=o.shape[4];w(5===a.length,()=>"Error in conv3dDerInput: inShape must be length 5, but got length "+a.length+"."),w(5===o.rank,()=>"Error in conv3dDerInput: dy must be rank 5, but got rank "+o.rank),w(5===n.rank,()=>"Error in conv3dDerInput: filter must be rank 5, but got rank "+n.rank),w(u===n.shape[3],()=>`Error in conv3dDerInput: depth of input (${u}) must match input depth for filter ${n.shape[3]}.`),w(l===n.shape[4],()=>`Error in conv3dDerInput: depth of output (${l}) must match output depth for filter ${n.shape[4]}.`);const c={dy:o},p={pad:s},d=Ae.runKernelFunc(e=>{const t=St(a,n.shape,r,1,s);return e.conv3dDerInput(o,n,t)},c,null,"Conv3DBackpropInputV2",p);return i?pt(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),ln={kernelName:"Conv3D",inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:r,strides:s,pad:a}=n;w(Dt(r),()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`);const[o,i]=t;return{x:()=>un(o.shape,e,i,s,a),filter:()=>on(o,e,i.shape,s,a)}}};const cn=Ve({sin_:function(e){const t=Pe(e,"x","sin"),n={x:t};return Ae.runKernelFunc((e,n)=>{const r=e.sin(t);return n([t]),r},n,null,"Sin")}}),pn={kernelName:"Cos",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ze(je(cn(We(n,"float32"))),e)}}};const dn=Ve({sinh_:function(e){const t=Pe(e,"x","sinh"),n={x:t};return Ae.runKernelFunc((e,n)=>{const r=e.sinh(t);return n([t]),r},n,null,"Sinh")}}),hn={kernelName:"Cosh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ze(dn(We(n,"float32")),e)}}};const fn=Ve({transpose_:function(e,t){const n=Pe(e,"x","transpose");if(null==t&&(t=n.shape.map((e,t)=>t).reverse()),w(n.rank===t.length,()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${t}.`),t.forEach(e=>{w(e>=0&&e<n.rank,()=>"All entries in 'perm' must be between 0 and "+(n.rank-1)+" but got "+t)}),n.rank<=1)return n.clone();const r={x:n},s={perm:t};return Ae.runKernelFunc(e=>e.transpose(n,t),r,null,"Transpose",s)}});const mn=Ve({cumsum_:function(e,t=0,n=!1,r=!1){const s=Pe(e,"x","cumsum"),a={x:s},o={axis:t,exclusive:n,reverse:r};return Ae.runKernelFunc((e,a)=>{const o=yt([t],s.rank);let i=s;null!=o&&(i=fn(s,o));const u=bt(1,s.rank)[0];let l=e.cumsum(i,u,n,r);if(a([s]),null!=o){const e=xt(o);l=fn(l,e)}return l},a,null,"Cumsum",o)}}),gn={kernelName:"Cumsum",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{axis:s,exclusive:a,reverse:o}=n;return{x:()=>{const t=yt([s],r.rank);let n=mn(e,s,a,!o);return null!=t&&(n=fn(n,t)),n}}}};const yn=Ve({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,r){let s=e;3===e.rank&&(s=pt(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let a=t;3===a.rank&&(a=pt(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const o={x:s,dy:a};return Ae.runKernelFunc(e=>e.depthwiseConv2DDerFilter(s,a,r),o,null,"DepthwiseConv2dNativeBackpropFilter")}});const xn=Ve({depthwiseConv2dNativeBackpropInput_:function(e,t,n,r){let s=t,a=!1;3===t.rank&&(a=!0,s=pt(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const o={dy:s},i=Ae.runKernelFunc(e=>e.depthwiseConv2DDerInput(s,n,r),o,null,"DepthwiseConv2dNativeBackpropInput");return a?pt(i,[i.shape[1],i.shape[2],i.shape[3]]):i}}),bn={kernelName:"DepthwiseConv2dNative",inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:r,strides:s,pad:a,dimRoundingMode:o}=n,i=null==r?[1,1]:r;w(Dt(i),()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${i}'`);const[u,l]=t;w(4===u.rank,()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${u.rank}.`),w(4===l.rank,()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${l.rank}.`),w(u.shape[3]===l.shape[2],()=>`Error in gradient of depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${l.shape[2]}.`),w(Ft(s,i),()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${s} and dilations '${i}'.`),null!=o&&w(S(a),()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${o} but got pad ${a}.`);const c=kt(u.shape,l.shape,s,i,a,o,!0);return{x:()=>xn(u.shape,e,l,c),filter:()=>yn(u,e,l.shape,c)}}},vn={kernelName:"Dilation2D",inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,a={x:r,filter:s,dy:e},o={x:r,filter:s,dy:e};return{x:()=>Ae.runKernel("Dilation2DBackpropInput",a,n),filter:()=>Ae.runKernel("Dilation2DBackpropFilter",o,n)}}},wn={kernelName:"Div",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=nt(n.shape,r.shape);return{a:()=>{const t=He(e,r.toFloat()),a=tt(n.shape,s);return a.length>0?vt(t,a).reshape(n.shape):t},b:()=>{let t=ze(e,n.toFloat());const a=tt(r.shape,s);a.length>0&&(t=pt(vt(t,a),r.shape));const o=Qe(r);return je(He(t,o.toFloat()))}}}},Cn={kernelName:"Elu",outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t,r=t=>t.eluDer(e,n),s={dy:e,y:n};return{x:()=>Ae.runKernelFunc(r,s,null,"EluGrad")}}};const Nn=Ve({exp_:function(e){const t=Pe(e,"x","exp"),n={x:t};return Ae.runKernelFunc((e,n)=>{const r=e.exp(t);return n([r]),r},n,null,"Exp")}}),$n={kernelName:"Erf",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,r=ze(Nn(je(Qe(n))),2/Math.sqrt(Math.PI));return{x:()=>ze(e,r)}}},En={kernelName:"Exp",outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ze(e,n)}}},kn={kernelName:"Expm1",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ze(e,Nn(n))}}},Sn={kernelName:"Floor",gradFunc:e=>({x:()=>at(e)})},Tn={kernelName:"FloorDiv",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=nt(n.shape,r.shape);return{a:()=>{const t=e.div(r.toFloat()),a=tt(n.shape,s);return a.length>0?t.sum(a).reshape(n.shape):t},b:()=>{let t=e.mul(n.toFloat());const a=tt(r.shape,s);a.length>0&&(t=t.sum(a).reshape(r.shape));const o=r.square();return t.div(o.toFloat()).neg()}}}};const Rn=Ve({rsqrt_:function(e){const t=Pe(e,"x","rsqrt"),n={x:t};return Ae.runKernelFunc((e,n)=>{const r=e.rsqrt(t);return n([t]),r},n,null,"Rsqrt")}});const In=Ve({tile_:function(e,t){const n=Pe(e,"x","tile",null);w(n.rank===t.length,()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`);const r=[n],s={x:n},a={reps:t};return Ae.runKernelFunc((e,r)=>{const s=e.tile(n,t);return r([n]),s},s,null,"Tile",a,r)}}),An={kernelName:"FusedBatchNorm",inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{const{varianceEpsilon:r}=n,[s,a,o,i]=t,u=null==i?Xe(1):i,l=tt(a.shape,s.shape),c=[];if(1===a.rank){for(let e=0;e<s.shape.length-1;++e)c.push(s.shape[e]);c.push(1)}const p=Je(s,a),d=ze(e,u),h=Rn(lt(o,Xe(r))),f=ze(ze(ze(h,h),h),Xe(-.5));return{x:()=>1===a.rank?pt(ze(ze(e,In(h.as4D(1,1,1,a.shape[0]),c)),u),s.shape):pt(ze(ze(e,h),u),s.shape),mean:()=>{let e=ze(ze(h,Xe(-1)),d);return 1===a.rank&&(e=vt(e,l)),pt(e,a.shape)},variance:()=>{let e=ze(ze(f,p),d);return 1===a.rank&&(e=vt(e,l)),pt(e,a.shape)},scale:()=>{const t=ze(p,h);let n=ze(e,t);return 1===a.rank&&(n=vt(n,l)),pt(n,a.shape)},offset:()=>{let t=e;return 1===a.rank&&(t=vt(t,l)),pt(t,a.shape)}}}};const _n=Ve({unsortedSegmentSum_:function(e,t,n){const r=Pe(e,"x","unsortedSegmentSum"),s=Pe(t,"segmentIds","unsortedSegmentSum","int32");w(S(n),()=>"numSegments must be of dtype int");const a={x:r,segmentIds:s},o={numSegments:n};return Ae.runKernelFunc((e,t)=>{const a=e.unsortedSegmentSum(r,s,n);return t([s]),a},a,null,"UnsortedSegmentSum",o)}}),Dn={kernelName:"GatherV2",inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{const[r,s]=t,{axis:a}=n,o=_(a,r.shape)[0];return{x:()=>{const t=r.shape,n=s.size,i=t.slice(0,o),u=i.length,l=t.slice(a,t.length).slice(1),c=l.length,p=Fn(0,u),d=Fn(u+1,u+1+c),h=On([i,[n],l]),f=pt(e,h),m=pt(s,[n]),g=On([[u],p,d]),y=fn(f,g);let x=_n(y,m,r.shape[o]);const b=xt(g);return x=fn(x,b),x},indices:()=>s}}};function Fn(e,t){const n=[];for(let r=e;r<t;++r)n.push(r);return n}function On(e){const t=[];for(let n=0;n<e.length;++n)for(let r=0;r<e[n].length;++r)t.push(e[n][r]);return t}const Mn={kernelName:"GreaterEqual",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>at(n),b:()=>at(r)}}},Bn={kernelName:"Identity",gradFunc:e=>({x:()=>e.toFloat()})},Pn={kernelName:"IsFinite",gradFunc:e=>({x:()=>at(e)})},Ln={kernelName:"IsInf",gradFunc:e=>({x:()=>at(e)})},Vn={kernelName:"IsNan",gradFunc:e=>({x:()=>at(e)})},Wn={kernelName:"Log1p",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>He(e,lt(n,1))}}},zn={kernelName:"Log",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>He(e,We(n,"float32"))}}},Un={kernelName:"LogSoftmax",inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r]=t,{axis:s}=n;return{logits:()=>{const t=r.exp();return e.sub(e.sum(s,!0).mul(t))}}}};const Gn=Ve({localResponseNormalizationBackprop_:function(e,t,n,r=5,s=1,a=1,o=.5){const i={x:e,y:t,dy:n},u={depthRadius:r,bias:s,alpha:a,beta:o};return Ae.runKernelFunc(i=>i.LRNGrad(n,e,t,r,s,a,o),i,null,"LRNBackprop",u)}}),qn={kernelName:"LRN",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{depthRadius:a,bias:o,alpha:i,beta:u}=n;return{x:()=>Gn(r,s,e,a,o,i,u)}}};const Hn=Ve({equal_:function(e,t){let n=Pe(e,"a","equal"),r=Pe(t,"b","equal");[n,r]=Ee(n,r),nt(n.shape,r.shape);const s={a:n,b:r};return Ae.runKernelFunc(e=>e.equal(n,r),s,null,"Equal")}});function jn(e,t,n,r,s){return t.rank<n.rank&&(t=pt(t,mt(t.shape,r))),e.rank<n.rank&&(e=pt(e,mt(e.shape,r))),{x:()=>{const r=ze(e,We(Hn(n,t),e.dtype));return null==s?r:fn(r,s)}}}const Kn={kernelName:"Max",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const r=n,{reductionIndices:s}=r,[a,o]=t,i=_(s,a.shape),u=yt(i,a.rank),l=jn(e,o,a,i,u);return{x:()=>{let e=l.x();return null!=u&&(e=fn(e)),e}}}};const Xn=Ve({less_:function(e,t){let n=Pe(e,"a","less"),r=Pe(t,"b","less");[n,r]=Ee(n,r),nt(n.shape,r.shape);const s={a:n,b:r};return Ae.runKernelFunc(e=>e.less(n,r),s,null,"Less")}}),Yn={kernelName:"Maximum",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>ze(e,We(jt(n,r),"float32")),b:()=>ze(e,We(Xn(n,r),"float32"))}}};const Qn=Ve({maxPool3dBackprop_:function(e,t,n,r,s,a=[1,1,1],o,i){const u=Pe(e,"dy","maxPool3dBackprop"),l=Pe(t,"input","maxPool3dBackprop"),c=Pe(n,"output","maxPool3dBackprop");let p=u,d=l,h=c,f=!1;4===l.rank&&(f=!0,p=pt(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]]),d=pt(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),h=pt(c,[1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]])),w(5===p.rank,()=>"Error in maxPool3dBackprop: dy must be rank 5 but got rank "+p.rank+"."),w(5===d.rank,()=>"Error in maxPool3dBackprop: input must be rank 5 but got rank "+d.rank+"."),w(5===h.rank,()=>"Error in maxPool3dBackprop: output must be rank 5 but got rank "+h.rank+"."),w(Ft(s,a),()=>`Error in maxPool3dBackprop: Either strides or dilations must be 1. Got strides ${s} and dilations '${a}'`),null!=i&&w(S(o),()=>`Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode ${i} but got pad ${o}.`);const m={dy:p,input:d,output:h},g={filterSize:r,strides:s,dilations:a,pad:o,dimRoundingMode:i},y=Ae.runKernelFunc(e=>{const t=Et(d.shape,r,s,a,o,i);return e.maxPool3dBackprop(p,d,h,t)},m,null,"MaxPool3DBackprop",g);return f?pt(y,[y.shape[1],y.shape[2],y.shape[3],y.shape[4]]):y}}),Jn={kernelName:"MaxPool3D",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{filterSize:a,strides:o,dilations:i,pad:u,dimRoundingMode:l}=n,c=null==i?[1,1,1]:i;return{x:()=>Qn(e,r,s,a,o,c,u,l)}}};const Zn=Ve({maxPoolBackprop_:function(e,t,n,r,s,a,o){const i=Pe(e,"dy","maxPoolBackprop"),u=Pe(t,"input","maxPoolBackprop"),l=Pe(n,"output","maxPoolBackprop");w(u.rank===i.rank,()=>`Rank of input (${u.rank}) does not match rank of dy (${i.rank})`),w(4===i.rank,()=>"Error in maxPoolBackprop: dy must be rank 4 but got rank "+i.rank+"."),w(4===u.rank,()=>"Error in maxPoolBackprop: input must be rank 4 but got rank "+u.rank+"."),null!=o&&w(S(a),()=>`Error in maxPoolBackprop: pad must be an integer when using, dimRoundingMode ${o} but got pad ${a}.`);const c={dy:i,input:u,output:l},p={filterSize:r,strides:s,pad:a,dimRoundingMode:o};return Ae.runKernelFunc(e=>{const t=$t(u.shape,r,s,1,a,o);return e.maxPoolBackprop(i,u,l,t)},c,null,"MaxPoolBackprop",p)}}),er={kernelName:"MaxPool",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{filterSize:a,strides:o,pad:i}=n;return{x:()=>Zn(e,r,s,a,o,i)}}},tr={kernelName:"Min",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const r=n,{axis:s}=r,[a,o]=t,i=_(s,a.shape),u=yt(i,a.rank),l=jn(e,o,a,i,u);return{x:()=>{let e=l.x();return null!=u&&(e=fn(e)),e}}}};const nr=Ve({greater_:function(e,t){let n=Pe(e,"a","greater"),r=Pe(t,"b","greater");[n,r]=Ee(n,r),nt(n.shape,r.shape);const s={a:n,b:r};return Ae.runKernelFunc(e=>e.greater(n,r),s,null,"Greater")}}),rr={kernelName:"Minimum",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>ze(e,We(Kt(n,r),"float32")),b:()=>ze(e,We(nr(n,r),"float32"))}}};const sr=Ve({floor_:function(e){const t=Pe(e,"x","floor"),n={x:t};return Ae.runKernelFunc(e=>e.floor(t),n,null,"Floor")}}),ar={kernelName:"Mod",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=nt(n.shape,r.shape);return{a:()=>{const t=tt(n.shape,s);return t.length>0?pt(vt(e,t),n.shape):e},b:()=>{const t=ze(e,je(sr(He(n,r)))),a=tt(r.shape,s);return a.length>0?pt(vt(t,a),r.shape):t}}}},or={kernelName:"Multiply",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=nt(n.shape,r.shape);return{a:()=>{const t=ze(e,We(r,"float32")),a=tt(n.shape,s);return a.length>0?pt(vt(t,a),n.shape):t},b:()=>{const t=ze(e,We(n,"float32")),a=tt(r.shape,s);return a.length>0?pt(vt(t,a),r.shape):t}}}},ir={kernelName:"Negate",gradFunc:e=>({x:()=>je(e)})};const ur=Ve({complex_:function(e,t){const n=Pe(e,"real","complex"),r=Pe(t,"imag","complex");C(n.shape,r.shape,`real and imag shapes, ${n.shape} and ${r.shape}, must match in call to tf.complex().`);const s={real:n,imag:r};return Ae.runKernelFunc(e=>e.complex(n,r),s,null,"Complex")}});function lr(e,t="float32"){if("complex64"===t){const t=lr(e,"float32"),n=lr(e,"float32");return ur(t,n)}const n=J(E(e),t);return Ae.makeTensor(n,e,t)}const cr={kernelName:"OneHot",inputsToSave:["indices"],gradFunc:(e,t)=>{const n=t[0];return{indices:()=>lr(n.shape,"float32")}}},pr={kernelName:"OnesLike",gradFunc:e=>({x:()=>at(e)})},dr={kernelName:"PadV2",inputsToSave:["x"],gradFunc:(e,t,n)=>{const r=t[0],{paddings:s}=n,a=s.map(e=>e[0]);return{x:()=>e.slice(a,r.shape)}}};const hr=Ve({log_:function(e){const t=Pe(e,"x","log"),n={x:t};return Ae.runKernelFunc((e,n)=>{const r=e.log(t);return n([t]),r},n,null,"Log")}});const fr=Ve({pow_:function(e,t){let n=Pe(e,"base","pow"),r=Pe(t,"exp","pow");[n,r]=Ee(n,r);const s={a:n,b:r};return Ae.runKernelFunc((e,t)=>{const s=e.pow(n,r);return t([n,r,s]),s},s,null,"Pow")}}),mr={kernelName:"Pow",inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{const[n,r,s]=t,a=n,o=r,i=nt(a.shape,o.shape);return{a:()=>{const t=We(o,"float32");let n=ze(e,ze(t,fr(a,Je(t,Xe(1)))));const r=tt(a.shape,i);return r.length>0&&(n=vt(n,r)),pt(n,a.shape)},b:()=>{const t=nr(a,0),n=Yt(t,hr(a),at(a));let r=ze(e,ze(s,n));const u=tt(o.shape,i);return u.length>0&&(r=vt(r,u)),pt(r,o.shape)}}}},gr={kernelName:"Prelu",inputsToSave:["x","alpha"],gradFunc:(e,t)=>{const[n,r]=t,s=nr(n,0);return{x:()=>Yt(s,e,ze(e,r)),alpha:()=>{let t=Yt(s,at(e),ze(e,n));const a=tt(r.shape,e.shape);return a.length>0&&(t=vt(t,a)),pt(t,r.shape)}}}},yr={kernelName:"Reciprocal",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>He(e,je(Qe(n)))}}},xr={kernelName:"Relu6",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,r=ze(Kt(n,6),Ue(n));return{x:()=>ze(e,We(r,"float32"))}}},br={kernelName:"Relu",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ze(e,We(Ue(n),"float32"))}}},vr={kernelName:"Reshape",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>pt(e,n.shape)}}},wr={kernelName:"ResizeBilinear",inputsToSave:["images"],gradFunc:(e,t,n)=>{const[r]=t,s=t=>{const{alignCorners:s}=n;return t.resizeBilinearBackprop(e,r,s)},a={images:r};return{images:()=>Ae.runKernelFunc(s,a,null,"ResizeBilinearGrad",n)}}},Cr={kernelName:"ResizeNearestNeighbor",inputsToSave:["images"],gradFunc:(e,t,n)=>{const[r]=t,s=t=>{const{alignCorners:s}=n;return t.resizeNearestNeighborBackprop(e,r,s)},a={images:r};return{images:()=>Ae.runKernelFunc(s,a,null,"ResizeNearestNeighborGrad",n)}}};const Nr=Ve({clone_:function(e){const t=Pe(e,"x","clone",null),n={x:t};return Ae.runKernelFunc(()=>Ae.makeTensorFromDataId(t.dataId,t.shape,t.dtype),n,null,"Identity")}});const $r=Ve({reverse_:function(e,t){const n=Pe(e,"x","reverse"),r={x:n},s={dims:t};return Ae.runKernelFunc(e=>{const r=_(t,n.shape);if(0===n.rank)return Nr(n);const s=e.reverse(n,r);return pt(s,n.shape)},r,null,"Reverse",s)}}),Er={kernelName:"Reverse",gradFunc:(e,t,n)=>{const{dims:r}=n,s=_(r,e.shape);return{x:()=>$r(e,s)}}},kr={kernelName:"Round",gradFunc:e=>({x:()=>at(e)})},Sr={kernelName:"Rsqrt",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>je(He(e,ze(fr(n,1.5),2)))}}};const Tr=Ve({logicalNot_:function(e){const t=Pe(e,"x","logicalNot","bool"),n={x:t};return Ae.runKernelFunc(e=>e.logicalNot(t),n,null,"LogicalNot")}}),Rr={kernelName:"SelectV2",inputsToSave:["condition"],gradFunc:(e,t)=>{const[n]=t;return{condition:()=>We(at(n),"float32"),t:()=>ze(e,We(n,e.dtype)),e:()=>ze(e,We(Tr(n),e.dtype))}}},Ir={kernelName:"Selu",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=nr(n,Xe(0)),r=Xe(1.7580993408473768),s=Xe(1.0507009873554805),a=ze(e,s),o=ze(ze(e,r),Nn(We(n,"float32")));return Yt(t,a,o)}}}},Ar={kernelName:"Sigmoid",outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ze(e,ze(n,Je(Xe(1),n)))}}},_r={kernelName:"Sign",gradFunc:e=>({x:()=>at(e)})};const Dr=Ve({cos_:function(e){const t=Pe(e,"x","cos"),n={x:t};return Ae.runKernelFunc((e,n)=>{const r=e.cos(t);return n([t]),r},n,null,"Cos")}}),Fr={kernelName:"Sin",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ze(Dr(We(n,"float32")),e)}}};const Or=Ve({cosh_:function(e){const t=Pe(e,"x","cosh"),n={x:t};return Ae.runKernelFunc((e,n)=>{const r=e.cosh(t);return n([t]),r},n,null,"Cosh")}}),Mr={kernelName:"Sinh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ze(Or(We(n,"float32")),e)}}};const Br=Ve({pad_:function(e,t,n=0){const r=Pe(e,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const s={paddings:t,constantValue:n},a={x:r};return Ae.runKernelFunc((e,s)=>(s([r]),e.pad(r,t,n)),a,null,"PadV2",s)}});function Pr(e,t,n){w(e.rank===t.length,()=>`Error in slice${e.rank}D: Length of begin ${t} must match the rank of the array (${e.rank}).`),w(e.rank===n.length,()=>`Error in slice${e.rank}D: Length of size ${n} must match the rank of the array (${e.rank}).`);for(let r=0;r<e.rank;++r)w(t[r]+n[r]<=e.shape[r],()=>`Error in slice${e.rank}D: begin[${r}] + size[${r}] (${t[r]+n[r]}) would overflow input.shape[${r}] (${e.shape[r]})`)}function Lr(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function Vr(e,t,n){const r=[];for(let s=0;s<e.length;s++)r[s]=Math.ceil((t[s]-e[s])/n[s]);return r}function Wr(e,t,n,r){const s=[...e];for(let e=s.length;e<r.length;e++)s.push(1);for(let e=0;e<n;e++)0===e?s[t]=1:(s.splice(t,0,1),s.pop());return s}function zr(e,t,n){return n<=e?n:n-(t-1)}function Ur(e,t){const n=[];for(let r=0;r<e;r++)n.push(t+r);return n}function Gr(e,t,n,r,s){const a=[...s],o=Ur(n,t);for(let s=0;s<a.length;s++)if(o.indexOf(s)>-1)a[s]=0;else{const o=zr(t,n,s);let i=r[o];e&1<<o&&(i=0),a[s]=i}return a}function qr(e,t,n,r,s){const a=[...s],o=Ur(n,t);for(let s=0;s<a.length;s++)if(o.indexOf(s)>-1)a[s]=Number.MAX_SAFE_INTEGER;else{const o=zr(t,n,s);let i=r[o];e&1<<o&&(i=Number.MAX_SAFE_INTEGER),a[s]=i}for(let e=0;e<a.length;e++){const t=s[e];a[e]<0&&(a[e]+=t),a[e]=x(0,a[e],s[e])}return a}function Hr(e,t,n){let r=e[t];return(n&1<<t||null==r)&&(r=1),r}function jr(e,t,n,r,s,a){let o=t[s];const i=n[s]||1;(e&1<<s||a&1<<s||null==o)&&(o=i>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const u=r[s];return o<0&&(o+=u),o=x(0,o,u-1),o}function Kr(e,t,n,r,s,a){let o=t[s];const i=n[s]||1;(e&1<<s||a&1<<s||null==o)&&(o=i>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const u=r[s];return o<0&&(o+=u),o=i>0?x(0,o,u):x(-1,o,u-1),o}function Xr(e,t,n){let r=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){r=e;break}for(let s=r+1;s<n.length;s++)if(t[s]>0||n[s]!==e[s])return!1;return!0}function Yr(e,t){let n=e.length>0?e[e.length-1]:1;for(let r=0;r<e.length-1;r++)n+=e[r]*t[r];return n}function Qr(e,t,n){let r,s;return r="number"==typeof t?[t,...new Array(e.rank-1).fill(0)]:t.length<e.rank?t.concat(new Array(e.rank-t.length).fill(0)):t.slice(),r.forEach(e=>{w(-1!==e,()=>"slice() does not support negative begin indexing.")}),s=null==n?new Array(e.rank).fill(-1):"number"==typeof n?[n,...new Array(e.rank-1).fill(-1)]:n.length<e.rank?n.concat(new Array(e.rank-n.length).fill(-1)):n,s=s.map((t,n)=>t>=0?t:(w(-1===t,()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`),e.shape[n]-r[n])),[r,s]}var Jr=Object.freeze({__proto__:null,assertParamsValid:Pr,maskToAxes:Lr,computeOutShape:Vr,stridesWithElidedDims:Wr,startIndicesWithElidedDims:Gr,stopIndicesWithElidedDims:qr,stridesForAxis:Hr,startForAxis:jr,stopForAxis:Kr,isSliceContinous:Xr,computeFlatOffset:Yr,parseSliceParams:Qr});const Zr={kernelName:"Slice",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{begin:s,size:a}=n,o=r.shape,[i,u]=Qr(r,s,a),l=[];for(let t=0;t<e.rank;t++)l.push([i[t],o[t]-i[t]-u[t]]);return{x:()=>Br(e,l)}}},es={kernelName:"Softmax",outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r]=t,{dim:s}=n,a=ze(e,r);return{logits:()=>Je(a,ze(vt(a,[s],!0),r))}}};const ts=Ve({sigmoid_:function(e){const t=Pe(e,"x","sigmoid"),n={x:t};return Ae.runKernelFunc((e,n)=>{const r=e.sigmoid(t);return n([r]),r},n,null,"Sigmoid")}}),ns={kernelName:"Softplus",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ze(e,ts(n))}}};const rs=Ve({batchToSpaceND_:function(e,t,n){const r=Pe(e,"x","batchToSpaceND"),s=t.reduce((e,t)=>e*t);w(r.rank>=1+t.length,()=>`input rank is ${r.rank} but should be > than blockShape.length ${t.length}`),w(n.length===t.length,()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`),w(r.shape[0]%s==0,()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${s}`);const a={x:r},o={blockShape:t,crops:n};return Ae.runKernelFunc(e=>e.batchToSpaceND(r,t,n),a,null,"BatchToSpaceND",o)}}),ss={kernelName:"SpaceToBatchND",gradFunc:(e,t,n)=>{const{blockShape:r,paddings:s}=n;return{x:()=>rs(e,r,s)}}};function as(e,t){const n=e[0].length;e.forEach((e,t)=>{w(e.length===n,()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`)}),w(t>=0&&t<n,()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`);const r=e[0];e.forEach((e,s)=>{for(let a=0;a<n;a++)w(a===t||e[a]===r[a],()=>`Error in concat${n}D: Shape of tensors[${s}] (${e}) does not match the shape of the rest (${r}) along the non-concatenated axis ${s}.`)})}function os(e,t){const n=e[0].slice();for(let r=1;r<e.length;r++)n[t]+=e[r][t];return n}function is(e,t,n){return Ke(e,t,Me(e,n),n)}const us=Ve({concat_:function(e,t=0){w(e.length>=1,()=>"Pass at least one tensor to concat");let n=Le(e,"tensors","concat");"complex64"===n[0].dtype&&n.forEach(e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)});const r=_(t,n[0].shape)[0],s=os(n.map(e=>e.shape),r);if(0===E(s))return is([],s);if(n=n.filter(e=>e.size>0),1===n.length)return n[0];as(n.map(e=>e.shape),r);const a=n,o={axis:t};return Ae.runKernelFunc((e,t)=>{const s=e.concat(n,r);return t(n),s},a,null,"Concat",o)}}),ls={kernelName:"SplitV",gradFunc:(e,t,n)=>{const{axis:r}=n;return{x:()=>us(e,r)}}},cs={kernelName:"Sqrt",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>He(e,ze(Ye(We(n,"float32")),2))}}},ps={kernelName:"Square",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ze(e,ze(n.toFloat(),2))}}},ds={kernelName:"SquaredDifference",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=Xe(2);return{a:()=>ze(e,ze(s,Je(n,r))),b:()=>ze(e,ze(s,Je(r,n)))}}},hs={kernelName:"Step",gradFunc:e=>({x:()=>at(e)})},fs={kernelName:"Sub",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=nt(n.shape,r.shape);return{a:()=>{let t=e;const r=tt(n.shape,s);return r.length>0&&(t=vt(t,r)),pt(t,n.shape)},b:()=>{let t=e;const n=tt(r.shape,s);return n.length>0&&(t=vt(t,n)),pt(je(t),r.shape)}}}};function ms(e,t="float32"){if("complex64"===t){const t=ms(e,"float32"),n=lr(e,"float32");return ur(t,n)}const n=Q(E(e),t);return Ae.makeTensor(n,e,t)}const gs={kernelName:"Sum",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,s=r.shape.slice(),{axis:a}=n;_(a,r.shape).forEach(e=>{s[e]=1});const o=pt(e,s),i=ze(o,ms(r.shape,"float32"));return{x:()=>i}}},ys={kernelName:"Tan",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>He(e,Qe(Dr(n)))}}},xs={kernelName:"Tanh",outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ze(Je(Xe(1),Qe(n)),e)}}};const bs=Ve({slice_:function(e,t,n){const r=Pe(e,"x","slice");if(0===r.rank)throw new Error("Slicing scalar is not possible");const[s,a]=Qr(r,t,n);Pr(r,s,a);const o={x:r},i={begin:t,size:n};return Ae.runKernelFunc((e,t)=>(t([r]),e.slice(r,s,a)),o,null,"Slice",i)}}),vs={kernelName:"Tile",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{reps:s}=n;return{x:()=>{let t=at(r);if(1===r.rank)for(let n=0;n<s[0];++n)t=lt(t,bs(e,[n*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)t=lt(t,bs(e,[n*r.shape[0],a*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let o=0;o<s[2];++o)t=lt(t,bs(e,[n*r.shape[0],a*r.shape[1],o*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else{if(4!==r.rank)throw new Error("Gradient for tile operation is not implemented for rank-"+r.rank+" tensors yet.");for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let o=0;o<s[2];++o)for(let i=0;i<s[3];++i)t=lt(t,bs(e,[n*r.shape[0],a*r.shape[1],o*r.shape[2],i*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]))}return t}}}},ws={kernelName:"Transpose",gradFunc:(e,t,n)=>{const r=n,{perm:s}=r,a=xt(s);return{x:()=>fn(e,a)}}};const Cs=Ve({expandDims_:function(e,t=0){const n=Pe(e,"x","expandDims",null);w(t<=n.rank,()=>"Axis must be <= rank of the tensor");const r=n.shape.slice();return t<0&&(w(-(n.rank+1)<=t,()=>`Axis must be in the interval [${-(n.rank+1)}, ${n.rank}]`),t=n.rank+t+1),r.splice(t,0,1),pt(n,r)}});const Ns=Ve({stack_:function(e,t=0){const n=Le(e,"tensors","stack");if(w(n.length>=1,()=>"Pass at least one tensor to tf.stack"),1===n.length)return Cs(n[0],t);const r=n[0].rank,s=n[0].shape,a=n[0].dtype;w(t<=r,()=>"Axis must be <= rank of the tensor"),n.forEach(e=>{C(s,e.shape,"All tensors passed to stack must have matching shapes"),w(a===e.dtype,()=>"All tensors passed to stack must have matching dtypes")});const o=n.map(e=>Cs(e,t));return us(o,t)}}),$s={kernelName:"Unpack",gradFunc:(e,t,n)=>{const r=n,{axis:s}=r;return{value:()=>Ns(e,s)}}};function Es(e){return e<=30?e:j(e,Math.floor(Math.sqrt(e)))}function ks(e,t,n){const r=e.shape[n],s=[];let a=1,o=1;for(let t=0;t<n;t++)s.push(e.shape[t]),a*=e.shape[t];for(let e=0;e<t.rank;e++)s.push(t.shape[e]);for(let t=n+1;t<e.rank;t++)s.push(e.shape[t]),o*=e.shape[t];return{batchSize:a,sliceSize:o,dimSize:r,outputShape:s}}var Ss=Object.freeze({__proto__:null,segOpComputeOptimalWindowSize:function(e,t){let n,r=!1;for(e<=30?(n=e,r=!0):n=j(e,Math.floor(Math.sqrt(e)));!r;)n>t||n===e?r=!0:n=j(e,n+1);return n},computeOutShape:function(e,t,n){const r=[],s=e.length;for(let a=0;a<s;a++)a!==t?r.push(e[a]):r.push(n);return r},collectGatherOpShapeInfo:ks});const Ts=Ve({gather_:function(e,t,n=0){const r=Pe(e,"x","gather"),s=Pe(t,"indices","gather","int32"),a={x:r,indices:s},o={axis:n};return Ae.runKernelFunc((e,t)=>{const a=_(n,r.shape)[0],o=ks(r,s,a),i=e.gather(r,s.flatten(),a);return t([r,s]),i.reshape(o.outputShape)},a,null,"GatherV2",o)}});const Rs=Ve({maximum_:function(e,t){let n=Pe(e,"a","maximum"),r=Pe(t,"b","maximum");[n,r]=Ee(n,r),"bool"===n.dtype&&(n=We(n,"int32"),r=We(r,"int32")),nt(n.shape,r.shape);const s={a:n,b:r};return Ae.runKernelFunc((e,t)=>{const s=e.maximum(n,r);return t([n,r]),s},s,null,"Maximum")}});const Is=[Ge,Ze,et,rt,st,ot,it,ut,ct,wt,Ct,Nt,Bt,Lt,Wt,Ut,Gt,qt,Ht,Qt,en,an,rn,ln,pn,hn,gn,bn,vn,wn,Cn,$n,En,kn,Tn,Sn,An,Dn,Mn,Bn,Pn,Ln,Vn,Wn,zn,Un,qn,Kn,Kn,Yn,Jn,er,tr,rr,ar,or,ir,cr,pr,dr,dr,mr,gr,yr,xr,br,vr,wr,Cr,Er,kr,Sr,Rr,Ir,Ar,_r,Fr,Mr,Zr,es,ns,ss,ss,ls,ls,cs,ds,ps,hs,fs,gs,ys,xs,vs,ws,$s,{kernelName:"UnsortedSegmentSum",inputsToSave:["segmentIds"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>function(e,t){const n=Rs(t,at(t)),r=Ts(e,n);let s=jt(t,Xe(0,"int32"));const a=r.rank-s.rank;for(let e=0;e<a;++e)s=Cs(s,e+1);s=Xt(s,ms(r.shape,"bool"));const o=at(r);return Yt(s,r,o)}(e,n)}}},{kernelName:"ZerosLike",gradFunc:e=>({x:()=>at(e)})}];for(const e of Is)m(e);class As{fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error("Browser's encoder only supports utf-8, but got "+t);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}}s().get("IS_BROWSER")&&s().setPlatform("browser",new As);const _s=()=>require("node-fetch");let Ds;class Fs{constructor(){this.util=require("util"),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=s().global.fetch?s().global.fetch(e,t):(null==Ds&&(Ds=_s()),Ds(e,t))}now(){const e=process.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error("Node built-in encoder only supports utf-8, but got "+t);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}}s().get("IS_NODE")&&s().setPlatform("node",new Fs);const Os={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};function Ms(e,t){const n={};let r,s=0;for(const a of t){const t=a.name,o=a.dtype,i=a.shape,u=E(i);let l;if("quantization"in a){const n=a.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${a.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${a.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==o)throw new Error(`Weight ${a.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${o}.`)}const i=Os[n.dtype],c=e.slice(s,s+u*i),p="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===o)if("uint8"===n.dtype||"uint16"===n.dtype){l=new Float32Array(p.length);for(let e=0;e<p.length;e++){const t=p[e];l[e]=t*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===r&&(r=Us()),l=r(p)}else{if("int32"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);l=new Int32Array(p.length);for(let e=0;e<p.length;e++){const t=p[e];l[e]=Math.round(t*n.scale+n.min)}}s+=u*i}else if("string"===o){const t=E(a.shape);l=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(s,s+4))[0];s+=4;const n=new Uint8Array(e.slice(s,s+t));l.push(n),s+=t}}else{const r=Os[o],a=e.slice(s,s+u*r);if("float32"===o)l=new Float32Array(a);else if("int32"===o)l=new Int32Array(a);else if("bool"===o)l=new Uint8Array(a);else{if("complex64"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);{l=new Float32Array(a);const e=new Float32Array(l.length/2),r=new Float32Array(l.length/2);for(let t=0;t<e.length;t++)e[t]=l[2*t],r[t]=l[2*t+1];const s=is(e,i,"float32"),o=is(r,i,"float32");n[t]=ur(s,o)}}s+=u*r}"complex64"!==o&&(n[t]=is(l,i,o))}return n}function Bs(e){if(null===e)throw new Error("Invalid input value: "+JSON.stringify(e));let t=0;const n=[];e.forEach(e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error("Unsupported TypedArray subtype: "+e.constructor.name)});const r=new Uint8Array(t);let s=0;return n.forEach(e=>{r.set(new Uint8Array(e.buffer),s),s+=e.byteLength}),r.buffer}const Ps="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function Ls(e){return Ps?Buffer.byteLength(e):new Blob([e]).size}function Vs(e){if(1===e.length)return e[0];let t=0;e.forEach(e=>{t+=e.byteLength});const n=new Uint8Array(t);let r=0;return e.forEach(e=>{n.set(new Uint8Array(e),r),r+=e.byteLength}),n.buffer}function Ws(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function zs(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:Ls(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:Ls(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function Us(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0==(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return r=>{const s=new ArrayBuffer(4*r.length),a=new Uint32Array(s);for(let s=0;s<r.length;s++){const o=r[s],i=e[n[o>>10]+(1023&o)]+t[o>>10];a[s]=i}return new Float32Array(s)}}class Gs{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==Gs.instance&&(Gs.instance=new Gs),Gs.instance}static registerSaveRouter(e){Gs.getInstance().saveRouters.push(e)}static registerLoadRouter(e){Gs.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return Gs.getHandlers(e,"save")}static getLoadHandlers(e,t){return Gs.getHandlers(e,"load",t)}static getHandlers(e,t,n){const r=[];return("load"===t?Gs.getInstance().loadRouters:Gs.getInstance().saveRouters).forEach(t=>{const s=t(e,n);null!==s&&r.push(s)}),r}}class qs{constructor(){this.managers={}}static getInstance(){return null==qs.instance&&(qs.instance=new qs),qs.instance}static registerManager(e,t){w(null!=e,()=>"scheme must not be undefined or null."),e.endsWith("://")&&(e=e.slice(0,e.indexOf("://"))),w(e.length>0,()=>"scheme must not be an empty string.");const n=qs.getInstance();w(null==n.managers[e],()=>`A model store manager is already registered for scheme '${e}'.`),n.managers[e]=t}static getManager(e){const t=this.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(this.getInstance().managers)}}function Hs(e){if(-1===e.indexOf("://"))throw new Error("The url string provided does not contain a scheme. Supported schemes are: "+qs.getSchemes().join(","));return{scheme:e.split("://")[0],path:e.split("://")[1]}}async function js(e,t,n=!1){w(e!==t,()=>`Old path and new path are the same: '${e}'`);const r=Gs.getLoadHandlers(e);w(r.length>0,()=>`Copying failed because no load handler is found for source URL ${e}.`),w(r.length<2,()=>`Copying failed because more than one (${r.length}) load handlers for source URL ${e}.`);const s=r[0],a=Gs.getSaveHandlers(t);w(a.length>0,()=>`Copying failed because no save handler is found for destination URL ${t}.`),w(a.length<2,()=>`Copying failed because more than one (${r.length}) save handlers for destination URL ${t}.`);const o=a[0],i=Hs(e).scheme,u=Hs(e).path,l=i===Hs(e).scheme,c=await s.load();n&&l&&await qs.getManager(i).removeModel(u);const p=await o.save(c);return n&&!l&&await qs.getManager(i).removeModel(u),p.modelArtifactsInfo}function Ks(){if(!s().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function Xs(e){const t=e.result;t.createObjectStore("models_store",{keyPath:"modelPath"}),t.createObjectStore("model_info_store",{keyPath:"modelPath"})}class Ys{constructor(e){if(this.indexedDB=Ks(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise((e,n)=>{const r=this.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=()=>Xs(r),r.onsuccess=()=>{const s=r.result;if(null==t){const t=s.transaction("models_store","readonly"),r=t.objectStore("models_store").get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return s.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(r.result.modelArtifacts)},r.onerror=e=>(s.close(),n(r.error)),t.oncomplete=()=>s.close()}else{const r=zs(t),a=s.transaction("model_info_store","readwrite");let o=a.objectStore("model_info_store");const i=o.put({modelPath:this.modelPath,modelArtifactsInfo:r});let u;i.onsuccess=()=>{u=s.transaction("models_store","readwrite");const i=u.objectStore("models_store").put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:r});i.onsuccess=()=>e({modelArtifactsInfo:r}),i.onerror=e=>{o=a.objectStore("model_info_store");const t=o.delete(this.modelPath);t.onsuccess=()=>(s.close(),n(i.error)),t.onerror=e=>(s.close(),n(i.error))}},i.onerror=e=>(s.close(),n(i.error)),a.oncomplete=()=>{null==u?s.close():u.oncomplete=()=>s.close()}}},r.onerror=e=>n(r.error)})}}Ys.URL_SCHEME="indexeddb://";const Qs=e=>{return s().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Ys.URL_SCHEME)?(t=e.slice(Ys.URL_SCHEME.length),new Ys(t)):null;var t};Gs.registerSaveRouter(Qs),Gs.registerLoadRouter(Qs);class Js{constructor(){this.indexedDB=Ks()}async listModels(){return new Promise((e,t)=>{const n=this.indexedDB.open("tensorflowjs",1);n.onupgradeneeded=()=>Xs(n),n.onsuccess=()=>{const r=n.result,s=r.transaction("model_info_store","readonly"),a=s.objectStore("model_info_store").getAll();a.onsuccess=()=>{const t={};for(const e of a.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},a.onerror=e=>(r.close(),t(a.error)),s.oncomplete=()=>r.close()},n.onerror=e=>t(n.error)})}async removeModel(e){var t;return e=(t=e).startsWith(Ys.URL_SCHEME)?t.slice(Ys.URL_SCHEME.length):t,new Promise((t,n)=>{const r=this.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=()=>Xs(r),r.onsuccess=()=>{const s=r.result,a=s.transaction("model_info_store","readwrite"),o=a.objectStore("model_info_store"),i=o.get(e);let u;i.onsuccess=()=>{if(null==i.result)return s.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const r=o.delete(e),a=()=>{u=s.transaction("models_store","readwrite");const r=u.objectStore("models_store").delete(e);r.onsuccess=()=>t(i.result.modelArtifactsInfo),r.onerror=e=>n(i.error)};r.onsuccess=a,r.onerror=e=>(a(),s.close(),n(i.error))}},i.onerror=e=>(s.close(),n(i.error)),a.oncomplete=()=>{null==u?s.close():u.oncomplete=()=>s.close()}},r.onerror=e=>n(r.error)})}}if(s().getBool("IS_BROWSER"))try{qs.registerManager(Ys.URL_SCHEME,new Js)}catch(e){}const Zs="tensorflowjs_models",ea="info",ta="model_topology",na="weight_specs",ra="weight_data",sa="model_metadata";function aa(e){return{info:[Zs,e,ea].join("/"),topology:[Zs,e,ta].join("/"),weightSpecs:[Zs,e,na].join("/"),weightData:[Zs,e,ra].join("/"),modelMetadata:[Zs,e,sa].join("/")}}function oa(e){const t=e.split("/");if(t.length<3)throw new Error("Invalid key format: "+e);return t.slice(1,t.length-1).join("/")}class ia{constructor(e){if(!s().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=aa(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),r=zs(e);try{return this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(e){if(Ps)return Buffer.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,r=t.length;e<r;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(e.weightData)),this.LS.setItem(this.keys.modelMetadata,JSON.stringify({format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,userDefinedMetadata:e.userDefinedMetadata})),{modelArtifactsInfo:r}}catch(e){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=r;const s=this.LS.getItem(this.keys.modelMetadata);if(null!=s){const e=JSON.parse(s);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,t.userDefinedMetadata=e.userDefinedMetadata}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(Ps){const t=Buffer.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}(a),t}}ia.URL_SCHEME="localstorage://";const ua=e=>{return s().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(ia.URL_SCHEME)?(t=e.slice(ia.URL_SCHEME.length),new ia(t)):null;var t};Gs.registerSaveRouter(ua),Gs.registerLoadRouter(ua);class la{constructor(){w(s().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),w("undefined"==typeof window||void 0!==window.localStorage,()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}async listModels(){const e={},t=Zs+"/",n="/"+ea;for(let r=0;r<this.LS.length;++r){const s=this.LS.key(r);if(s.startsWith(t)&&s.endsWith(n)){e[oa(s)]=JSON.parse(this.LS.getItem(s))}}return e}async removeModel(e){var t;const n=aa(e=(t=e).startsWith(ia.URL_SCHEME)?t.slice(ia.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const r=JSON.parse(this.LS.getItem(n.info));return this.LS.removeItem(n.info),this.LS.removeItem(n.topology),this.LS.removeItem(n.weightSpecs),this.LS.removeItem(n.weightData),r}}if(s().getBool("IS_BROWSER"))try{qs.registerManager(ia.URL_SCHEME,new la)}catch(e){}function ca(e){return new Promise(e=>setTimeout(e)).then(e)}class pa{constructor(e){if(!s().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(pa.URL_SCHEME)&&(e=e.slice(pa.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelTopologyFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}],r={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:n},s=window.URL.createObjectURL(new Blob([JSON.stringify(r)],{type:"application/json"})),a=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor;if(a.download=this.modelTopologyFileName,a.href=s,await ca(()=>a.dispatchEvent(new MouseEvent("click"))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await ca(()=>e.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:zs(e)}}}}pa.URL_SCHEME="downloads://";class da{constructor(e){if(null==e||e.length<1)throw new Error("When calling browserFiles, at least 1 file is required, but received "+e);this.files=e}async load(){const e=this.files[0],t=this.files.slice(1);return new Promise((n,r)=>{const s=new FileReader;s.onload=s=>{const a=JSON.parse(s.target.result),o=a.modelTopology;if(null==o)return void r(new Error("modelTopology field is missing from file "+e.name));0===t.length&&n({modelTopology:o});const i=a.weightsManifest;if(null==i)return void r(new Error("weightManifest field is missing from file "+e.name));let u;try{u=this.checkManifestAndWeightFiles(i,t)}catch(e){return void r(e)}const l=[],c=[],p=[];i.forEach(e=>{e.paths.forEach(e=>{c.push(e),p.push(null)}),l.push(...e.weights)}),i.forEach(e=>{e.paths.forEach(e=>{const t=new FileReader;t.onload=t=>{const r=t.target.result,s=c.indexOf(e);p[s]=r,-1===p.indexOf(null)&&n({modelTopology:o,weightSpecs:l,weightData:Vs(p),format:a.format,generatedBy:a.generatedBy,convertedBy:a.convertedBy,userDefinedMetadata:a.userDefinedMetadata})},t.onerror=t=>r(`Failed to weights data from file of path '${e}'.`),t.readAsArrayBuffer(u[e])})})},s.onerror=t=>r(`Failed to read model topology and weights manifest JSON from file '${e.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),s.readAsText(e)})}checkManifestAndWeightFiles(e,t){const n=[],r=t.map(e=>Ws(e.name)),s={};for(const a of e)a.paths.forEach(e=>{const a=Ws(e);if(-1!==n.indexOf(a))throw new Error(`Duplicate file basename found in weights manifest: '${a}'`);if(n.push(a),-1===r.indexOf(a))throw new Error(`Weight file with basename '${a}' is not provided.`);s[e]=t[r.indexOf(a)]});if(n.length!==t.length)throw new Error(`Mismatch in the number of files in weights manifest (${n.length}) and the number of weight files provided (${t.length}).`);return s}}function ha(e,t,n,r){!function(e){w(null!=e&&Array.isArray(e)&&e.length>0,()=>"promises must be a none empty array")}(e),function(e,t){w(e>=0&&e<=1,()=>"Progress fraction must be in range [0, 1], but got startFraction "+e),w(t>=0&&t<=1,()=>"Progress fraction must be in range [0, 1], but got endFraction "+t),w(t>=e,()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction `+t)}(n=null==n?0:n,r=null==r?1:r);let s=0;return Promise.all(e.map(a=>(a.then(a=>{const o=n+ ++s/e.length*(r-n);return t(o),a}),a)))}async function fa(e,t){null==t&&(t={});const n=null==t.fetchFunc?s().platform.fetch:t.fetchFunc,r=e.map(e=>n(e,t.requestInit,{isBinary:!0})),a=(null==t.onProgress?await Promise.all(r):await ha(r,t.onProgress,0,.5)).map(e=>e.arrayBuffer());return null==t.onProgress?await Promise.all(a):await ha(a,t.onProgress,.5,1)}function ma(e){return async(t,n="",r)=>{const s=t.map(()=>!1),a={},o=null!=r?r.map(()=>!1):[],i=[];if(t.forEach((e,t)=>{let n=0;e.weights.forEach(e=>{const u="quantization"in e?e.quantization.dtype:e.dtype,l=Os[u]*E(e.shape),c=()=>{s[t]=!0,null==a[t]&&(a[t]=[]),a[t].push({manifestEntry:e,groupOffset:n,sizeBytes:l})};null!=r?r.forEach((t,n)=>{t===e.name&&(c(),o[n]=!0)}):c(),i.push(e.name),n+=l})}),!o.every(e=>e)){const e=r.filter((e,t)=>!o[t]);throw new Error("Could not find weights in manifest with names: "+e.join(", ")+". \nManifest JSON has weights with names: "+i.join(", ")+".")}const u=s.reduce((e,t,n)=>(t&&e.push(n),e),[]),l=[];u.forEach(e=>{t[e].paths.forEach(e=>{const t=n+(n.endsWith("/")?"":"/")+e;l.push(t)})});const c=await e(l),p={};let d=0;return u.forEach(e=>{const n=t[e].paths.length;let r=0;for(let e=0;e<n;e++)r+=c[d+e].byteLength;const s=new ArrayBuffer(r),o=new Uint8Array(s);let i=0;for(let e=0;e<n;e++){const t=new Uint8Array(c[d+e]);o.set(t,i),i+=t.byteLength}a[e].forEach(e=>{const t=Ms(s.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const e in t)p[e]=t[e]}),d+=n}),p}}Gs.registerSaveRouter(e=>s().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(pa.URL_SCHEME)?function(e="model"){return new pa(e)}(e.slice(pa.URL_SCHEME.length)):null);class ga{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,null!=t.fetchFunc?(w("function"==typeof t.fetchFunc,()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=t.fetchFunc):this.fetch=s().platform.fetch,w(null!=e&&e.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(e)&&w(2===e.length,()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=[{paths:["./model.weights.bin"],weights:e.weightSpecs}],r={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,userDefinedMetadata:e.userDefinedMetadata,weightsManifest:n};t.body.append("model.json",new Blob([JSON.stringify(r)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const s=await this.fetch(this.path,t);if(s.ok)return{modelArtifactsInfo:zs(e),responses:[s]};throw new Error("BrowserHTTPRequest.save() failed due to HTTP response status "+s.status+".")}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code `+e.status+". Please verify this URL points to the model JSON of the model to load.");let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,r=t.weightsManifest,s=t.generatedBy,a=t.convertedBy,o=t.format,i=t.userDefinedMetadata;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);let u,l;if(null!=r){const e=await this.loadWeights(r);[u,l]=e}return{modelTopology:n,weightSpecs:u,weightData:l,userDefinedMetadata:i,generatedBy:s,convertedBy:a,format:o}}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?"),r=e.substring(0,t),s=n>t?e.substring(n):"";return[r+"/",s]}(t),s=this.weightPathPrefix||n,a=[];for(const t of e)a.push(...t.weights);const o=[];e.forEach(e=>{e.paths.forEach(e=>{o.push(s+e+r)})});return[a,Vs(await fa(o,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function ya(e){return null!=e.match(ga.URL_SCHEME_REGEX)}ga.URL_SCHEME_REGEX=/^https?:\/\//;const xa=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every(e=>ya(e)):ya(e),n)return ba(e,t)}return null};function ba(e,t){return new ga(e,t)}Gs.registerSaveRouter(xa),Gs.registerLoadRouter(xa);class va{constructor(e){this.modelArtifacts=e}async load(){return this.modelArtifacts}}class wa{constructor(e){this.saveHandler=e}async save(e){return this.saveHandler(e)}}var Ca=Object.freeze({__proto__:null,browserFiles:function(e){return new da(e)},browserHTTPRequest:function(e,t){return ba(e,t)},concatenateArrayBuffers:Vs,decodeWeights:Ms,encodeWeights:async function(e,t){const n=[],r=[],s=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);for(let a=0;a<s.length;++a){const o=s[a],i=Array.isArray(e)?e[a].tensor:e[o];if("float32"!==i.dtype&&"int32"!==i.dtype&&"bool"!==i.dtype&&"string"!==i.dtype&&"complex64"!==i.dtype)throw new Error(`Unsupported dtype in weight '${o}': ${i.dtype}`);const u={name:o,shape:i.shape,dtype:i.dtype};if("string"===i.dtype){const e=new Promise(async e=>{const t=await i.bytes(),n=t.reduce((e,t)=>e+t.length,0)+4*t.length,r=new Uint8Array(n);let s=0;for(let e=0;e<t.length;e++){const n=t[e],a=new Uint8Array(new Uint32Array([n.length]).buffer);r.set(a,s),s+=4,r.set(n,s),s+=n.length}e(r)});r.push(e)}else r.push(i.data());null!=t&&(u.group=t),n.push(u)}return{data:Bs(await Promise.all(r)),specs:n}},fromMemory:function(e,t,n,r){if(1===arguments.length){return null!=e.modelTopology||null!=e.weightSpecs?new va(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new va({modelTopology:e}))}return console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new va({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:r})},getLoadHandlers:(e,t)=>Gs.getLoadHandlers(e,t),getModelArtifactsInfoForJSON:zs,getSaveHandlers:e=>Gs.getSaveHandlers(e),http:ba,isHTTPScheme:ya,loadWeights:async function(e,t="",n,r){return ma(e=>fa(e,{requestInit:r}))(e,t,n)},registerLoadRouter:e=>Gs.registerLoadRouter(e),registerSaveRouter:e=>Gs.registerSaveRouter(e),weightsLoaderFactory:ma,withSaveHandler:function(e){return new wa(e)},copyModel:async function(e,t){return js(e,t,!1)},listModels:async function(){const e=qs.getSchemes(),t={};for(const n of e){const e=await qs.getManager(n).listModels();for(const r in e){t[n+"://"+r]=e[r]}}return t},moveModel:async function(e,t){return js(e,t,!0)},removeModel:async function(e){const t=Hs(e);return qs.getManager(t.scheme).removeModel(t.path)}});const Na=Ve({oneHot_:function(e,t,n=1,r=0){if(t<2)throw new Error("Error in oneHot: depth must be >=2, but it is "+t);const s=Pe(e,"indices","oneHot","int32"),a=[...s.shape,t],o={indices:s},i={depth:t,onValue:n,offValue:r};return Ae.runKernelFunc((e,o)=>(o([s]),pt(e.oneHot(s.flatten(),t,n,r),a)),o,null,"OneHot",i)}});const $a=Ve({confusionMatrix_:function(e,t,n){const r=Pe(e,"labels","confusionMatrix"),s=Pe(t,"predictions","confusionMatrix");w(null==n||n>0&&Number.isInteger(n),()=>"If provided, numClasses must be a positive integer, but got "+n),w(1===r.rank,()=>"Expected the rank of labels to be 1, but got "+r.rank),w(1===s.rank,()=>"Expected the rank of predictions to be 1, but got "+s.rank),w(r.shape[0]===s.shape[0],()=>`Mismatch in the number of examples: ${r.shape[0]} vs. ${s.shape[0]}. Labels and predictions should have the same number of elements.`),w(n>0&&Number.isInteger(n),()=>"numClasses is required to be a positive integer, but got "+n);const a=Na(r.asType("int32"),n),o=Na(s.asType("int32"),n);return a.transpose().matMul(o).asType("int32")}});var Ea=Object.freeze({__proto__:null,confusionMatrix:$a});function ka(e,t,n){if(N(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const r=Me(e,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return Ke(e,t,r,n)}let Sa;const Ta=Ve({fromPixels_:function(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,r=!1,s=!1,a=!1,o=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)r=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)s=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)a=!0;else{if(null==e.getContext)throw new Error("pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was "+e.constructor.name);o=!0}if(s){const t=2;if(s&&e.readyState<t)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}if(null!=p("FromPixels",Ae.backendName)){const n={pixels:e},r={numChannels:t};return Ae.runKernel("FromPixels",n,r)}const[i,u]=s?[e.videoWidth,e.videoHeight]:[e.width,e.height];let l,c;if(o?l=e.getContext("2d").getImageData(0,0,i,u).data:r||n?l=e.data:(a||s)&&(null==Sa&&(Sa=document.createElement("canvas").getContext("2d")),Sa.canvas.width=i,Sa.canvas.height=u,Sa.drawImage(e,0,0,i,u),l=Sa.getImageData(0,0,i,u).data),4===t)c=new Int32Array(l);else{const e=i*u;c=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)c[n*t+e]=l[4*n+e]}return ka(c,[u,i,t],"int32")}});var Ra=Object.freeze({__proto__:null,toPixels:async function(e,t){let n=Pe(e,"img","toPixels");if(!(e instanceof me)){const e=n;n=e.toInt(),e.dispose()}if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const[r,s]=n.shape.slice(0,2),a=2===n.rank?1:n.shape[2];if(a>4||2===a)throw new Error("toPixels only supports depth of size 1, 3 or 4 but got "+a);const o=await n.data(),i=n.min(),u=n.max(),l=await Promise.all([i.data(),u.data()]),c=l[0],p=l[1],d=c[0],h=p[0];if(i.dispose(),u.dispose(),"float32"===n.dtype){if(d<0||h>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but got range [${d} - ${h}].`)}else{if("int32"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);if(d<0||h>255)throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but got range [${d} - ${h}].`)}const f="float32"===n.dtype?255:1,m=new Uint8ClampedArray(s*r*4);for(let e=0;e<r*s;++e){let t,n,r,s;1===a?(t=o[e]*f,n=o[e]*f,r=o[e]*f,s=255):3===a?(t=o[3*e]*f,n=o[3*e+1]*f,r=o[3*e+2]*f,s=255):4===a&&(t=o[4*e]*f,n=o[4*e+1]*f,r=o[4*e+2]*f,s=o[4*e+3]*f);const i=4*e;m[i+0]=Math.round(t),m[i+1]=Math.round(n),m[i+2]=Math.round(r),m[i+3]=Math.round(s)}if(null!=t){t.width=s,t.height=r;const e=t.getContext("2d"),n=new ImageData(m,s,r);e.putImageData(n,0,0)}return n!==e&&n.dispose(),m},fromPixels:Ta});function Ia(e,t){if(e.rank<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${e.rank}.`);if(t.rank<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[t.rank-1]>e.rank)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[t.rank-1]} vs. ${e.rank}`);if(0===e.size)throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const n=t.shape,r=n[n.length-1];let s=1;for(let e=0;e<n.length-1;++e)s*=n[e];const a=e.shape,o=n.slice();o.pop();let i=1;for(let t=r;t<e.rank;++t)i*=a[t],o.push(a[t]);const u=[...K(e.shape).map(e=>e/i),1].slice(0,r);return[o,s,i,u]}var Aa=Object.freeze({__proto__:null,prepareAndValidate:Ia});function _a(e,t,n){const r=t.rank>1?t.shape[t.rank-1]:1,s=t.rank>1?t.rank-1:1,a="Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: "+n.shape+`, indices.shape: ${t.shape}, shape: ${e}`+`, sliceDim: ${r}, and batchDim: ${s}.`;if(n.rank<s)throw new Error(a+` update.rank < ${s}. `);if(e.length<r+(n.rank-s))throw new Error(a+" Output shape length < "+(r+(n.rank-s)));if(n.rank!==s+e.length-r)throw new Error(a+" update.rank != "+(s+e.length-r));for(let e=0;e<s;++e)if(n.shape[e]!==t.shape[e])throw new Error(a+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-s;++t)if(n.shape[t+s]!==e[t+r])throw new Error(a+` updates.shape[${t+s}] (${n.shape[t+s]}) != shape[${t+s}] (${e[t+s]})`)}function Da(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error("The dtype of 'indices' should be int32, but got dtype: "+t.dtype);if(n.length<1)throw new Error("Output rank must be greater or equal to 1, but got shape: "+n);if(0===n.length){if(0===t.size)throw new Error("Indices specified for empty output. indices shape: "+t.shape);if(0===e.size)throw new Error("Updates specified for empty output. updates shape: "+e.shape)}_a(n,t,e)}function Fa(e,t,n){const r=t.shape.length,s=r>1?t.shape[r-1]:1,a=n.length;let o=1;for(let e=s;e<a;++e)o*=n[e];const i=s<1?1:s;return{sliceRank:s,numUpdates:E(t.shape)/i,sliceSize:o,strides:[...K(n.slice(0,s)),1],outputSize:E(n)}}var Oa=Object.freeze({__proto__:null,validateUpdateShape:_a,validateInput:Da,calculateShapes:Fa});class Ma{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class Ba{constructor(){this.classNameMap={}}static getMap(){return null==Ba.instance&&(Ba.instance=new Ba),Ba.instance}static register(e){Ba.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function Pa(e){w(null!=e.className,()=>"Class being registered does not have the static className property defined."),w("string"==typeof e.className,()=>"className is required to be a string, but got type "+typeof e.className),w(e.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),Ba.register(e)}var La=Object.freeze({__proto__:null,Serializable:Ma,SerializationMap:Ba,registerClass:Pa});function Va(){return 32===Ae.backend.floatPrecision()?.001:.1}function Wa(e,t,n){let r=!0;if((L(e)||L(t))&&(r=!1),L(e)&&L(t)&&(r=!0),r){const n=e.constructor.name,r=t.constructor.name;if(n!==r)throw new Error(`Arrays are of different type. Actual: ${n}. Expected: `+r)}if(Array.isArray(e)&&Array.isArray(t)){const n=Me(e),r=Me(t);if(!k(n,r))throw new Error(`Arrays have different shapes. Actual: [${n}]. Expected: [${r}]`)}const s=L(e)?e:$(e),a=L(t)?t:$(t);if(s.length!==a.length)throw new Error(`Arrays have different lengths actual: ${s.length} vs expected: ${a.length}.\nActual:   ${s}.\nExpected: ${a}.`);for(let e=0;e<a.length;++e){const t=s[e],r=a[e];if(!n(t,r))throw new Error(`Arrays differ: actual[${e}] = ${t}, expected[${e}] = ${r}.\nActual:   ${s}.\nExpected: ${a}.`)}}function za(e,t,n){return!isFinite(e)&&!isFinite(t)||!(isNaN(e)||isNaN(t)||Math.abs(e-t)>n)}var Ua=Object.freeze({__proto__:null,TEST_EPSILON_FLOAT16:.1,expectArraysClose:function(e,t,n){return null==n&&(n=Va()),Wa(e,t,(e,t)=>za(e,t,n))},testEpsilon:Va,expectPromiseToFail:function(e,t){e().then(()=>t.fail(),()=>t())},expectArraysEqual:function(e,t){const n="string"==typeof t||"number"==typeof t||"boolean"==typeof t?[t]:t;return z(e)||z(e[0])||z(t)||z(t[0])?Wa(e,n,(e,t)=>e==t):Wa(e,t,(e,t)=>za(e,t,0))},expectNumbersClose:function(e,t,n){if(null==n&&(n=Va()),!za(e,t,n))throw new Error(`Numbers differ: actual === ${e}, expected === ${t}`)},expectValuesInRange:function(e,t,n){for(let r=0;r<e.length;r++)if(e[r]<t||e[r]>n)throw new Error(`Value out of range:${e[r]} low: ${t}, high: ${n}`)},expectArrayBuffersEqual:function(e,t){expect(new Float32Array(e)).toEqual(new Float32Array(t))}});function Ga(e){s().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function qa(){return Ae}function Ha(e,t){return Ae.tidy(e,t)}function ja(e){Se(e).forEach(e=>e.dispose())}function Ka(e){return Ae.keep(e)}function Xa(e,t,n=1){return Ae.registerBackend(e,t,n)}const Ya=Ve({abs_:function(e){const t=Pe(e,"x","abs"),n={x:t};return Ae.runKernelFunc((e,n)=>(n([t]),"complex64"===t.dtype?e.complexAbs(t):e.abs(t)),n,null,"Abs")}});const Qa=Ve({acos_:function(e){const t=Pe(e,"x","acos"),n={x:t};return Ae.runKernelFunc((e,n)=>{const r=e.acos(t);return n([t]),r},n,null,"Acos")}});const Ja=Ve({acosh_:function(e){const t=Pe(e,"x","acosh"),n={x:t};return Ae.runKernelFunc((e,n)=>{const r=e.acosh(t);return n([t]),r},n,null,"Acosh")}});const Za=Ve({addN_:function(e){w(Array.isArray(e),()=>"The argument passed to tf.addN() must be a list of tensors"),w(e.length>=1,()=>"Must pass at least one tensor to tf.addN(), but got "+e.length);const t=e.map((e,t)=>Pe(e,"tensors"+t,"addN")),n=t[0];t.forEach(e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")}),t.forEach(e=>{if(!k(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")});const r=t;return Ae.runKernelFunc((e,n)=>{const r=e.addN(t);return n(t),r},r,null,"AddN")}});const eo=Ve({all_:function(e,t=null,n=!1){let r=Pe(e,"x","all","bool");const s={x:r},a={axis:t,keepDims:n};return Ae.runKernelFunc(e=>{const s=_(t,r.shape);let a=s;const o=yt(a,r.rank);null!=o&&(r=r.transpose(o),a=bt(a.length,r.rank));const i=e.all(r,a);if(n){const e=mt(i.shape,s);return i.reshape(e)}return i},s,null,"All",a)}});const to=Ve({any_:function(e,t=null,n=!1){let r=Pe(e,"x","any","bool");const s={x:r},a={axis:t,keepDims:n};return Ae.runKernelFunc(e=>{const s=_(t,r.shape);let a=s;const o=yt(a,r.rank);null!=o&&(r=r.transpose(o),a=bt(a.length,r.rank));const i=e.any(r,a);if(n){const e=mt(i.shape,s);return i.reshape(e)}return i},s,null,"Any",a)}});const no=Ve({argMax_:function(e,t=0){let n=Pe(e,"x","argMax");const r={x:n},s={axis:t};return Ae.runKernelFunc((e,r)=>{r([n]);let s=_(t,n.shape);const a=yt(s,n.rank);return null!=a&&(n=n.transpose(a),s=bt(s.length,n.rank)),e.argMax(n,s[0])},r,null,"ArgMax",s)}});const ro=Ve({argMin_:function(e,t=0){let n=Pe(e,"x","argMin");const r={x:n},s={axis:t};return Ae.runKernelFunc((e,r)=>{r([n]),null==t&&(t=0);let s=_(t,n.shape);const a=yt(s,n.rank);return null!=a&&(n=n.transpose(a),s=bt(s.length,n.rank)),e.argMin(n,s[0])},r,null,"ArgMin",s)}});const so=Ve({asin_:function(e){const t=Pe(e,"x","asin"),n={x:t};return Ae.runKernelFunc((e,n)=>{const r=e.asin(t);return n([t]),r},n,null,"Asin")}});const ao=Ve({asinh_:function(e){const t=Pe(e,"x","asinh"),n={x:t};return Ae.runKernelFunc((e,n)=>{const r=e.asinh(t);return n([t]),r},n,null,"Asinh")}});const oo=Ve({atan_:function(e){const t=Pe(e,"x","atan"),n={x:t};return Ae.runKernelFunc((e,n)=>{const r=e.atan(t);return n([t]),r},n,null,"Atan")}});const io=Ve({atan2_:function(e,t){let n=Pe(e,"a","atan2"),r=Pe(t,"b","atan2");[n,r]=Ee(n,r);const s={a:n,b:r};return Ae.runKernelFunc((e,t)=>{const s=e.atan2(n,r);return t([n,r]),s},s,null,"Atan2")}});const uo=Ve({atanh_:function(e){const t=Pe(e,"x","atanh"),n={x:t};return Ae.runKernelFunc((e,n)=>{const r=e.atanh(t);return n([t]),r},n,null,"Atanh")}});const lo=Ve({avgPool_:function(e,t,n,r,s){const a=Pe(e,"x","avgPool","float32");w(Ft(n,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`);let o=a,i=!1;3===a.rank&&(i=!0,o=pt(a,[1,a.shape[0],a.shape[1],a.shape[2]])),w(4===o.rank,()=>`Error in avgPool: x must be rank 4 but got rank ${o.rank}.`),null!=s&&w(S(r),()=>`Error in avgPool: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`);const u={x:o},l={filterSize:t,strides:n,pad:r,dimRoundingMode:s};let c=Ae.runKernelFunc((e,a)=>{const i=$t(o.shape,t,n,1,r,s);return a([o]),1===i.filterWidth&&1===i.filterHeight&&k(i.inShape,i.outShape)?o.clone():e.avgPool(o,i)},u,null,"AvgPool",l);return c=We(c,a.dtype),i?c.as3D(c.shape[1],c.shape[2],c.shape[3]):c}});const co=Ve({avgPool3d_:function(e,t,n,r,s,a="NDHWC",o){null==o?o=[1,1,1]:Ga("dilations is deprecated, this field will be gone in v3.0.0.");const i=Pe(e,"x","avgPool3d","float32");let u=i,l=!1;4===i.rank&&(l=!0,u=pt(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),w(5===u.rank,()=>`Error in avgPool3d: x must be rank 5 but got rank ${u.rank}.`),w("NDHWC"===a,()=>"Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of "+a),w(Ft(n,o),()=>`Error in avgPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${o}'`),null!=s&&w(S(r),()=>`Error in avgPool3d: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`);const c={x:u},p={filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a,dilations:o};let d=Ae.runKernelFunc((e,i)=>{null==o&&(o=[1,1,1]);const l=Et(u.shape,t,n,o,r,s,a);return i([u]),e.avgPool3d(u,l)},c,null,"AvgPool3D",p);return d=We(d,u.dtype),l?d.as4D(d.shape[1],d.shape[2],d.shape[3],d.shape[4]):d}});const po=Ve({tanh_:function(e){const t=Pe(e,"x","tanh"),n={x:t};return Ae.runKernelFunc((e,n)=>{const r=e.tanh(t);return n([r]),r},n,null,"Tanh")}});const ho=Ve({basicLSTMCell_:function(e,t,n,r,s,a){const o=Pe(e,"forgetBias","basicLSTMCell"),i=Pe(t,"lstmKernel","basicLSTMCell"),u=Pe(n,"lstmBias","basicLSTMCell"),l=Pe(r,"data","basicLSTMCell"),c=Pe(s,"c","basicLSTMCell"),p=Pe(a,"h","basicLSTMCell"),d=us([l,p],1),h=Vt(d,i),f=lt(h,u),m=f.shape[0],g=f.shape[1]/4,y=[m,g],x=bs(f,[0,0],y),b=bs(f,[0,g],y),v=bs(f,[0,2*g],y),w=bs(f,[0,3*g],y),C=lt(ze(ts(x),po(b)),ze(c,ts(lt(o,v))));return[C,ze(po(C),ts(w))]}});function fo(e){return null==e?null:0===e.rank?e.as1D():1===e.rank?e:2===e.rank?e.as4D(1,1,e.shape[0],e.shape[1]):3===e.rank?e.as4D(1,e.shape[0],e.shape[1],e.shape[2]):e}const mo=Ve({batchNorm_:function(e,t,n,r,s,a){null==a&&(a=.001);const o=Pe(e,"x","batchNorm"),i=Pe(t,"mean","batchNorm"),u=Pe(n,"variance","batchNorm");let l,c;null!=s&&(l=Pe(s,"scale","batchNorm")),null!=r&&(c=Pe(r,"offset","batchNorm")),w(i.rank===u.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),w(null==c||i.rank===c.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),w(null==l||i.rank===l.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");const p=function(e){let t;return t=0===e.rank||1===e.rank?e.as4D(1,1,1,e.size):2===e.rank?e.as4D(1,1,e.shape[0],e.shape[1]):3===e.rank?e.as4D(1,e.shape[0],e.shape[1],e.shape[2]):e,t}(o),d={x:p,scale:l,offset:c,mean:i,variance:u},h={varianceEpsilon:a},f=Ae.runKernelFunc((e,t)=>(t([p,i,u,l]),e.batchNorm(p,fo(i),fo(u),fo(c),fo(l),a)),d,null,"FusedBatchNorm",h);return pt(f,o.shape)}});const go=Ve({batchNorm2d_:function(e,t,n,r,s,a){const o=Pe(e,"x","batchNorm"),i=Pe(t,"mean","batchNorm"),u=Pe(n,"variance","batchNorm");let l,c;return null!=s&&(l=Pe(s,"scale","batchNorm")),null!=r&&(c=Pe(r,"offset","batchNorm")),w(2===o.rank,()=>"Error in batchNorm3D: x must be rank 3 but got rank "+o.rank+"."),w(2===i.rank||1===i.rank,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${i.rank}.`),w(2===u.rank||1===u.rank,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${u.rank}.`),null!=l&&w(2===l.rank||1===l.rank,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${l.rank}.`),null!=c&&w(2===c.rank||1===c.rank,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`),mo(o,i,u,c,l,a)}});const yo=Ve({batchNorm3d_:function(e,t,n,r,s,a){const o=Pe(e,"x","batchNorm"),i=Pe(t,"mean","batchNorm"),u=Pe(n,"variance","batchNorm");let l,c;return null!=s&&(l=Pe(s,"scale","batchNorm")),null!=r&&(c=Pe(r,"offset","batchNorm")),w(3===o.rank,()=>"Error in batchNorm3D: x must be rank 3 but got rank "+o.rank+"."),w(3===i.rank||1===i.rank,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${i.rank}.`),w(3===u.rank||1===u.rank,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${u.rank}.`),null!=l&&w(3===l.rank||1===l.rank,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${l.rank}.`),null!=c&&w(3===c.rank||1===c.rank,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`),mo(o,i,u,c,l,a)}});const xo=Ve({batchNorm4d_:function(e,t,n,r,s,a){const o=Pe(e,"x","batchNorm"),i=Pe(t,"mean","batchNorm"),u=Pe(n,"variance","batchNorm");let l,c;return null!=s&&(l=Pe(s,"scale","batchNorm")),null!=r&&(c=Pe(r,"offset","batchNorm")),w(4===o.rank,()=>"Error in batchNorm4D: x must be rank 4 but got rank "+o.rank+"."),w(4===i.rank||1===i.rank,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${i.rank}.`),w(4===u.rank||1===u.rank,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${u.rank}.`),null!=l&&w(4===l.rank||1===l.rank,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${l.rank}.`),null!=c&&w(4===c.rank||1===c.rank,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`),mo(o,i,u,c,l,a)}});const bo=Ve({broadcastTo_:function(e,t){let n=Pe(e,"broadcastTo","x");const r=n.shape;if(t.some(e=>!(e>0)||e%1!=0))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=pt(n,e)}const s=n.shape,a=Array.from(t);for(let e=t.length-1;e>=0;e--)if(s[e]===t[e])a[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${t}].`);if(0===a.map((e,t)=>e>1?t:-1).filter(e=>e>=0).length)return Nr(n);const o={x:n},i={shape:t,inputShape:s};return Ae.runKernelFunc(e=>e.tile(n,a),o,null,"BroadcastTo",i)}});function vo(e,t="float32",n){return t=t||"float32",ee(e),new de(e,t,n)}const wo=Ve({ceil_:function(e){const t=Pe(e,"x","ceil"),n={x:t};return Ae.runKernelFunc(e=>e.ceil(t),n,null,"Ceil")}});const Co=Ve({clipByValue_:function(e,t,n){const r=Pe(e,"x","clipByValue");w(t<=n,()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`);const s={x:r},a={clipValueMin:t,clipValueMax:n};return Ae.runKernelFunc((e,s)=>{const a=e.clip(r,t,n);return s([r]),a},s,null,"ClipByValue",a)}});const No=Ve({concat1d_:function(e){return us(e,0)}});const $o=Ve({concat2d_:function(e,t){return us(e,t)}});const Eo=Ve({concat3d_:function(e,t){return us(e,t)}});const ko=Ve({concat4d_:function(e,t){return us(e,t)}});const So=Ve({conv1d_:function(e,t,n,r,s="NWC",a=1,o){const i=Pe(e,"x","conv1d"),u=Pe(t,"filter","conv1d");let l=i,c=!1;2===i.rank&&(c=!0,l=pt(i,[1,i.shape[0],i.shape[1]])),w(3===l.rank,()=>`Error in conv1d: input must be rank 3, but got rank ${l.rank}.`),w(3===u.rank,()=>"Error in conv1d: filter must be rank 3, but got rank "+u.rank+"."),null!=o&&w(S(r),()=>`Error in conv1d: pad must be an integer when using, dimRoundingMode ${o} but got pad ${r}.`),w(l.shape[2]===u.shape[1],()=>`Error in conv1d: depth of input (${l.shape[2]}) must match input depth for filter ${u.shape[1]}.`),w(Ft(n,a),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`),w("NWC"===s,()=>`Error in conv1d: got dataFormat of ${s} but only NWC is currently supported.`);const p=pt(u,[1,u.shape[0],u.shape[1],u.shape[2]]),d=pt(l,[l.shape[0],1,l.shape[1],l.shape[2]]),h=sn(d,p,[1,n],r,"NHWC",[1,a],o);return pt(h,c?[h.shape[2],h.shape[3]]:[h.shape[0],h.shape[2],h.shape[3]])}});const To=Ve({conv2dTranspose_:function(e,t,n,r,s,a){const o=Pe(e,"x","conv2dTranspose"),i=Pe(t,"filter","conv2dTranspose");return nn(n,o,i,r,s,"NHWC",a)}});const Ro=Ve({conv3d_:function(e,t,n,r,s="NDHWC",a=[1,1,1]){const o=Pe(e,"x","conv3d"),i=Pe(t,"filter","conv3d");let u=o,l=!1;4===o.rank&&(l=!0,u=pt(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),w(5===u.rank,()=>`Error in conv3d: input must be rank 5, but got rank ${u.rank}.`),w(5===i.rank,()=>"Error in conv3d: filter must be rank 5, but got rank "+i.rank+"."),w(u.shape[4]===i.shape[3],()=>`Error in conv3d: depth of input (${u.shape[4]}) must match input depth for filter ${i.shape[3]}.`),w(Ft(n,a),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),w("NDHWC"===s,()=>`Error in conv3d: got dataFormat of ${s} but only NDHWC is currently supported.`);const c={x:u,filter:i},p={strides:n,pad:r,dataFormat:s,dilations:a},d=Ae.runKernelFunc((e,t)=>{const s=St(u.shape,i.shape,n,a,r),o=e.conv3d(u,i,s);return t([u,i]),o},c,null,"Conv3D",p);return l?d.as4D(d.shape[1],d.shape[2],d.shape[3],d.shape[4]):d}});const Io=Ve({conv3dTranspose_:function(e,t,n,r,s){const a=Pe(e,"x","conv3dTranspose"),o=Pe(t,"filter","conv3dTranspose");return un(n,a,o,r,s)}});const Ao=Ve({depthToSpace_:function(e,t,n="NHWC"){const r=Pe(e,"x","depthToSpace"),s="NHWC"===n?r.shape[1]:r.shape[2],a="NHWC"===n?r.shape[2]:r.shape[3],o="NHWC"===n?r.shape[3]:r.shape[1];w(s*t>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${s} and ${t}  for depthToSpace with input shape\n    ${r.shape}`),w(a*t>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t} for depthToSpace with input shape\n        ${r.shape}`),w(o%(t*t)==0,()=>`Dimension size must be evenly divisible by ${t*t} but is ${o} for depthToSpace with input shape ${r.shape}`);const i={x:r},u={blockSize:t,dataFormat:n};return Ae.runKernelFunc(e=>e.depthToSpace(r,t,n),i,null,"DepthToSpace",u)}});const _o=Ve({depthwiseConv2d_:function(e,t,n,r,s="NHWC",a=[1,1],o){const i=Pe(e,"x","depthwiseConv2d"),u=Pe(t,"filter","depthwiseConv2d");let l=i,c=!1;3===i.rank&&(c=!0,l=pt(i,[1,i.shape[0],i.shape[1],i.shape[2]])),w(4===l.rank,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${l.rank}.`),w(4===u.rank,()=>"Error in depthwiseConv2d: filter must be rank 4, but got rank "+u.rank+"."),w(l.shape[3]===u.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`),null!=o&&w(S(r),()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${o} but got pad ${r}.`);const p={x:l,filter:u},d={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o},h=Ae.runKernelFunc((e,t)=>{null==a&&(a=[1,1]),w(Ft(n,a),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`);const s=kt(l.shape,u.shape,n,a,r,o,!0),i=e.depthwiseConv2D(l,u,s);return t([l,u]),i},p,null,"DepthwiseConv2dNative",d);return c?pt(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const Do=Ve({diag_:function(e){const t=Pe(e,"x","diag").flatten(),n={x:t};return Ae.runKernelFunc(n=>{const r=n.diag(t),s=[...e.shape,...e.shape];return pt(r,s)},n,null,"Diag")}});const Fo=Ve({dilation2d_:function(e,t,n,r,s=[1,1],a="NHWC"){const o=Pe(e,"x","dilation2d"),i=Pe(t,"filter","dilation2d");w(3===o.rank||4===o.rank,()=>"Error in dilation2d: input must be rank 3 or 4, but got rank "+o.rank+"."),w(3===i.rank,()=>"Error in dilation2d: filter must be rank 3, but got rank "+i.rank+"."),w("NHWC"===a,()=>"Error in dilation2d: Only NHWC is currently supported, but got dataFormat of "+a);let u=o,l=!1;3===o.rank&&(u=pt(o,[1,o.shape[0],o.shape[1],o.shape[2]]),l=!0);const c={x:u,filter:i},p={strides:n,pad:r,dilations:s},d=Ae.runKernel("Dilation2D",c,p);return l?pt(d,[d.shape[1],d.shape[2],d.shape[3]]):d}});const Oo=Ve({divNoNan_:function(e,t){let n=Pe(e,"a","div"),r=Pe(t,"b","div");[n,r]=Ee(n,r);const s=He(n,r),a=at(s),o=r.equal(a);return Yt(o,a,s)}});const Mo=Ve({dot_:function(e,t){const n=Pe(e,"t1","dot"),r=Pe(t,"t2","dot");w(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`);const s=1===n.rank?n.size:n.shape[1],a=1===r.rank?r.size:r.shape[0];if(w(s===a,()=>`Error in dot: inner dimensions of inputs must match, but got ${s} and ${a}.`),1===n.rank&&1===r.rank){const e=pt(n,[1,-1]),t=pt(r,[-1,1]),s=Vt(e,t);return pt(s,[])}if(1===n.rank&&2===r.rank){const e=pt(n,[1,-1]),t=pt(r,[r.shape[0],r.shape[1]]),s=Vt(e,t);return pt(s,[s.size])}if(2===n.rank&&1===r.rank){const e=pt(r,[-1,1]),t=Vt(n,e);return pt(t,[t.size])}{const e=pt(r,[r.shape[0],r.shape[1]]);return Vt(n,e)}}});const Bo=Ve({elu_:function(e){const t=Pe(e,"x","elu"),n={x:t};return Ae.runKernelFunc((e,n)=>{const r=e.elu(t);return n([r]),r},n,null,"Elu")}});const Po=Ve({erf_:function(e){let t=Pe(e,"x","erf");w("int32"===t.dtype||"float32"===t.dtype,()=>"Input dtype must be `int32` or `float32`."),"int32"===t.dtype&&(t=t.toFloat());const n={x:t};return Ae.runKernelFunc((e,n)=>{const r=e.erf(t);return n([t]),r},n,null,"Erf")}});const Lo=Ve({expm1_:function(e){const t=Pe(e,"x","expm1"),n={x:t};return Ae.runKernelFunc((e,n)=>{const r=e.expm1(t);return n([t]),r},n,null,"Expm1")}});const Vo=Ve({eye_:function(e,t,n,r="float32"){null==t&&(t=e);const s=vo([e,t],r),a=e<=t?e:t;for(let e=0;e<a;++e)s.set(1,e,e);const o=s.toTensor().as2D(e,t);if(null==n)return o;if(1===n.length)return In(Cs(o,0),[n[0],1,1]);if(2===n.length)return In(Cs(Cs(o,0),0),[n[0],n[1],1,1]);if(3===n.length)return In(Cs(Cs(Cs(o,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});const Wo=Ve({fft_:function(e){w("complex64"===e.dtype,()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`);const t={input:e};return Ae.runKernelFunc(t=>{const n=e.shape[e.shape.length-1],r=e.size/n,s=e.as2D(r,n);return t.fft(s).reshape(e.shape)},t,null,"FFT")}});function zo(e,t,n){const r={shape:e,value:t,dtype:n};return Ae.runKernelFunc(r=>r.fill(e,t,n),{},null,"Fill",r)}const Uo=Ve({ifft_:function(e){w("complex64"===e.dtype,()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`);const t={input:e};return Ae.runKernelFunc(t=>{const n=e.shape[e.shape.length-1],r=e.size/n,s=e.as2D(r,n);return t.ifft(s).reshape(e.shape)},t,null,"IFFT")}});const Go=Ve({imag_:function(e){const t=Pe(e,"input","imag"),n={input:t};return Ae.runKernelFunc(e=>e.imag(t),n,null,"Imag")}});const qo=Ve({real_:function(e){const t=Pe(e,"input","real"),n={input:t};return Ae.runKernelFunc(e=>e.real(t),n,null,"Real")}});const Ho=Ve({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let r;if(t<=2){const s=pt(e,[n,t]);r=Uo(s)}else{const s=[n,2*(t-1)],a=pt(qo(e),[n,t]),o=pt(Go(e),[n,t]),i=$r(bs(a,[0,1],[n,t-2]),1),u=ze($r(bs(o,[0,1],[n,t-2]),1),Xe(-1)),l=us([a,i],1),c=us([o,u],1),p=pt(ur(l,c),[s[0],s[1]]);r=Uo(p)}if(r=qo(r),3===e.rank&&0!==e.shape[0]){const t=r,n=e.shape[0];r=pt(r,[n,r.shape[0]/n,r.shape[1]]),t.dispose()}return r}});const jo=Ve({isFinite_:function(e){const t=Pe(e,"x","isFinite"),n={x:t};return Ae.runKernelFunc(e=>e.isFinite(t),n,null,"IsFinite")}});const Ko=Ve({isInf_:function(e){const t=Pe(e,"x","isInf"),n={x:t};return Ae.runKernelFunc(e=>e.isInf(t),n,null,"IsInf")}});const Xo=Ve({isNaN_:function(e){const t=Pe(e,"x","isNaN"),n={x:t};return Ae.runKernelFunc(e=>e.isNaN(t),n,null,"IsNan")}});const Yo=Ve({leakyRelu_:function(e,t=.2){const n=Pe(e,"x","leakyRelu");return Rs(ze(Xe(t),n),n)}});function Qo(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const r={start:e,stop:t,num:n};return Ae.runKernelFunc(r=>r.linspace(e,t,n),{},null,"LinSpace",r)}const Jo=Ve({localResponseNormalization_:function(e,t=5,n=1,r=1,s=.5){const a=Pe(e,"x","localResponseNormalization");w(4===a.rank||3===a.rank,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`),w(S(t),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`);let o=a,i=!1;3===a.rank&&(i=!0,o=pt(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const u={x:o},l={depthRadius:t,bias:n,alpha:r,beta:s},c=Ae.runKernelFunc((e,a)=>{const i=e.localResponseNormalization4D(o,t,n,r,s);return a([o,i]),i},u,null,"LRN",l);return i?c.as3D(c.shape[1],c.shape[2],c.shape[3]):c}});const Zo=Ve({log1p_:function(e){const t=Pe(e,"x","log1p"),n={x:t};return Ae.runKernelFunc((e,n)=>{const r=e.log1p(t);return n([t]),r},n,null,"Log1p")}});function ei(e,t){w(H(e),()=>"The f passed in variableGrads(f) must be a function"),w(null==t||Array.isArray(t)&&t.every(e=>e instanceof ge),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");const n=null!=t;if(!n){t=[];for(const e in Ae.registeredVariables)t.push(Ae.registeredVariables[e])}const r=n?t.filter(e=>!e.trainable):null,s=t.length;w((t=t.filter(e=>e.trainable)).length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${s} variables is trainable.`);const{value:a,grads:o}=Ae.gradients(e,t,null,!0);w(o.some(e=>null!=e),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),w(0===a.rank,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`);const i={};return t.forEach((e,t)=>{null!=o[t]&&(i[e.name]=o[t])}),null!=r&&r.forEach(e=>i[e.name]=null),{value:a,grads:i}}function ti(e){return Ae.customGrad(e)}function ni(e){if(e.filter(e=>null==e).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}const ri=Ve({logSigmoid_:function(e){const t=Pe(e,"x","logSigmoid");return ti(e=>({value:je(je(e).softplus()),gradFunc:t=>ze(t,ts(je(e)))}))(t)}});const si=Ve({max_:function(e,t=null,n=!1){const r=Pe(e,"x","max"),s={x:r},a={reductionIndices:t,keepDims:n};return Ae.runKernelFunc((e,s)=>{let a=_(t,r.shape);const o=yt(a,r.rank);let i=r;null!=o&&(i=fn(r,o),a=bt(a.length,i.rank));const u=e.max(i,a);null!=o&&i.dispose();let l=u;if(n){const e=mt(l.shape,_(t,r.shape));l=pt(l,e),u.dispose()}return s([r,l]),l},s,null,"Max",a)}});const ai=Ve({logSoftmax_:function(e,t=-1){const n=Pe(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);const r={logits:n},s={axis:t};return Ae.runKernelFunc((n,r)=>{const s=si(e,t,!0),a=Je(e,s),o=a.toFloat().sub(a.exp().sum(t,!0).log());return r([o]),o},r,null,"LogSoftmax",s)}});const oi=Ve({logSumExp_:function(e,t=null,n=!1){const r=Pe(e,"x","logSumExp"),s=_(t,r.shape),a=si(r,s,!0),o=Je(r,a),i=Nn(o),u=vt(i,s),l=hr(u),c=lt(pt(a,l.shape),l);if(n){const e=mt(c.shape,s);return pt(c,e)}return c}});const ii=Ve({logicalOr_:function(e,t){const n=Pe(e,"a","logicalOr","bool"),r=Pe(t,"b","logicalOr","bool");nt(n.shape,r.shape);const s={a:n,b:r};return Ae.runKernelFunc(e=>e.logicalOr(n,r),s,null,"LogicalOr")}});const ui=Ve({logicalXor_:function(e,t){const n=Pe(e,"a","logicalXor","bool"),r=Pe(t,"b","logicalXor","bool");return nt(n.shape,r.shape),Xt(ii(e,t),Tr(Xt(e,t)))}});const li=Ve({maxPool_:function(e,t,n,r,s){const a=Pe(e,"x","maxPool");let o=a,i=!1;3===a.rank&&(i=!0,o=pt(a,[1,a.shape[0],a.shape[1],a.shape[2]])),w(4===o.rank,()=>`Error in maxPool: input must be rank 4 but got rank ${o.rank}.`),w(Ft(n,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`),null!=s&&w(S(r),()=>`Error in maxPool: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`);const u={x:o},l={filterSize:t,strides:n,pad:r,dimRoundingMode:s},c=Ae.runKernelFunc((e,a)=>{const i=$t(o.shape,t,n,1,r,s);let u;return u=1===i.filterWidth&&1===i.filterHeight&&k(i.inShape,i.outShape)?o.clone():e.maxPool(o,i),a([o,u]),u},u,null,"MaxPool",l);return i?pt(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const ci=Ve({maxPool3d_:function(e,t=[1,1,1],n,r,s,a="NDHWC",o){null==o?o=[1,1,1]:Ga("dilations is deprecated, this field will be gone in v3.0.0.");const i=Pe(e,"x","maxPool3d");let u=i,l=!1;4===i.rank&&(l=!0,u=i.as5D(1,i.shape[0],i.shape[1],i.shape[2],i.shape[3])),w(5===u.rank,()=>`Error in maxPool3d: x must be rank 5 but got rank ${u.rank}.`),w("NDHWC"===a,()=>"Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of "+a),w(Ft(n,o),()=>`Error in maxPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${o}'`),null!=s&&w(S(r),()=>`Error in maxPool3d: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`);const c={x:u},p={filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a,dilations:o},d=Ae.runKernelFunc((e,i)=>{null==o&&(o=[1,1,1]);const l=Et(u.shape,t,n,o,r,s,a),c=e.maxPool3d(u,l);return i([u,c]),c},c,null,"MaxPool3D",p);return l?pt(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}});const pi=Ve({maxPoolWithArgmax_:function(e,t,n,r,s=!1){const a={x:Pe(e,"x","maxPoolWithArgmax")},o={filterSize:t,strides:n,pad:r,includeBatchInIndex:s},i=Ae.runKernel("MaxPoolWithArgmax",a,o);return{result:i[0],indexes:i[1]}}});const di=Ve({mean_:function(e,t=null,n=!1){const r=Pe(e,"x","mean"),s=_(t,r.shape),a=E(ft(r.shape,s)[1]);return ti(e=>{const r=Xe(a),o=r.dtype===e.dtype?e:We(e,r.dtype),i=He(o,r);return{value:vt(i,t,n),gradFunc:t=>{const n=e.shape.slice();s.forEach(e=>{n[e]=1});const r=pt(t,n);return He(ze(r,ms(e.shape,"float32")),a)}}})(r)}});const hi=Ve({min_:function(e,t=null,n=!1){const r=Pe(e,"x","min"),s={x:r},a={axis:t,keepDims:n};return Ae.runKernelFunc((e,s)=>{const a=_(t,r.shape);let o=a;const i=yt(o,r.rank);let u=r;null!=i&&(u=fn(r,i),o=bt(o.length,r.rank));const l=e.min(u,o);null!=i&&u.dispose();let c=l;if(n){const e=mt(c.shape,a);c=pt(l,e),l.dispose()}return s([r,c]),c},s,null,"Min",a)}});const fi=Ve({minimum_:function(e,t){let n=Pe(e,"a","minimum"),r=Pe(t,"b","minimum");[n,r]=Ee(n,r),"bool"===n.dtype&&(n=We(n,"int32"),r=We(r,"int32")),nt(n.shape,r.shape);const s={a:n,b:r};return Ae.runKernelFunc((e,t)=>{const s=e.minimum(n,r);return t([n,r]),s},s,null,"Minimum")}});const mi=Ve({mod_:function(e,t){let n=Pe(e,"a","mod"),r=Pe(t,"b","mod");[n,r]=Ee(n,r);const s={a:n,b:r};return Ae.runKernelFunc((e,t)=>{const s=e.mod(n,r);return t([n,r]),s},s,null,"Mod")}});const gi=Ve({moments_:function(e,t=null,n=!1){const r=_(t,(e=Pe(e,"x","moments")).shape),s=di(e,r,n);let a=s.shape;n||(a=mt(s.shape,r));const o=Qe(Je(We(e,"float32"),pt(s,a)));return{mean:s,variance:di(o,r,n)}}});const yi=Ve({multiRNNCell_:function(e,t,n,r){const s=Pe(t,"data","multiRNNCell"),a=Le(n,"c","multiRNNCell"),o=Le(r,"h","multiRNNCell");let i=s;const u=[];for(let t=0;t<e.length;t++){const n=e[t](i,a[t],o[t]);u.push(n[0]),u.push(n[1]),i=n[1]}const l=[],c=[];for(let e=0;e<u.length;e+=2)l.push(u[e]),c.push(u[e+1]);return[l,c]}});const xi=Ve({multinomial_:function(e,t,n,r=!1){const s=Pe(e,"logits","multinomial"),a=s.size,o=s.rank;if(a<2)throw new Error("Error in multinomial: you need at least 2 outcomes, but got "+a+".");if(o>2)throw new Error("Rank of probabilities must be 1 or 2, but is "+o);n=n||Math.random();const i=1===o?s.as2D(1,-1):s,u=Ae.runKernelFunc(e=>e.multinomial(i,r,t,n),{logits2D:i});return 1===o?u.as1D():u}});const bi=Ve({notEqual_:function(e,t){let n=Pe(e,"a","notEqual"),r=Pe(t,"b","notEqual");[n,r]=Ee(n,r),nt(n.shape,r.shape);const s={a:n,b:r};return Ae.runKernelFunc(e=>e.notEqual(n,r),s,null,"NotEqual")}});const vi=Ve({onesLike_:function(e){const t=Pe(e,"x","onesLike"),n={x:t};return Ae.runKernelFunc((e,n)=>{if("complex64"===t.dtype){const e=vi(qo(t)),n=at(Go(t));return ur(e,n)}return e.onesLike(t)},n,null,"OnesLike")}});const wi=Ve({outerProduct_:function(e,t){const n=Pe(e,"v1","outerProduct"),r=Pe(t,"v2","outerProduct");w(1===n.rank&&1===r.rank,()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${r.rank}.`);const s=pt(n,[-1,1]),a=pt(r,[1,-1]);return Vt(s,a)}});const Ci=Ve({pad1d_:function(e,t,n=0){return w(2===t.length,()=>"Invalid number of paddings. Must be length of 2."),Br(e,[t],n)}});const Ni=Ve({pad2d_:function(e,t,n=0){return w(2===t.length&&2===t[0].length&&2===t[1].length,()=>"Invalid number of paddings. Must be length of 2 each."),Br(e,t,n)}});const $i=Ve({pad3d_:function(e,t,n=0){return w(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,()=>"Invalid number of paddings. Must be length of 2 each."),Br(e,t,n)}});const Ei=Ve({pad4d_:function(e,t,n=0){return w(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,()=>"Invalid number of paddings. Must be length of 2 each."),Br(e,t,n)}});const ki=Ve({pool_:function(e,t,n,r,s,a){null==s&&(s=[1,1]),null==a&&(a=1),0===r&&(r="valid");const o=Pe(e,"x","maxPool");let i=o,u=!1;3===o.rank&&(u=!0,i=pt(o,[1,o.shape[0],o.shape[1],o.shape[2]])),w(Ft(a,s),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${s}'`);const l=$t(i.shape,t,a,s,r),c=[l.dilationHeight,l.dilationWidth];let p;p="same"===r?function(e,t){const n=e.map((e,n)=>e+(e-1)*(t[n]-1)).map(e=>e-1),r=n.map(e=>Math.floor(e/2)),s=n.map((e,t)=>e-r[t]);return n.map((e,t)=>[r[t],s[t]])}([l.filterHeight,l.filterWidth],c):[[0,0],[0,0]];const d=1===c[0]&&1===c[1],[h,f]=function(e,t,n){const r=n.map(e=>e[0]),s=n.map(e=>e[1]),a=e.concat(r,s),o=t.map((e,t)=>(e-a[t]%e)%e),i=s.map((e,t)=>e+o[t]),u=t.map((e,t)=>[r[t],i[t]]),l=t.map((e,t)=>[0,o[t]]);return[u,l]}([l.inHeight,l.inWidth],c,p),m=d?r:"valid",g=d?i:zt(i,c,h),y=("avg"===n?()=>lo(g,t,a,m):()=>li(g,t,a,m))(),x=d?y:rs(y,c,f);return u?pt(x,[x.shape[1],x.shape[2],x.shape[3]]):x}});const Si=Ve({prelu_:function(e,t){const n=Pe(e,"x","prelu"),r=Pe(t,"alpha","prelu"),s={x:n,alpha:r};return Ae.runKernelFunc((e,t)=>{const s=e.prelu(n,r);return t([n,r]),s},s,null,"Prelu")}});function Ti(e,t=!1){console.log(e.toString(t))}const Ri=Ve({prod_:function(e,t=null,n=!1){let r=Pe(e,"x","prod");const s={x:r},a={axis:t,keepDims:n};return Ae.runKernelFunc(e=>{"bool"===r.dtype&&(r=r.toInt());const s=_(t,r.shape),a=yt(s,r.rank);let o=s,i=r;null!=a&&(i=r.transpose(a),o=bt(o.length,r.rank));let u=e.prod(i,o);if(n){const e=mt(u.shape,s);u=u.reshape(e)}return u},s,null,"Prod",a)}});const Ii=Ve({rand_:function(e,t,n){const r=E(e);let s=null;if(null==n||"float32"===n)s=new Float32Array(r);else if("int32"===n)s=new Int32Array(r);else{if("bool"!==n)throw new Error("Unknown data type "+n);s=new Uint8Array(r)}for(let e=0;e<r;e++)s[e]=t();return Ae.makeTensor(s,e,n)}});"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;function Ai(e,t,n){return e(n={path:t,exports:{},require:function(e,t){return function(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}(null==t&&n.path)}},n.exports),n.exports}var _i=Ai((function(e){!function(e,t,n){function r(e){var t,n=this,r=(t=4022871197,function(e){e=e.toString();for(var n=0;n<e.length;n++){var r=.02519603282416938*(t+=e.charCodeAt(n));r-=t=r>>>0,t=(r*=t)>>>0,t+=4294967296*(r-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(e),n.s0<0&&(n.s0+=1),n.s1-=r(e),n.s1<0&&(n.s1+=1),n.s2-=r(e),n.s2<0&&(n.s2+=1),r=null}function s(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function a(e,t){var n=new r(e),a=t&&t.state,o=n.next;return o.int32=function(){return 4294967296*n.next()|0},o.double=function(){return o()+11102230246251565e-32*(2097152*o()|0)},o.quick=o,a&&("object"==typeof a&&s(a,n),o.state=function(){return s(n,{})}),o}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.alea=a}(0,e,!1)})),Di=Ai((function(e){!function(e,t,n){function r(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),t.next()}function s(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function a(e,t){var n=new r(e),a=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},o.int32=n.next,o.quick=o,a&&("object"==typeof a&&s(a,n),o.state=function(){return s(n,{})}),o}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xor128=a}(0,e,!1)})),Fi=Ai((function(e){!function(e,t,n){function r(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),r==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function s(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function a(e,t){var n=new r(e),a=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},o.int32=n.next,o.quick=o,a&&("object"==typeof a&&s(a,n),o.state=function(){return s(n,{})}),o}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xorwow=a}(0,e,!1)})),Oi=Ai((function(e){!function(e,t,n){function r(e){var t=this;t.next=function(){var e,n,r=t.x,s=t.i;return e=r[s],n=(e^=e>>>7)^e<<24,n^=(e=r[s+1&7])^e>>>10,n^=(e=r[s+3&7])^e>>>3,n^=(e=r[s+4&7])^e<<7,e=r[s+7&7],n^=(e^=e<<13)^e<<9,r[s]=n,t.i=s+1&7,n},function(e,t){var n,r=[];if(t===(0|t))r[0]=t;else for(t=""+t,n=0;n<t.length;++n)r[7&n]=r[7&n]<<15^t.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],e.x=r,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function s(e,t){return t.x=e.x.slice(),t.i=e.i,t}function a(e,t){null==e&&(e=+new Date);var n=new r(e),a=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},o.int32=n.next,o.quick=o,a&&(a.x&&s(a,n),o.state=function(){return s(n,{})}),o}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xorshift7=a}(0,e,!1)})),Mi=Ai((function(e){!function(e,t,n){function r(e){var t=this;t.next=function(){var e,n,r=t.w,s=t.X,a=t.i;return t.w=r=r+1640531527|0,n=s[a+34&127],e=s[a=a+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=s[a]=n^e,t.i=a,n+(r^r>>>16)|0},function(e,t){var n,r,s,a,o,i=[],u=128;for(t===(0|t)?(r=t,t=null):(t+="\0",r=0,u=Math.max(u,t.length)),s=0,a=-32;a<u;++a)t&&(r^=t.charCodeAt((a+32)%t.length)),0===a&&(o=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,a>=0&&(o=o+1640531527|0,s=0==(n=i[127&a]^=r+o)?s+1:0);for(s>=128&&(i[127&(t&&t.length||0)]=-1),s=127,a=512;a>0;--a)r=i[s+34&127],n=i[s=s+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,i[s]=r^n;e.w=o,e.X=i,e.i=s}(t,e)}function s(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function a(e,t){null==e&&(e=+new Date);var n=new r(e),a=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},o.int32=n.next,o.quick=o,a&&(a.X&&s(a,n),o.state=function(){return s(n,{})}),o}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xor4096=a}(0,e,!1)})),Bi=Ai((function(e){!function(e,t,n){function r(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,r=t.d,s=t.a;return e=e<<25^e>>>7^n,n=n-r|0,r=r<<24^r>>>8^s,s=s-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-r|0,t.d=r<<16^n>>>16^s,t.a=s-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var r=0;r<n.length+20;r++)t.b^=0|n.charCodeAt(r),t.next()}function s(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function a(e,t){var n=new r(e),a=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},o.int32=n.next,o.quick=o,a&&("object"==typeof a&&s(a,n),o.state=function(){return s(n,{})}),o}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.tychei=a}(0,e,!1)})),Pi=Ai((function(e){!function(t,r){var s,a=this,o=r.pow(256,6),i=r.pow(2,52),u=2*i;function l(e,n,l){var f=[],m=d(function e(t,n){var r,s=[],a=typeof t;if(n&&"object"==a)for(r in t)try{s.push(e(t[r],n-1))}catch(e){}return s.length?s:"string"==a?t:t+"\0"}((n=1==n?{entropy:!0}:n||{}).entropy?[e,h(t)]:null==e?function(){try{var e;return s&&(e=s.randomBytes)?e=e(256):(e=new Uint8Array(256),(a.crypto||a.msCrypto).getRandomValues(e)),h(e)}catch(e){var n=a.navigator,r=n&&n.plugins;return[+new Date,a,r,a.screen,h(t)]}}():e,3),f),g=new c(f),y=function(){for(var e=g.g(6),t=o,n=0;e<i;)e=256*(e+n),t*=256,n=g.g(1);for(;e>=u;)e/=2,t/=2,n>>>=1;return(e+n)/t};return y.int32=function(){return 0|g.g(4)},y.quick=function(){return g.g(4)/4294967296},y.double=y,d(h(g.S),t),(n.pass||l||function(e,t,n,s){return s&&(s.S&&p(s,g),e.state=function(){return p(g,{})}),n?(r.random=e,t):e})(y,m,"global"in n?n.global:this==r,n.state)}function c(e){var t,n=e.length,r=this,s=0,a=r.i=r.j=0,o=r.S=[];for(n||(e=[n++]);s<256;)o[s]=s++;for(s=0;s<256;s++)o[s]=o[a=255&a+e[s%n]+(t=o[s])],o[a]=t;(r.g=function(e){for(var t,n=0,s=r.i,a=r.j,o=r.S;e--;)t=o[s=255&s+1],n=256*n+o[255&(o[s]=o[a=255&a+t])+(o[a]=t)];return r.i=s,r.j=a,n})(256)}function p(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function d(e,t){for(var n,r=e+"",s=0;s<r.length;)t[255&s]=255&(n^=19*t[255&s])+r.charCodeAt(s++);return h(t)}function h(e){return String.fromCharCode.apply(0,e)}if(r.seedrandom=l,d(r.random(),t),e.exports){e.exports=l;try{s=n.default}catch(e){}}}([],Math)}));Pi.alea=_i,Pi.xor128=Di,Pi.xorwow=Fi,Pi.xorshift7=Oi,Pi.xor4096=Mi,Pi.tychei=Bi;var Li=Pi;class Vi{constructor(e,t,n,r,s){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=s||Math.random();this.random=Li.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let r,s,a;do{r=2*this.random()-1,s=2*this.random()-1,a=r*r+s*s}while(a>=1||0===a);const o=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*r*o,t=this.mean+this.stdDev*s*o,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class Wi{constructor(e,t,n,r){this.alpha=e,this.beta=1/t,this.dtype=n;const s=r||Math.random();this.randu=Li.alea(s.toString()),this.randn=new Vi(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,r,s,a;for(;;){do{r=this.randn.nextValue(),a=1+this.c*r}while(a<=0);if(a*=a*a,e=r*r,t=1-.331*e*e,n=.5*e+this.d*(1-a+Math.log(a)),s=this.randu(),s<t||Math.log(s)<n)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class zi{constructor(e=0,t=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=Li.alea(r)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const Ui=Ve({randomGamma_:function(e,t,n=1,r="float32",s){if(null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error("Unsupported data type "+r);const a=new Wi(t,n,r,s),o=vo(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}});const Gi=Ve({randomNormal_:function(e,t=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error("Unsupported data type "+r);const a=new Vi(t,n,r,!1,s),o=vo(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}});const qi=Ve({randomUniform_:function(e,t=0,n=1,r="float32",s){const a=vo(e,r),o=new zi(t,n,null,s);for(let e=0;e<a.values.length;e++)a.values[e]=o.nextValue();return a.toTensor()}});function Hi(e,t){N(e);const n=Me(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Ke(e,null,n,t)}function ji(e,t,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");const s={start:e,stop:t,step:n,dtype:r};return Ae.runKernelFunc(()=>{if(e===t||e<t&&n<0||t<e&&n>1)return lr([0],r);const s=J(Math.abs(Math.ceil((t-e)/n)),r);t<e&&1===n&&(n=-1),s[0]=e;for(let e=1;e<s.length;e++)s[e]=s[e-1]+n;return Hi(s,r)},{},null,"Range",s)}const Ki=Ve({reciprocal_:function(e){const t=Pe(e,"x","reciprocal"),n={x:t};return Ae.runKernelFunc((e,n)=>{const r=e.reciprocal(t);return n([t]),r},n,null,"Reciprocal")}});const Xi=Ve({relu_:function(e){const t=Pe(e,"x","relu"),n={x:t};return Ae.runKernelFunc((e,n)=>(n([t]),"bool"===t.dtype?t.toInt():e.relu(t)),n,null,"Relu")}});const Yi=Ve({relu6_:function(e){const t=Pe(e,"x","relu6"),n={x:t};return Ae.runKernelFunc((e,n)=>(n([t]),"bool"===t.dtype?We(t,"int32"):e.relu6(t)),n,null,"Relu6")}});const Qi=Ve({reverse1d_:function(e){const t=Pe(e,"x","reverse");return w(1===t.rank,()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`),$r(t,0)}});const Ji=Ve({reverse2d_:function(e,t){const n=Pe(e,"x","reverse");return w(2===n.rank,()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`),$r(n,t)}});const Zi=Ve({reverse3d_:function(e,t){const n=Pe(e,"x","reverse");return w(3===n.rank,()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`),$r(n,t)}});const eu=Ve({reverse4d_:function(e,t){const n=Pe(e,"x","reverse");return w(4===n.rank,()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`),$r(n,t)}});const tu=Ve({rfft_:function(e,t){w("float32"===e.dtype,()=>"The dtype for rfft() must be real value but got "+e.dtype);let n=e.shape[e.shape.length-1];const r=e.size/n;let s;if(null!=t&&t<n){const r=e.shape.map(e=>0),a=e.shape.map(e=>e);a[e.shape.length-1]=t,s=bs(e,r,a),n=t}else if(null!=t&&t>n){const r=e.shape.map(e=>e);r[e.shape.length-1]=t-n,s=us([e,lr(r)],e.shape.length-1),n=t}else s=e;const a=at(s),o=pt(ur(s,a),[r,n]),i=Wo(o),u=Math.floor(n/2)+1,l=qo(i),c=Go(i),p=Zt(l,[u,n-u],l.shape.length-1),d=Zt(c,[u,n-u],c.shape.length-1),h=s.shape.slice();return h[s.shape.length-1]=u,pt(ur(p[0],d[0]),h)}});const nu=Ve({round_:function(e){const t=Pe(e,"x","round"),n={x:t};return Ae.runKernelFunc(e=>e.round(t),n,null,"Round")}});const ru=Ve({selu_:function(e){const t=Pe(e,"x","selu"),n={x:t};return Ae.runKernelFunc((e,n)=>{const r=e.selu(t);return n([t]),r},n,null,"Selu")}});const su=Ve({separableConv2d_:function(e,t,n,r,s,a=[1,1],o="NHWC"){const i=Pe(e,"x","separableConv2d"),u=Pe(t,"depthwiseFilter","separableConv2d"),l=Pe(n,"pointwiseFilter","separableConv2d");let c=i,p=!1;if(3===i.rank&&(p=!0,c=i.as4D(1,i.shape[0],i.shape[1],i.shape[2])),"NCHW"===o)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");w(4===c.rank,()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`),w(4===u.rank,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${u.rank}.`),w(4===l.rank,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${u.rank}.`),w(1===l.shape[0],()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${l.shape[0]}.`),w(1===l.shape[1],()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${l.shape[1]}.`);const d=u.shape[2],h=u.shape[3];w(l.shape[2]===d*h,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${d*h}, but got ${l.shape[2]}.`);const f=_o(c,u,r,s,o,a),m=sn(f,l,1,"valid",o);return p?m.as3D(m.shape[1],m.shape[2],m.shape[3]):m}});const au=async function(e,t){const n=Pe(e,"x","setdiff1d"),r=Pe(t,"y","setdiff1d");w(n.dtype===r.dtype,()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${r.dtype}).`),w(1===n.rank,()=>`x should be 1D tensor, but got x (${n.shape}).`),w(1===r.rank,()=>`y should be 1D tensor, but got y (${r.shape}).`);const s=await n.data(),a=await r.data(),o=new Set(a);let i=0;for(let e=0;e<s.length;e++)o.has(s[e])||i++;const u=new de([i],n.dtype),l=new de([i],"int32");for(let e=0,t=0;e<s.length;e++)o.has(s[e])||(u.values[t]=s[e],l.values[t]=e,t++);return[u.toTensor(),l.toTensor()]};const ou=Ve({sign_:function(e){const t=Pe(e,"x","sign"),n={x:t};return Ae.runKernelFunc(e=>e.sign(t),n,null,"Sign")}});const iu=Ve({slice1d_:function(e,t,n){const r=Pe(e,"x","slice1d");return w(1===r.rank,()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`),bs(r,[t],[n])}});const uu=Ve({slice2d_:function(e,t,n){const r=Pe(e,"x","slice2d");return w(2===r.rank,()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`),bs(r,t,n)}});const lu=Ve({slice3d_:function(e,t,n){const r=Pe(e,"x","slice3d");return w(3===r.rank,()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`),bs(r,t,n)}});const cu=Ve({slice4d_:function(e,t,n){const r=Pe(e,"x","slice4d");return w(4===r.rank,()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`),bs(r,t,n)}});const pu=Ve({softmax_:function(e,t=-1){const n=Pe(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const r={logits:n},s={dim:t};return Ae.runKernelFunc((e,r)=>{const s=e.softmax(n,t);return r([s]),s},r,null,"Softmax",s)}});const du=Ve({softplus_:function(e){const t=Pe(e,"x","softplus"),n={x:t};return Ae.runKernelFunc((e,n)=>{const r=e.softplus(t);return n([t]),r},n,null,"Softplus")}});const hu=Ve({squaredDifference_:function(e,t){let n=Pe(e,"a","squaredDifference"),r=Pe(t,"b","squaredDifference");[n,r]=Ee(n,r),nt(n.shape,r.shape);const s={a:n,b:r};return Ae.runKernelFunc((e,t)=>{const s=e.squaredDifference(n,r);return t([n,r]),s},s,null,"SquaredDifference",{})}});const fu=Ve({squeeze_:function(e,t){const n=Pe(e,"x","squeeze");return pt(n,D(n.shape,t).newShape)}});const mu=Ve({stridedSlice_:function(e,t,n,r,s=0,a=0,o=0,i=0,u=0){null==r&&(r=new Array(t.length));let l=Pe(e,"x","stridedSlice");const c={x:l},p={begin:t,end:n,strides:r,beginMask:s,endMask:a,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:u};return Ae.runKernelFunc(e=>{const c=Lr(o);if(c.length>1)throw new Error("Multiple ellipses in slice is not allowed.");if(0!==o&&0!==i)throw new Error("Using both ellipsisMask and newAxisMask is not yet supported.");if(0!==o&&0!==u)throw new Error("Using both ellipsisMask and shrinkAxisMask is not yet supported.");const p=l.rank-t.length,d=Lr(i),h=l.shape.slice();if(d.forEach(e=>{t[e]=0,n[e]=1,h.splice(e,0,1)}),l=pt(l,h),c.length&&p>0){const e=c[0],o=p+1;t=Gr(s,e,o,t,l.shape),n=qr(a,e,o,n,l.shape),r=Wr(r,e,o,l.shape)}else for(let e=0;e<l.rank;e++)t[e]=jr(s,t,r,l.shape,e,o),n[e]=Kr(a,n,r,l.shape,e,o),r[e]=Hr(r,e,o);const f=Lr(u);f.forEach(e=>{n[e]=t[e]+1,r[e]=1});const m=Vr(t,n,r),g=m.filter((e,t)=>-1===f.indexOf(t));if(r.every(e=>1===e))return pt(bs(l,t,m),g);return e.stridedSlice(l,t,n,r).reshape(g)},c,null,"StridedSlice",p)}});const gu=Ve({tan_:function(e){const t=Pe(e,"x","tan"),n={x:t};return Ae.runKernelFunc((e,n)=>{const r=e.tan(t);return n([t]),r},n,null,"Tan")}});function yu(e,t,n){if(N(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const r=Me(e,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Ke(e,t,r,n)}function xu(e,t,n){if(N(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const r=Me(e,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return Ke(e,t,r,n)}function bu(e,t,n){if(N(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const r=Me(e,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return Ke(e,t,r,n)}function vu(e,t,n){if(N(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const r=Me(e,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return Ke(e,t=t||r,r,n)}const wu=Ve({topk_:function(e,t=1,n=!0){const r=Pe(e,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const s=r.shape[r.shape.length-1];if(t>s)throw new Error(`'k' passed to topk() must be <= the last dimension (${s}) but got `+t);const a={x:r},o={k:t,sorted:n},[i,u]=Ae.runKernelFunc(e=>e.topk(r,t,n),a,null,"TopK",o);return{values:i,indices:u}}});const Cu=Ve({truncatedNormal_:function(e,t=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const a=new Vi(t,n,r,!0,s),o=vo(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}});const Nu=Ve({unstack_:function(e,t=0){const n=Pe(e,"x","unstack");w(t>=-n.shape.length&&t<n.shape.length,()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`),t<0&&(t+=n.shape.length);const r={value:n},s={axis:t};return Ae.runKernelFunc(e=>e.unstack(n,t),r,null,"Unpack",s)}});function $u(e,t=!0,n,r){return Ae.makeVariable(e,t,n,r)}function Eu(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const r=vo(e,"int32"),s=vo([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const a=r.indexToLoc(n[t]),o=t*e.length;s.values.set(a,o)}return s.toTensor()}const ku=async function(e){const t=Pe(e,"condition","whereAsync","bool"),n=await t.data(),r=Eu(t.shape,n);return e!==t&&t.dispose(),r};const Su=async function(e,t,n){const r=Pe(e,"tensor","boolMask"),s=Pe(t,"mask","boolMask","bool"),a=null==n?0:n,o=s.rank,i=r.shape;w(o>0,()=>"mask cannot be scalar"),C(i.slice(a,a+o),s.shape,"mask's shape must match the first K dimensions of tensor's shape,");let u=1;for(let e=a;e<a+o;e++)u*=i[e];const l=i.slice(0,a).concat([u],i.slice(a+o)),c=r.reshape(l),p=s.reshape([-1]),d=await ku(p),h=d.squeeze([1]),f=Ts(c,h,a);return e!==r&&r.dispose(),t!==s&&s.dispose(),h.dispose(),c.dispose(),p.dispose(),d.dispose(),f};const Tu=Ve({equalStrict_:function(e,t){Ga("strict variants of ops have been deprecated and will be removed in future");const n=Pe(e,"a","equalStrict"),r=Pe(t,"b","equalStrict");return C(n.shape,r.shape,"Error in equalStrict: "),n.equal(r)}}),Ru=Ve({greaterEqualStrict_:function(e,t){Ga("strict variants of ops have been deprecated and will be removed in future");const n=Pe(e,"a","greaterEqualStrict"),r=Pe(t,"b","greaterEqualStrict");return C(n.shape,r.shape,"Error in greaterEqualStrict: "),n.greaterEqual(r)}}),Iu=Ve({greaterStrict_:function(e,t){Ga("strict variants of ops have been deprecated and will be removed in future");const n=Pe(e,"a","greaterStrict"),r=Pe(t,"b","greaterStrict");return C(n.shape,r.shape,"Error in greaterStrict: "),n.greater(r)}}),Au=Ve({lessEqualStrict_:function(e,t){Ga("strict variants of ops have been deprecated and will be removed in future");const n=Pe(e,"a","lessEqualStrict"),r=Pe(t,"b","lessEqualStrict");return C(n.shape,r.shape,"Error in lessEqualStrict: "),n.lessEqual(r)}}),_u=Ve({lessStrict_:function(e,t){Ga("strict variants of ops have been deprecated and will be removed in future");const n=Pe(e,"a","lessStrict"),r=Pe(t,"b","lessStrict");return C(n.shape,r.shape,"Error in lessStrict: "),n.less(r)}}),Du=Ve({notEqualStrict_:function(e,t){Ga("strict variants of ops have been deprecated and will be removed in future");const n=Pe(e,"a","notEqualStrict"),r=Pe(t,"b","notEqualStrict");return C(n.shape,r.shape,"Error in notEqualStrict: "),n.notEqual(r)}});const Fu=Ve({addStrict_:function(e,t){Ga("strict variants of ops have been deprecated and will be removed in future");const n=Pe(e,"a","addStrict"),r=Pe(t,"b","addStrict");return C(n.shape,r.shape,"Error in addStrict: "),n.add(r)}}),Ou=Ve({divStrict_:function(e,t){Ga("strict variants of ops have been deprecated and will be removed in future");const n=Pe(e,"a","div"),r=Pe(t,"b","div");return C(n.shape,r.shape,"Error in divideStrict: "),n.div(r)}}),Mu=Ve({maximumStrict_:function(e,t){Ga("strict variants of ops have been deprecated and will be removed in future");const n=Pe(e,"a","maximumStrict"),r=Pe(t,"b","maximumStrict");return C(n.shape,r.shape,"Error in maximumStrict: "),n.maximum(r)}}),Bu=Ve({minimumStrict_:function(e,t){Ga("strict variants of ops have been deprecated and will be removed in future");const n=Pe(e,"a","minimumStrict"),r=Pe(t,"b","minimumStrict");return C(n.shape,r.shape,"Error in minimumStrict: "),n.minimum(r)}}),Pu=Ve({modStrict_:function(e,t){Ga("strict variants of ops have been deprecated and will be removed in future");const n=Pe(e,"a","modStrict"),r=Pe(t,"b","modStrict");return C(n.shape,r.shape,"Error in modStrict: "),n.mod(r)}}),Lu=Ve({mulStrict_:function(e,t){Ga("strict variants of ops have been deprecated and will be removed in future");const n=Pe(e,"a","mul"),r=Pe(t,"b","mul");return C(n.shape,r.shape,"Error in multiplyStrict: "),n.mul(r)}}),Vu=Ve({powStrict_:function(e,t){return Ga("strict variants of ops have been deprecated and will be removed in future"),C(e.shape,t.shape,"Error in powStrict: "),e.pow(t)}}),Wu=Ve({squaredDifferenceStrict_:function(e,t){Ga("strict variants of ops have been deprecated and will be removed in future");const n=Pe(e,"a","squaredDifferenceStrict"),r=Pe(t,"b","squaredDifferenceStrict");return C(n.shape,r.shape,"Error in squaredDifferenceStrict: "),n.squaredDifference(r)}}),zu=Ve({subStrict_:function(e,t){Ga("strict variants of ops have been deprecated and will be removed in future");const n=Pe(e,"a","subStrict"),r=Pe(t,"b","subStrict");return C(n.shape,r.shape,"Error in subStrict: "),n.sub(r)}});const Uu=Ve({norm_:function(e,t="euclidean",n=null,r=!1){const s=function e(t,n,r=null){if(0===t.rank)return Ya(t);if(1!==t.rank&&null===r)return e(pt(t,[-1]),n,r);if(1===t.rank||"number"==typeof r||Array.isArray(r)&&1===r.length){if(1===n)return vt(Ya(t),r);if(n===1/0)return si(Ya(t),r);if(n===-1/0)return hi(Ya(t),r);if("euclidean"===n||2===n)return Ye(vt(fr(Ya(t),Xe(2,"int32")),r));throw new Error("Error in norm: invalid ord value: "+n)}if(Array.isArray(r)&&2===r.length){if(1===n)return si(vt(Ya(t),r[0]),r[1]-1);if(n===1/0)return si(vt(Ya(t),r[1]),r[0]);if(n===-1/0)return hi(vt(Ya(t),r[1]),r[0]);if("fro"===n||"euclidean"===n)return Ye(vt(Qe(t),r));throw new Error("Error in norm: invalid ord value: "+n)}throw new Error("Error in norm: invalid axis: "+r)}(e=Pe(e,"x","norm"),t,n);let a=s.shape;if(r){const t=_(n,e.shape);a=mt(s.shape,t)}return s.reshape(a)}});const Gu=Ve({movingAverage_:function(e,t,n,r,s=!0){const a=Pe(e,"v","movingAverage"),o=Pe(t,"x","movingAverage"),i=Pe(n,"decay","movingAverage");ke(a,o),w(k(a.shape,o.shape),()=>"Shape mismatch in v and x");const u=Xe(1),l=Je(u,i);let c=ze(Je(o,a),l);if(s){w(null!=r,()=>"When using zeroDebias: true, step is required.");const e=Pe(r,"step","movingAverage");c=He(c,Je(u,fr(i,e)))}return lt(a,c)}});const qu=Ve({scatterND_:function(e,t,n){const r=Pe(e,"indices","scatterND","int32"),s=Pe(t,"updates","scatterND");Da(s,r,n);const a={indices:r,updates:s},o={shape:n};return Ae.runKernelFunc(e=>e.scatterND(r,s,n),a,null,"ScatterNd",o)}});const Hu=Ve({sparseToDense_:function(e,t,n,r=0){const s=Pe(e,"sparseIndices","sparseToDense","int32"),a=Pe(t,"sparseValues","sparseToDense"),o=Pe(r,"defaultValue","sparseToDense",a.dtype);!function(e,t,n,r){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const s=e.rank>0?e.shape[0]:1,a=e.rank>1?e.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const o=t.size;if(0!==t.rank&&(1!==t.rank||o!==s))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${s}]`);if(t.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(s,a,n,o);const i={sparseIndices:s,sparseValues:a,defaultValue:o},u={outputShape:n};return Ae.runKernelFunc(e=>e.sparseToDense(s,a,n,o),i,null,"SparseToDense",u)}});const ju=Ve({gatherND_:function(e,t){const n=Pe(t,"indices","gatherND","int32"),r=Pe(e,"x","gatherND"),s={params:r,indices:n};return Ae.runKernelFunc(e=>e.gatherND(r,n),s,null,"GatherNd")}});const Ku=Ve({dropout_:function(e,t,n,r){const s=Pe(e,"x","dropout");if(w("float32"===s.dtype,()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${s.dtype} tensor instead.`),w(t>=0&&t<1,()=>`rate must be a float in the range [0, 1), but got ${t}.`),0===t)return e instanceof me?s.clone():s;const a=function(e,t){if(null==t)return e.shape.slice();if(k(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let r=0;r<e.shape.length;r++)null==t[r]&&null!=e.shape[r]?n.push(e.shape[r]):n.push(t[r]);return n}return t}(s,n),o=1-t,i=qi(a,0,1,"float32",r).add(o).floor().div(o);return s.mul(i)}});function Xu(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function Yu(e,t,n){const r=1-e%2,s=new Float32Array(e);for(let a=0;a<e;++a){const o=2*Math.PI*a/(e+r-1);s[a]=t-n*Math.cos(o)}return Hi(s,"float32")}const Qu=async function(e,t,n=1){const r=Pe(e,"predictions","inTopK"),s=Pe(t,"targets","inTopK");w(r.rank>1,()=>"inTopK() expects the predictions to be of rank 2 or higher, but got "+r.rank),w(r.rank-1===s.rank,()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${r.rank} and targets rank ${s.rank}`),C(r.shape.slice(0,r.shape.length-1),s.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const a=r.shape[r.shape.length-1];w(n>0&&n<=a,()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${a}), but got ${n}`);const o=await r.data(),i=await s.data(),[u,l]=[o.length/a,a],c=F("bool",u);for(let e=0;e<u;e++){const t=e*l,r=o.subarray(t,t+l),s=[];for(let e=0;e<r.length;e++)s.push({value:r[e],index:e});s.sort((e,t)=>t.value-e.value),c[e]=0;for(let t=0;t<n;t++)if(s[t].index===i[e]){c[e]=1;break}}return e!==r&&r.dispose(),t!==s&&s.dispose(),is(c,s.shape,"bool")};function Ju(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return e.mul(t.step());throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function Zu(e,t){let n=t;const r=tt(e.shape,t.shape);return r.length>0&&(n=n.sum(r)),n.reshape(e.shape)}function el(e,t,n){if("linear"===t)return e;if("relu"===t)return Xi(e);if("elu"===t)return Bo(e);if("relu6"===t)return Yi(e);if("prelu"===t)return Si(e,n);throw new Error(`Unknown fused activation ${t}.`)}const tl=(e,t)=>!(e>0)||"linear"===t;const nl=Ve({fusedConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:o,bias:i,activation:u="linear",preluActivationWeights:l}){if(u=u||"linear",!1===tl(Ae.state.gradientDepth,u)){let c=sn(e,t,n,r,s,a,o);return null!=i&&(c=lt(c,i)),el(c,u,l)}const c=Pe(e,"x","conv2d"),p=Pe(t,"filter","conv2d");let d=c,h=!1;3===c.rank&&(h=!0,d=c.as4D(1,c.shape[0],c.shape[1],c.shape[2])),w(4===d.rank,()=>"Error in fused conv2d: input must be rank 4, but got rank "+d.rank+"."),w(4===p.rank,()=>"Error in fused conv2d: filter must be rank 4, but got rank "+p.rank+"."),null!=o&&w(S(r),()=>`Error in fused conv2d: pad must be an integer when using, dimRoundingMode ${o} but got pad ${r}.`),w(d.shape[3]===p.shape[2],()=>`Error in conv2d: depth of input (${d.shape[3]}) must match input depth for filter ${p.shape[2]}.`),w(Ft(n,a),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),w("NHWC"===s,()=>`Error in conv2d: got dataFormat of ${s} but only NHWC is currently supported.`);const f=kt(d.shape,p.shape,n,a,r,o);let m,g;null!=i&&(m=Pe(i,"bias","fused conv2d"),[m]=Ee(m,c),nt(f.outShape,m.shape)),null!=l&&(g=Pe(l,"prelu weights","fused conv2d"));const y=(e,t)=>{const[s,o,i,l]=t,c=Ju(e,i,u);w(Dt(a),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`);const p=[nn(o.shape,c,s,n,r),tn(o,c,s.shape,n,r)];if(null!=l){const e=Zu(l,c);p.push(e)}return p},x=e=>e.fusedConv2d({input:d,filter:p,convInfo:f,bias:m,activation:u,preluActivationWeights:g}),b={x:d,filter:p,bias:m,preluActivationWeights:g},v={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o,activation:u};if(null==i){return ti((e,t,n)=>{let r=Ae.runKernelFunc(x,b,null,"FusedConv2D",v);return n([t,e,r]),h&&(r=r.as3D(r.shape[1],r.shape[2],r.shape[3])),{value:r,gradFunc:y}})(d,p)}return ti((e,t,n,r)=>{let s=Ae.runKernelFunc(x,b,null,"FusedConv2D",v);return r([t,e,s,n]),h&&(s=s.as3D(s.shape[1],s.shape[2],s.shape[3])),{value:s,gradFunc:y}})(d,p,m)}});const rl=Ve({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:o,bias:i,activation:u="linear",preluActivationWeights:l}){if(!1===tl(Ae.state.gradientDepth,u)){let c=_o(e,t,n,r,s,a,o);return null!=i&&(c=lt(c,i)),el(c,u,l)}const c=Pe(e,"x","depthwiseConv2d"),p=Pe(t,"filter","depthwiseConv2d");let d=c,h=!1;3===c.rank&&(h=!0,d=c.as4D(1,c.shape[0],c.shape[1],c.shape[2])),w(4===d.rank,()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${d.rank}.`),w(4===p.rank,()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${p.rank}.`),w(d.shape[3]===p.shape[2],()=>`Error in fused depthwiseConv2d: number of input channels (${d.shape[3]}) must match the inChannels dimension in filter ${p.shape[2]}.`),null==a&&(a=[1,1]),w(Ft(n,a),()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),null!=o&&w(S(r),()=>`Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode ${o} but got pad ${r}.`);const f=kt(d.shape,p.shape,n,a,r,o,!0);let m,g;null!=i&&(m=Pe(i,"bias","fused conv2d"),[m]=Ee(m,c),nt(f.outShape,m.shape)),null!=l&&(g=Pe(l,"prelu weights","fused depthwiseConv2d"));const y=(e,t)=>{w(Dt(a),()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`);const[n,r,s,o]=t,i=Ju(e,s,u),l=xn(r.shape,i,n,f),c=yn(r,i,n.shape,f);if(null!=o){return[l,c,Zu(m,i)]}return[l,c]},x=e=>e.fusedDepthwiseConv2D({input:d,filter:p,convInfo:f,bias:m,activation:u,preluActivationWeights:g}),b={x:d,filter:p,bias:m,preluActivationWeights:g},v={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o,activation:u};if(null==i){return ti((e,t,n)=>{let r=Ae.runKernelFunc(x,b,null,"FusedDepthwiseConv2D",v);return n([t,e,r]),h&&(r=r.as3D(r.shape[1],r.shape[2],r.shape[3])),{value:r,gradFunc:y}})(d,p)}return ti((e,t,n,r)=>{let s=Ae.runKernelFunc(x,b,null,"FusedDepthwiseConv2D",v);return r([t,e,s,n]),h&&(s=s.as3D(s.shape[1],s.shape[2],s.shape[3])),{value:s,gradFunc:y}})(d,p,m)}});const sl=Ve({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:r=!1,bias:s,activation:a="linear",preluActivationWeights:o}){if(!1===tl(Ae.state.gradientDepth,a)){let i=Vt(e,t,n,r);return null!=s&&(i=lt(i,s)),el(i,a,o)}let i=Pe(e,"a","fused matMul"),u=Pe(t,"b","fused matMul");[i,u]=Ee(i,u);const l=n?i.shape[i.rank-2]:i.shape[i.rank-1],c=r?u.shape[u.rank-1]:u.shape[u.rank-2],p=n?i.shape[i.rank-1]:i.shape[i.rank-2],d=r?u.shape[u.rank-2]:u.shape[u.rank-1],h=i.shape.slice(0,-2),f=u.shape.slice(0,-2),m=E(h),g=E(f);w(i.rank>=2&&u.rank>=2&&i.rank===u.rank,()=>`Error in fused matMul: inputs must have the same rank of at least 2, got ranks ${i.rank} and ${u.rank}.`),w(k(h,f),()=>`Error in fused matMul: outer dimensions (${h}) and (${f}) of Tensors with shapes ${i.shape} and `+u.shape+" must match."),w(l===c,()=>`Error in fused matMul: inner shapes (${l}) and (${c}) of Tensors with shapes ${i.shape} and ${u.shape} and transposeA=${n} and transposeB=${r} must match.`);const y=i.shape.slice(0,-2).concat([p,d]),x=n?i.as3D(m,l,p):i.as3D(m,p,l),b=r?u.as3D(g,d,c):u.as3D(g,c,d);let v,C;null!=s&&(v=Pe(s,"bias","fused matMul"),[v]=Ee(v,i),nt(y,v.shape)),null!=o&&(C=Pe(o,"prelu weights","fused matMul"));const N=(e,t)=>{const[o,i,u,l]=t,c=Ju(pt(e,u.shape),u,a);let p,d;if(n||r?!n&&r?(p=Vt(c,i,!1,!1),d=Vt(c,o,!0,!1)):n&&!r?(p=Vt(i,c,!1,!0),d=Vt(o,c,!1,!1)):(p=Vt(i,c,!0,!0),d=Vt(c,o,!0,!0)):(p=Vt(c,i,!1,!0),d=Vt(o,c,!0,!1)),null!=s){return[p,d,Zu(l,c)]}return[p,d]},$=e=>e.fusedBatchMatMul({a:x,b:b,transposeA:n,transposeB:r,bias:v,activation:a,preluActivationWeights:C}),S={a:x,b:b,bias:v,preluActivationWeights:C},T={transposeA:n,transposeB:r,activation:a};if(null==s){return ti((e,t,n)=>{const r=Ae.runKernelFunc($,S,null,"_FusedMatMul",T);return n([e,t,r]),{value:pt(r,y),gradFunc:N}})(x,b)}return ti((e,t,n,r)=>{const s=Ae.runKernelFunc($,S,null,"_FusedMatMul",T);return r([e,t,s,n]),{value:pt(s,y),gradFunc:N}})(x,b,v)}});var al=Object.freeze({__proto__:null,conv2d:nl,depthwiseConv2d:rl,matMul:sl});const ol=Ve({hammingWindow_:function(e){return Yu(e,.54,.46)}});const il=Ve({hannWindow_:function(e){return Yu(e,.5,.5)}});const ul=Ve({frame_:function(e,t,n,r=!1,s=0){let a=0;const o=[];for(;a+t<=e.size;)o.push(bs(e,a,t)),a+=n;if(r)for(;a<e.size;){const r=a+t-e.size,i=us([bs(e,a,t-r),zo([r],s)]);o.push(i),a+=n}return 0===o.length?yu([],[0,t]):pt(us(o),[o.length,t])}});const ll=Ve({stft_:function(e,t,n,r,s=il){null==r&&(r=Xu(t));const a=ul(e,t,n),o=ze(a,s(t)),i=[];for(let e=0;e<a.shape[0];e++)i.push(tu(bs(o,[e,0],[1,t]),r));return us(i)}});const cl=Ve({cropAndResize_:function(e,t,n,r,s,a){const o=Pe(e,"image","cropAndResize"),i=Pe(t,"boxes","cropAndResize","float32"),u=Pe(n,"boxInd","cropAndResize","int32");s=s||"bilinear",a=a||0;const l=i.shape[0];w(4===o.rank,()=>`Error in cropAndResize: image must be rank 4,but got rank ${o.rank}.`),w(2===i.rank&&4===i.shape[1],()=>`Error in cropAndResize: boxes must be have size [${l},4] but had shape ${i.shape}.`),w(1===u.rank&&u.shape[0]===l,()=>`Error in cropAndResize: boxInd must be have size [${l}] but had shape ${i.shape}.`),w(2===r.length,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`),w(r[0]>=1&&r[1]>=1,()=>"cropSize must be atleast [1,1], but was "+r),w("bilinear"===s||"nearest"===s,()=>"method must be bilinear or nearest, but was "+s);const c={image:o,boxes:i,boxInd:u},p={method:s,extrapolationValue:a,cropSize:r};return Ae.runKernelFunc(e=>e.cropAndResize(o,i,u,r,s,a),c,null,"CropAndResize",p)}});const pl=Ve({rotateWithOffset_:function(e,t,n=0,r=.5){const s=Pe(e,"image","rotateWithOffset","float32");w(4===s.rank,()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${s.rank}.`);const a={image:s},o={radians:t,fillValue:n,center:r};return Ae.runKernel("RotateWithOffset",a,o)}});function dl(e,t,n,r,s,a){null==r&&(r=.5),null==s&&(s=Number.NEGATIVE_INFINITY),null==a&&(a=0);const o=e.shape[0];return n=Math.min(n,o),w(0<=r&&r<=1,()=>`iouThreshold must be in [0, 1], but was '${r}'`),w(2===e.rank,()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`),w(4===e.shape[1],()=>"boxes must have 4 columns, but 2nd dimension was "+e.shape[1]),w(1===t.rank,()=>"scores must be a 1D tensor"),w(t.shape[0]===o,()=>`scores has incompatible shape with boxes. Expected ${o}, but was `+t.shape[0]),w(0<=a&&a<=1,()=>`softNmsSigma must be in [0, 1], but was '${a}'`),{maxOutputSize:n,iouThreshold:r,scoreThreshold:s,softNmsSigma:a}}const hl=Ve({nonMaxSuppression_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=Pe(e,"boxes","nonMaxSuppression"),o=Pe(t,"scores","nonMaxSuppression"),i=dl(a,o,n,r,s);n=i.maxOutputSize,r=i.iouThreshold,s=i.scoreThreshold;const u={maxOutputSize:n,iouThreshold:r,scoreThreshold:s};return Ae.runKernelFunc(e=>e.nonMaxSuppression(a,o,n,r,s),{boxes:a,scores:o},null,"NonMaxSuppressionV3",u)}});function fl(e,t,n){const r=function(e,t,n){return function(e,t,n){let r=0,s=e.length,a=0,o=!1;for(;r<s;){a=r+(s-r>>>1);const i=n(t,e[a]);i>0?r=a+1:(s=a,o=!i)}return o?r:-r-1}(e,t,n||ml)}(e,t,n),s=r<0?-(r+1):r;e.splice(s,0,t)}function ml(e,t){return e>t?1:e<t?-1:0}function gl(e,t,n,r,s){return bl(e,t,n,r,s,0).selectedIndices}function yl(e,t,n,r,s,a){return bl(e,t,n,r,s,0,!1,a,!0)}function xl(e,t,n,r,s,a){return bl(e,t,n,r,s,a,!0)}function bl(e,t,n,r,s,a,o=!1,i=!1,u=!1){const l=[];for(let e=0;e<t.length;e++)t[e]>s&&l.push({score:t[e],boxIndex:e,suppressBeginIndex:0});l.sort(Cl);const c=a>0?-.5/a:0,p=[],d=[];for(;p.length<n&&l.length>0;){const t=l.pop(),{score:n,boxIndex:a,suppressBeginIndex:o}=t;if(n<s)break;let i=!1;for(let n=p.length-1;n>=o;--n){const o=vl(e,a,p[n]);if(o>=r){i=!0;break}if(t.score=t.score*wl(r,c,o),t.score<=s)break}t.suppressBeginIndex=p.length,i||(t.score===n?(p.push(a),d.push(t.score)):t.score>s&&fl(l,t,Cl))}const h=p.length,f=n-h;i&&f>0&&(p.push(...new Array(f).fill(0)),d.push(...new Array(f).fill(0)));const m={selectedIndices:Hi(p,"int32")};return o&&(m.selectedScores=Hi(d,"float32")),u&&(m.validOutputs=Xe(h,"int32")),m}function vl(e,t,n){const r=e.subarray(4*t,4*t+4),s=e.subarray(4*n,4*n+4),a=Math.min(r[0],r[2]),o=Math.min(r[1],r[3]),i=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),l=Math.min(s[0],s[2]),c=Math.min(s[1],s[3]),p=Math.max(s[0],s[2]),d=Math.max(s[1],s[3]),h=(i-a)*(u-o),f=(p-l)*(d-c);if(h<=0||f<=0)return 0;const m=Math.max(a,l),g=Math.max(o,c),y=Math.min(i,p),x=Math.min(u,d),b=Math.max(y-m,0)*Math.max(x-g,0);return b/(h+f-b)}function wl(e,t,n){const r=Math.exp(t*n*n);return n<=e?r:0}function Cl(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}const Nl=async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=Pe(e,"boxes","nonMaxSuppressionAsync"),o=Pe(t,"scores","nonMaxSuppressionAsync"),i=dl(a,o,n,r,s);n=i.maxOutputSize,r=i.iouThreshold,s=i.scoreThreshold;const u=await Promise.all([a.data(),o.data()]),l=gl(u[0],u[1],n,r,s);return a!==e&&a.dispose(),o!==t&&o.dispose(),l};const $l=Ve({nonMaxSuppressionWithScore_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const o=Pe(e,"boxes","nonMaxSuppression"),i=Pe(t,"scores","nonMaxSuppression"),u=dl(o,i,n,r,s,a),l={boxes:o,scores:i},c={maxOutputSize:n=u.maxOutputSize,iouThreshold:r=u.iouThreshold,scoreThreshold:s=u.scoreThreshold,softNmsSigma:a=u.softNmsSigma},p=Ae.runKernel("NonMaxSuppressionV5",l,c);return{selectedIndices:p[0],selectedScores:p[1]}}});const El=async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const o=Pe(e,"boxes","nonMaxSuppressionAsync"),i=Pe(t,"scores","nonMaxSuppressionAsync"),u=dl(o,i,n,r,s,a);n=u.maxOutputSize,r=u.iouThreshold,s=u.scoreThreshold,a=u.softNmsSigma;const l=await Promise.all([o.data(),i.data()]),c=xl(l[0],l[1],n,r,s,a);return o!==e&&o.dispose(),i!==t&&i.dispose(),c};const kl=Ve({nonMaxSuppressionPadded_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const o=Pe(e,"boxes","nonMaxSuppression"),i=Pe(t,"scores","nonMaxSuppression"),u=dl(o,i,n,r,s,null),l={boxes:o,scores:i},c={maxOutputSize:u.maxOutputSize,iouThreshold:u.iouThreshold,scoreThreshold:u.scoreThreshold,padToMaxOutputSize:a},p=Ae.runKernel("NonMaxSuppressionV4",l,c);return{selectedIndices:p[0],validOutputs:p[1]}}});const Sl=async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const o=Pe(e,"boxes","nonMaxSuppressionAsync"),i=Pe(t,"scores","nonMaxSuppressionAsync"),u=dl(o,i,n,r,s,null),l=u.maxOutputSize,c=u.iouThreshold,p=u.scoreThreshold,[d,h]=await Promise.all([o.data(),i.data()]),f=yl(d,h,l,c,p,a);return o!==e&&o.dispose(),i!==t&&i.dispose(),f};const Tl=Ve({resizeBilinear_:function(e,t,n=!1){const r=Pe(e,"images","resizeBilinear");w(3===r.rank||4===r.rank,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`),w(2===t.length,()=>"Error in resizeBilinear: new shape must 2D, but got shape "+t+".");let s=r,a=!1;3===r.rank&&(a=!0,s=r.as4D(1,r.shape[0],r.shape[1],r.shape[2]));const[o,i]=t,u={images:s},l={alignCorners:n,size:t},c=Ae.runKernelFunc((e,t)=>(t([s]),e.resizeBilinear(s,o,i,n)),u,null,"ResizeBilinear",l);return a?c.as3D(c.shape[1],c.shape[2],c.shape[3]):c}});const Rl=Ve({resizeNearestNeighbor_:function(e,t,n=!1){const r=Pe(e,"images","resizeNearestNeighbor");w(3===r.rank||4===r.rank,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`),w(2===t.length,()=>"Error in resizeNearestNeighbor: new shape must 2D, but got shape "+t+"."),w("float32"===r.dtype||"int32"===r.dtype,()=>"`images` must have `int32` or `float32` as dtype");let s=r,a=!1;3===r.rank&&(a=!0,s=r.as4D(1,r.shape[0],r.shape[1],r.shape[2]));const[o,i]=t,u={images:s},l={alignCorners:n,size:t},c=Ae.runKernelFunc((e,t)=>(t([s]),e.resizeNearestNeighbor(s,o,i,n)),u,null,"ResizeNearestNeighbor",l);return a?c.as3D(c.shape[1],c.shape[2],c.shape[3]):c}});const Il=Ve({bandPart_:function(e,t,n){w(t%1==0,()=>`bandPart(): numLower must be an integer, got ${t}.`),w(n%1==0,()=>`bandPart(): numUpper must be an integer, got ${n}.`);const r=Pe(e,"a","bandPart");w(r.rank>=2,()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`);const s=r.shape,[a,o]=r.shape.slice(-2);if(!(t<=a))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${a}).`);if(!(n<=o))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${o}).`);t<0&&(t=a),n<0&&(n=o);const i=pt(ji(0,a,1,"int32"),[-1,1]),u=ji(0,o,1,"int32"),l=Je(i,u),c=Xt(Kt(l,Xe(+t,"int32")),jt(l,Xe(-n,"int32"))),p=lr([a,o],r.dtype);return pt(Ns(Nu(pt(r,[-1,a,o])).map(e=>Yt(c,e,p))),s)}});const Al=Ve({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,w(null!=e&&e.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");const n=e[0].shape[0];for(let t=1;t<e.length;++t)w(e[t].shape[0]===n,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`)}else t=!0,e=Zt(e,e.shape[0],0).map(e=>fu(e,[0]));w(e.length<=e[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`);const n=[],r=e;for(let t=0;t<e.length;++t)n.push(Ae.tidy(()=>{let e=r[t];if(t>0)for(let r=0;r<t;++r){const t=ze(vt(ze(n[r],e)),n[r]);e=Je(e,t)}return He(e,Uu(e,"euclidean"))}));return t?Ns(n,0):n}});function _l(e,t=!1){return Ae.tidy(()=>{w(2===e.shape.length,()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`);const n=e.shape[0],r=e.shape[1];let s=Vo(n),a=Nr(e);const o=yu([[1]],[1,1]);let i=Nr(o);const u=n>=r?r:n;for(let e=0;e<u;++e){const t=a,u=i,l=s;[i,a,s]=Ae.tidy(()=>{const t=bs(a,[e,e],[n-e,1]),u=Uu(t),l=bs(a,[e,e],[1,1]),c=Yt(nr(l,0),yu([[-1]]),yu([[1]])),p=Je(l,ze(c,u)),d=He(t,p);i=1===d.shape[0]?Nr(o):us([o,bs(d,[1,0],[d.shape[0]-1,d.shape[1]])],0);const h=je(He(Vt(c,p),u)),f=bs(a,[e,0],[n-e,r]),m=ze(h,i),g=fn(i);if(0===e)a=Je(f,Vt(m,Vt(g,f)));else{const t=Je(f,Vt(m,Vt(g,f)));a=us([bs(a,[0,0],[e,r]),t],0)}const y=fn(m),x=bs(s,[0,e],[n,s.shape[1]-e]);if(0===e)s=Je(x,Vt(Vt(x,i),y));else{const t=Je(x,Vt(Vt(x,i),y));s=us([bs(s,[0,0],[n,e]),t],1)}return[i,a,s]}),ja([t,u,l])}return!t&&n>r&&(s=bs(s,[0,0],[n,r]),a=bs(a,[0,0],[r,r])),[s,a]})}const Dl=Ve({qr_:function(e,t=!1){if(w(e.rank>=2,()=>"qr() requires input tensor to have a rank >= 2, but got rank "+e.rank),2===e.rank)return _l(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce((e,t)=>e*t),r=Nu(pt(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),s=[],a=[];r.forEach(e=>{const[n,r]=_l(e,t);s.push(n),a.push(r)});return[pt(Ns(s,0),e.shape),pt(Ns(a,0),e.shape)]}}});var Fl;!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(Fl||(Fl={}));const Ol=Ve({computeWeightedLoss_:function(e,t,n=Fl.SUM_BY_NONZERO_WEIGHTS){const r=Pe(e,"losses","computeWeightedLoss");let s=null;null!=t&&(s=Pe(t,"weights","computeWeightedLoss"));const a=null==s?r:ze(r,s);if(n===Fl.NONE)return a;if(n===Fl.SUM)return vt(a);if(n===Fl.MEAN){if(null==s)return di(a);{const e=r.size/s.size,t=He(vt(a),vt(s));return e>1?He(t,Xe(e)):t}}if(n===Fl.SUM_BY_NONZERO_WEIGHTS){if(null==s)return He(vt(a),Xe(r.size));{const e=ze(s,ms(r.shape)),t=We(vt(bi(e,Xe(0))),"float32");return He(vt(a),t)}}throw Error("Unknown reduction: "+n)}});const Ml=Ve({absoluteDifference_:function(e,t,n,r=Fl.SUM_BY_NONZERO_WEIGHTS){const s=Pe(e,"labels","absoluteDifference"),a=Pe(t,"predictions","absoluteDifference");let o=null;null!=n&&(o=Pe(n,"weights","absoluteDifference")),C(s.shape,a.shape,"Error in absoluteDifference: ");const i=Ya(Je(s,a));return Ol(i,o,r)}});const Bl=Ve({cosineDistance_:function(e,t,n,r,s=Fl.SUM_BY_NONZERO_WEIGHTS){const a=Pe(e,"labels","cosineDistance"),o=Pe(t,"predictions","cosineDistance");let i=null;null!=r&&(i=Pe(r,"weights","cosineDistance")),C(a.shape,o.shape,"Error in cosineDistance: ");const u=Xe(1),l=Je(u,vt(ze(a,o),n,!0));return Ol(l,i,s)}});const Pl=Ve({hingeLoss_:function(e,t,n,r=Fl.SUM_BY_NONZERO_WEIGHTS){let s=Pe(e,"labels","hingeLoss");const a=Pe(t,"predictions","hingeLoss");let o=null;null!=n&&(o=Pe(n,"weights","hingeLoss")),C(s.shape,a.shape,"Error in hingeLoss: ");const i=Xe(1);s=Je(ze(Xe(2),s),i);const u=Xi(Je(i,ze(s,a)));return Ol(u,o,r)}});const Ll=Ve({huberLoss_:function(e,t,n,r=1,s=Fl.SUM_BY_NONZERO_WEIGHTS){const a=Pe(e,"labels","huberLoss"),o=Pe(t,"predictions","huberLoss");let i=null;null!=n&&(i=Pe(n,"weights","huberLoss")),C(a.shape,o.shape,"Error in huberLoss: ");const u=Xe(r),l=Ya(Je(o,a)),c=fi(l,u),p=Je(l,c),d=lt(ze(Xe(.5),Qe(c)),ze(u,p));return Ol(d,i,s)}});const Vl=Ve({logLoss_:function(e,t,n,r=1e-7,s=Fl.SUM_BY_NONZERO_WEIGHTS){const a=Pe(e,"labels","logLoss"),o=Pe(t,"predictions","logLoss");let i=null;null!=n&&(i=Pe(n,"weights","logLoss")),C(a.shape,o.shape,"Error in logLoss: ");const u=Xe(1),l=Xe(r),c=je(ze(a,hr(lt(o,l)))),p=ze(Je(u,a),hr(lt(Je(u,o),l))),d=Je(c,p);return Ol(d,i,s)}});const Wl=Ve({meanSquaredError_:function(e,t,n,r=Fl.SUM_BY_NONZERO_WEIGHTS){const s=Pe(e,"labels","meanSquaredError"),a=Pe(t,"predictions","meanSquaredError");let o=null;null!=n&&(o=Pe(n,"weights","meanSquaredError")),C(s.shape,a.shape,"Error in meanSquaredError: ");const i=hu(s,a);return Ol(i,o,r)}});const zl=Ve({sigmoidCrossEntropy_:function(e,t,n,r=0,s=Fl.SUM_BY_NONZERO_WEIGHTS){let a=Pe(e,"multiClassLabels","sigmoidCrossEntropy");const o=Pe(t,"logits","sigmoidCrossEntropy");let i=null;if(null!=n&&(i=Pe(n,"weights","sigmoidCrossEntropy")),C(a.shape,o.shape,"Error in sigmoidCrossEntropy: "),r>0){const e=Xe(r),t=Xe(1),n=Xe(.5);a=lt(ze(a,Je(t,e)),ze(n,e))}const u=function(e,t){const n=Pe(e,"labels","sigmoidCrossEntropyWithLogits"),r=Pe(t,"logits","sigmoidCrossEntropyWithLogits");C(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const s=Xi(r),a=ze(r,n),o=Zo(Nn(je(Ya(r))));return lt(Je(s,a),o)}(a,o);return Ol(u,i,s)}});const Ul=Ve({softmaxCrossEntropy_:function(e,t,n,r=0,s=Fl.SUM_BY_NONZERO_WEIGHTS){let a=Pe(e,"onehotLabels","softmaxCrossEntropy");const o=Pe(t,"logits","softmaxCrossEntropy");let i=null;if(null!=n&&(i=Pe(n,"weights","softmaxCrossEntropy")),C(a.shape,o.shape,"Error in softmaxCrossEntropy: "),r>0){const e=Xe(r),t=Xe(1),n=Xe(a.shape[1]);a=lt(ze(a,Je(t,e)),He(e,n))}const u=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was `+n);return ti((e,t,r)=>{const s=oi(t,[n],!0),a=Je(We(t,"float32"),s);r([e,a]);const o=je(ze(a,e));return{value:vt(o,[n]),gradFunc:(e,t)=>{const[r,s]=t,a=mt(e.shape,[n]);return[ze(pt(e,a),Je(We(r,"float32"),Nn(s))),ze(pt(e,a),Je(Nn(s),We(r,"float32")))]}}})(e,t)}(a,o);return Ol(u,i,s)}}),Gl={fft:Wo,ifft:Uo,rfft:tu,irfft:Ho},ql={hammingWindow:ol,hannWindow:il,frame:ul,stft:ll},Hl={resizeNearestNeighbor:Rl,resizeBilinear:Tl,rotateWithOffset:pl,cropAndResize:cl,nonMaxSuppression:hl,nonMaxSuppressionAsync:Nl,nonMaxSuppressionWithScore:$l,nonMaxSuppressionWithScoreAsync:El,nonMaxSuppressionPadded:kl,nonMaxSuppressionPaddedAsync:Sl},jl={bandPart:Il,gramSchmidt:Al,qr:Dl},Kl={absoluteDifference:Ml,computeWeightedLoss:Ol,cosineDistance:Bl,hingeLoss:Pl,huberLoss:Ll,logLoss:Vl,meanSquaredError:Wl,sigmoidCrossEntropy:zl,softmaxCrossEntropy:Ul};var Xl=Object.freeze({__proto__:null,image:Hl,linalg:jl,losses:Kl,spectral:Gl,fused:al,signal:ql,abs:Ya,acos:Qa,acosh:Ja,add:lt,addN:Za,all:eo,any:to,argMax:no,argMin:ro,asin:so,asinh:ao,atan:oo,atan2:io,atanh:uo,avgPool:lo,avgPool3d:co,basicLSTMCell:ho,batchToSpaceND:rs,batchNorm:mo,batchNorm2d:go,batchNorm3d:yo,batchNorm4d:xo,broadcastTo:bo,buffer:vo,cast:We,ceil:wo,clipByValue:Co,clone:Nr,complex:ur,concat:us,concat1d:No,concat2d:$o,concat3d:Eo,concat4d:ko,conv1d:So,conv2d:sn,conv2dTranspose:To,conv3d:Ro,conv3dTranspose:Io,cos:Dr,cosh:Or,cumsum:mn,depthToSpace:Ao,depthwiseConv2d:_o,diag:Do,dilation2d:Fo,div:He,divNoNan:Oo,dot:Mo,elu:Bo,equal:Hn,erf:Po,exp:Nn,expandDims:Cs,expm1:Lo,eye:Vo,fft:Wo,fill:zo,floor:sr,floorDiv:qe,gather:Ts,greater:nr,greaterEqual:jt,ifft:Uo,imag:Go,irfft:Ho,isFinite:jo,isInf:Ko,isNaN:Xo,leakyRelu:Yo,less:Xn,lessEqual:Kt,linspace:Qo,localResponseNormalization:Jo,log:hr,log1p:Zo,logSigmoid:ri,logSoftmax:ai,logSumExp:oi,logicalAnd:Xt,logicalNot:Tr,logicalOr:ii,logicalXor:ui,matMul:Vt,max:si,maxPool:li,maxPool3d:ci,maxPoolWithArgmax:pi,maximum:Rs,mean:di,min:hi,minimum:fi,mod:mi,moments:gi,mul:ze,multiRNNCell:yi,multinomial:xi,neg:je,notEqual:bi,oneHot:Na,ones:ms,onesLike:vi,outerProduct:wi,pad:Br,pad1d:Ci,pad2d:Ni,pad3d:$i,pad4d:Ei,pool:ki,pow:fr,prelu:Si,print:Ti,prod:Ri,rand:Ii,randomGamma:Ui,randomNormal:Gi,randomUniform:qi,range:ji,real:qo,reciprocal:Ki,relu:Xi,relu6:Yi,reshape:pt,reverse:$r,reverse1d:Qi,reverse2d:Ji,reverse3d:Zi,reverse4d:eu,rfft:tu,round:nu,rsqrt:Rn,scalar:Xe,selu:ru,separableConv2d:su,setdiff1dAsync:au,sigmoid:ts,sign:ou,sin:cn,sinh:dn,slice:bs,slice1d:iu,slice2d:uu,slice3d:lu,slice4d:cu,softmax:pu,softplus:du,spaceToBatchND:zt,split:Zt,sqrt:Ye,square:Qe,squaredDifference:hu,squeeze:fu,stack:Ns,step:Ue,stridedSlice:mu,sub:Je,sum:vt,tan:gu,tanh:po,tensor:is,tensor1d:Hi,tensor2d:yu,tensor3d:ka,tensor4d:xu,tensor5d:bu,tensor6d:vu,tile:In,topk:wu,truncatedNormal:Cu,unsortedSegmentSum:_n,unstack:Nu,variable:$u,where:Yt,whereAsync:ku,zeros:lr,zerosLike:at,op:Ve,booleanMaskAsync:Su,equalStrict:Tu,greaterEqualStrict:Ru,greaterStrict:Iu,lessEqualStrict:Au,lessStrict:_u,notEqualStrict:Du,addStrict:Fu,divStrict:Ou,maximumStrict:Mu,minimumStrict:Bu,modStrict:Pu,mulStrict:Lu,powStrict:Vu,squaredDifferenceStrict:Wu,subStrict:zu,transpose:fn,norm:Uu,movingAverage:Gu,scatterND:qu,sparseToDense:Hu,gatherND:ju,dropout:Ku,enclosingPowerOfTwo:Xu,cosineWindow:Yu,inTopKAsync:Qu});class Yl extends Ma{minimize(e,t=!1,n){const{value:r,grads:s}=this.computeGradients(e,n);if(null!=n){const e=n.map(e=>({name:e.name,tensor:s[e.name]}));this.applyGradients(e)}else this.applyGradients(s);return ja(s),t?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return ei(e,t)}dispose(){null!=this.iterations_&&ja(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:Xe(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for this optimizer class "+this.getClassName())}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(Yl,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class Ql extends Yl{constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=Ae.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const r=Ae.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:t+"/accum_grad",variable:Ha(()=>at(r).variable(!1))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:t+"/accum_var",variable:Ha(()=>at(r).variable(!1))});const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const a=this.accumulatedGrads[n].variable,o=this.accumulatedUpdates[n].variable;Ha(()=>{const e=a.mul(this.rho).add(s.square().mul(1-this.rho)),t=o.add(this.epsilon).sqrt().div(a.add(this.epsilon).sqrt()).mul(s),n=o.mul(this.rho).add(t.square().mul(1-this.rho));a.assign(e),o.assign(n);const i=t.mul(-this.learningRate).add(r);r.assign(i)})}),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(ja(this.accumulatedGrads.map(e=>e.variable)),ja(this.accumulatedUpdates.map(e=>e.variable)))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.accumulatedUpdates=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}Ql.className="Adadelta",Pa(Ql);class Jl extends Yl{constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const r=Ae.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:t+"/accumulator",variable:Ha(()=>zo(r.shape,this.initialAccumulatorValue).variable(e))}}const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const a=this.accumulatedGrads[n].variable;Ha(()=>{const e=a.add(s.square());a.assign(e);const t=s.div(e.add(Ae.backend.epsilon()).sqrt()).mul(-this.learningRate).add(r);r.assign(t)})}),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&ja(this.accumulatedGrads.map(e=>e.variable))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e);this.accumulatedGrads=e.map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}Jl.className="Adagrad",Pa(Jl);class Zl extends Yl{constructor(e,t,n,r=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],Ha(()=>{this.accBeta1=Xe(t).variable(),this.accBeta2=Xe(n).variable()}),null==r&&(this.epsilon=Ae.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);Ha(()=>{const n=Je(1,this.accBeta1),r=Je(1,this.accBeta2);t.forEach((t,s)=>{const a=Ae.registeredVariables[t];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:t+"/m",variable:Ha(()=>at(a).variable(!1))}),null==this.accumulatedSecondMoment[s]&&(this.accumulatedSecondMoment[s]={originalName:t+"/v",variable:Ha(()=>at(a).variable(!1))});const o=Array.isArray(e)?e[s].tensor:e[t];if(null==o)return;const i=this.accumulatedFirstMoment[s].variable,u=this.accumulatedSecondMoment[s].variable,l=i.mul(this.beta1).add(o.mul(1-this.beta1)),c=u.mul(this.beta2).add(o.square().mul(1-this.beta2)),p=l.div(n),d=c.div(r);i.assign(l),u.assign(c);const h=p.div(d.sqrt().add(this.epsilon)).mul(-this.learningRate).add(a);a.assign(h)}),this.accBeta1.assign(this.accBeta1.mul(this.beta1)),this.accBeta2.assign(this.accBeta2.mul(this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&ja(this.accumulatedFirstMoment.map(e=>e.variable)),null!=this.accumulatedSecondMoment&&ja(this.accumulatedSecondMoment.map(e=>e.variable))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e),Ha(()=>{this.accBeta1.assign(fr(this.beta1,this.iterations_+1)),this.accBeta2.assign(fr(this.beta2,this.iterations_+1))});const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.accumulatedSecondMoment=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}Zl.className="Adam",Pa(Zl);class ec extends Yl{constructor(e,t,n,r=null,s=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.decay=s,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],Ha(()=>{this.iteration=Xe(0).variable(),this.accBeta1=Xe(t).variable()}),null==r&&(this.epsilon=Ae.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);Ha(()=>{const n=Je(1,this.accBeta1),r=He(-this.learningRate,this.iteration.mul(this.decay).add(1));t.forEach((t,s)=>{const a=Ae.registeredVariables[t];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:t+"/m",variable:at(a).variable(!1)}),null==this.accumulatedWeightedInfNorm[s]&&(this.accumulatedWeightedInfNorm[s]={originalName:t+"/v",variable:at(a).variable(!1)});const o=Array.isArray(e)?e[s].tensor:e[t];if(null==o)return;const i=this.accumulatedFirstMoment[s].variable,u=this.accumulatedWeightedInfNorm[s].variable,l=i.mul(this.beta1).add(o.mul(1-this.beta1)),c=u.mul(this.beta2),p=o.abs(),d=c.maximum(p);i.assign(l),u.assign(d);const h=r.div(n).mul(l.div(d.add(this.epsilon))).add(a);a.assign(h)}),this.iteration.assign(this.iteration.add(1)),this.accBeta1.assign(this.accBeta1.mul(this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&ja(this.accumulatedFirstMoment.map(e=>e.variable)),null!=this.accumulatedWeightedInfNorm&&ja(this.accumulatedWeightedInfNorm.map(e=>e.variable))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}ec.className="Adamax",Pa(ec);class tc extends Yl{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const s=Ae.registeredVariables[t];Ha(()=>{const e=this.c.mul(r).add(s);s.assign(e)})}),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=Ka(Xe(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}tc.className="SGD",Pa(tc);class nc extends tc{constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=Xe(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const r=Ae.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:t+"/momentum",variable:Ha(()=>at(r).variable(e))}}const s=this.accumulations[n].variable,a=Array.isArray(e)?e[n].tensor:e[t];null!=a&&Ha(()=>{let e;const t=this.m.mul(s).add(a);e=this.useNesterov?this.c.mul(a.add(t.mul(this.m))).add(r):this.c.mul(t).add(r),s.assign(t),r.assign(e)})}),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&ja(this.accumulations.map(e=>e.variable))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e);this.accumulations=e.map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}nc.className="Momentum",Pa(nc);class rc extends Yl{constructor(e,t=.9,n=0,r=null,s=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=s,null==r&&(this.epsilon=Ae.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const r=Ae.registeredVariables[t];null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:t+"/rms",variable:Ha(()=>at(r).variable(!1))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:t+"/momentum",variable:Ha(()=>at(r).variable(!1))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:t+"/mg",variable:Ha(()=>at(r).variable(!1))});const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const a=this.accumulatedMeanSquares[n].variable,o=this.accumulatedMoments[n].variable;Ha(()=>{const e=a.mul(this.decay).add(s.square().mul(1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,i=t.mul(this.decay).add(s.mul(1-this.decay)),u=o.mul(this.momentum).add(s.mul(this.learningRate).div(e.sub(i.square().add(this.epsilon)).sqrt()));a.assign(e),t.assign(i),o.assign(u);const l=r.sub(u);r.assign(l)}else{const e=a.mul(this.decay).add(s.square().mul(1-this.decay)),t=o.mul(this.momentum).add(s.mul(this.learningRate).div(e.add(this.epsilon).sqrt()));a.assign(e),o.assign(t);const n=r.sub(t);r.assign(n)}})}),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&ja(this.accumulatedMeanSquares.map(e=>e.variable)),null!=this.accumulatedMeanGrads&&this.centered&&ja(this.accumulatedMeanGrads.map(e=>e.variable)),null!=this.accumulatedMoments&&ja(this.accumulatedMoments.map(e=>e.variable))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2;this.accumulatedMeanSquares=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.accumulatedMoments=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}rc.className="RMSProp",Pa(rc);class sc{static sgd(e){return new tc(e)}static momentum(e,t,n=!1){return new nc(e,t,n)}static rmsprop(e,t=.9,n=0,r=null,s=!1){return new rc(e,t,n,r,s)}static adam(e=.001,t=.9,n=.999,r=null){return new Zl(e,t,n,r)}static adadelta(e=.001,t=.95,n=null){return new Ql(e,t,n)}static adamax(e=.002,t=.9,n=.999,r=null,s=0){return new ec(e,t,n,r,s)}static adagrad(e,t=.1){return new Jl(e,t)}}const ac={sgd:sc.sgd,momentum:sc.momentum,adadelta:sc.adadelta,adagrad:sc.adagrad,rmsprop:sc.rmsprop,adamax:sc.adamax,adam:sc.adam},oc="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();function ic(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}function uc(e,t,n,r=!0){let s=[];if(r)s=s.concat(t.slice(0)),s.push(e[0]/n),s=s.concat(e.slice(1));else{s=s.concat(e[0]);const n=t.length;for(let r=0;r<n;++r)s=s.concat([e[r+1]/t[r],t[r]]);s=s.concat(e.slice(n+1))}return s}function lc(e,t,n=!0){const r=[];if(n){r.push(t);for(let n=t+1;n<e;++n)n<=2*t?(r.push(n),r.push(n-(t+1))):r.push(n)}else{const n=[],s=[];for(let r=1;r<e;++r)r>=2*t+1||r%2==1?s.push(r):n.push(r);r.push(...n),r.push(0),r.push(...s)}return r}function cc(e,t,n,r=!0){const s=[];r?s.push(e[0]/n):s.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?r?s.push(t[n-1]*e[n]):s.push(e[n]/t[n-1]):s.push(e[n]);return s}function pc(e,t){const n=[0];for(let r=0;r<t;++r)n.push(e[r][0]);return n}function dc(e,t,n){const r=e.slice(0,1);for(let s=0;s<n;++s)r.push(e[s+1]-t[s][0]-t[s][1]);return r}function hc(...e){s().getBool("IS_TEST")||console.warn(...e)}function fc(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let r=0;r<n.length;r+=2)n[r]=e[r/2],n[r+1]=t[r/2];return n}function mc(e,t,n){if("complex64"===t){if("complex64"===e.dtype)return e.clone();const t=lr(e.shape),r=e.toFloat(),s=n.complex(r,t);return t.dispose(),r.dispose(),s}if(!P(e.dtype,t))return Ae.makeTensorFromDataId(e.dataId,e.shape,t);if("complex64"===e.dtype){const r=n.real(e),s=r.cast(t);return r.dispose(),s}if("int32"===t)return n.int(e);if("bool"===t){const t=Xe(0,e.dtype),r=n.notEqual(e,t);return t.dispose(),r}throw new Error(`Error in Cast: failed to cast ${e.dtype} to ${t}`)}function gc(e,t){return Ae.makeTensorFromDataId(e.dataId,t,e.dtype)}function yc(e,t,n){const r=(t-e)/(n-1),s=J(n,"float32");s[0]=e;for(let e=1;e<s.length;e++)s[e]=s[e-1]+r;return Hi(s,"float32")}var xc=Object.freeze({__proto__:null,segment_util:Ss,castTensor:mc,reshapeTensor:gc,linspaceImpl:yc,upcastType:Ne,axesAreInnerMostDims:dt,combineLocations:ht,computeOutAndReduceShapes:ft,expandShapeToKeepDim:mt,assertAxesAreInnerMostDims:gt,getAxesPermutation:yt,getUndoAxesPermutation:xt,getInnerMostAxes:bt,getBroadcastDims:function(e,t){const n=e.length,r=[];for(let s=0;s<n;s++){const a=n-1-s,o=e[a]||1;(t[t.length-1-s]||1)>1&&1===o&&r.unshift(a)}return r},getReductionAxes:tt,assertAndGetBroadcastShape:nt,assertParamsConsistent:as,computeOutShape:os,computeDilation2DInfo:function(e,t,n,r,s="NHWC",a){return kt(e,[...t,e[3]],n,a,r,null,null,Ot(s))},computePool2DInfo:$t,computePool3DInfo:Et,computeConv2DInfo:kt,computeConv3DInfo:St,computeDefaultPad:Tt,tupleValuesAreOne:Dt,eitherStridesOrDilationsAreOne:Ft,convertConv2DDataFormat:Ot,getFusedDyActivation:Ju,getFusedBiasGradient:Zu,applyActivation:el,shouldFuse:tl,PARALLELIZE_THRESHOLD:30,computeOptimalWindowSize:Es,getImageCenter:ic,getReshaped:uc,getPermuted:lc,getReshapedPermuted:cc,getSliceBeginCoords:pc,getSliceSize:dc,prepareAndValidate:Ia,validateUpdateShape:_a,validateInput:Da,calculateShapes:Fa,SELU_SCALEALPHA:1.7580993408473768,SELU_SCALE:1.0507009873554805,ERF_P:.3275911,ERF_A1:.254829592,ERF_A2:-.284496736,ERF_A3:1.421413741,ERF_A4:-1.453152027,ERF_A5:1.061405429,warn:hc,log:function(...e){s().getBool("IS_TEST")||console.log(...e)},mergeRealAndImagArrays:fc,splitRealAndImagArrays:function(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let r=0;r<e.length;r+=2)t[r/2]=e[r],n[r/2]=e[r+1];return{real:t,imag:n}},complexWithEvenIndex:function(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}},complexWithOddIndex:function(e){const t=Math.floor(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}},getComplexWithIndex:function(e,t){return{real:e[2*t],imag:e[2*t+1]}},assignToTypedArray:function(e,t,n,r){e[2*r]=t,e[2*r+1]=n},exponents:function(e,t){const n=new Float32Array(e/2),r=new Float32Array(e/2);for(let s=0;s<Math.ceil(e/2);s++){const a=(t?2:-2)*Math.PI*(s/e);n[s]=Math.cos(a),r[s]=Math.sin(a)}return{real:n,imag:r}},exponent:function(e,t,n){const r=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(r),imag:Math.sin(r)}},prepareSplitSize:Jt});function bc(e,t,n){const r=new Array(e.rank).fill(0),s=e.shape.slice();return t.map(t=>{const a=[...s];a[n]=t;const o=e.slice(r,a);return r[n]+=t,o})}function vc(e,t){const n=new Array(e.rank);for(let r=0;r<n.length;r++)n[r]=e.shape[r]*t[r];const r=vo(n,e.dtype);for(let t=0;t<r.values.length;++t){const n=r.indexToLoc(t),s=new Array(e.rank);for(let t=0;t<s.length;t++)s[t]=n[t]%e.shape[t];const a=e.locToIndex(s);r.values[t]=e.values[a]}return r.toTensor()}function wc(e,t,n,r,s){const a=t[t.length-1],[o,i]=[e.length/a,a],u=F(n,o*r),l=F("int32",o*r);for(let t=0;t<o;t++){const n=t*i,s=e.subarray(n,n+i),a=[];for(let e=0;e<s.length;e++)a.push({value:s[e],index:e});a.sort((e,t)=>t.value-e.value);const o=t*r,c=u.subarray(o,o+r),p=l.subarray(o,o+r);for(let e=0;e<r;e++)c[e]=a[e].value,p[e]=a[e].index}const c=t.slice();return c[c.length-1]=r,[is(u,c,n),is(l,c,"int32")]}var Cc=Object.freeze({__proto__:null,nonMaxSuppressionV3Impl:gl,nonMaxSuppressionV4Impl:yl,nonMaxSuppressionV5Impl:xl,split:bc,tile:vc,topkImpl:wc,whereImpl:Eu});class Nc{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class $c{time(e){return Ec("time")}read(e){return Ec("read")}readSync(e){return Ec("readSync")}numDataIds(){return Ec("numDataIds")}disposeData(e){return Ec("disposeData")}write(e,t,n){return Ec("write")}move(e,t,n,r){return Ec("move")}memory(){return Ec("memory")}floatPrecision(){return Ec("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}batchMatMul(e,t,n,r){return Ec("batchMatMul")}fusedBatchMatMul({a:e,b:t,transposeA:n,transposeB:r,bias:s,activation:a,preluActivationWeights:o}){return Ec("fusedBatchMatMul")}slice(e,t,n){return Ec("slice")}stridedSlice(e,t,n,r){return Ec("stridedSlice")}unstack(e,t){return Ec("unstack")}reverse(e,t){return Ec("reverse")}concat(e,t){return Ec("concat")}neg(e){return Ec("neg")}add(e,t){return Ec("add")}addN(e){return Ec("addN")}subtract(e,t){return Ec("subtract")}multiply(e,t){return Ec("multiply")}realDivide(e,t){return Ec("realDivide")}floorDiv(e,t){return Ec("floorDiv")}sum(e,t){return Ec("sum")}prod(e,t){return Ec("prod")}unsortedSegmentSum(e,t,n){return Ec("unsortedSegmentSum")}argMin(e,t){return Ec("argMin")}argMax(e,t){return Ec("argMax")}equal(e,t){return Ec("equal")}notEqual(e,t){return Ec("notEqual")}less(e,t){return Ec("less")}lessEqual(e,t){return Ec("lessEqual")}greater(e,t){return Ec("greater")}greaterEqual(e,t){return Ec("greaterEqual")}logicalNot(e){return Ec("logicalNot")}logicalAnd(e,t){return Ec("logicalAnd")}logicalOr(e,t){return Ec("logicalOr")}where(e){return Ec("where")}select(e,t,n){return Ec("select")}topk(e,t,n){return Ec("topk")}min(e,t){return Ec("min")}minimum(e,t){return Ec("minimum")}mod(e,t){return Ec("mod")}max(e,t){return Ec("max")}maximum(e,t){return Ec("maximum")}all(e,t){return Ec("all")}any(e,t){return Ec("any")}squaredDifference(e,t){return Ec("squaredDifference")}ceil(e){return Ec("ceil")}floor(e){return Ec("floor")}round(e){return Ec("round")}sign(e){return Ec("sign")}isNaN(e){return Ec("isNaN")}isInf(e){return Ec("isInf")}isFinite(e){return Ec("isFinite")}pow(e,t){return Ec("pow")}exp(e){return Ec("exp")}expm1(e){return Ec("expm1")}softmax(e,t){return Ec("softmax")}log(e){return Ec("log")}log1p(e){return Ec("log1p")}sqrt(e){return Ec("sqrt")}rsqrt(e){return Ec("rsqrt")}square(e){return Ec("square")}reciprocal(e){return Ec("reciprocal")}relu(e){return Ec("relu")}relu6(e){return Ec("relu6")}prelu(e,t){return Ec("prelu")}elu(e){return Ec("elu")}eluDer(e,t){return Ec("eluDer")}selu(e){return Ec("selu")}int(e){return Ec("int")}clip(e,t,n){return Ec("clip")}abs(e){return Ec("abs")}complexAbs(e){return Ec("complexAbs")}sigmoid(e){return Ec("sigmoid")}softplus(e){return Ec("softplus")}sin(e){return Ec("sin")}cos(e){return Ec("cos")}tan(e){return Ec("tan")}asin(e){return Ec("asin")}acos(e){return Ec("acos")}atan(e){return Ec("atan")}atan2(e,t){return Ec("atan2")}sinh(e){return Ec("sinh")}cosh(e){return Ec("cosh")}tanh(e){return Ec("tanh")}asinh(e){return Ec("asinh")}acosh(e){return Ec("acosh")}atanh(e){return Ec("atanh")}erf(e){return Ec("erf")}step(e,t){return Ec("step")}fusedConv2d({input:e,filter:t,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){return Ec("fusedConv2d")}conv2d(e,t,n){return Ec("conv2d")}conv2dDerInput(e,t,n){return Ec("conv2dDerInput")}conv2dDerFilter(e,t,n){return Ec("conv2dDerFilter")}fusedDepthwiseConv2D({input:e,filter:t,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){return Ec("fusedDepthwiseConv2D")}depthwiseConv2D(e,t,n){return Ec("depthwiseConv2D")}depthwiseConv2DDerInput(e,t,n){return Ec("depthwiseConv2DDerInput")}depthwiseConv2DDerFilter(e,t,n){return Ec("depthwiseConv2DDerFilter")}conv3d(e,t,n){return Ec("conv3d")}conv3dDerInput(e,t,n){return Ec("conv3dDerInput")}conv3dDerFilter(e,t,n){return Ec("conv3dDerFilter")}maxPool(e,t){return Ec("maxPool")}maxPoolBackprop(e,t,n,r){return Ec("maxPoolBackprop")}avgPool(e,t){return Ec("avgPool")}avgPoolBackprop(e,t,n){return Ec("avgPoolBackprop")}avgPool3d(e,t){return Ec("avgPool3d")}avgPool3dBackprop(e,t,n){return Ec("avgPool3dBackprop")}maxPool3d(e,t){return Ec("maxPool3d")}maxPool3dBackprop(e,t,n,r){return Ec("maxPool3dBackprop")}reshape(e,t){return Ec("reshape")}cast(e,t){return Ec("cast")}tile(e,t){return Ec("tile")}pad(e,t,n){return Ec("pad")}transpose(e,t){return Ec("transpose")}gather(e,t,n){return Ec("gather")}gatherND(e,t){return Ec("gatherND")}scatterND(e,t,n){return Ec("scatterND")}batchToSpaceND(e,t,n){return Ec("batchToSpaceND")}spaceToBatchND(e,t,n){return Ec("spaceToBatchND")}resizeBilinear(e,t,n,r){return Ec("resizeBilinear")}resizeBilinearBackprop(e,t,n){return Ec("resizeBilinearBackprop")}resizeNearestNeighbor(e,t,n,r){return Ec("resizeNearestNeighbor")}resizeNearestNeighborBackprop(e,t,n){return Ec("resizeNearestNeighborBackprop")}batchNorm(e,t,n,r,s,a){return Ec("batchNorm")}localResponseNormalization4D(e,t,n,r,s){return Ec("localResponseNormalization4D")}LRNGrad(e,t,n,r,s,a,o){return Ec("LRNGrad")}multinomial(e,t,n,r){return Ec("multinomial")}oneHot(e,t,n,r){return Ec("oneHot")}cumsum(e,t,n,r){return Ec("cumsum")}nonMaxSuppression(e,t,n,r,s){return Ec("nonMaxSuppression")}fft(e){return Ec("fft")}ifft(e){return Ec("ifft")}complex(e,t){return Ec("complex")}real(e){return Ec("real")}imag(e){return Ec("imag")}cropAndResize(e,t,n,r,s,a){return Ec("cropAndResize")}depthToSpace(e,t,n){return Ec("depthToSpace")}split(e,t,n){return Ec("split")}sparseToDense(e,t,n,r){return Ec("sparseToDense")}diag(e){return Ec("diag")}fill(e,t,n){return Ec("fill")}onesLike(e){return Ec("onesLike")}zerosLike(e){return Ec("zerosLike")}linspace(e,t,n){return Ec("linspace")}dispose(){return Ec("dispose")}}function Ec(e){throw new Error(`'${e}' not yet implemented or not found in the registry. Did you forget to import the kernel?`)}me.prototype.abs=function(){return this.throwIfDisposed(),Ya(this)},me.prototype.acos=function(){return this.throwIfDisposed(),Qa(this)},me.prototype.acosh=function(){return this.throwIfDisposed(),Ja(this)},me.prototype.addStrict=function(e){return this.throwIfDisposed(),Fu(this,e)},me.prototype.add=function(e){return this.throwIfDisposed(),lt(this,e)},me.prototype.all=function(e,t){return this.throwIfDisposed(),eo(this,e,t)},me.prototype.any=function(e,t){return this.throwIfDisposed(),to(this,e,t)},me.prototype.argMax=function(e){return this.throwIfDisposed(),no(this,e)},me.prototype.argMin=function(e){return this.throwIfDisposed(),ro(this,e)},me.prototype.asScalar=function(){return this.throwIfDisposed(),w(1===this.size,()=>"The array must have only 1 element."),pt(this,[])},me.prototype.asType=function(e){return this.throwIfDisposed(),We(this,e)},me.prototype.as1D=function(){return this.throwIfDisposed(),pt(this,[this.size])},me.prototype.as2D=function(e,t){return this.throwIfDisposed(),pt(this,[e,t])},me.prototype.as3D=function(e,t,n){return this.throwIfDisposed(),pt(this,[e,t,n])},me.prototype.as4D=function(e,t,n,r){return this.throwIfDisposed(),pt(this,[e,t,n,r])},me.prototype.as5D=function(e,t,n,r,s){return this.throwIfDisposed(),pt(this,[e,t,n,r,s])},me.prototype.asin=function(){return this.throwIfDisposed(),so(this)},me.prototype.asinh=function(){return this.throwIfDisposed(),ao(this)},me.prototype.atan=function(){return this.throwIfDisposed(),oo(this)},me.prototype.atan2=function(e){return this.throwIfDisposed(),io(this,e)},me.prototype.atanh=function(){return this.throwIfDisposed(),uo(this)},me.prototype.avgPool=function(e,t,n,r){return this.throwIfDisposed(),lo(this,e,t,n,r)},me.prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),rs(this,e,t)},me.prototype.batchNorm=function(e,t,n,r,s){return this.throwIfDisposed(),mo(this,e,t,n,r,s)},me.prototype.broadcastTo=function(e){return this.throwIfDisposed(),bo(this,e)},me.prototype.cast=function(e){return this.throwIfDisposed(),We(this,e)},me.prototype.ceil=function(){return this.throwIfDisposed(),wo(this)},me.prototype.clipByValue=function(e,t){return this.throwIfDisposed(),Co(this,e,t)},me.prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof me&&(e=[e]),us([this,...e],t)},me.prototype.conv1d=function(e,t,n,r,s,a){return this.throwIfDisposed(),So(this,e,t,n,r,s,a)},me.prototype.conv2dTranspose=function(e,t,n,r,s){return this.throwIfDisposed(),To(this,e,t,n,r,s)},me.prototype.conv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),sn(this,e,t,n,r,s,a)},me.prototype.cos=function(){return this.throwIfDisposed(),Dr(this)},me.prototype.cosh=function(){return this.throwIfDisposed(),Or(this)},me.prototype.cumsum=function(e,t,n){return this.throwIfDisposed(),mn(this,e,t,n)},me.prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),Ao(this,e,t)},me.prototype.depthwiseConv2D=function(e,t,n,r,s,a){return Ga("depthwiseConv2D is deprecated, use depthwiseConv2d instead"),this.throwIfDisposed(),_o(this,e,t,n,r,s,a)},me.prototype.depthwiseConv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),_o(this,e,t,n,r,s,a)},me.prototype.dilation2d=function(e,t,n,r,s){return this.throwIfDisposed(),Fo(this,e,t,n,r,s)},me.prototype.divNoNan=function(e){return this.throwIfDisposed(),Oo(this,e)},me.prototype.divStrict=function(e){return this.throwIfDisposed(),Ou(this,e)},me.prototype.div=function(e){return this.throwIfDisposed(),He(this,e)},me.prototype.dot=function(e){return this.throwIfDisposed(),Mo(this,e)},me.prototype.elu=function(){return this.throwIfDisposed(),Bo(this)},me.prototype.equalStrict=function(e){return this.throwIfDisposed(),Tu(this,e)},me.prototype.equal=function(e){return this.throwIfDisposed(),Hn(this,e)},me.prototype.erf=function(){return this.throwIfDisposed(),Po(this)},me.prototype.exp=function(){return this.throwIfDisposed(),Nn(this)},me.prototype.expandDims=function(e){return this.throwIfDisposed(),Cs(this,e)},me.prototype.expm1=function(){return this.throwIfDisposed(),Lo(this)},me.prototype.fft=function(){return this.throwIfDisposed(),Wo(this)},me.prototype.flatten=function(){return this.throwIfDisposed(),pt(this,[this.size])},me.prototype.floor=function(){return this.throwIfDisposed(),sr(this)},me.prototype.floorDiv=function(e){return this.throwIfDisposed(),qe(this,e)},me.prototype.gather=function(e,t){return this.throwIfDisposed(),Ts(this,e,t)},me.prototype.greaterEqualStrict=function(e){return this.throwIfDisposed(),Ru(this,e)},me.prototype.greaterEqual=function(e){return this.throwIfDisposed(),jt(this,e)},me.prototype.greaterStrict=function(e){return this.throwIfDisposed(),Iu(this,e)},me.prototype.greater=function(e){return this.throwIfDisposed(),nr(this,e)},me.prototype.ifft=function(){return this.throwIfDisposed(),Uo(this)},me.prototype.irfft=function(){return this.throwIfDisposed(),Ho(this)},me.prototype.isFinite=function(){return this.throwIfDisposed(),jo(this)},me.prototype.isInf=function(){return this.throwIfDisposed(),Ko(this)},me.prototype.isNaN=function(){return this.throwIfDisposed(),Xo(this)},me.prototype.leakyRelu=function(e){return this.throwIfDisposed(),Yo(this,e)},me.prototype.lessEqualStrict=function(e){return this.throwIfDisposed(),Au(this,e)},me.prototype.lessEqual=function(e){return this.throwIfDisposed(),Kt(this,e)},me.prototype.lessStrict=function(e){return this.throwIfDisposed(),_u(this,e)},me.prototype.less=function(e){return this.throwIfDisposed(),Xn(this,e)},me.prototype.localResponseNormalization=function(e,t,n,r){return this.throwIfDisposed(),Jo(this,e,t,n,r)},me.prototype.logSigmoid=function(){return this.throwIfDisposed(),ri(this)},me.prototype.logSoftmax=function(e){return this.throwIfDisposed(),ai(this,e)},me.prototype.logSumExp=function(e,t){return this.throwIfDisposed(),oi(this,e,t)},me.prototype.log=function(){return this.throwIfDisposed(),hr(this)},me.prototype.log1p=function(){return this.throwIfDisposed(),Zo(this)},me.prototype.logicalAnd=function(e){return this.throwIfDisposed(),Xt(this,e)},me.prototype.logicalNot=function(){return this.throwIfDisposed(),Tr(this)},me.prototype.logicalOr=function(e){return this.throwIfDisposed(),ii(this,e)},me.prototype.logicalXor=function(e){return this.throwIfDisposed(),ui(this,e)},me.prototype.matMul=function(e,t,n){return this.throwIfDisposed(),Vt(this,e,t,n)},me.prototype.maxPool=function(e,t,n,r){return this.throwIfDisposed(),li(this,e,t,n,r)},me.prototype.max=function(e,t){return this.throwIfDisposed(),si(this,e,t)},me.prototype.maximumStrict=function(e){return this.throwIfDisposed(),Mu(this,e)},me.prototype.maximum=function(e){return this.throwIfDisposed(),Rs(this,e)},me.prototype.mean=function(e,t){return this.throwIfDisposed(),di(this,e,t)},me.prototype.min=function(e,t){return this.throwIfDisposed(),hi(this,e,t)},me.prototype.minimumStrict=function(e){return this.throwIfDisposed(),Bu(this,e)},me.prototype.minimum=function(e){return this.throwIfDisposed(),fi(this,e)},me.prototype.modStrict=function(e){return this.throwIfDisposed(),Pu(this,e)},me.prototype.mod=function(e){return this.throwIfDisposed(),mi(this,e)},me.prototype.mulStrict=function(e){return this.throwIfDisposed(),Lu(this,e)},me.prototype.mul=function(e){return this.throwIfDisposed(),ze(this,e)},me.prototype.neg=function(){return this.throwIfDisposed(),je(this)},me.prototype.norm=function(e,t,n){return this.throwIfDisposed(),Uu(this,e,t,n)},me.prototype.notEqualStrict=function(e){return this.throwIfDisposed(),Du(this,e)},me.prototype.notEqual=function(e){return this.throwIfDisposed(),bi(this,e)},me.prototype.oneHot=function(e,t=1,n=0){return this.throwIfDisposed(),Na(this,e,t,n)},me.prototype.onesLike=function(){return this.throwIfDisposed(),vi(this)},me.prototype.pad=function(e,t){return this.throwIfDisposed(),Br(this,e,t)},me.prototype.pool=function(e,t,n,r,s){return this.throwIfDisposed(),ki(this,e,t,n,r,s)},me.prototype.powStrict=function(e){return this.throwIfDisposed(),Vu(this,e)},me.prototype.pow=function(e){return this.throwIfDisposed(),fr(this,e)},me.prototype.prelu=function(e){return this.throwIfDisposed(),Si(this,e)},me.prototype.prod=function(e,t){return this.throwIfDisposed(),Ri(this,e,t)},me.prototype.reciprocal=function(){return this.throwIfDisposed(),Ki(this)},me.prototype.relu=function(){return this.throwIfDisposed(),Xi(this)},me.prototype.relu6=function(){return this.throwIfDisposed(),Yi(this)},me.prototype.reshapeAs=function(e){return this.throwIfDisposed(),pt(this,e.shape)},me.prototype.reshape=function(e){return this.throwIfDisposed(),pt(this,e)},me.prototype.resizeBilinear=function(e,t){return this.throwIfDisposed(),Tl(this,e,t)},me.prototype.resizeNearestNeighbor=function(e,t){return this.throwIfDisposed(),Rl(this,e,t)},me.prototype.reverse=function(e){return this.throwIfDisposed(),$r(this,e)},me.prototype.rfft=function(){return this.throwIfDisposed(),tu(this)},me.prototype.round=function(){return this.throwIfDisposed(),nu(this)},me.prototype.rsqrt=function(){return this.throwIfDisposed(),Rn(this)},me.prototype.selu=function(){return this.throwIfDisposed(),ru(this)},me.prototype.separableConv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),su(this,e,t,n,r,s,a)},me.prototype.sigmoid=function(){return this.throwIfDisposed(),ts(this)},me.prototype.sign=function(){return this.throwIfDisposed(),ou(this)},me.prototype.sin=function(){return this.throwIfDisposed(),cn(this)},me.prototype.sinh=function(){return this.throwIfDisposed(),dn(this)},me.prototype.slice=function(e,t){return this.throwIfDisposed(),bs(this,e,t)},me.prototype.softmax=function(e){return this.throwIfDisposed(),pu(this,e)},me.prototype.softplus=function(){return this.throwIfDisposed(),du(this)},me.prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),zt(this,e,t)},me.prototype.split=function(e,t){return this.throwIfDisposed(),Zt(this,e,t)},me.prototype.sqrt=function(){return this.throwIfDisposed(),Ye(this)},me.prototype.square=function(){return this.throwIfDisposed(),Qe(this)},me.prototype.squaredDifference=function(e){return this.throwIfDisposed(),hu(this,e)},me.prototype.squaredDifferenceStrict=function(e){return this.throwIfDisposed(),Wu(this,e)},me.prototype.squeeze=function(e){return this.throwIfDisposed(),fu(this,e)},me.prototype.stack=function(e,t){this.throwIfDisposed();const n=e instanceof me?[this,e]:[this,...e];return Ns(n,t)},me.prototype.step=function(e){return this.throwIfDisposed(),Ue(this,e)},me.prototype.stridedSlice=function(e,t,n,r,s,a,o,i){return this.throwIfDisposed(),mu(this,e,t,n,r,s,a,o,i)},me.prototype.subStrict=function(e){return this.throwIfDisposed(),zu(this,e)},me.prototype.sub=function(e){return this.throwIfDisposed(),Je(this,e)},me.prototype.sum=function(e,t){return this.throwIfDisposed(),vt(this,e,t)},me.prototype.tan=function(){return this.throwIfDisposed(),gu(this)},me.prototype.tanh=function(){return this.throwIfDisposed(),po(this)},me.prototype.tile=function(e){return this.throwIfDisposed(),In(this,e)},me.prototype.toBool=function(){return this.throwIfDisposed(),We(this,"bool")},me.prototype.toFloat=function(){return this.throwIfDisposed(),We(this,"float32")},me.prototype.toInt=function(){return this.throwIfDisposed(),We(this,"int32")},me.prototype.topk=function(e,t){return this.throwIfDisposed(),wu(this,e,t)},me.prototype.transpose=function(e){return this.throwIfDisposed(),fn(this,e)},me.prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),_n(this,e,t)},me.prototype.unstack=function(e){return this.throwIfDisposed(),Nu(this,e)},me.prototype.where=function(e,t){return this.throwIfDisposed(),Yt(e,this,t)},me.prototype.zerosLike=function(){return this.throwIfDisposed(),at(this)},fe=Xl;var kc=Object.freeze({__proto__:null,version_core:"2.1.0",browser:Ra,io:Ca,math:Ea,serialization:La,test_util:Ua,util:ae,backend_util:xc,tensor_util:Te,slice_util:Jr,gather_util:Aa,scatter_util:Oa,device_util:Fe,kernel_impls:Cc,AdadeltaOptimizer:Ql,AdagradOptimizer:Jl,AdamOptimizer:Zl,AdamaxOptimizer:ec,MomentumOptimizer:nc,Optimizer:Yl,RMSPropOptimizer:rc,SGDOptimizer:tc,Tensor:me,TensorBuffer:de,Variable:ge,get Rank(){return ye},sumOutType:$e,upcastType:Ne,get Reduction(){return Fl},customGrad:ti,grad:function(e){return w(H(e),()=>"The f passed in grad(f) must be a function"),(t,n)=>{const r=Pe(t,"x","tf.grad",null),s=null!=n?Pe(n,"dy","tf.grad"):null;return Ae.tidy(()=>{const{value:t,grads:n}=Ae.gradients(()=>e(r),[r],s);return null!=s&&C(t.shape,s.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),ni(n),n[0]})}},grads:function(e){return w(H(e),()=>"The f passed in grads(f) must be a function"),(t,n)=>{w(Array.isArray(t),()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s");const r=Le(t,"args","tf.grads",null),s=null!=n?Pe(n,"dy","tf.grads"):null;return Ae.tidy(()=>{const{value:t,grads:n}=Ae.gradients(()=>e(...r),r,s);return null!=s&&C(t.shape,s.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),ni(n),n})}},valueAndGrad:function(e){return w(H(e),()=>"The f passed in valueAndGrad(f) must be a function"),(t,n)=>{w(t instanceof me,()=>"The x passed in valueAndGrad(f)(x) must be a tensor"),w(null==n||n instanceof me,()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor");const{grads:r,value:s}=Ae.gradients(()=>e(t),[t],n);return ni(r),{grad:r[0],value:s}}},valueAndGrads:function(e){return w(H(e),()=>"The f passed in valueAndGrads(f) must be a function"),(t,n)=>{w(Array.isArray(t)&&t.every(e=>e instanceof me),()=>"The args passed in valueAndGrads(f)(args) must be array of tensors"),w(null==n||n instanceof me,()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor");const r=Ae.gradients(()=>e(...t),t,n);return null!=n&&C(r.value.shape,n.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),ni(r.grads),r}},variableGrads:ei,Environment:r,env:s,get ENV(){return o},nextFrame:function(){return new Promise(e=>oc(()=>e()))},KernelBackend:$c,DataStorage:Nc,abs:Ya,acos:Qa,acosh:Ja,add:lt,addN:Za,all:eo,any:to,argMax:no,argMin:ro,asin:so,asinh:ao,atan:oo,atan2:io,atanh:uo,avgPool:lo,avgPool3d:co,basicLSTMCell:ho,batchToSpaceND:rs,batchNorm:mo,batchNorm2d:go,batchNorm3d:yo,batchNorm4d:xo,broadcastTo:bo,buffer:vo,cast:We,ceil:wo,clipByValue:Co,clone:Nr,complex:ur,concat:us,concat1d:No,concat2d:$o,concat3d:Eo,concat4d:ko,conv1d:So,conv2d:sn,conv2dTranspose:To,conv3d:Ro,conv3dTranspose:Io,cos:Dr,cosh:Or,cumsum:mn,depthToSpace:Ao,depthwiseConv2d:_o,diag:Do,dilation2d:Fo,div:He,divNoNan:Oo,dot:Mo,elu:Bo,equal:Hn,erf:Po,exp:Nn,expandDims:Cs,expm1:Lo,eye:Vo,fft:Wo,fill:zo,floor:sr,floorDiv:qe,gather:Ts,greater:nr,greaterEqual:jt,ifft:Uo,imag:Go,irfft:Ho,isFinite:jo,isInf:Ko,isNaN:Xo,leakyRelu:Yo,less:Xn,lessEqual:Kt,linspace:Qo,localResponseNormalization:Jo,log:hr,log1p:Zo,logSigmoid:ri,logSoftmax:ai,logSumExp:oi,logicalAnd:Xt,logicalNot:Tr,logicalOr:ii,logicalXor:ui,matMul:Vt,max:si,maxPool:li,maxPool3d:ci,maxPoolWithArgmax:pi,maximum:Rs,mean:di,min:hi,minimum:fi,mod:mi,moments:gi,mul:ze,multiRNNCell:yi,multinomial:xi,neg:je,notEqual:bi,oneHot:Na,ones:ms,onesLike:vi,outerProduct:wi,pad:Br,pad1d:Ci,pad2d:Ni,pad3d:$i,pad4d:Ei,pool:ki,pow:fr,prelu:Si,print:Ti,prod:Ri,rand:Ii,randomGamma:Ui,randomNormal:Gi,randomUniform:qi,range:ji,real:qo,reciprocal:Ki,relu:Xi,relu6:Yi,reshape:pt,reverse:$r,reverse1d:Qi,reverse2d:Ji,reverse3d:Zi,reverse4d:eu,rfft:tu,round:nu,rsqrt:Rn,scalar:Xe,selu:ru,separableConv2d:su,setdiff1dAsync:au,sigmoid:ts,sign:ou,sin:cn,sinh:dn,slice:bs,slice1d:iu,slice2d:uu,slice3d:lu,slice4d:cu,softmax:pu,softplus:du,spaceToBatchND:zt,split:Zt,sqrt:Ye,square:Qe,squaredDifference:hu,squeeze:fu,stack:Ns,step:Ue,stridedSlice:mu,sub:Je,sum:vt,tan:gu,tanh:po,tensor:is,tensor1d:Hi,tensor2d:yu,tensor3d:ka,tensor4d:xu,tensor5d:bu,tensor6d:vu,tile:In,topk:wu,truncatedNormal:Cu,unsortedSegmentSum:_n,unstack:Nu,variable:$u,where:Yt,whereAsync:ku,zeros:lr,zerosLike:at,op:Ve,booleanMaskAsync:Su,equalStrict:Tu,greaterEqualStrict:Ru,greaterStrict:Iu,lessEqualStrict:Au,lessStrict:_u,notEqualStrict:Du,addStrict:Fu,divStrict:Ou,maximumStrict:Mu,minimumStrict:Bu,modStrict:Pu,mulStrict:Lu,powStrict:Vu,squaredDifferenceStrict:Wu,subStrict:zu,transpose:fn,norm:Uu,movingAverage:Gu,scatterND:qu,sparseToDense:Hu,gatherND:ju,dropout:Ku,enclosingPowerOfTwo:Xu,cosineWindow:Yu,inTopKAsync:Qu,image:Hl,linalg:jl,losses:Kl,spectral:Gl,fused:al,signal:ql,train:ac,enableProdMode:function(){s().set("PROD",!0)},enableDebugMode:function(){s().set("DEBUG",!0)},disableDeprecationWarnings:function(){s().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")},deprecationWarn:Ga,disposeVariables:function(){Ae.disposeVariables()},engine:qa,memory:function(){return Ae.memory()},profile:function(e){return Ae.profile(e)},tidy:Ha,dispose:ja,keep:Ka,time:function(e){return Ae.time(e)},setBackend:function(e){return Ae.setBackend(e)},ready:function(){return Ae.ready()},getBackend:function(){return Ae.backendName},removeBackend:function(e){Ae.removeBackend(e)},findBackend:function(e){return Ae.findBackend(e)},findBackendFactory:function(e){return Ae.findBackendFactory(e)},registerBackend:Xa,backend:function(){return Ae.backend},setPlatform:function(e,t){s().setPlatform(e,t)},getKernel:p,getGradient:d,getKernelsForBackend:h,registerKernel:f,registerGradient:m,unregisterKernel:function(e,t){const n=g(e,t);if(!l.has(n))throw new Error(`The kernel '${e}' for backend '${t}' is not registered`);l.delete(n)},unregisterGradient:function(e){if(!c.has(e))throw new Error(`The gradient '${e}' for backend is not registered`);c.delete(e)},Abs:"Abs",Acos:"Acos",Acosh:"Acosh",Add:"Add",AddN:"AddN",All:"All",Any:"Any",ArgMax:"ArgMax",ArgMin:"ArgMin",Asin:"Asin",Asinh:"Asinh",Atan:"Atan",Atanh:"Atanh",Atan2:"Atan2",AvgPool:"AvgPool",AvgPoolBackprop:"AvgPoolBackprop",AvgPool3D:"AvgPool3D",AvgPool3DBackprop:"AvgPool3DBackprop",BatchMatMul:"BatchMatMul",BatchToSpaceND:"BatchToSpaceND",BroadcastTo:"BroadcastTo",Cast:"Cast",Ceil:"Ceil",ClipByValue:"ClipByValue",Complex:"Complex",Concat:"Concat",Conv2D:"Conv2D",Conv2DBackpropFilter:"Conv2DBackpropFilter",Conv2DBackpropInput:"Conv2DBackpropInput",Conv3D:"Conv3D",Conv3DBackpropFilterV2:"Conv3DBackpropFilterV2",Conv3DBackpropInputV2:"Conv3DBackpropInputV2",Cos:"Cos",Cosh:"Cosh",Cumsum:"Cumsum",CropAndResize:"CropAndResize",DepthToSpace:"DepthToSpace",DepthwiseConv2dNative:"DepthwiseConv2dNative",DepthwiseConv2dNativeBackpropFilter:"DepthwiseConv2dNativeBackpropFilter",DepthwiseConv2dNativeBackpropInput:"DepthwiseConv2dNativeBackpropInput",Diag:"Diag",Dilation2D:"Dilation2D",Dilation2DBackpropInput:"Dilation2DBackpropInput",Dilation2DBackpropFilter:"Dilation2DBackpropFilter",Div:"Div",Elu:"Elu",EluGrad:"EluGrad",Erf:"Erf",Equal:"Equal",Exp:"Exp",Expm1:"Expm1",FFT:"FFT",Floor:"Floor",FloorDiv:"FloorDiv",Fill:"Fill",FusedBatchNorm:"FusedBatchNorm",GatherV2:"GatherV2",GatherNd:"GatherNd",Greater:"Greater",GreaterEqual:"GreaterEqual",Identity:"Identity",IFFT:"IFFT",Imag:"Imag",IsFinite:"IsFinite",IsInf:"IsInf",IsNan:"IsNan",Less:"Less",LessEqual:"LessEqual",LinSpace:"LinSpace",Log:"Log",Log1p:"Log1p",LogicalAnd:"LogicalAnd",LogicalNot:"LogicalNot",LogicalOr:"LogicalOr",LogSoftmax:"LogSoftmax",LRN:"LRN",LRNBackprop:"LRNBackprop",Max:"Max",Maximum:"Maximum",MaxPool:"MaxPool",MaxPoolBackprop:"MaxPoolBackprop",MaxPool3D:"MaxPool3D",MaxPool3DBackprop:"MaxPool3DBackprop",MaxPoolWithArgmax:"MaxPoolWithArgmax",Mean:"Mean",Min:"Min",Minimum:"Minimum",Mod:"Mod",Multiply:"Multiply",Negate:"Negate",NotEqual:"NotEqual",NonMaxSuppressionV3:"NonMaxSuppressionV3",NonMaxSuppressionV4:"NonMaxSuppressionV4",NonMaxSuppressionV5:"NonMaxSuppressionV5",OnesLike:"OnesLike",OneHot:"OneHot",PadV2:"PadV2",Pool:"Pool",Pow:"Pow",Prelu:"Prelu",Prod:"Prod",Range:"Range",Real:"Real",Reciprocal:"Reciprocal",Relu:"Relu",Reshape:"Reshape",ResizeNearestNeighbor:"ResizeNearestNeighbor",ResizeNearestNeighborGrad:"ResizeNearestNeighborGrad",ResizeBilinear:"ResizeBilinear",ResizeBilinearGrad:"ResizeBilinearGrad",Relu6:"Relu6",Reverse:"Reverse",Round:"Round",Rsqrt:"Rsqrt",ScatterNd:"ScatterNd",SelectV2:"SelectV2",Selu:"Selu",Slice:"Slice",Sin:"Sin",Sinh:"Sinh",Sign:"Sign",Sigmoid:"Sigmoid",Softplus:"Softplus",Sqrt:"Sqrt",Sum:"Sum",SpaceToBatchND:"SpaceToBatchND",SplitV:"SplitV",Softmax:"Softmax",SquaredDifference:"SquaredDifference",Square:"Square",Sub:"Sub",SparseToDense:"SparseToDense",StridedSlice:"StridedSlice",Tan:"Tan",Tanh:"Tanh",Tile:"Tile",TopK:"TopK",Transpose:"Transpose",Unpack:"Unpack",UnsortedSegmentSum:"UnsortedSegmentSum",ZerosLike:"ZerosLike",Step:"Step",FromPixels:"FromPixels",RotateWithOffset:"RotateWithOffset",_FusedMatMul:"_FusedMatMul",FusedConv2D:"FusedConv2D",FusedDepthwiseConv2D:"FusedDepthwiseConv2D"});const Sc={},Tc={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function Rc(e){e in Sc||(Sc[e]=function(e){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const t=function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e);if(t.addEventListener("webglcontextlost",t=>{t.preventDefault(),delete Sc[e]},!1),1===e)return t.getContext("webgl",Tc)||t.getContext("experimental-webgl",Tc);return t.getContext("webgl2",Tc)}(e));const t=Sc[e];return t.isContextLost()?(delete Sc[e],Rc(e)):(t.disable(t.DEPTH_TEST),t.disable(t.STENCIL_TEST),t.disable(t.BLEND),t.disable(t.DITHER),t.disable(t.POLYGON_OFFSET_FILL),t.disable(t.SAMPLE_COVERAGE),t.enable(t.SCISSOR_TEST),t.enable(t.CULL_FACE),t.cullFace(t.BACK),Sc[e])}var Ic,Ac,_c;function Dc(e,t){return[t,e]}function Fc(e){const t=E(e);return T(Math.ceil(t/4))}function Oc(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function Mc(e,t){const n=e;let r,a,o,i,u,l,c,p,d,h;return 2===s().getNumber("WEBGL_VERSION")?(r=n.R32F,a=n.R16F,o=n.RGBA16F,i=n.RGBA32F,u=n.RED,c=4,p=1,d=n.HALF_FLOAT,h=n.FLOAT):(r=e.RGBA,a=e.RGBA,o=e.RGBA,i=n.RGBA,u=e.RGBA,c=4,p=4,d=null!=t?t.HALF_FLOAT_OES:null,h=e.FLOAT),l=e.RGBA,{internalFormatFloat:r,internalFormatHalfFloat:a,internalFormatPackedHalfFloat:o,internalFormatPackedFloat:i,textureFormatFloat:u,downloadTextureFormat:l,downloadUnpackNumChannels:c,defaultNumChannels:p,textureTypeHalfFloat:d,textureTypeFloat:h}}function Bc(e,t){const n=t();return s().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return"Unknown error code "+t}}(e,t))}(e),n}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(Ic||(Ic={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(Ac||(Ac={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(_c||(_c={}));function Pc(e){return!!(s().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function Lc(e,t){return Kc(e,()=>e.getExtension(t),'Extension "'+t+'" not supported on this browser.')}function Vc(e,t){const n=Kc(e,()=>e.createShader(e.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(Bc(e,()=>e.shaderSource(n,t)),Bc(e,()=>e.compileShader(n)),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw function(e,t){const n=Wc.exec(t);if(null==n)return console.log("Couldn't parse line number in error: "+t),void console.log(e);const r=+n[1],s=e.split("\n"),a=s.length.toString().length+2,o=s.map((e,t)=>R((t+1).toString(),a)+e);let i=0;for(let e=0;e<o.length;e++)i=Math.max(o[e].length,i);const u=o.slice(0,r-1),l=o.slice(r-1,r),c=o.slice(r);console.log(u.join("\n")),console.log(t.split("\n")[0]),console.log("%c "+R(l[0],i),"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}const Wc=/ERROR: [0-9]+:([0-9]+):/g;function zc(e,t){if(Bc(e,()=>e.validateProgram(t)),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function Uc(e,t,n,r,s,a,o){const i=e.getAttribLocation(t,n);return-1!==i&&(Bc(e,()=>e.bindBuffer(e.ARRAY_BUFFER,r)),Bc(e,()=>e.vertexAttribPointer(i,s,e.FLOAT,!1,a,o)),Bc(e,()=>e.enableVertexAttribArray(i)),!0)}function Gc(e,t,n){!function(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=t+e.TEXTURE0;if(r<e.TEXTURE0||r>n){throw new Error(`textureUnit must be in ${`[gl.TEXTURE0, gl.TEXTURE${n}]`}.`)}}(e,n),Bc(e,()=>e.activeTexture(e.TEXTURE0+n)),Bc(e,()=>e.bindTexture(e.TEXTURE_2D,t))}function qc(e,t,n){Bc(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,n)),Bc(e,()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0))}function Hc(e,t){Bc(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,t)),Bc(e,()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0))}function jc(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return"unknown error "+t}}(e,t))}function Kc(e,t,n){const r=Bc(e,()=>t());if(null==r)throw new Error(n);return r}function Xc(e,t=2){return E(e.slice(0,e.length-t))}function Yc(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function Qc(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[Xc(e),...Yc(e)]),t}function Jc(e){return e%2==0}function Zc(e,t){if(k(e=e.slice(-2),t=t.slice(-2)))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e.slice(-1)[0],r=t.slice(-1)[0];if(n===r)return!0;if(Jc(n)&&Jc(r)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&Jc(e[0])&&Jc(t[0])}let ep,tp;function np(e,t){return null!=e.getExtension(t)}function rp(e){try{if(null!=Rc(e))return!0}catch(e){return!1}return!1}function sp(e){if(0===e)return!1;const t=Rc(e);if(1!==e){if(np(t,"EXT_color_buffer_float"))return ap(t);const e="EXT_color_buffer_half_float";if(np(t,e)){const n=t.getExtension(e);return function(e,t){const n=Mc(e,t),r=e.createTexture();e.bindTexture(e.TEXTURE_2D,r);e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const s=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,s),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,r,0);const a=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(r),e.deleteFramebuffer(s),a}(t,n)}return!1}if(!np(t,"OES_texture_float"))return!1;if(!np(t,"WEBGL_color_buffer_float"))return!1;return ap(t)}function ap(e){const t=Mc(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n);e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const r=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,r),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const s=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(r),s}const op=s();op.registerFlag("HAS_WEBGL",()=>op.getNumber("WEBGL_VERSION")>0),op.registerFlag("WEBGL_VERSION",()=>rp(2)?2:rp(1)?1:0),op.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1),op.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>2===op.get("WEBGL_VERSION")),op.registerFlag("WEBGL_CPU_FORWARD",()=>!0),op.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1),op.registerFlag("WEBGL_PACK",()=>op.getBool("HAS_WEBGL")),op.registerFlag("WEBGL_PACK_NORMALIZATION",()=>op.getBool("WEBGL_PACK")),op.registerFlag("WEBGL_PACK_CLIP",()=>op.getBool("WEBGL_PACK")),op.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>!1),op.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>op.getBool("WEBGL_PACK")),op.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>op.getBool("WEBGL_PACK")),op.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>op.getBool("WEBGL_PACK")),op.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>op.getBool("WEBGL_PACK")),op.registerFlag("WEBGL_PACK_REDUCE",()=>op.getBool("WEBGL_PACK")),op.registerFlag("WEBGL_LAZILY_UNPACK",()=>op.getBool("WEBGL_PACK")),op.registerFlag("WEBGL_CONV_IM2COL",()=>op.getBool("WEBGL_PACK")),op.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>function(e){if(null==ep){const t=Rc(e);ep=t.getParameter(t.MAX_TEXTURE_SIZE)}return ep}(op.getNumber("WEBGL_VERSION"))),op.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>function(e){if(null==tp){const t=Rc(e);tp=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,tp)}(op.getNumber("WEBGL_VERSION"))),op.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{const e=op.getNumber("WEBGL_VERSION");return 0===e?0:function(e){if(0===e)return 0;let t;const n=Rc(e);return t=np(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:np(n,"EXT_disjoint_timer_query")?1:0,t}(e)}),op.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>op.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!_e()),op.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>function(e){if(0===e)return!1;const t=Rc(e);if(1===e){if(!np(t,"OES_texture_float"))return!1}else if(!np(t,"EXT_color_buffer_float"))return!1;return ap(t)}(op.getNumber("WEBGL_VERSION"))),op.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>!op.getBool("WEBGL_FORCE_F16_TEXTURES")&&op.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")),op.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>sp(op.getNumber("WEBGL_VERSION"))),op.registerFlag("WEBGL_FENCE_API_ENABLED",()=>{return 2===(e=op.getNumber("WEBGL_VERSION"))&&null!=Rc(e).fenceSync;var e}),op.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>op.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0),op.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)});class ip{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map((e,t)=>"T"+t);const n=[];this.variableNames.forEach(e=>{n.push(`float v${e} = get${e}AtOutCoords();`)});const r=this.variableNames.map(e=>"v"+e).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `}}class up{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map((e,t)=>"T"+t);const n=[];this.variableNames.forEach(e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)});const r=this.variableNames.map(e=>"v"+e).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `}}class lp{constructor(e,t,n){this.variableNames=["A"];const r=e.windowSize,s=e.batchSize,a=e.inSize,o=Math.ceil(a/r);n||this.variableNames.push("bestIndicesA"),this.outputShape=[s,o];const i="max"===t?">":"<",u=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${u};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${i} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}function cp(e,t){return["x","y","z","w","u","v"].slice(0,t).map(t=>`${e}.${t}`)}function pp(e,t){return 1===t?[e]:cp(e,t)}function dp(){let e,t,n,r,a,o,i,u,l,c;return 2===s().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",r="in",a="texture",o="outputColor",i="out vec4 outputColor;",u="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",l="",c="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",r="varying",a="texture2D",o="gl_FragColor",i="",u="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",c="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:r,texture2D:a,output:o,defineOutput:i,defineSpecialNaN:u,defineSpecialInf:l,defineRound:c}}function hp(e,t,n="index"){const r=K(t);return r.map((t,s)=>`${`int ${e[s]} = ${n} / ${t}`}; ${s===r.length-1?`int ${e[s+1]} = ${n} - ${e[s]} * ${t}`:`index -= ${e[s]} * ${t}`};`).join("")}function fp(e){const t=K(e).map(e=>e.toString());return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}const mp="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:gp}=xc;function yp(e,t,n,r){const s=[];e.forEach(e=>{const t=E(e.shapeInfo.logicalShape);e.shapeInfo.isUniform?s.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(s.push(`uniform sampler2D ${e.name};`),s.push(`uniform int offset${e.name};`))});const a=s.join("\n"),o=e.map(e=>function(e,t,n=!1){let r="";r+=n?bp(e):xp(e);const s=e.shapeInfo.logicalShape,a=t.logicalShape;s.length<=a.length&&(r+=n?function(e,t){const n=e.name,r=n.charAt(0).toUpperCase()+n.slice(1),s="get"+r+"AtOutCoords",a=e.shapeInfo.logicalShape.length,o=t.logicalShape.length,i=gp(e.shapeInfo.logicalShape,t.logicalShape),u=Sp(o),l=o-a;let c;const p=["x","y","z","w","u","v"];c=0===a?"":o<2&&i.length>=1?"coords = 0;":i.map(e=>`coords.${p[e+l]} = 0;`).join("\n");let d="";d=o<2&&a>0?"coords":e.shapeInfo.logicalShape.map((e,t)=>"coords."+p[t+l]).join(", ");let h="return outputValue;";const f=1===E(e.shapeInfo.logicalShape),m=1===E(t.logicalShape);if(1!==a||f||m){if(f&&!m)h=1===o?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(i.length){const e=a-2,t=a-1;i.indexOf(e)>-1&&i.indexOf(t)>-1?h="return vec4(outputValue.x);":i.indexOf(e)>-1?h="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":i.indexOf(t)>-1&&(h="return vec4(outputValue.xx, outputValue.zz);")}}else h="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${s}() {\n      ${u} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${r}(${d});\n      ${h}\n    }\n  `}(e,t):function(e,t){const n=e.name,r=n.charAt(0).toUpperCase()+n.slice(1),s="get"+r+"AtOutCoords",a=t.texShape,o=e.shapeInfo.texShape,i=e.shapeInfo.logicalShape.length,u=t.logicalShape.length;if(!e.shapeInfo.isUniform&&i===u&&null==e.shapeInfo.flatOffset&&k(o,a))return`\n      float ${s}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const l=Sp(u),c=gp(e.shapeInfo.logicalShape,t.logicalShape),p=u-i;let d;const h=["x","y","z","w","u","v"];d=0===i?"":u<2&&c.length>=1?"coords = 0;":c.map(e=>`coords.${h[e+p]} = 0;`).join("\n");let f="";f=u<2&&i>0?"coords":e.shapeInfo.logicalShape.map((e,t)=>"coords."+h[t+p]).join(", ");return`\n    float ${s}() {\n      ${l} coords = getOutputCoords();\n      ${d}\n      return get${r}(${f});\n    }\n  `}(e,t));return r}(e,t,r)).join("\n"),i=t.texShape,u=dp(),l=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(u);let c,p,d=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${vp}\n    ${wp}\n    ${Cp}\n  `}(u);t.isPacked?(c=function(e,t){switch(e.length){case 0:return $p();case 1:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(1===n[0])return`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${n[1]}.0);\n      }\n    `;if(1===n[1])return`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${n[0]}.0);\n      }\n    `;return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return 2 * (resTexRC.x * ${n[1]} + resTexRC.y);\n    }\n  `}(0,t);case 2:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(k(e,t))return`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${n[0]}, ${n[1]}));\n      }\n    `;const r=Math.ceil(e[1]/2);return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t);case 3:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(e[2]/2),s=r*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      int b = index / ${s};\n      index -= b * ${s};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t);default:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(e[e.length-1]/2),s=r*Math.ceil(e[e.length-2]/2);let a=s,o="",i="b, r, c";for(let t=2;t<e.length-1;t++)a*=e[e.length-t-1],o=`\n      int b${t} = index / ${a};\n      index -= b${t} * ${a};\n    `+o,i=`b${t}, `+i;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      ${o}\n\n      int b = index / ${s};\n      index -= b * ${s};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec${e.length}(${i});\n    }\n  `}(e,t)}}(t.logicalShape,i),p=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(u)):(c=function(e,t){switch(e.length){case 0:return $p();case 1:return function(e,t){if(1===t[0])return`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `;if(1===t[1])return`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `;return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t);case 2:return function(e,t){if(k(e,t))return`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `;if(1===e[1])return`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;if(1===e[0])return`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t);case 3:return function(e,t){const n=hp(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${n}\n      return ivec3(r, c, d);\n    }\n  `}(e,t);case 4:return function(e,t){const n=hp(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${n}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t);case 5:return function(e,t){const n=hp(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=hp(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(e.length+"-D output sampling is not yet supported")}}(t.logicalShape,i),p=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(u)),r&&(d+=Np);return[d,l,p,a,c,o,n].join("\n")}function xp(e){const t=e.shapeInfo.logicalShape;switch(t.length){case 0:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1);if(e.shapeInfo.isUniform)return`float ${n}() {return ${t};}`;const[r,s]=e.shapeInfo.texShape;if(1===r&&1===s)return`\n      float ${n}() {\n        return sampleTexture(${t}, halfCR);\n      }\n    `;const[a,o]=e.shapeInfo.texShape,i=Ep(t);return`\n    float ${n}() {\n      vec2 uv = uvFromFlat(${a}, ${o}, ${i});\n      return sampleTexture(${t}, uv);\n    }\n  `}(e);case 1:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${n}(int index) {\n        ${kp(e)}\n      }\n    `;const r=e.shapeInfo.texShape,s=r[0],a=r[1];if(1===a&&1===s)return`\n      float ${n}(int index) {\n        return sampleTexture(${t}, halfCR);\n      }\n    `;const o=Ep(t);if(1===a)return`\n      float ${n}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / ${s}.0);\n        return sampleTexture(${t}, uv);\n      }\n    `;if(1===s)return`\n      float ${n}(int index) {\n        vec2 uv = vec2((float(index + ${o}) + 0.5) / ${a}.0, 0.5);\n        return sampleTexture(${t}, uv);\n      }\n    `;return`\n    float ${n}(int index) {\n      vec2 uv = uvFromFlat(${s}, ${a}, index + ${o});\n      return sampleTexture(${t}, uv);\n    }\n  `}(e);case 2:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e.shapeInfo.texShape;if(null!=s&&k(t,s)){const e=s[0],t=s[1];return`\n    float ${r}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${t}.0, ${e}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `}const{newShape:a,keptDims:o}=D(t),i=a;if(i.length<t.length){const t=Tp(e,i),n=["row","col"];return`\n      ${xp(t)}\n      float ${r}(int row, int col) {\n        return ${r}(${Rp(n,o)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${t[1]}, 1)));\n        ${kp(e)}\n      }\n    `;const u=s[0],l=s[1],c=Ep(n);if(1===l)return`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${t[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;if(1===u)return`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${t[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${l}.0, 0.5);\n      return sampleTexture(${n}, uv);\n    }\n  `;return`\n  float ${r}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${t[1]} + col + ${c};\n    vec2 uv = uvFromFlat(${u}, ${l}, index);\n    return sampleTexture(${n}, uv);\n  }\n`}(e);case 3:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t[1]*t[2],a=t[2],{newShape:o,keptDims:i}=D(t),u=o;if(u.length<t.length){const t=Tp(e,u),n=["row","col","depth"];return`\n        ${xp(t)}\n        float ${r}(int row, int col, int depth) {\n          return ${r}(${Rp(n,i)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${s}, ${a}, 1)));\n        ${kp(e)}\n      }\n    `;const l=e.shapeInfo.texShape,c=l[0],p=l[1],d=e.shapeInfo.flatOffset;if(p===s&&null==d)return`\n        float ${r}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${a}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${p}.0, ${c}.0);\n          return sampleTexture(${n}, uv);\n        }\n      `;if(p===a&&null==d)return`\n    float ${r}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${t[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${p}.0, ${c}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;const h=Ep(n);return`\n      float ${r}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${s} + col * ${a} + depth + ${h};\n        vec2 uv = uvFromFlat(${c}, ${p}, index);\n        return sampleTexture(${n}, uv);\n      }\n  `}(e);case 4:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t[3],a=t[2]*s,o=t[1]*a,{newShape:i,keptDims:u}=D(t);if(i.length<t.length){const t=Tp(e,i),n=["row","col","depth","depth2"];return`\n      ${xp(t)}\n      float ${r}(int row, int col, int depth, int depth2) {\n        return ${r}(${Rp(n,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${o}, ${a}, ${s}, 1)));\n        ${kp(e)}\n      }\n    `;const l=e.shapeInfo.flatOffset,c=e.shapeInfo.texShape,p=c[0],d=c[1];if(d===o&&null==l)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${a}, ${s}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(d===s&&null==l)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${t[1]*t[2]}, ${t[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const h=Ep(n);return`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${a} +\n          depth * ${s} + depth2;\n      vec2 uv = uvFromFlat(${p}, ${d}, index + ${h});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t[4],a=t[3]*s,o=t[2]*a,i=t[1]*o,{newShape:u,keptDims:l}=D(t);if(u.length<t.length){const t=Tp(e,u),n=["row","col","depth","depth2","depth3"];return`\n      ${xp(t)}\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        return ${r}(${Rp(n,l)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${i}, ${o}, ${a}, ${s})) +\n          depth3;\n        ${kp(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,d=p[0],h=p[1];if(h===i&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${o}, ${a}, ${s}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${h}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(h===s&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${h}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const f=Ep(n);return`\n    float ${r}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${o} + depth * ${a} +\n          depth2 * ${s} + depth3 + ${f};\n      vec2 uv = uvFromFlat(${d}, ${h}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:s,keptDims:a}=D(t);if(s.length<t.length){const t=Tp(e,s),n=["row","col","depth","depth2","depth3","depth4"];return`\n      ${xp(t)}\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${r}(${Rp(n,a)});\n      }\n    `}const o=t[5],i=t[4]*o,u=t[3]*i,l=t[2]*u,c=t[1]*l;if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${l}, ${u}, ${i})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${o}, 1)));\n        ${kp(e)}\n      }\n    `;const p=e.shapeInfo.flatOffset,d=e.shapeInfo.texShape,h=d[0],f=d[1];if(f===c&&null==p)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${l}, ${u}, ${i}, ${o})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===o&&null==p)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const m=Ep(n);return`\n    float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${l} + depth * ${u} +\n          depth2 * ${i} + depth3 * ${o} + depth4 + ${m};\n      vec2 uv = uvFromFlat(${h}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(t.length+"-D input sampling is not yet supported")}}function bp(e){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),r=dp();return`\n    vec4 ${n}() {\n      return ${r.texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),r=e.shapeInfo.texShape,s=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],a=dp();return`\n    vec4 ${n}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${s[0]}, ${s[1]}, index);\n      return ${a.texture2D}(${t}, uv);\n    }\n  `}(e);case 2:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e.shapeInfo.texShape,a=s[0],o=s[1],i=dp();if(null!=s&&k(t,s))return`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}.0, ${a}.0);\n\n        return ${i.texture2D}(${n}, uv);\n      }\n    `;const u=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)],l=Math.ceil(t[1]/2);return`\n    vec4 ${r}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${l}, ${u[0]}, ${u[1]}, row, col);\n      return ${i.texture2D}(${n}, uv);\n    }\n  `}(e);case 3:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e.shapeInfo.texShape,a=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];if(1===t[0]){const n=t.slice(1),s=[1,2],a=Tp(e,n),o=["b","row","col"];return`\n        ${bp(a)}\n        vec4 ${r}(int b, int row, int col) {\n          return ${r}(${Rp(o,s)});\n        }\n      `}const o=a[0],i=a[1],u=Math.ceil(t[2]/2),l=u*Math.ceil(t[1]/2),c=dp();return`\n    vec4 ${r}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${o}, ${i}, ${l}, ${u}, b, row, col);\n      return ${c.texture2D}(${n}, uv);\n    }\n  `}(e);default:return function(e){const t=e.shapeInfo.logicalShape,n=t.length,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=e.shapeInfo.texShape,o=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],i=o[0],u=o[1],l=Math.ceil(t[n-1]/2);let c=l*Math.ceil(t[n-2]/2),p="int b, int row, int col",d=`b * ${c} + (row / 2) * ${l} + (col / 2)`;for(let e=2;e<n-1;e++)p=`int b${e}, `+p,c*=t[n-e-1],d=`b${e} * ${c} + `+d;const h=dp();return`\n    vec4 ${s}(${p}) {\n      int index = ${d};\n      int texR = index / ${u};\n      int texC = index - texR * ${u};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${u}, ${i});\n      return ${h.texture2D}(${r}, uv);\n    }\n  `}(e)}}const vp="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",wp="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Cp="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Np="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function $p(){return"\n    int getOutputCoords() {\n      return 0;\n    }\n  "}function Ep(e){return"offset"+e}function kp(e){const t=e.name,n=E(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function Sp(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function Tp(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function Rp(e,t){return t.map(t=>e[t]).join(", ")}class Ip{constructor(e,t,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,w(e.length>2,()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`);const s=e[e.length-1],a=Math.ceil(s/t);this.outputShape=e.slice(0,-1),a>1&&this.outputShape.push(a),r||this.variableNames.push("bestIndicesA");const o=this.outputShape,i=o.length,u=Sp(i),l=pp("coords",i);let c,p;if(1===a){p=i+1;const e=Sp(p);c=`\n        ${e} sourceLocR = ${e}(${l.join()}, 0);\n        ++${l[i-1]};\n        ${e} sourceLocG = ${e}(${l.join()}, 0);\n        ++${l[i-2]};\n        ${e} sourceLocA = ${e}(${l.join()}, 0);\n        --${l[i-1]};\n        ${e} sourceLocB = ${e}(${l.join()}, 0);\n        --${l[i-2]};`}else p=i,c=`\n        ${u} sourceLocR = coords;\n        ++${l[i-1]};\n        ${u} sourceLocG = coords;\n        ++${l[i-2]};\n        ${u} sourceLocA = coords;\n        --${l[i-1]};\n        ${u} sourceLocB = coords;\n        --${l[i-2]};`;const d=["x","y","z","w","u","v"].slice(0,p),h="."+d[p-1],f=d.map(e=>"int "+e),m=pp("sourceLocR",p-1).concat("inIdx.r"),g=pp("sourceLocG",p-1).concat("inIdx.g"),y=pp("sourceLocB",p-1).concat("inIdx.b"),x=pp("sourceLocA",p-1).concat("inIdx.a"),b="max"===n?"greaterThan":"lessThan",v=r?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${x.join()})));`,C=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${g.join()}) : 0.,\n            hasNextRow ? getAChannel(${y.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${x.join()}) : 0.)`,N=r?"":`\n      float getBestIndicesAChannel(${f.join()}) {\n        return getChannel(getBestIndicesA(${d.join()}),\n                                          vec2(${d.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${f.join()}) {\n        return getChannel(getA(${d.join()}),\n                               vec2(${d.slice(-2).join()}));\n      }\n      ${N}\n      void main() {\n        ${u} coords = getOutputCoords();\n        bool hasNextCol = ${l[i-1]} < ${o[i-1]-1};\n        bool hasNextRow = ${l[i-2]} < ${o[i-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${h}, sourceLocG${h},\n          sourceLocB${h}, sourceLocA${h}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${C};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${v}\n          vec4 candidate = ${C};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${b}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}class Ap{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,s=e.strideWidth,a=e.dilationHeight,o=e.dilationWidth,i=e.effectiveFilterHeight,u=e.effectiveFilterWidth,l=i-1-e.padInfo.top,c=u-1-e.padInfo.left,p=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${l}, ${c});\n      const float avgMultiplier = float(${p});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${i};\n            wR += ${a}) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${u};\n            wC+= ${o}) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class _p{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,s=e.strideDepth,a=e.strideHeight,o=e.strideWidth,i=e.dilationDepth,u=e.dilationHeight,l=e.dilationWidth,c=e.effectiveFilterDepth,p=e.effectiveFilterHeight,d=e.effectiveFilterWidth,h=c-1-e.padInfo.front,f=p-1-e.padInfo.top,m=d-1-e.padInfo.left,g=1/(t*n*r);this.userCode=`\n      const ivec3 pads = ivec3(${h}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${i}) {\n          float dyD = float(dyDCorner + wD) / ${s}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${p};\n              wR += ${u}) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${d};\n                wC += ${l}) {\n              float dyC = float(dyCCorner + wC) / ${o}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Dp{constructor(e,t,n,r,s,a){this.outputShape=[],this.variableNames=["x","mean","variance"],nt(e,t),nt(e,n);let o="0.0";null!=r&&(nt(e,r),this.variableNames.push("offset"),o="getOffsetAtOutCoords()");let i="1.0";null!=s&&(nt(e,s),this.variableNames.push("scale"),i="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${o};\n        float scale = ${i};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class Fp{constructor(e,t,n,r,s,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],nt(e,t),nt(e,n);let o="vec4(0.0)";null!=r&&(nt(e,r),this.variableNames.push("offset"),o="getOffsetAtOutCoords()");let i="vec4(1.0)";null!=s&&(nt(e,s),this.variableNames.push("scale"),i="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${o};\n        vec4 scale = ${i};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const Op="return areal * breal - aimag * bimag;",Mp="return areal * bimag + aimag * breal;";class Bp{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=nt(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const Pp="return a + b;",Lp="return a - b;",Vp="return a * b;",Wp="return (a < 0.) ? b * a : a;";class zp{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=nt(t,n),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}const Up="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";class Gp{constructor(e,t,n,r=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=nt(t,n);const s=this.outputShape.length;let a="";if(r)if(0===s||1===E(this.outputShape))a="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else{if(a=`\n          ${Sp(s)} coords = getOutputCoords();\n        `,1===s)a+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=pp("coords",s);a+=`\n            bool nextRowOutOfBounds =\n              (${e[s-2]} + 1) >= ${this.outputShape[s-2]};\n            bool nextColOutOfBounds =\n              (${e[s-1]} + 1) >= ${this.outputShape[s-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${a}\n\n        setOutput(result);\n      }\n    `}}class qp{constructor(e){this.variableNames=["A"],this.outputShape=e,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}getCustomSetupFunc(e,t){return(n,r)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(r,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(r,"maxVal")),n.gl.uniform1f(this.minLoc,e),n.gl.uniform1f(this.maxLoc,t)}}}class Hp{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}getCustomSetupFunc(e,t){return(n,r)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(r,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(r,"maxVal")),n.gl.uniform1f(this.minLoc,e),n.gl.uniform1f(this.maxLoc,t)}}}class jp{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}class Kp{constructor(e){this.outputShape=[],this.outputShape=os(e,1),this.variableNames=e.map((e,t)=>"T"+t);const t=new Array(e.length-1);t[0]=e[0][1];for(let n=1;n<t.length;n++)t[n]=t[n-1]+e[n][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++){const r=t[e-1];n.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${r}));`)}const r=t.length,s=t[t.length-1];n.push(`else setOutput(getT${r}(yR, yC-${s}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class Xp{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=os(e,t);const n=this.outputShape,r=n.length,s=Sp(r),a=pp("coords",r),o=["x","y","z","w","u","v"].slice(0,r);this.variableNames=e.map((e,t)=>"T"+t);const i=new Array(e.length-1);i[0]=e[0][t];for(let n=1;n<i.length;n++)i[n]=i[n-1]+e[n][t];const u=o[t],l=o.slice(-2),c=o.join();let p=`if (${u} < ${i[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${l.join()}));\n        }`;for(let e=1;e<i.length;e++){const t=i[e-1];p+=`\n        if (${u} < ${i[e]}  && ${u} >= ${i[e-1]}) {\n          return getChannel(\n            getT${e}(${Yp(o,u,t)}),\n            vec2(${Yp(l,u,t)}));\n        }`}const d=i.length,h=i[i.length-1];p+=`\n        return getChannel(\n          getT${d}(${Yp(o,u,h)}),\n          vec2(${Yp(l,u,h)}));`,this.userCode=`\n      float getValue(${o.map(e=>"int "+e)}) {\n        ${p}\n      }\n\n      void main() {\n        ${s} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[r-1]} = ${a[r-1]} + 1;\n        if (${a[r-1]} < ${n[r-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[r-2]} = ${a[r-2]} + 1;\n        if (${a[r-2]} < ${n[r-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[r-1]} = ${a[r-1]} - 1;\n        if (${a[r-2]} < ${n[r-2]} &&\n            ${a[r-1]} < ${n[r-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function Yp(e,t,n){const r=e.indexOf(t);return e.map((e,t)=>t===r?`${e} - ${n}`:e).join()}class Qp{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,s=e.padInfo.left,a="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${r};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${s};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              if (${a}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Jp{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,s=e.strideWidth,a="channelsLast"===e.dataFormat,o=t-1-e.padInfo.top,i=n-1-e.padInfo.left,u=a?1:2,l=a?2:3,c=a?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${o}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${u}], coords[${l}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${a}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Zp{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,s=e.padInfo.front,a=e.padInfo.top,o=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${s};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${a};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${r} - ${o};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class ed{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,s=e.strideDepth,a=e.strideHeight,o=e.strideWidth,i=t-1-e.padInfo.front,u=n-1-e.padInfo.top,l=r-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${i}, ${u}, ${l});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${s}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${o}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class td{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,s=e.padInfo.left,a=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${a} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${r};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${s};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class nd{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,s=e.strideWidth,a=t-1-e.padInfo.top,o=n-1-e.padInfo.left,i=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${a}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${i}; dm++) {\n              int d2 = d1 * ${i} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class rd{constructor(e,t=!1,n=null,r=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const s=e.padInfo.top,a=e.padInfo.left,o=e.strideHeight,i=e.strideWidth,u=e.dilationHeight,l=e.dilationWidth,c=e.filterHeight,p=e.filterWidth,d=4*Math.floor(e.inChannels/4),h=e.inChannels%4,f="channelsLast"===e.dataFormat,m=f?1:2,g=f?2:3,y=f?3:1;let x="",b="";n&&(x=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,b="result = activation(result);");const v=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${x}\n\n      const ivec2 strides = ivec2(${o}, ${i});\n      const ivec2 pads = ivec2(${s}, ${a});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${y}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${m}], coords[${g}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${c}; wR++) {\n          int xR = xRCorner + wR * ${u};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${l};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${d}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${f}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===h}) {\n\n              if (${f}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${d}) *\n                    getW(wR, wC, ${d}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${d}, xR, xC) *\n                    getW(wR, wC, ${d}, d2);\n              }\n\n            } else if (${2===h}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2)\n              );\n\n              if (${f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===h}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2),\n                getW(wR, wC, ${d} + 2, d2)\n              );\n\n              if (${f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1),\n                  getX(batch, xR, xC, ${d} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC),\n                  getX(batch, ${d} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${v}\n        ${b}\n        setOutput(result);\n      }\n    `}}class sd{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,r=e.padInfo.left,s=e.strideDepth,a=e.strideHeight,o=e.strideWidth,i=e.dilationDepth,u=e.dilationHeight,l=e.dilationWidth,c=e.filterDepth,p=e.filterHeight,d=e.filterWidth,h=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${s}, ${a}, ${o});\n      const ivec3 pads = ivec3(${t}, ${n}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${i};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${p}; wR++) {\n            int xR = xRCorner + wR * ${u};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${d}; wC++) {\n              int xC = xCCorner + wC * ${l};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${h}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${h}) *\n                  getW(wF, wR, wC, ${h}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${h}),\n                  getX(batch, xF, xR, xC, ${h} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${h}, d2),\n                  getW(wF, wR, wC, ${h} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${h}),\n                  getX(batch, xF, xR, xC, ${h} + 1),\n                  getX(batch, xF, xR, xC, ${h} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${h}, d2),\n                  getW(wF, wR, wC, ${h} + 1, d2),\n                  getW(wF, wR, wC, ${h} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class ad{constructor(e,t=!1,n=null,r=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const s=e.inHeight,a=e.inWidth,o=e.padInfo.top,i=e.padInfo.left,u=e.strideHeight,l=e.strideWidth,c=e.dilationHeight,p=e.dilationWidth,d=e.filterHeight,h=e.filterWidth,f=e.outChannels/e.inChannels;let m="",g="";n&&(m=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,g="result = activation(result);");const y=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${m}\n\n      const ivec2 strides = ivec2(${u}, ${l});\n      const ivec2 pads = ivec2(${o}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${f};\n        int q = d2 - d1 * ${f};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${d}; wR++) {\n          int xR = xRCorner + wR * ${c};\n\n          if (xR < 0 || xR >= ${s}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${h}; wC++) {\n            int xC = xCCorner + wC * ${p};\n\n            if (xC < 0 || xC >= ${a}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${y}\n        ${g}\n        setOutput(result);\n      }\n    `}}class od{constructor(e,t=!1,n=null,r=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.outShape;const s=e.inHeight,a=e.inWidth,o=e.padInfo.top,i=e.padInfo.left,u=e.strideHeight,l=e.strideWidth,c=e.dilationHeight,p=e.dilationWidth,d=e.filterHeight,h=e.filterWidth,f=h;let m="int xR; int xC; int xCOffset;";for(let e=0;e<d;e++)for(let t=0;t<h;t++)m+=`\n          vec4 xTexelR${e}C${2*t} = vec4(0.);\n          vec4 wR${e}C${t} = vec4(0.);\n          vec4 xR${e}C${t} = vec4(0.);`;for(let e=0;e<d;e++)for(let t=0;t<f;t++){const n=2*t;if(m+=`\n          xR = xRCorner + ${e*c};\n          xC = xCCorner + ${n*p};\n        `,1===l){if(n<h&&(m+=i%2==1?`\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < ${s} && xCOffset >= 0 && xCOffset < ${a}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${a}) {\n                    xTexelR${e}C${n}.zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < ${s} && xCOffset >= 0 && xCOffset < ${a}) {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${a}) {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR${e}C${n} = vec4(previous.zw, xTexelR${e}C${n}.xy);\n                } else {\n                  xR${e}C${n} = vec4(0, 0, xTexelR${e}C${n}.xy);\n                }\n              `:`\n                if(xR >= 0 && xR < ${s} && xC >= 0 && xC < ${a}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                xR${e}C${n} = xTexelR${e}C${n};\n              `,n+1<h)){const t=i%2==0?b(p):p;p%2==0&&i%2==1||p%2!=0&&i%2!=1?(m+=`\n                  xCOffset = xC + ${i%2} + ${t};\n\n                  if(xR >= 0 && xR < ${s} &&\n                    xCOffset >= 0 && xCOffset < ${a}) {\n                    xTexelR${e}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n                `,p>1&&(m+=`\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < ${s} &&\n                      xCOffset >= 0 && xCOffset < ${a}) {\n                      xTexelR${e}C${n} = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR${e}C${n} = vec4(0.);\n                    }\n                  `),m+=`\n                  xR${e}C${n+1} = vec4(\n                    xTexelR${e}C${n}.zw, xTexelR${e}C${n+2}.xy);\n                `):m+=`\n                  xCOffset = xC + ${t};\n\n                  if(xR >= 0 && xR < ${s} &&\n                    xCOffset >= 0 && xCOffset < ${a}) {\n                    xTexelR${e}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR${e}C${n+1} = xTexelR${e}C${n+2};\n                `}}else n<h&&(m+=`\n              if(xR >= 0 && xR < ${s}) {\n            `,i%2==1?(m+=`\n                xCOffset = xC + 1 - ${l};\n                if(xCOffset >= 0 && xCOffset < ${a}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${a}) {\n                  xTexelR${e}C${n+2} = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR${e}C${n+2} = vec4(0.);\n                }\n\n                xR${e}C${n} = vec4(\n                  xTexelR${e}C${n}.zw, xTexelR${e}C${n+2}.zw);\n              `,n+1<h&&(m+=`\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + ${l};\n                  if(xCOffset >= 0 && xCOffset < ${a}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR${e}C${n+1} = vec4(xTexelR${e}C${n+2}.xy, final.xy);\n                `)):(m+=`\n                if(xC >= 0 && xC < ${a}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + ${l};\n                if(xCOffset >= 0 && xCOffset < ${a}) {\n                  xTexelR${e}C${n+2} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${e}C${n+2} = vec4(0.);\n                }\n\n                xR${e}C${n} = vec4(\n                  xTexelR${e}C${n}.xy, xTexelR${e}C${n+2}.xy);\n              `,n+1<h&&(m+=`\n                  xR${e}C${n+1} = vec4(\n                    xTexelR${e}C${n}.zw, xTexelR${e}C${n+2}.zw);\n                `)),m+="}");n<h&&(m+=`\n            vec4 wTexelR${e}C${n} = getW(${e}, ${n}, d1, q);\n            wR${e}C${n} = vec4(wTexelR${e}C${n}.xz, wTexelR${e}C${n}.xz);\n          `,n+1<h&&(m+=`\n              vec4 wTexelR${e}C${n+1} = getW(${e}, ${n+1}, d1, q);\n              wR${e}C${n+1} =\n                vec4(wTexelR${e}C${n+1}.xz, wTexelR${e}C${n+1}.xz);`))}for(let e=0;e<d;e++)for(let t=0;t<h;t++)m+=`dotProd += xR${e}C${t} * wR${e}C${t};`;let g="",y="";n&&(g=r?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,y="result = activation(result);");const x=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${g}\n\n      const ivec2 strides = ivec2(${u}, ${l});\n      const ivec2 pads = ivec2(${o}, ${i});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        ${m}\n\n        vec4 result = dotProd;\n        ${x}\n        ${y}\n        setOutput(result);\n      }\n    `}}class id{constructor(e,t,n,r,s){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,o,i,u]=e,[l]=t,[c,p]=n;this.outputShape=[l,c,p,u];const d="bilinear"===r?1:0,[h,f]=[o-1+".0",i-1+".0"],[m,g,y]=c>1?[""+(o-1)/(c-1),"(y2-y1) * height_ratio",`y1*${h} + float(y)*(height_scale)`]:["0.0","0.0","0.5 * (y1+y2) * "+h],[x,b,v]=p>1?[""+(i-1)/(p-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0","0.5 * (x1+x2) * "+f];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${x});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${b};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${h} ) {\n          setOutput(float(${s}));\n          return;\n        }\n        float in_x = ${v};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${s}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${d} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}class ud{constructor(e,t,n){this.variableNames=["x"],this.outputShape=e;const r=e.length,s=t?"0.0":`getX(${ld(r,"coords")})`,a=e[e.length-1];let o="",i="";t?(o=n?"end != "+(a-1):"end != 0",i=n?"end + 1":"end - 1"):(o=n?"end + pow2 < "+a:"end >= pow2",i=n?"end + pow2":"end - pow2"),this.userCode=`\n      uniform float index;\n      void main() {\n        ${Sp(r)} coords = getOutputCoords();\n        int end = ${cd(r,"coords")};\n        float val = ${s};\n        int pow2 = int(pow(2.0, index));\n        if (${o}) {\n          int idx = ${i};\n          ${cd(r,"coords")} = idx;\n          val += getX(${ld(r,"coords")});\n        }\n        setOutput(val);\n      }\n    `}getCustomSetupFunc(e){return(t,n)=>{null==this.index&&(this.index=t.getUniformLocation(n,"index")),t.gl.uniform1f(this.index,e)}}}function ld(e,t){if(1===e)return""+t;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}function cd(e,t){if(1===e)return""+t;if(2===e)return t+".y";if(3===e)return t+".z";if(4===e)return t+".w";throw Error(`Cumulative sum for rank ${e} is not yet supported`)}class pd{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=Ic.DENSE;const t=Fc(e),n=dp();this.outputShape=e,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${hp(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${t[0]}, ${t[1]}));\n        int index = 4 * (resTexRC.x * ${t[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${n.output} = result;\n      }\n    `}}class dd{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=Ic.DENSE;const t=Fc(e),n=dp();this.outputShape=e,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${hp(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${t[0]}, ${t[1]}));\n        int index = 4 * (resTexRC.x * ${t[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${n.output} = result;\n      }\n    `}}class hd{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}class fd{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}class md{constructor(e){this.variableNames=["A"],this.outTexUsage=Ac.DOWNLOAD;const t=dp();this.outputShape=e,this.userCode=`\n      ${mp}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class gd{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=Ac.DOWNLOAD;const t=dp();this.outputShape=e,this.userCode=`\n      ${mp}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}class yd{constructor(e,t,n=!1){this.variableNames=["A"];const r=dp(),[s,a]=t;this.outputShape=e;let o="result";n&&(o="floor(result * 255. + 0.5)"),this.userCode=`\n      ${fp(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / ${a};\n        int c = imod(flatIndex, ${a});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${s}.0);\n        vec4 values = ${r.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${r.output} = vec4(${o}, 0., 0., 0.);\n      }\n    `}}class xd{constructor(e,t,n=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const r=dp(),[s,a]=t;this.outputShape=e;let o="",i="result";n&&(i="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let n=0;n<=1;n++){const i=2*t+n;o+=`\n          localCoords = coords;\n          if(localCoords[2] + ${n} < ${e[2]}) {\n            localCoords[2] += ${n};\n            if(localCoords[1] + ${t} < ${e[1]}) {\n              localCoords[1] += ${t};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${a};\n              c = imod(flatIndex, ${a});\n              uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${s}.0);\n              values = ${r.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${i}] = values[0];\n              } else if(offset == 1) {\n                result[${i}] = values[1];\n              } else if(offset == 2) {\n                result[${i}] = values[2];\n              } else {\n                result[${i}] = values[3];\n              }\n            }\n          }\n        `}this.userCode=`\n      ${fp(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${o}\n\n        ${r.output} = ${i};\n      }\n    `}}const bd="return real * expR - imag * expI;",vd="return real * expI + imag * expR;";class wd{constructor(e,t,n){this.variableNames=["real","imag"];const r=t[1];this.outputShape=t;const s=n?"2.0 * "+Math.PI:"-2.0 * "+Math.PI,a=n?r+".0":"1.0";this.userCode=`\n      const float exponentMultiplier = ${s};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${e}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${r});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${r}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}class Cd{constructor(e,t){this.outputShape=[],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}getCustomSetupFunc(e){return(t,n)=>{null==this.valueLoc&&(this.valueLoc=t.getUniformLocationNoThrow(n,"value")),t.gl.uniform1f(this.valueLoc,e)}}}class Nd{constructor(e,t,n){this.variableNames=["A","indices"];const r=e.slice();r[n]=t,this.outputShape=r,this.rank=r.length;const s=Sp(this.rank),a=function(e,t){const n=e.length;if(n>4)throw Error(`Gather for rank ${n} is not yet supported`);if(1===n)return"int(getIndices(resRC))";const r=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[];for(let n=0;n<e.length;n++)n===t?s.push(`int(getIndices(${r[n]}))`):s.push(""+r[n]);return s.join()}(e,n);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        setOutput(getA(${a}));\n      }\n    `}}class $d{constructor(e,t,n){this.sliceDim=e,this.strides=t,this.variableNames=["x","indices"],this.outputShape=n;const r=Sp(t.length),s=Sp(n.length),a=this.sliceDim>1?"strides[j]":"strides";this.userCode=`\n        ${r} strides = ${r}(${this.strides});\n         void main() {\n          ${s} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${a};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}function Ed(e){const t=dp();return function(e,t){const n=Kc(e,()=>e.createShader(e.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(Bc(e,()=>e.shaderSource(n,t)),Bc(e,()=>e.compileShader(n)),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function kd(e){return function(e,t){const n=Kc(e,()=>e.createBuffer(),"Unable to create WebGLBuffer");return Bc(e,()=>e.bindBuffer(e.ARRAY_BUFFER,n)),Bc(e,()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW)),n}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function Sd(e){return function(e,t){const n=Kc(e,()=>e.createBuffer(),"Unable to create WebGLBuffer");return Bc(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n)),Bc(e,()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW)),n}(e,new Uint16Array([0,1,2,2,1,3]))}function Td(e,t,n,r,a,o){!function(e,t){const n=s().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0){throw new Error("Requested texture size "+`[${e}x${t}]`+" is invalid.")}if(e>n||t>n){throw new Error("Requested texture size "+`[${e}x${t}]`+" greater than WebGL maximum on this browser / GPU "+`[${n}x${n}]`+".")}}(t,n);const i=function(e){return Kc(e,()=>e.createTexture(),"Unable to create WebGLTexture.")}(e),u=e.TEXTURE_2D;return Bc(e,()=>e.bindTexture(u,i)),Bc(e,()=>e.texParameteri(u,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE)),Bc(e,()=>e.texParameteri(u,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE)),Bc(e,()=>e.texParameteri(u,e.TEXTURE_MIN_FILTER,e.NEAREST)),Bc(e,()=>e.texParameteri(u,e.TEXTURE_MAG_FILTER,e.NEAREST)),Bc(e,()=>e.texImage2D(u,0,r,t,n,0,a,o,null)),Bc(e,()=>e.bindTexture(e.TEXTURE_2D,null)),i}function Rd(e){return e.internalFormatFloat}function Id(e){return e.internalFormatHalfFloat}function Ad(e){return e.downloadTextureFormat}function _d(e){return e.internalFormatPackedFloat}function Dd(e){return e.internalFormatPackedHalfFloat}function Fd(e,t,n,r,s,a,o,i){const u=e,l=new Float32Array(function(e,t){const[n,r]=Oc(e,t);return n*r*4}(a,o));return u.bindBuffer(u.PIXEL_PACK_BUFFER,t),u.getBufferSubData(u.PIXEL_PACK_BUFFER,0,l),u.bindBuffer(u.PIXEL_PACK_BUFFER,null),l}class Od{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const t=s().getNumber("WEBGL_VERSION");null!=e?(this.gl=e,function(e,t){Sc[e]=t}(t,e)):this.gl=Rc(t);let n="WEBGL_color_buffer_float";if(1===s().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=Lc(this.gl,e),np(this.gl,t))this.textureHalfFloatExtension=Lc(this.gl,t);else if(s().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),np(this.gl,"EXT_color_buffer_half_float"))this.colorBufferHalfFloatExtension=Lc(this.gl,"EXT_color_buffer_half_float");else if(s().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",np(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!np(this.gl,"EXT_color_buffer_half_float"))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension("EXT_color_buffer_half_float")}this.vertexBuffer=kd(this.gl),this.indexBuffer=Sd(this.gl),this.framebuffer=function(e){return Kc(e,()=>e.createFramebuffer(),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=Mc(this.gl,this.textureHalfFloatExtension)}get debug(){return s().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;Bc(e,()=>e.finish()),Bc(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,null)),Bc(e,()=>e.deleteFramebuffer(this.framebuffer)),Bc(e,()=>e.bindBuffer(e.ARRAY_BUFFER,null)),Bc(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)),Bc(e,()=>e.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=Dc(t,n);return Td(e,s,a,Rd(r),r.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=Dc(t,n);return Td(e,s,a,Id(r),r.textureFormatFloat,r.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=Dc(t,n);return Td(e,s,a,Ad(r),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),function(e,t,n){Bc(e,()=>e.bindTexture(e.TEXTURE_2D,t)),n.data instanceof Uint8Array?Bc(e,()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data)):Bc(e,()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n)),Bc(e,()=>e.bindTexture(e.TEXTURE_2D,null))}(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,r){this.throwIfDisposed(),function(e,t,n,r,s,a){let o,i,u;Bc(e,()=>e.bindTexture(e.TEXTURE_2D,t)),s instanceof Uint8Array?(o=new Uint8Array(n*r*4),i=e.UNSIGNED_BYTE,u=e.RGBA):(o=new Float32Array(n*r*4),i=e.FLOAT,u=a.internalFormatPackedFloat),o.set(s),Bc(e,()=>e.texImage2D(e.TEXTURE_2D,0,u,n,r,0,e.RGBA,i,o)),Bc(e,()=>e.bindTexture(e.TEXTURE_2D,null))}(this.gl,e,t,n,r,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=Oc(t,n);return Td(e,s,a,Dd(r),e.RGBA,r.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=Oc(t,n);return Td(e,s,a,_d(r),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(Hc(this.gl,this.framebuffer),this.outputTexture=null),Bc(this.gl,()=>this.gl.deleteTexture(e))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,()=>function(e,t,n,r){const[s,a]=Dc(t,n),o=new Uint8Array(t*n*4);return Bc(e,()=>e.readPixels(0,0,s,a,r.downloadTextureFormat,e.UNSIGNED_BYTE,o)),new Float32Array(o.buffer)}(this.gl,t,n,this.textureConfig))}downloadPackedMatrixFromBuffer(e,t,n,r,s,a){return Fd(this.gl,e,0,0,0,s,a,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return function(e,t,n){const r=e,s=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,t),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,s),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),s}(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const r=function(e,t,n,r){const s=e.createBuffer();Bc(e,()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,s));const a=16*t*n;return Bc(e,()=>e.bufferData(e.PIXEL_PACK_BUFFER,a,e.STREAM_READ)),Bc(e,()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0)),Bc(e,()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null)),s}(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if(s().getBool("WEBGL_FENCE_API_ENABLED")){const r=e,s=r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=r.clientWaitSync(s,0,0);return e===r.ALREADY_SIGNALED||e===r.CONDITION_SATISFIED},t=s}else s().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,s().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,()=>function(e,t,n){const r=new Float32Array(t*n*4);return Bc(e,()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,r)),r}(this.gl,t,n))}createProgram(e){this.throwIfDisposed();const t=this.gl,n=Vc(t,e),r=Ed(t),s=function(e){return Kc(e,()=>e.createProgram(),"Unable to create WebGLProgram.")}(t);return Bc(t,()=>t.attachShader(s,r)),Bc(t,()=>t.attachShader(s,n)),function(e,t){if(Bc(e,()=>e.linkProgram(t)),!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(t,s),this.debug&&zc(t,s),this.vertexAttrsAreBound||(this.setProgram(s),this.vertexAttrsAreBound=function(e,t,n){return Bc(e,()=>e.bindBuffer(e.ARRAY_BUFFER,n)),Uc(e,t,"clipSpacePos",n,3,20,0)&&Uc(e,t,"uv",n,2,20,12)}(t,this.program,this.vertexBuffer)),s}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&Bc(this.gl,()=>this.gl.deleteProgram(e))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&zc(this.gl,this.program),Bc(this.gl,()=>this.gl.useProgram(e))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?function(e,t,n){return Kc(e,()=>e.getUniformLocation(t,n),'uniform "'+n+'" not present in program.')}(this.gl,e,t):function(e,t,n){return e.getUniformLocation(t,n)}(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),Bc(this.gl,()=>this.gl.getAttribLocation(e,t))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),function(e,t,n,r){Bc(e,()=>Gc(e,t,r)),Bc(e,()=>e.uniform1i(n,r))}(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[r,s]=Oc(t,n);this.setOutputMatrixTextureDriver(e,r,s)}setOutputMatrixWriteRegion(e,t,n,r){this.setOutputMatrixWriteRegionDriver(n,e,r,t)}setOutputPackedMatrixWriteRegion(e,t,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&zc(this.gl,this.program),jc(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;this.debug&&this.debugValidate(),Bc(e,()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),Bc(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=Lc(this.gl,2===s().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===s().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===s().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await I(()=>this.disposed||this.isQueryAvailable(e,s().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),this.getQueryTime(e,s().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),r=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),r&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise(t=>{this.addItemToPoll(()=>e.isFencePassed(),()=>t())})}pollItems(){const e=function(e){let t=0;for(;t<e.length;++t){if(!e[t]())break}return t-1}(this.itemsToPoll.map(e=>e.isDoneFn));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1||I(()=>(this.pollItems(),0===this.itemsToPoll.length))}bindTextureToFrameBuffer(e){this.throwIfDisposed(),qc(this.gl,e,this.framebuffer),this.debug&&jc(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(qc(this.gl,this.outputTexture,this.framebuffer),this.debug&&jc(this.gl)):Hc(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const r=this.gl;qc(r,e,this.framebuffer),this.debug&&jc(r),this.outputTexture=e,Bc(r,()=>r.viewport(0,0,t,n)),Bc(r,()=>r.scissor(0,0,t,n))}setOutputMatrixWriteRegionDriver(e,t,n,r){this.throwIfDisposed(),Bc(this.gl,()=>this.gl.scissor(e,t,n,r))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}function Md(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach((e,n)=>{const r=e.logicalShape,s=t[n],a=s.shape;if(!k(r,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${a} must match`);if(e.isUniform&&s.isUniform)return;const o=e.texShape,i=s.isUniform?null:s.texData.texShape;if(!k(o,i))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${o} and ${i} must match`)})}class Bd{constructor(e,t,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;const{filterWidth:r,inChannels:s,strideWidth:a,strideHeight:o,padInfo:i,outWidth:u,dilationWidth:l,dilationHeight:c,dataFormat:p}=n,{left:d,top:h}=i,f=s*r,m=dp(),g="channelsLast"===p,y=g?0:1,x=g?1:2;let b="";for(let n=0;n<=1;n++)for(let r=0;r<=1;r++)b+=`\n          blockIndex = rc.y + ${r};\n          pos = rc.x + ${n};\n\n          if(blockIndex < ${e[1]} && pos < ${e[0]}) {\n            offsetY = int(blockIndex / (${u})) * ${o} - ${h};\n            d0 = offsetY + ${c} * (pos / ${f});\n\n            if(d0 < ${t[y]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${u}.) * ${a}. - ${d}.);\n              d1 = offsetX + ${l} * (int(mod(float(pos), ${f}.) / ${s}.));\n\n              if(d1 < ${t[x]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${s}.));\n\n                if (${g}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*n+r}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*n+r}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${b}\n\n        ${m.output} = result;\n      }\n    `}}class Pd{constructor(e,t,n,r,s){this.variableNames=["x"],this.outputShape=[];const a=t,o=e[3]-1;let i;this.outputShape=e;const u=`float(${n}) + float(${r}) * sum`;i=.5===s?`inversesqrt(${u})`:1===s?`1.0/(${u})`:`exp(log(${u}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${o}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${i};\n        setOutput(val);\n      }\n    `}}class Ld{constructor(e,t,n,r,s){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=r,this.beta=s,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${s})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${s});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}class Vd{constructor(e,t,n,r,s){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=t,o=e[3]-1;let i;this.outputShape=e;const u=`float(${n}) + float(${r}) * sum`;i=.5===s?`inversesqrt(${u})`:1===s?`1.0/(${u})`:`exp(log(${u}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${o}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${i};\n        setOutput(result);\n      }\n    `}}class Wd{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,r=e.dilationHeight,s=e.effectiveFilterHeight,a=e.effectiveFilterWidth,o=s-1-e.padInfo.top,i=a-1-e.padInfo.left,u=s*a-1;this.userCode=`\n      const ivec2 pads = ivec2(${o}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${s};\n          wR += ${r}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${u} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${a} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class zd{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,s=e.dilationDepth,a=e.dilationHeight,o=e.dilationWidth,i=e.effectiveFilterDepth,u=e.effectiveFilterHeight,l=e.effectiveFilterWidth,c=i-1-e.padInfo.front,p=u-1-e.padInfo.top,d=l-1-e.padInfo.left,h=i*u*l-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${p}, ${d});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${i};\n           wD += ${s}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${u};\n              wR += ${a}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${l};\n                wC += ${o}) {\n              float dyC = float(dyCCorner + wC) / ${r}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${h} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${u} * ${l} +\n                  wR * ${l} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Ud{constructor(e,t,n=!1,r=!1,s=!1,a=null,o=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;const i=n?e[1]:e[2],u=Math.ceil(i/2),l=n?"i * 2, rc.y":"rc.y, i * 2",c=r?"rc.z, i * 2":"i * 2, rc.z",p=n?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],d=r?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let h="",f="";a&&(h=o?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${a}\n        }`:`vec4 activation(vec4 x) {\n          ${a}\n        }`,f="result = activation(result);");const m=s?"result += getBiasAtOutCoords();":"";s&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${h}\n\n      const float sharedDimension = ${u}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${u}; i++) {\n          vec4 a = getMatrixA(rc.x, ${l});\n          vec4 b = getMatrixB(rc.x, ${c});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${p[0]} * ${d[0]});\n          result += (${p[1]} * ${d[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${m}\n\n        ${f}\n\n        setOutput(result);\n      }\n    `}}class Gd{constructor(e,t,n){this.variableNames=["probs"],this.outputShape=[e,n],this.userCode=`\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}getCustomSetupFunc(e){return(t,n)=>{null==this.seedLoc&&(this.seedLoc=t.getUniformLocation(n,"seed")),t.gl.uniform1f(this.seedLoc,e)}}}class qd{constructor(e,t,n,r){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}class Hd{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e;const t=e.length;if(0===t)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const n=pp("rc",t),r=Sp(t),s=function(e,t,n){if(1===e)return"rc > "+t[0];let r="";for(let s=e-2;s<e;s++)r+=`${n[s]} >= ${t[s]}`,s<e-1&&(r+="||");return r}(t,e,n),a=function(e,t,n,r){if(1===e)return"";const s=r.slice(-2);return`\n    int r = ${s[0]};\n    int c = ${s[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${t};\n    bool rEdge = rp1 >= ${n};\n  `}(t,e[e.length-1],e[e.length-2],n),o=function(e,t){const n=e.length,r=function(e,t){const n=[];for(let r=0;r<=1;r++)for(let s=0;s<=1;s++){let a=`${0===r?"r":"rp1"}, ${0===s?"c":"cp1"}`;for(let n=2;n<e;n++)a=t[t.length-1-n]+","+a;n.push(a)}return n}(n,t);if(1===n)return`getA(rc),\n            rc + 1 >= ${e[0]} ? 0. : getA(rc + 1),\n            0, 0`;return`getA(${r[0]}),\n          cEdge ? 0. : getA(${r[1]}),\n          rEdge ? 0. : getA(${r[2]}),\n          rEdge || cEdge ? 0. : getA(${r[3]})`}(e,n);this.userCode=`\n        void main() {\n          ${r} rc = getOutputCoords();\n\n          if(${s}) {\n            setOutput(vec4(0));\n          } else {\n            ${a}\n\n            setOutput(vec4(${o}));\n          }\n        }\n      `}}}class jd{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);const r=e.length,s=Sp(r),a=t.map(e=>e[0]).join(","),o=t.map((t,n)=>t[0]+e[n]).join(","),i=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${s} start = ${s}(${a});\n      ${s} end = ${s}(${o});\n\n      void main() {\n        ${s} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(${n}));\n        } else {\n          ${s} coords = outC - start;\n          setOutput(getX(${i}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${o};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(${n}));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class Kd{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);const r=e.length,s=Sp(r),a=t.map(e=>e[0]).join(","),o=t.map((t,n)=>t[0]+e[n]).join(","),i=pp("rc",r),u=pp("source",r),l=`${i[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${u.slice(-2).join()})`,p=[s+" rc = outputLoc;",`${i[r-1]} += 1;\n       if(${l}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${i[r-2]} += 1;\n       if(${i[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${i[r-1]} += 1;\n         if(${l}) {`],d=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let h="";for(let e=0,t=1===r?2:4;e<t;e++)h+=`\n        ${p[e]}\n        if (${d}) {\n          result[${e}] = float(${n});\n        } else {\n          ${s} source = rc - start;\n          result[${e}] = getChannel(getX(${u.join()}), ${c});\n        }\n      `;h+=1===r?"} ":"}}",this.userCode=`\n      const ${s} start = ${s}(${a});\n      const ${s} end = ${s}(${o});\n\n      void main() {\n        ${s} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${h}\n        setOutput(result);\n      }\n    `}}class Xd{constructor(e,t,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,o=e.strideHeight,i=e.strideWidth,u=e.dilationHeight,l=e.dilationWidth,c=e.effectiveFilterHeight,p=e.effectiveFilterWidth,d=e.padInfo.top,h=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let y="0.0";if(f||(y="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${o}, ${i});\n        const ivec2 pads = ivec2(${d}, ${h});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${u}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p};\n                wC += ${l}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?s?m:g:`wR * ${p} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let x=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(x="avgValue / count");const b=4*Math.floor(a/4),v=a%4,w=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${o}, ${i});\n      const ivec2 pads = ivec2(${d}, ${h});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${u}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${b}; wC += 4) {\n            int xC = xCCorner + wC * ${l};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              getValue(batch, xR, xC + 3 * ${l}, d)\n            );\n\n            ${w}\n          }\n\n          int xC = xCCorner + ${b};\n          if (${1===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${w}\n          } else if (${2===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${w}\n          } else if (${3===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              initializationValue\n            );\n\n            ${w}\n          }\n        }\n        setOutput(${x});\n      }\n    `}}class Yd{constructor(e,t,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,o=e.strideDepth,i=e.strideHeight,u=e.strideWidth,l=e.dilationDepth,c=e.dilationHeight,p=e.dilationWidth,d=e.effectiveFilterDepth,h=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,y=e.padInfo.left;this.outputShape=e.outShape;const x="avg"===t;let b="0.0";if(x||(b="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${o}, ${i}, ${u});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${d};\n              wD += ${l}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${h};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${p}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r?s?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${h} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let v=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(v="avgValue / count");const w=4*Math.floor(a/4),C=a%4,N=`\n      if (${x}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${o}, ${i}, ${u});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${b};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${b});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${d};\n            wD += ${l}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${w}; wC += 4) {\n              int xC = xCCorner + wC * ${p};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${p}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${p}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${p}, ch)\n              );\n\n              ${N}\n            }\n\n            int xC = xCCorner + ${w};\n            if (${1===C}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${N}\n            } else if (${2===C}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${p}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${N}\n            } else if (${3===C}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${p}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${p}, ch),\n                initializationValue\n              );\n\n              ${N}\n            }\n          }\n          setOutput(${v});\n        }\n      }\n    `}}class Qd{constructor(e,t){this.variableNames=["x"];const n=e.windowSize,r=e.batchSize,s=e.inSize,a=Math.ceil(s/n);this.outputShape=[r,a];let o="0.0",i="";"prod"===t?o="1.0":"min"===t?(o="1.0 / 1e-20",i="min"):"max"===t&&(o="-1.0 / 1e-20",i="max");let u=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?u="sumValue":"prod"===t?u="prodValue":"all"===t?u="allValue":"any"===t&&(u="anyValue");const l=4*Math.floor(n/4),c=n%4;let p=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${i}(values, minMaxValue);\n      }\n    `,d="vec4";"all"===t?(o="1.0",p="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",d="bvec4"):"any"===t&&(o="0.0",p="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",d="bvec4");let h="";s%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${o};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${h}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${o});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${l}; i += 4) {\n          int inIdx = inOffset + i;\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${p}\n        }\n\n        int inIdx = inOffset + ${l};\n        if (${1===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${p}\n        } else if (${2===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${p}\n        } else if (${3===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${p}\n        }\n        setOutput(${u});\n      }\n    `}}class Jd{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;let n="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),n+=`\n        ${t}\n        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${e}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${e>0?"}":""}\n      `}var r;this.userCode=`\n      ${r=t,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${hp(["r","c","d"],r)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${fp(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${e[1]};\n        int cols = ${e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class Zd{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t.shape;const[,r,s]=t.shape,[,a,o]=e.shape,i=[n&&a>1?r-1:r,n&&o>1?s-1:s],u=[n&&a>1?a-1:a,n&&o>1?o-1:o],l=i[0]/u[0],c=i[1]/u[1],p=1/l,d=1/c,h=2*Math.ceil(p)+2,f=2*Math.ceil(d)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${p});\n        const float invWidthScale = float(${d});\n\n        const int winHeight = int(${h});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${o}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${s-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}class eh{constructor(e,t,n,r){this.variableNames=["A"],this.outputShape=[];const[s,a,o,i]=e;this.outputShape=[s,t,n,i];const u=[r&&t>1?a-1:a,r&&n>1?o-1:o],l=[r&&t>1?t-1:t,r&&n>1?n-1:n];this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/l[0]},\n          ${u[1]/l[1]});\n      const vec2 inputShapeRC = vec2(${a}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class th{constructor(e,t,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[s,a,o,i]=e;this.outputShape=[s,t,n,i];const u=[r&&t>1?a-1:a,r&&n>1?o-1:o],l=[r&&t>1?t-1:t,r&&n>1?n-1:n];this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/l[0]},\n          ${u[1]/l[1]},\n          ${u[1]/l[1]});\n      const vec3 inputShapeRC = vec3(${a}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${i-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}class nh{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t.shape;const[,r,s]=t.shape,[,a,o]=e.shape,i=[n&&a>1?r-1:r,n&&o>1?s-1:s],u=[n&&a>1?a-1:a,n&&o>1?o-1:o],l=i[0]/u[0],c=i[1]/u[1],p=1/l,d=1/c,h=2*Math.ceil(p)+2,f=2*Math.ceil(d)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${p});\n        const float invWidthScale = float(${d});\n\n        const int winHeight = int(${h});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${o}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${i[0]}) *\n                (float(dyR) / float(${u[0]}));\n\n            float sourceFracCol =\n                float(${i[1]}) *\n                  (float(dyC) / float(${u[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}class rh{constructor(e,t,n,r){this.variableNames=["A"],this.outputShape=[];const[s,a,o,i]=e;this.outputShape=[s,t,n,i];const u=[r&&t>1?a-1:a,r&&n>1?o-1:o],l=[r&&t>1?t-1:t,r&&n>1?n-1:n],c=r?"0.5":"0.0";this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/l[0]},\n          ${u[1]/l[1]});\n      const vec2 inputShapeRC = vec2(${a}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${c})));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class sh{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const r=e.map((n,r)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(r)).join(","),s=Sp(n);this.userCode=`\n      void main() {\n        ${s} coords = getOutputCoords();\n        setOutput(getX(${r}));\n      }\n    `}}class ah{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const r=pp("rc",n),s=`${r[n-1]} + 1 < ${this.outputShape[n-1]}`,a=`${r[n-2]} + 1 < ${this.outputShape[n-2]}`,o=Sp(n);function i(n){const r=e.map((r,s)=>function(n,r){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${r[n]} - 1`:""+r[n]}(s,n));return`getChannel(getX(${r.join(",")}), vec2(${r.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${s}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${o} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(e){return i(e)}(r.slice())};\n          if(${s}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",i(e)}(r.slice())};\n          }\n          if(${a}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",i(e)}(r.slice())};\n            if(${s}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",i(e)}(r.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}class oh{constructor(e,t,n,r,s,a,o=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const i=Sp(s.length),u=Sp(a.length);let l="";1===n?l="i":2===n&&(l="i, j");const c=`getIndices(${l})`;let p="";1===r?p="i":2===r&&(p="i, coords[1]");const d=`getUpdates(${p})`,h=t>1?"strides[j]":"strides";this.userCode=`\n        ${i} strides = ${i}(${s});\n\n        void main() {\n          ${u} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${h};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${d};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}class ih{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,r=e.batchSize,s=e.inSize,a=e.numSegments,o=a*Math.ceil(s/n);this.outputShape=[r,o];const i=4*Math.floor(n/4),u=n%4,l="\n        sumValue += dot(values, segFilter);\n    ";let c="";s%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `);let p="";s%n>0&&(p=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${p}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${l}\n        } else if (${2===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${l}\n        } else if (${3===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}class uh{constructor(e,t,n){let r,s;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)s="resRC",r="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],o=[];for(let r=0;r<t.length;r++)o.push(""+n[r]),r<e&&a.push(""+n[r]);r=a.join(),s=o.join()}const a=Sp(n);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${s}));\n        } else {\n          setOutput(getB(${s}));\n        }\n      }\n    `}}class lh{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=Sp(this.rank),n=`uniform int start[${this.rank}];`,r=function(e){if(1===e)return"sourceLoc";if(e<=6)return ch.slice(0,e).map(e=>"sourceLoc."+e).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let s;s=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map((e,t)=>`sourceLoc.${ch[t]} = start[${t}] + coords.${ch[t]};`).join("\n")}\n      `,this.userCode=`\n      ${n}\n      void main() {\n        ${s}\n        setOutput(getSource(${r}));\n      }\n    `}getCustomSetupFunc(e){if(e.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${e.length})`);return(t,n)=>{null==this.startLoc&&(this.startLoc=t.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||t.gl.uniform1iv(this.startLoc,e)}}}const ch=["x","y","z","w","u","v"];class ph{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length;const t=Sp(this.rank),n=pp("coords",this.rank),r=pp("sourceLoc",this.rank),s=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,a=`getChannel(getSource(${r.join()}), ${s})`,o=`\n      result.x = ${a};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${a};\n        --${r[this.rank-1]};\n      }\n    `,i=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${a};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,u=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map((e,t)=>`start[${t}]`).join()});`:e.map((e,t)=>`${r[t]} = ${n[t]} + start[${t}];`).join("\n");this.userCode=`\n      uniform int start[${this.rank}];\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${u}\n        vec4 result = vec4(0.);\n        ${o}\n        ${i}\n        setOutput(result);\n      }\n    `}getCustomSetupFunc(e){if(e.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${e.length})`);return(t,n)=>{null==this.startLoc&&(this.startLoc=t.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||t.gl.uniform1iv(this.startLoc,e)}}}class dh{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const r=n.length,s=Sp(n.length),a=Sp(n.length);let o="";if(1===r)o="coords * strides + begin";else{let e=0;o=n.map((t,r)=>(e++,1===n.length?`coords * strides[${r}] + begin[${r}]`:`coords[${e-1}] * strides[${r}] + begin[${r}]`)).join(",")}this.userCode=`\n      ${s} begin = ${s}(${e});\n      ${s} strides = ${s}(${t});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${o}));\n      }\n    `}}class hh{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,n){const r=mh(t,n),s=gh(e,r,n);s in this.freeTextures||(this.freeTextures[s]=[]),s in this.usedTextures||(this.usedTextures[s]=[]);const a=fh(e,r,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[s].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const e=this.freeTextures[s].shift();return this.usedTextures[s].push(e),e}let o;return r===_c.PACKED_2X2_FLOAT32?o=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):r===_c.PACKED_2X2_FLOAT16?o=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):r===_c.UNPACKED_FLOAT32?o=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):r===_c.UNPACKED_FLOAT16?o=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):r===_c.PACKED_4X1_UNSIGNED_BYTE&&(o=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[s].push(o),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),o}releaseTexture(e,t,n,r){if(null==this.freeTextures)return;const a=mh(n,r),o=gh(t,a,r);o in this.freeTextures||(this.freeTextures[o]=[]);const i=fh(t,a,this.gpgpu.gl,this.gpgpu.textureConfig,r),u=s().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==u&&this._numBytesAllocated>u?(this.gpgpu.deleteMatrixTexture(e),this._numBytesAllocated-=i):(this.freeTextures[o].push(e),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const l=this.usedTextures[o],c=l.indexOf(e);if(c<0)throw new Error("Cannot release a texture that was never provided by this texture manager");l.splice(c,1),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log("Bytes allocated: "+this._numBytesAllocated),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach(e=>{this.gpgpu.deleteMatrixTexture(e)});for(const e in this.usedTextures)this.usedTextures[e].forEach(e=>{this.gpgpu.deleteMatrixTexture(e)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function fh(e,t,n,r,s){const a=function(e,t){switch(e){case _c.PACKED_2X2_FLOAT32:return _d(t);case _c.PACKED_2X2_FLOAT16:return Dd(t);case _c.UNPACKED_FLOAT32:return Rd(t);case _c.UNPACKED_FLOAT16:return Id(t);case _c.PACKED_4X1_UNSIGNED_BYTE:return Ad(t);default:throw new Error("Unknown physical texture type "+e)}}(t,r);let o;if(s){const[t,n]=Oc(e[0],e[1]);o=t*n}else{const[t,n]=Dc(e[0],e[1]);o=t*n}return o*function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;throw new Error("Unknown internal format "+t)}(n,a)}function mh(e,t){if(e===Ac.UPLOAD)return _c.PACKED_2X2_FLOAT32;if(e===Ac.RENDER||null==e)return function(e){return s().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?_c.PACKED_2X2_FLOAT32:_c.UNPACKED_FLOAT32:e?_c.PACKED_2X2_FLOAT16:_c.UNPACKED_FLOAT16}(t);if(e===Ac.DOWNLOAD||e===Ac.PIXELS)return _c.PACKED_4X1_UNSIGNED_BYTE;throw new Error("Unknown logical texture type "+e)}function gh(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class yh{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[r]*t[r];this.outputShape=n,this.rank=n.length;const r=Sp(this.rank),s=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[];for(let t=0;t<e.length;t++)r.push(`imod(${n[t]}, ${e[t]})`);return r.join()}(e);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${s}));\n      }\n    `}}class xh{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const bh="if (isnan(x)) return x;",vh="return abs(x);",wh=bh+"\n  return (x < 0.0) ? 0.0 : x;\n",Ch=bh+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",Nh="return (x >= 0.0) ? x : (exp(x) - 1.0);";const $h="return -x;",Eh="return ceil(x);",kh="return floor(x);",Sh="return exp(x);",Th="return exp(x) - 1.0;",Rh="return x;",Ih="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",Ah="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",_h="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n";class Dh{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class Fh{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e;const t=e.length,n=pp("rc",t),r=Sp(t),s=function(e,t){if(1===e)return"rc";let n="";for(let r=0;r<e;r++)n+=t[r],r<e-1&&(n+=",");return n}(t,n),a=n.slice(-2),o=t<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${s});\n\n        setOutput(getChannel(packedInput, ${o}));\n      }\n    `}}const{segment_util:Oh}=xc,Mh=bc,Bh=vc,Ph=wc,Lh=Eu,Vh={};function Wh(e,t=!1){if("linear"===e)return"return x;";if("relu"===e)return t?Ih:wh;if("elu"===e)return t?_h:Nh;if("relu6"===e)return t?Ah:Ch;if("prelu"===e)return t?Up:Wp;throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class zh extends $c{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.warnedAboutMemory=!1,this.warnedAboutCPUBackend=!1,this.pendingDeletes=0,this.disposed=!1,!s().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==e){const e=Rc(s().getNumber("WEBGL_VERSION"));this.binaryCache=((t=s().getNumber("WEBGL_VERSION"))in Vh||(Vh[t]={}),Vh[t]),this.gpgpu=new Od(e),this.canvas=e.canvas,this.gpgpuCreatedLocally=!0}else this.gpgpu=e,this.binaryCache={},this.gpgpuCreatedLocally=!1,this.canvas=e.gl.canvas;var t;this.textureManager=new hh(this.gpgpu),this.numMBBeforeWarning=null==s().global.screen?1024:s().global.screen.height*s().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new Nc(this,qa())}numDataIds(){return this.texData.numDataIds()+(this.cpuBackend?this.cpuBackend.numDataIds():0)-this.pendingDeletes}write(e,t,n){if((s().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||s().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const r={};return this.texData.set(r,{shape:t,dtype:n,values:e,usage:Ac.UPLOAD}),r}move(e,t,n,r){if(s().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===r)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:r,values:t,usage:Ac.UPLOAD})}readSync(e){const t=this.texData.get(e),{values:n,dtype:r,complexTensors:s,slice:a,shape:o,isPacked:i}=t;if(null!=a){let t;t=i?new Dh(o,Rh):new xh(o,Rh);const n=this.runWebGLProgram(t,[{dataId:e,shape:o,dtype:r}],r),s=this.readSync(n.dataId);return this.disposeData(n.dataId),s}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===r)return n;const u=null!=this.activeTimers;let l,c;if(u&&(l=Z()),"complex64"===r){c=fc(s.real.dataSync(),s.imag.dataSync())}else c=this.getValuesFromTexture(e);return u&&(this.downloadWaitMs+=Z()-l),this.convertAndCacheOnCPU(e,c)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise(e=>t.push(e))}const t=this.texData.get(e),{values:n,shape:r,slice:a,dtype:o,complexTensors:i,isPacked:u}=t;if(null!=a){let t;t=u?new Dh(r,Rh):new xh(r,Rh);const n=this.runWebGLProgram(t,[{dataId:e,shape:r,dtype:o}],o),s=this.read(n.dataId);return this.disposeData(n.dataId),s}if(null!=n)return this.convertAndCacheOnCPU(e);if(!s().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===s().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let l,c,p=null;if("complex64"!==o&&s().get("WEBGL_BUFFER_SUPPORTED")){l=this.decode(e);const t=this.texData.get(l.dataId);p=this.gpgpu.createBufferFromTexture(t.texture,...Fc(r))}if(this.pendingRead.set(e,[]),"complex64"!==o&&await this.gpgpu.createAndWaitForFence(),"complex64"===o){const e=await Promise.all([i.real.data(),i.imag.data()]);c=fc(e[0],e[1])}else if(null==p)c=this.getValuesFromTexture(e);else{const e=E(r);c=this.gpgpu.downloadFloat32MatrixFromBuffer(p,e)}null!=l&&this.disposeData(l.dataId);const d=this.convertAndCacheOnCPU(e,c),h=this.pendingRead.get(e);return this.pendingRead.delete(e),h.forEach(e=>e(d)),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e),this.pendingDeletes--),d}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!Pc(n)){if(s().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:r}=this.texData.get(e),a=E(t);if(s().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),r=this.texData.get(n.dataId),s=this.gpgpu.downloadMatrixFromPackedTexture(r.texture,...Fc(t)).subarray(0,a);return this.disposeData(n.dataId),s}const o=s().getBool("WEBGL_PACK")&&!0===r,i=o?Qc(t):t,u=o?new gd(i):new md(i),l=this.runWebGLProgram(u,[{shape:i,dtype:n,dataId:e}],"float32"),c=this.texData.get(l.dataId),p=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(c.texture,c.texShape[0],c.texShape[1]).subarray(0,a);return this.disposeData(l.dataId),p}async time(e){const t=this.activeTimers,n=[];let r=!1;null==this.programTimersStack?(this.programTimersStack=n,r=!0):this.activeTimers.push(n),this.activeTimers=n,e();const a=$(this.activeTimers.map(e=>e.query)).filter(e=>null!=e),o=$(this.activeTimers.map(e=>e.name)).filter(e=>null!=e);this.activeTimers=t,r&&(this.programTimersStack=null);const i={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};if(s().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(a);i.kernelMs=v(e),i.getExtraProfileInfo=()=>e.map((e,t)=>({name:o[t],ms:e})).map(e=>`${e.name}: ${e.ms}`).join(", ")}else i.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,i}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return s().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:Z(),endMs:null}}endTimer(e){return s().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=Z(),e)}async getQueryTime(e){if(s().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e){if(this.pendingDisposal.has(e))return;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),void this.pendingDeletes++;if(!this.texData.has(e))return;this.releaseGPUData(e);const{complexTensors:t}=this.texData.get(e);null!=t&&(t.real.dispose(),t.imag.dispose()),this.texData.delete(e)}releaseGPUData(e){const{texture:t,dtype:n,texShape:r,usage:s,isPacked:a,slice:o}=this.texData.get(e),i=o&&o.origDataId||e,u=this.dataRefCount.get(i);u>1?this.dataRefCount.set(i,u-1):(this.dataRefCount.delete(i),null!=t&&(this.numBytesInGPU-=this.computeBytes(r,n),this.textureManager.releaseTexture(t,r,s,a)));const l=this.texData.get(e);l.texture=null,l.texShape=null,l.isPacked=!1,l.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture}getDataInfo(e){return this.texData.get(e)}getCPUBackend(){return s().getBool("WEBGL_CPU_FORWARD")?(null==this.cpuBackend&&(this.cpuBackend=qa().findBackend("cpu")),this.cpuBackend):null}shouldExecuteOnCPU(e,t=128){const n=this.getCPUBackend();return this.warnedAboutCPUBackend||null!=n||s().getBool("IS_TEST")||(console.warn("Your application contains ops that are small enough to be executed on the CPU backend, however the CPU backend cannot be found. Consider importing the CPU backend (@tensorflow/tfjs-backend-cpu) for better performance."),this.warnedAboutCPUBackend=!0),null!=n&&e.every(e=>null==this.texData.get(e.dataId).texture&&E(e.shape)<t)}getGPGPUContext(){return this.gpgpu}complex(e,t){const n=this.makeOutput(e.shape,"complex64");return this.texData.get(n.dataId).complexTensors={real:qa().keep(e.clone()),imag:qa().keep(t.clone())},n}real(e){return this.texData.get(e.dataId).complexTensors.real.clone()}imag(e){return this.texData.get(e.dataId).complexTensors.imag.clone()}slice(e,t,n){if(this.shouldExecuteOnCPU([e]))return this.cpuBackend.slice(e,t,n);if(0===E(n))return is([],n,e.dtype);const{isPacked:r}=this.texData.get(e.dataId),a=Xr(e.shape,t,n);if(r||!a){const r=s().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new ph(n):new lh(n),a=r.getCustomSetupFunc(t);return this.compileAndRun(r,[e],null,a)}return this.uploadToGPU(e.dataId),this.shallowSlice(e,t,n)}shallowSlice(e,t,n){const r=this.texData.get(e.dataId),s=this.makeOutput(n,e.dtype),a=this.texData.get(s.dataId);Object.assign(a,r),a.shape=n,a.dtype=e.dtype;let o=Yr(t,e.strides);r.slice&&(o+=r.slice.flatOffset),a.slice={flatOffset:o,origDataId:r.slice&&r.slice.origDataId||e.dataId};const i=this.dataRefCount.get(a.slice.origDataId)||1;return this.dataRefCount.set(a.slice.origDataId,i+1),s}stridedSlice(e,t,n,r){if(this.shouldExecuteOnCPU([e]))return this.cpuBackend.stridedSlice(e,t,n,r);const s=Vr(t,n,r);if(s.some(e=>0===e))return is([],s);const a=new dh(t,r,s);return this.compileAndRun(a,[e])}reverse(e,t){const n=s().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new ah(e.shape,t):new sh(e.shape,t);return this.compileAndRun(n,[e])}concat(e,t){if("complex64"===e[0].dtype){const n=e.map(e=>qo(e)),r=e.map(e=>Go(e));return ur(this.concat(n,t),this.concat(r,t))}if(this.shouldExecuteOnCPU(e))return this.cpuBackend.concat(e,t);if(1===e.length)return e[0];if(e.length>s().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const n=Math.floor(e.length/2),r=this.concat(e.slice(0,n),t),s=this.concat(e.slice(n),t);return this.concat([r,s],t)}if(s().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&e[0].rank>1){const n=new Xp(e.map(e=>e.shape),t);return this.compileAndRun(n,e)}const n=os(e.map(e=>e.shape),t),r=e.map(e=>e.as2D(-1,E(e.shape.slice(t)))),a=new Kp(r.map(e=>e.shape));return this.compileAndRun(a,r).reshape(n)}neg(e){if(this.shouldExecuteOnCPU([e]))return this.cpuBackend.neg(e);if(s().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,$h,e.dtype);const t=new xh(e.shape,$h);return this.compileAndRun(t,[e])}batchMatMul(e,t,n,r){const s=n?e.shape[2]:e.shape[1],a=r?t.shape[1]:t.shape[2],o=n?e.shape[1]:e.shape[2],[i,,]=e.shape;if((1===s||1===a)&&o>1e3){n&&(e=fn(e,[0,2,1])),r&&(t=fn(t,[0,2,1]));const s=1===a?e:e.as3D(i,o,1),u=1===a?2:1,l=1===a?t.as3D(i,1,o):t;return this.multiply(s,l).sum(u,!0)}const u=Ne(e.dtype,t.dtype),l=new Ud(e.shape,[i,s,a],n,r);return this.compileAndRun(l,[e,t],u)}fusedBatchMatMul({a:e,b:t,transposeA:n,transposeB:r,bias:s,activation:a,preluActivationWeights:o}){const i=n?e.shape[2]:e.shape[1],u=r?t.shape[1]:t.shape[2],[l,,]=e.shape,c=Ne(e.dtype,t.dtype),p=null!=s,d=null!=o,h=a?Wh(a,!0):null,f=new Ud(e.shape,[l,i,u],n,r,p,h,d),m=[e,t];return s&&m.push(s),o&&m.push(o),this.compileAndRun(f,m,c)}multiply(e,t){if("complex64"===e.dtype){const n=this.texData.get(e.dataId),r=this.texData.get(t.dataId),s=new Bp(Op,e.shape,t.shape),a=new Bp(Mp,e.shape,t.shape),o=[this.makeComplexComponentTensorInfo(e,n.complexTensors.real),this.makeComplexComponentTensorInfo(e,n.complexTensors.imag),this.makeComplexComponentTensorInfo(t,r.complexTensors.real),this.makeComplexComponentTensorInfo(t,r.complexTensors.imag)],i=this.compileAndRun(s,o),u=this.compileAndRun(a,o),l=this.complex(i,u);return i.dispose(),u.dispose(),l}if(this.shouldExecuteOnCPU([e,t]))return this.cpuBackend.multiply(e,t);if(s().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,Vp,e.dtype);const n=new zp(Vp,e.shape,t.shape);return this.compileAndRun(n,[e,t],e.dtype)}batchNorm(e,t,n,r,a,o){const i=[e,t,n];let u=null;null!=r&&(u=r.shape,i.push(r));let l=null;if(null!=a&&(l=a.shape,i.push(a)),s().getBool("WEBGL_PACK_NORMALIZATION")){const r=new Fp(e.shape,t.shape,n.shape,u,l,o);return this.compileAndRun(r,i)}const c=new Dp(e.shape,t.shape,n.shape,u,l,o);return this.compileAndRun(c,i)}localResponseNormalization4D(e,t,n,r,a){const o=s().getBool("WEBGL_PACK_NORMALIZATION")?new Vd(e.shape,t,n,r,a):new Pd(e.shape,t,n,r,a);return this.compileAndRun(o,[e])}LRNGrad(e,t,n,r,s,a,o){const i=new Ld(t.shape,r,s,a,o);return this.compileAndRun(i,[t,n,e])}tile(e,t){if("string"===e.dtype){const n=this.readSync(e.dataId).map(e=>ne(e)),r=vo(e.shape,e.dtype,n);return Bh(r,t)}const n=new yh(e.shape,t);return this.compileAndRun(n,[e])}pad(e,t,n){const r=s().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Kd(e.shape,t,n):new jd(e.shape,t,n);return this.compileAndRun(r,[e])}gather(e,t,n){if(this.shouldExecuteOnCPU([e,t]))return this.cpuBackend.gather(e,t,n);const r=new Nd(e.shape,t.size,n);return this.compileAndRun(r,[e,t])}batchToSpaceND(e,t,n){w(e.rank<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");const r=t.reduce((e,t)=>e*t),s=uc(e.shape,t,r),a=lc(s.length,t.length),o=cc(e.shape,t,r),i=pc(n,t.length),u=dc(o,n,t.length);return fn(e.reshape(s),a).reshape(o).slice(i,u)}spaceToBatchND(e,t,n){w(e.rank<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");const r=t.reduce((e,t)=>e*t),s=[[0,0]];s.push(...n);for(let n=1+t.length;n<e.shape.length;++n)s.push([0,0]);const a=e.pad(s),o=uc(a.shape,t,r,!1),i=lc(o.length,t.length,!1),u=cc(a.shape,t,r,!1),l=fn(a.reshape(o),i);return pt(l,u)}reduce(e,t,n){const r=e.shape[0],s=e.shape[1],a=Es(s),o=new Qd({windowSize:a,inSize:s,batchSize:r},t),i=this.compileAndRun(o,[e],n);return 1===i.shape[1]?i:this.reduce(i,t,n)}argReduce(e,t,n=null){let r=e.shape[0],s=e.shape[1];null!=n&&(r=n.shape[0],s=n.shape[1]);const a=Es(s),o=new lp({windowSize:a,inSize:s,batchSize:r},t,null==n),i=[e];null!=n&&i.push(n);const u=this.compileAndRun(o,i,"int32");return 1===u.shape[1]?u:this.argReduce(e,t,u)}argReducePacked(e,t,n=null){const r=null!=n?n.shape:e.shape,s=Es(r[r.length-1]),a=new Ip(r,s,t,null==n),o=null==n?[e]:[e,n],i=this.compileAndRun(a,o,"int32");return i.rank===e.rank?this.argReducePacked(e,t,i):i}sum(e,t){gt("sum",t,e.rank);const[n,r]=ft(e.shape,t),s=E(r),a=e.as2D(-1,s),o=$e(e.dtype);return this.reduce(a,"sum",o).reshape(n)}prod(e,t){if(this.shouldExecuteOnCPU([e]))return this.cpuBackend.prod(e,t);const[n,r]=ft(e.shape,t),s=E(r),a=e.as2D(-1,s),o=$e(e.dtype);return this.reduce(a,"prod",o).reshape(n)}unsortedSegmentSum(e,t,n){let r=0;const s=yt([r],e.rank);let a=e;null!=s&&(a=fn(e,s),r=bt(1,e.rank)[0]);const o=Oh.computeOutShape(a.shape,r,n),i=E([a.shape[r]]),u=a.as2D(-1,i),l=$e(e.dtype);let c=this.segOpCompute(u,"unsortedSegmentSum",t,l,n).reshape(o);return null!=s&&(c=fn(c,xt(s))),c}segOpCompute(e,t,n,r,s){const a=e.shape[0],o=e.shape[1],i=Oh.segOpComputeOptimalWindowSize(o,s),u=new ih({windowSize:i,inSize:o,batchSize:a,numSegments:s},t),l=this.compileAndRun(u,[e,n],r);return l.shape[1]===s?l:(n=ji(0,s).tile([o/i]),this.segOpCompute(l,t,n,r,s))}argMinMaxReduce(e,t,n){const r=[t];if(gt("arg"+n.charAt(0).toUpperCase()+n.slice(1),r,e.rank),!s().getBool("WEBGL_PACK_REDUCE")||e.rank<=2){const[t,s]=ft(e.shape,r),a=E(s),o=e.as2D(-1,a);return this.argReduce(o,n).reshape(t)}return this.argReducePacked(e,n)}argMin(e,t){return this.argMinMaxReduce(e,t,"min")}argMax(e,t){return this.argMinMaxReduce(e,t,"max")}cumsum(e,t,n,r){if(t!==e.rank-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${e.rank-1} but got axis=`+t);const s=e.shape[t];let a=e;for(let t=0;t<=Math.ceil(Math.log2(s))-1;t++){const n=new ud(e.shape,!1,r),s=n.getCustomSetupFunc(t),o=a;a=this.compileAndRun(n,[a],a.dtype,s),o.dispose()}if(n){const t=new ud(e.shape,n,r),s=a;a=this.compileAndRun(t,[a]),s.dispose()}return a}equal(e,t){if(s().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,"\n  return vec4(equal(a, b));\n","bool");const n=new zp("return float(a == b);",e.shape,t.shape);return this.compileAndRun(n,[e,t],"bool")}notEqual(e,t){if(s().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,"\n  return vec4(notEqual(a, b));\n","bool");const n=new zp("return float(a != b);",e.shape,t.shape);return this.compileAndRun(n,[e,t],"bool")}less(e,t){if(this.shouldExecuteOnCPU([e,t]))return this.cpuBackend.less(e,t);if(s().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,"\n  return vec4(lessThan(a, b));\n","bool");const n=new zp("return float(a < b);",e.shape,t.shape);return this.compileAndRun(n,[e,t],"bool")}lessEqual(e,t){if(s().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,"\n  return vec4(lessThanEqual(a, b));\n","bool");const n=new zp("return float(a <= b);",e.shape,t.shape);return this.compileAndRun(n,[e,t],"bool")}greater(e,t){if(this.shouldExecuteOnCPU([e,t]))return this.cpuBackend.greater(e,t);if(s().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,"\n  return vec4(greaterThan(a, b));\n","bool");const n=new zp("return float(a > b);",e.shape,t.shape);return this.compileAndRun(n,[e,t],"bool")}greaterEqual(e,t){if(s().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,"\n  return vec4(greaterThanEqual(a, b));\n","bool");const n=new zp("return float(a >= b);",e.shape,t.shape);return this.compileAndRun(n,[e,t],"bool")}logicalNot(e){const t=new xh(e.shape,"return float(!(x >= 1.0));");return this.compileAndRun(t,[e])}logicalAnd(e,t){if(s().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n","bool");const n=new zp("return float(a >= 1.0 && b >= 1.0);",e.shape,t.shape);return this.compileAndRun(n,[e,t],"bool")}logicalOr(e,t){if(s().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n","bool");const n=new zp("return float(a >= 1.0 || b >= 1.0);",e.shape,t.shape);return this.compileAndRun(n,[e,t],"bool")}select(e,t,n){const r=new uh(e.rank,t.shape,t.rank);return this.compileAndRun(r,[e,t,n],Ne(t.dtype,n.dtype))}where(e){hc("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return Lh(e.shape,t)}topk(e,t,n){const r=e.dataSync();return Ph(r,e.shape,e.dtype,t)}min(e,t){gt("min",t,e.rank);const[n,r]=ft(e.shape,t),s=E(r),a=e.as2D(-1,s);return this.reduce(a,"min",a.dtype).reshape(n)}minimum(e,t){if(this.shouldExecuteOnCPU([e,t]))return this.cpuBackend.minimum(e,t);const n=s().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Gp("\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",e.shape,t.shape):new zp("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",e.shape,t.shape);return this.compileAndRun(n,[e,t])}mod(e,t){const n=s().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Gp("\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",e.shape,t.shape):new zp("if (b == 0.0) return NAN;\n  return mod(a, b);",e.shape,t.shape);return this.compileAndRun(n,[e,t])}maximum(e,t){if(this.shouldExecuteOnCPU([e,t]))return this.cpuBackend.maximum(e,t);const n=s().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Gp("\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",e.shape,t.shape):new zp("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",e.shape,t.shape);return this.compileAndRun(n,[e,t])}all(e,t){gt("all",t,e.rank);const[n,r]=ft(e.shape,t),s=E(r),a=e.as2D(-1,s);return this.reduce(a,"all",a.dtype).reshape(n)}any(e,t){gt("any",t,e.rank);const[n,r]=ft(e.shape,t),s=E(r),a=e.as2D(-1,s);return this.reduce(a,"any",a.dtype).reshape(n)}floorDiv(e,t){if(s().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n","int32");const n=new zp("\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",e.shape,t.shape);return this.compileAndRun(n,[e,t],"int32")}add(e,t){if("complex64"===e.dtype&&"complex64"===t.dtype)return this.complexSeparableBinaryOp(e,t,Pp);if(this.shouldExecuteOnCPU([e,t]))return this.cpuBackend.add(e,t);const n=Ne(e.dtype,t.dtype);if(s().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,Pp,n);const r=new zp(Pp,e.shape,t.shape);return this.compileAndRun(r,[e,t],n)}packedUnaryOp(e,t,n){const r=new Dh(e.shape,t);return this.compileAndRun(r,[e],n)}packedBinaryOp(e,t,n,r,s=!1){const a=new Gp(n,e.shape,t.shape,s);return this.compileAndRun(a,[e,t],r)}complexSeparableBinaryOp(e,t,n){const r=this.texData.get(e.dataId),s=this.texData.get(t.dataId),[a,o]=[[r.complexTensors.real,s.complexTensors.real],[r.complexTensors.imag,s.complexTensors.imag]].map(r=>{const[s,a]=r,o=this.makeComplexComponentTensorInfo(e,s),i=this.makeComplexComponentTensorInfo(t,a),u=new zp(n,e.shape,t.shape);return this.compileAndRun(u,[o,i],Ne(s.dtype,a.dtype))}),i=this.complex(a,o);return a.dispose(),o.dispose(),i}makeComplexComponentTensorInfo(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}addN(e){if(1===e.length)return e[0];if(e.length>s().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(e.length/2),n=this.addN(e.slice(0,t)),r=this.addN(e.slice(t));return this.addN([n,r])}const t=e.map(e=>e.dtype).reduce((e,t)=>Ne(e,t)),n=e.map(e=>e.shape),r=s().getBool("WEBGL_PACK")?new up(e[0].shape,n):new ip(e[0].shape,n);return this.compileAndRun(r,e,t)}subtract(e,t){if("complex64"===e.dtype&&"complex64"===t.dtype)return this.complexSeparableBinaryOp(e,t,Lp);if(this.shouldExecuteOnCPU([e,t]))return this.cpuBackend.subtract(e,t);const n=Ne(e.dtype,t.dtype);if(s().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,Lp,e.dtype);const r=new zp(Lp,e.shape,t.shape);return this.compileAndRun(r,[e,t],n)}pow(e,t){const n=s().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Gp("\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",e.shape,t.shape):new zp("\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nif (b == 0.0) {\n  return 1.0;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",e.shape,t.shape),r=Ne(e.dtype,t.dtype);return this.compileAndRun(n,[e,t],r)}ceil(e){if(this.shouldExecuteOnCPU([e]))return this.cpuBackend.ceil(e);if(s().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,Eh,e.dtype);const t=new xh(e.shape,Eh);return this.compileAndRun(t,[e])}floor(e){if(this.shouldExecuteOnCPU([e]))return this.cpuBackend.floor(e);if(s().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,kh,e.dtype);const t=new xh(e.shape,kh);return this.compileAndRun(t,[e])}sign(e){const t=new xh(e.shape,"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n");return this.compileAndRun(t,[e])}isNaN(e){const t=new xh(e.shape,"return float(isnan(x));");return this.compileAndRun(t,[e],"bool")}isInf(e){const t=new xh(e.shape,"return float(isinf(x));");return this.compileAndRun(t,[e],"bool")}isFinite(e){const t=new xh(e.shape,"return float(!isnan(x) && !isinf(x));");return this.compileAndRun(t,[e],"bool")}round(e){const t=new xh(e.shape,"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n");return this.compileAndRun(t,[e])}exp(e){if(this.shouldExecuteOnCPU([e]))return this.cpuBackend.exp(e);if(s().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,Sh,e.dtype);const t=new xh(e.shape,Sh);return this.compileAndRun(t,[e])}expm1(e){if(this.shouldExecuteOnCPU([e]))return this.cpuBackend.expm1(e);if(s().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,Th,e.dtype);const t=new xh(e.shape,Th);return this.compileAndRun(t,[e])}softmax(e,t){const n=_([t],e.shape),r=si(e,n),s=mt(r.shape,n),a=this.subtract(e,r.reshape(s)),o=this.exp(a),i=this.sum(o,n).reshape(s);return He(o,i)}log(e){if(this.shouldExecuteOnCPU([e]))return this.cpuBackend.log(e);if(s().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",e.dtype);const t=new xh(e.shape,"if (x < 0.0) return NAN;\n  return log(x);");return this.compileAndRun(t,[e])}log1p(e){const t=new xh(e.shape,"return log(1.0 + x);");return this.compileAndRun(t,[e])}sqrt(e){const t=new xh(e.shape,"return sqrt(x);");return this.compileAndRun(t,[e])}rsqrt(e){if(this.shouldExecuteOnCPU([e]))return this.cpuBackend.rsqrt(e);const t=new xh(e.shape,"return inversesqrt(x);");return this.compileAndRun(t,[e])}reciprocal(e){const t=new xh(e.shape,"return 1.0 / x;");return this.compileAndRun(t,[e])}relu(e){let t;return t=s().getBool("WEBGL_PACK")?new Dh(e.shape,Ih):new xh(e.shape,wh),this.compileAndRun(t,[e])}relu6(e){let t;return t=s().getBool("WEBGL_PACK")?new Dh(e.shape,Ah):new xh(e.shape,Ch),this.compileAndRun(t,[e])}prelu(e,t){const n=s().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Gp(Up,e.shape,t.shape):new zp(Wp,e.shape,t.shape);return this.compileAndRun(n,[e,t])}elu(e){if(s().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,_h,e.dtype);const t=new xh(e.shape,Nh);return this.compileAndRun(t,[e])}eluDer(e,t){const n=s().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Gp("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",e.shape,t.shape):new zp("return (b >= 1.0) ? a : a * (b + 1.0);",e.shape,t.shape);return this.compileAndRun(n,[e,t])}selu(e){const t=new xh(e.shape,"\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = 1.7580993408473768;\n  float scale = 1.0507009873554805;\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n");return this.compileAndRun(t,[e])}int(e){const t=new xh(e.shape,"return float(int(x));");return this.compileAndRun(t,[e],"int32")}clip(e,t,n){let r;r=s().getBool("WEBGL_PACK_CLIP")?new Hp(e.shape):new qp(e.shape);const a=r.getCustomSetupFunc(t,n);return this.compileAndRun(r,[e],null,a)}abs(e){if(this.shouldExecuteOnCPU([e]))return this.cpuBackend.abs(e);if(s().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,vh,e.dtype);const t=new xh(e.shape,vh);return this.compileAndRun(t,[e])}complexAbs(e){const t=this.texData.get(e.dataId),n=new jp(e.shape),r=[this.makeComplexComponentTensorInfo(e,t.complexTensors.real),this.makeComplexComponentTensorInfo(e,t.complexTensors.imag)];return this.compileAndRun(n,r)}sigmoid(e){const t=new xh(e.shape,"return 1.0 / (1.0 + exp(-1.0 * x));");return this.compileAndRun(t,[e])}softplus(e){const t=new xh(e.shape,"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n");return this.compileAndRun(t,[e])}sin(e){const t=new xh(e.shape,"if (isnan(x)) return x;\n  return sin(x);\n");return this.compileAndRun(t,[e])}cos(e){const t=new xh(e.shape,"if (isnan(x)) return x;\n  return cos(x);\n");return this.compileAndRun(t,[e])}tan(e){const t=new xh(e.shape,"return tan(x);");return this.compileAndRun(t,[e])}asin(e){const t=new xh(e.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n");return this.compileAndRun(t,[e])}acos(e){const t=new xh(e.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n");return this.compileAndRun(t,[e])}atan(e){const t=new xh(e.shape,"if (isnan(x)) return x;\n  return atan(x);\n");return this.compileAndRun(t,[e])}atan2(e,t){const n=s().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Gp("\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",e.shape,t.shape):new zp("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",e.shape,t.shape);return this.compileAndRun(n,[e,t])}sinh(e){const t=new xh(e.shape,"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n");return this.compileAndRun(t,[e])}cosh(e){const t=new xh(e.shape,"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n");return this.compileAndRun(t,[e])}tanh(e){const t=new xh(e.shape,"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n");return this.compileAndRun(t,[e])}asinh(e){const t=new xh(e.shape,"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));");return this.compileAndRun(t,[e])}acosh(e){const t=new xh(e.shape,"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\n  return log(x + sqrt(x * x - 1.0));");return this.compileAndRun(t,[e])}atanh(e){const t=new xh(e.shape,"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;");return this.compileAndRun(t,[e])}erf(e){const t=new xh(e.shape,'\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = 0.3275911;\n  float a1 = 0.254829592;\n  float a2 = -0.284496736;\n  float a3 = 1.421413741;\n  float a4 = -1.453152027;\n  float a5 = 1.061405429;\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n');return this.compileAndRun(t,[e])}step(e,t){const n=new xh(e.shape,function(e=0){return`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${e});\n  `}(t));return this.compileAndRun(n,[e])}conv2dByMatMul(e,t,n,r,a,o){const i=e.shape,u=this.texData.get(e.dataId),l=n.inChannels,c=i[0]*i[1]*i[2],p=n.outChannels,d="channelsLast"===n.dataFormat,h=(1===c||1===p)&&l>1e3,f=i[2]%2!=0&&!!u.isPacked;if(h||!s().getBool("WEBGL_LAZILY_UNPACK")||!s().getBool("WEBGL_PACK_BINARY_OPERATIONS")||!f){const s=d?i[0]*i[1]*i[2]:i[0]*i[2]*i[3],u=this.reshape(e,[1,s,n.inChannels]),l=this.reshape(t,[1,n.inChannels,n.outChannels]);return this.reshape(this.fusedBatchMatMul({a:u,b:l,transposeA:!1,transposeB:!1,bias:r,activation:a,preluActivationWeights:o}),n.outShape)}const m=d?i[0]*i[1]*(i[2]+1):i[0]*i[2]*(i[3]+1),g={dataId:e.dataId,shape:[1,m,n.inChannels],dtype:e.dtype},y=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,w(Zc(u.shape,g.shape),()=>`packed reshape ${u.shape} to ${g.shape} isn't free`);const x=this.reshape(t,[1,n.inChannels,n.outChannels]),b=this.fusedBatchMatMul({a:g,b:x,transposeA:!1,transposeB:!1,bias:r,activation:a,preluActivationWeights:o}),v=this.texData.get(b.dataId);return w(v.isPacked,()=>"batchMatMul result is expected to be packed"),u.shape=y,v.shape=n.outShape,qa().makeTensorFromDataId(b.dataId,n.outShape,b.dtype)}conv2dWithIm2Row(e,t,n,r,s,a){const{filterWidth:o,filterHeight:i,inChannels:u,outWidth:l,outHeight:c,dataFormat:p}=n,d="channelsLast"===p,h=o*i*u,f=c*l,m=[h,f],g=e.squeeze([0]),y=t.reshape([1,h,-1]),x=new Bd(m,g.shape,n),b=this.compileAndRun(x,[g]).reshape([1,m[0],m[1]]),v=null!=r,w=null!=a,C=s?Wh(s,!0):null,N=new Ud(b.shape,[1,f,n.outChannels],!0,!1,v,C,w),$=[b,y];r&&$.push(r),w&&$.push(a);const E=this.compileAndRun(N,$);return d?E.reshape([1,c,l,n.outChannels]):E.reshape([1,n.outChannels,c,l])}fusedConv2d({input:e,filter:t,convInfo:n,bias:r,activation:a,preluActivationWeights:o}){if(1===n.filterHeight&&1===n.filterWidth&&1===n.dilationHeight&&1===n.dilationWidth&&1===n.strideHeight&&1===n.strideWidth&&("SAME"===n.padInfo.type||"VALID"===n.padInfo.type))return this.conv2dByMatMul(e,t,n,r,a,o);if(s().getBool("WEBGL_CONV_IM2COL")&&1===e.shape[0])return this.conv2dWithIm2Row(e,t,n,r,a,o);const i=null!=r,u=null!=o,l=a?Wh(a,!1):null,c=new rd(n,i,l,u),p=[e,t];return r&&p.push(r),o&&p.push(o),this.compileAndRun(c,p)}conv2d(e,t,n){if(1===n.filterHeight&&1===n.filterWidth&&1===n.dilationHeight&&1===n.dilationWidth&&1===n.strideHeight&&1===n.strideWidth&&("SAME"===n.padInfo.type||"VALID"===n.padInfo.type))return this.conv2dByMatMul(e,t,n);if(s().getBool("WEBGL_CONV_IM2COL")&&1===e.shape[0])return this.conv2dWithIm2Row(e,t,n);const r=new rd(n);return this.compileAndRun(r,[e,t])}conv2dDerInput(e,t,n){const r=new Jp(n);return this.compileAndRun(r,[e,t])}conv2dDerFilter(e,t,n){const r=new Qp(n);return this.compileAndRun(r,[e,t])}fusedDepthwiseConv2D({input:e,filter:t,convInfo:n,bias:r,activation:a,preluActivationWeights:o}){const i=s().getBool("WEBGL_PACK_DEPTHWISECONV")&&n.strideWidth<=2&&n.outChannels/n.inChannels==1,u=a?Wh(a,i):null,l=[e,t],c=null!=r,p=null!=o;let d;return c&&l.push(r),p&&l.push(o),i?(d=new od(n,c,u,p),this.compileAndRun(d,l)):(d=new ad(n,c,u,p),this.compileAndRun(d,l))}depthwiseConv2D(e,t,n){let r;return s().getBool("WEBGL_PACK_DEPTHWISECONV")&&n.strideWidth<=2&&n.outChannels/n.inChannels==1?(r=new od(n),this.compileAndRun(r,[e,t])):(r=new ad(n),this.compileAndRun(r,[e,t]))}depthwiseConv2DDerInput(e,t,n){const r=new nd(n);return this.compileAndRun(r,[e,t])}depthwiseConv2DDerFilter(e,t,n){const r=new td(n);return this.compileAndRun(r,[e,t])}conv3d(e,t,n){const r=new sd(n);return this.compileAndRun(r,[e,t])}conv3dDerInput(e,t,n){const r=new ed(n);return this.compileAndRun(r,[e,t])}conv3dDerFilter(e,t,n){const r=new Zp(n);return this.compileAndRun(r,[e,t])}maxPool(e,t){const n=new Xd(t,"max",!1);return this.compileAndRun(n,[e])}avgPool(e,t){const n=new Xd(t,"avg",!1);return this.compileAndRun(n,[e],"float32")}maxPoolBackprop(e,t,n,r){const s=new Xd(r,"max",!0),a=this.compileAndRun(s,[t]),o=new Wd(r),i=this.compileAndRun(o,[e,a],t.dtype);return a.dispose(),i}avgPoolBackprop(e,t,n){const r=new Ap(n);return this.compileAndRun(r,[e],t.dtype)}cast(e,t){return mc(e,t,this)}unstack(e,t){const n=e.shape[t],r=new Array(e.rank-1);let s=0;for(let n=0;n<e.rank;n++)n!==t&&(r[s++]=e.shape[n]);const a=new Array(e.rank).fill(0),o=e.shape.slice();o[t]=1;const i=new Array(n);for(let n=0;n<i.length;n++)a[t]=n,i[n]=this.slice(e,a,o).reshape(r);return i}avgPool3d(e,t){const n=new Yd(t,"avg",!1);return this.compileAndRun(n,[e],"float32")}avgPool3dBackprop(e,t,n){const r=new _p(n);return this.compileAndRun(r,[e],t.dtype)}maxPool3d(e,t){const n=new Yd(t,"max",!1);return this.compileAndRun(n,[e],"float32")}maxPool3dBackprop(e,t,n,r){const s=new Yd(r,"max",!0),a=this.compileAndRun(s,[t]),o=new zd(r),i=this.compileAndRun(o,[e,a],t.dtype);return a.dispose(),i}reshape(e,t){const n=this.texData.get(e.dataId);if(n.isPacked&&!Zc(e.shape,t)&&(null===n.texture||!Zc(n.shape,t))){const n=this.packedReshape(e,t);return qa().makeTensorFromDataId(n.dataId,n.shape,n.dtype)}return gc(e,t)}resizeBilinear(e,t,n,r){const a=s().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new th(e.shape,t,n,r):new eh(e.shape,t,n,r);return this.compileAndRun(a,[e],"float32")}resizeBilinearBackprop(e,t,n){const r=new Zd(e,t,n);return this.compileAndRun(r,[e])}resizeNearestNeighbor(e,t,n,r){const s=new rh(e.shape,t,n,r);return this.compileAndRun(s,[e])}resizeNearestNeighborBackprop(e,t,n){const r=new nh(e,t,n);return this.compileAndRun(r,[e])}multinomial(e,t,n,r){const s=t?e:pu(e),a=s.shape[0],o=s.shape[1],i=new Gd(a,o,n),u=i.getCustomSetupFunc(r);return this.compileAndRun(i,[s],"int32",u)}oneHot(e,t,n,r){const s=new qd(e.size,t,n,r);return this.compileAndRun(s,[e])}diag(e){const t=new fd(e.size);return this.compileAndRun(t,[e])}cropAndResize(e,t,n,r,s,a){const o=new id(e.shape,t.shape,r,s,a);return this.compileAndRun(o,[e,t,n],"float32")}depthToSpace(e,t,n){w(t>1,()=>"blockSize should be > 1 for depthToSpace, but was: "+t);const r=e.shape[0],s="NHWC"===n?e.shape[1]:e.shape[2],a="NHWC"===n?e.shape[2]:e.shape[3],o="NHWC"===n?e.shape[3]:e.shape[1],i=s*t,u=a*t,l=o/(t*t),c=new hd("NHWC"===n?[r,i,u,l]:[r,l,i,u],t,n);return this.compileAndRun(c,[e])}split(e,t,n){return Mh(e,t,n)}scatterND(e,t,n){const{sliceRank:r,numUpdates:s,sliceSize:a,strides:o,outputSize:i}=Fa(0,e,n),u=[i/a,a],l=e.reshape([s,r]),c=t.reshape([s,a]);if(0===i)return gc(is([]),n);const p=Xe(0),d=new oh(s,r,l.rank,c.rank,o,u);return this.compileAndRun(d,[c,l,p]).reshape(n)}sparseToDense(e,t,n,r){const{sliceRank:s,numUpdates:a,strides:o,outputSize:i}=Fa(0,e,n),u=new oh(a,s,e.rank,t.rank,o,[i,1],!1);return this.compileAndRun(u,[t,e,r]).reshape(n)}fft(e){return this.fftImpl(e,!1)}ifft(e){return this.fftImpl(e,!0)}fftImpl(e,t){const n=this.texData.get(e.dataId),r=new wd(bd,e.shape,t),s=new wd(vd,e.shape,t),a=[this.makeComplexComponentTensorInfo(e,n.complexTensors.real),this.makeComplexComponentTensorInfo(e,n.complexTensors.imag)],o=this.compileAndRun(r,a),i=this.compileAndRun(s,a),u=this.complex(o,i).as2D(e.shape[0],e.shape[1]);return o.dispose(),i.dispose(),u}gatherND(e,t){const n=t.shape,r=n[n.length-1],[s,a,o,i]=Ia(e,t),u=t.reshape([a,r]),l=e.reshape([e.size/o,o]),c=new $d(r,i,[a,o]);return this.compileAndRun(c,[l,u]).reshape(s)}fill(e,t,n){if("string"===(n=n||q(t))){const r=O(n,E(e));return r.fill(t),qa().makeTensor(r,e,n,this)}{const r=new Cd(e,t),s=r.getCustomSetupFunc(t);return this.compileAndRun(r,[],n,s)}}onesLike(e){if("string"===e.dtype)throw new Error("onesLike is not supported under string dtype");return this.fill(e.shape,1,e.dtype)}zerosLike(e){return this.fill(e.shape,"string"===e.dtype?"":0,e.dtype)}linspace(e,t,n){return yc(e,t,n)}makeTensorInfo(e,t){const n=this.write(null,e,t);return this.texData.get(n).usage=null,{dataId:n,shape:e,dtype:t}}makeOutput(e,t){const{dataId:n}=this.makeTensorInfo(e,t);return qa().makeTensorFromDataId(n,e,t,this)}unpackTensor(e){const t=new Fh(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new Hd(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[Xc(e.shape),...Yc(e.shape)],r={dtype:e.dtype,shape:n,dataId:e.dataId},s=[Xc(t),...Yc(t)],a=new Jd(s,n),o=this.runWebGLProgram(a,[r],e.dtype,null,!0);return{dataId:o.dataId,shape:t,dtype:o.dtype}}decode(e){const t=this.texData.get(e),{isPacked:n,shape:r,dtype:s}=t,a=Qc(r);let o;o=n?new dd(a):new pd(a);return{dtype:s,shape:r,dataId:this.runWebGLProgram(o,[{shape:a,dtype:s,dataId:e}],s,null,!0).dataId}}runWebGLProgram(e,t,n,r,a=!1){const o=this.makeTensorInfo(e.outputShape,n),i=this.texData.get(o.dataId);if(e.packedOutput&&(i.isPacked=!0),e.outPackingScheme===Ic.DENSE){const t=Fc(e.outputShape);i.texShape=t.map(e=>2*e)}if(null!=e.outTexUsage&&(i.usage=e.outTexUsage),0===E(o.shape))return i.values=F(o.dtype,0),o;const u=[],l=t.map(t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&E(t.shape)<=s().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}else if(!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),u.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!Zc(n.shape,t.shape)){const e=t,r=t.shape;t.shape=n.shape,t=this.packedReshape(t,r),u.push(t),n=this.texData.get(t.dataId),e.shape=r}return this.uploadToGPU(t.dataId),{shape:t.shape,texData:n,isUniform:!1}});this.uploadToGPU(o.dataId);const c={shape:o.shape,texData:i,isUniform:!1},p=function(e,t,n){let r="";t.concat(n).forEach(e=>{const t=null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0,n=e.isUniform?"uniform":e.texData.texShape;r+=`${e.shape}_${n}_${t}`});const s=e.userCode;let a=e.constructor.name;return a+="_"+r+"_"+s,a}(e,l,c),d=this.getAndSaveBinary(p,()=>function(e,t,n,r){const a=t.userCode,o=n.map((e,n)=>{const r={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(r.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:r}}),i=o.map(e=>e.shapeInfo),u={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},l=yp(o,u,a,t.packedInputs),c=e.createProgram(l);let p=null;const d=e.getUniformLocation(c,"NAN",!1);1===s().getNumber("WEBGL_VERSION")&&(p=e.getUniformLocation(c,"INFINITY",!1));const h={};for(let n=0;n<t.variableNames.length;n++){const r=t.variableNames[n],s=!1;h[r]=e.getUniformLocation(c,r,s),h["offset"+r]=e.getUniformLocation(c,"offset"+r,s)}return{program:t,source:l,webGLProgram:c,uniformLocations:h,inShapeInfos:i,outShapeInfo:u,infLoc:p,nanLoc:d}}(this.gpgpu,e,l,c)),h=null!=this.activeTimers;let f;if(h&&(f=this.startTimer()),function(e,t,n,r,a){Md(t.inShapeInfos,n),Md([t.outShapeInfo],[r]);const o=r.texData.texture,i=r.texData.texShape;r.texData.isPacked?e.setOutputPackedMatrixTexture(o,i[0],i[1]):e.setOutputMatrixTexture(o,i[0],i[1]),e.setProgram(t.webGLProgram),1===s().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN),n.forEach((n,r)=>{const s=t.program.variableNames[r],a=t.uniformLocations[s],o=t.uniformLocations["offset"+s];if(null!=a)if(n.isUniform)if(E(n.shape)<2)e.gl.uniform1f(a,n.uniformValues[0]);else{let t=n.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(a,t)}else null!=n.texData.slice&&null!=o&&e.gl.uniform1i(o,n.texData.slice.flatOffset),e.setInputMatrixTexture(n.texData.texture,a,r)}),null!=a&&a(e,t.webGLProgram),e.executeProgram()}(this.gpgpu,d,l,c,r),u.forEach(e=>this.disposeData(e.dataId)),h&&(f=this.endTimer(f),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(f)})),!s().getBool("WEBGL_LAZILY_UNPACK")&&i.isPacked&&!1===a){const e=this.unpackTensor(o);return this.disposeData(o.dataId),e}return o}compileAndRun(e,t,n,r,s=!1){n=n||t[0].dtype;const a=this.runWebGLProgram(e,t,n,r,s);return qa().makeTensorFromDataId(a.dataId,a.shape,a.dtype)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){if(!this.disposed){if(!s().getBool("IS_TEST")){Object.keys(this.binaryCache).forEach(e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]})}this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=Ha(()=>{if(!s().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=s().getBool("DEBUG");s().set("DEBUG",!1);const t=this.abs(Xe(1e-8)).dataSync()[0];if(s().set("DEBUG",e),t>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:r,values:a,texture:o,usage:i,isPacked:u}=t;if(null!=o)return;const l=null!=this.activeTimers;let c;l&&(c=Z());let p=t.texShape;if(null==p&&(p=function(e,t=!1){let n=s().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t&&(n*=2,1===(e=e.map((t,n)=>n>=e.length-2?b(e[n]):e[n])).length&&(e=[2,e[0]])),2!==e.length){const t=D(e);e=t.newShape}let r=E(e);if(e.length<=1&&r<=n)return[1,r];if(2===e.length&&e[0]<=n&&e[1]<=n)return e;if(3===e.length&&e[0]*e[1]<=n&&e[2]<=n)return[e[0]*e[1],e[2]];if(3===e.length&&e[0]<=n&&e[1]*e[2]<=n)return[e[0],e[1]*e[2]];if(4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n)return[e[0]*e[1]*e[2],e[3]];if(4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n)return[e[0],e[1]*e[2]*e[3]];if(t){const t=Xc(e);let n=2,s=2;return e.length&&([n,s]=Yc(e)),r=t*(n/2)*(s/2),T(r).map(e=>2*e)}return T(r)}(n,u),t.texShape=p),null!=a){const e=Qc(n);let s,o=p[1],i=p[0];const d=a instanceof Uint8Array;u?([o,i]=Oc(p[0],p[1]),s=new xd(e,[i,o],d)):s=new yd(e,[i,o],d);const h=this.makeTensorInfo([i,o],r);this.texData.get(h.dataId).usage=d?Ac.PIXELS:Ac.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(h.dataId),o,i,a);const f=!0,m=this.runWebGLProgram(s,[h],r,null,f),g=this.texData.get(m.dataId);t.texture=g.texture,t.texShape=g.texShape,t.isPacked=g.isPacked,t.usage=g.usage,this.disposeData(h.dataId),this.texData.delete(m.dataId),t.values=null,l&&(this.uploadWaitMs+=Z()-c)}else{const e=this.acquireTexture(p,i,r,u);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:r}=n;return this.releaseGPUData(e),null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error("Unknown dtype "+t)}(t,r)),n.values}acquireTexture(e,t,n,r){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,r)}computeBytes(e,t){return e[0]*e[1]*V(t)}}const Uh={kernelName:"Div",backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{a:n,b:r}=e;return function(e,t,n){let r=new zp("\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",e.shape,t.shape);return s().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&(r=new Gp("\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",e.shape,t.shape,!0)),n.runWebGLProgram(r,[e,t],"float32")}(n,r,t)}};class Gh{constructor(e){this.variableNames=["A"];const t=dp(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class qh{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=dp(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const Hh={kernelName:"FromPixels",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e;let{pixels:a}=t;const{numChannels:o}=r,i="undefined"!=typeof HTMLVideoElement&&a instanceof HTMLVideoElement,u="undefined"!=typeof HTMLImageElement&&a instanceof HTMLImageElement,[l,c]=i?[a.videoWidth,a.videoHeight]:[a.width,a.height],p=[c,l],d=[c,l,o];(u||i)&&(null==jh&&(jh=document.createElement("canvas").getContext("2d")),jh.canvas.width=l,jh.canvas.height=c,jh.drawImage(a,0,0,l,c),a=jh.canvas);const h=n.makeTensorInfo(p,"int32");n.texData.get(h.dataId).usage=Ac.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(h.dataId),a);const f=s().getBool("WEBGL_PACK")?new qh(d):new Gh(d),m=n.runWebGLProgram(f,[h],"int32");return n.disposeData(h.dataId),m}};let jh;var Kh=Object.freeze({__proto__:null,maxImpl:function(e,t,n,r){const s=F(r,E(n));for(let n=0;n<s.length;++n){const r=n*t;let a=e[r];for(let n=0;n<t;++n){const t=e[r+n];t>a&&(a=t)}s[n]=a}return s},transposeImpl:function(e,t,n,r,s){const a=t.length,o=E(t),i=K(t),u=K(s),l=F(n,E(s));for(let t=0;t<o;++t){const n=se(t,a,i),s=new Array(n.length);for(let e=0;e<s.length;e++)s[e]=n[r[e]];l[re(s,a,u)]=e[t]}return l}});const{maxImpl:Xh,transposeImpl:Yh}=Kh;function Qh(e,t,n){const r=n.texData.get(e.dataId);return!r.isPacked||Zc(e.shape,t)||null!==r.texture&&Zc(r.shape,t)?{dataId:e.dataId,shape:t,dtype:e.dtype}:function(e,t,n){const r=[Xc(e.shape),...Yc(e.shape)],s={dtype:e.dtype,shape:r,dataId:e.dataId},a=[Xc(t),...Yc(t)],o=new Jd(a,r),i=n.runWebGLProgram(o,[s],e.dtype,null,!0);return{dataId:i.dataId,shape:t,dtype:i.dtype}}(e,t,n)}function Jh(e,t,n,r){const s=E(t),a=Qh(e,[E(e.shape)/s,s],r),o=function e(t,n,r,s){const[a,o]=t.shape,i=Es(o),u=new Qd({windowSize:i,inSize:o,batchSize:a},r),l=s.runWebGLProgram(u,[t],n);return 1===l.shape[1]?l:e(l,n,r,s)}(a,e.dtype,"max",r);return a.dataId!==e.dataId&&r.disposeData(a.dataId),Qh(o,n,r)}class Zh{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];this.outputShape=n,this.rank=n.length;const r=Sp(this.rank),s=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(t);for(let t=0;t<e.length;t++)r[e[t]]=n[t];return r.join()}(t);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${s}));\n    }\n    `}}class ef{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=Sp(this.rank),s=cp("rc",this.rank),a=new Array(this.rank);for(let e=0;e<t.length;e++)a[t[e]]=s[e];const o=`vec2(${a.slice(-2).join()})`,i=`++${s[this.rank-1]} < ${n[this.rank-1]}`,u=`getChannel(getA(${a.join()}), ${o})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${u};\n      if(${i}) {\n        result[1] = ${u};\n      }\n      --${s[this.rank-1]};\n      if(++${s[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${u};\n        if(${i}) {\n          result[3] = ${u};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function tf(e,t,n){const r=s().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new ef(e.shape,t):new Zh(e.shape,t);return n.runWebGLProgram(r,[e],e.dtype)}const nf={kernelName:"Max",backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{reductionIndices:s,keepDims:a}=t,o=n,i=r.shape.length,u=_(s,r.shape);let l=u;const c=yt(l,i),p=null!=c,d=o.shouldExecuteOnCPU([r]);let h=r;if(p){if(d){const e=o.texData.get(h.dataId).values,t=new Array(i);for(let e=0;e<t.length;e++)t[e]=r.shape[c[e]];const n=Yh(e,r.shape,r.dtype,c,t);h=o.makeTensorInfo(t,r.dtype);o.texData.get(h.dataId).values=n}else h=tf(r,c,o);l=bt(l.length,i)}gt("max",l,i);const[f,m]=ft(h.shape,l);let g,y=f;if(a&&(y=mt(f,u)),d){const e=o.texData.get(h.dataId).values,t=Xh(e,E(m),y,r.dtype);g=o.makeTensorInfo(y,r.dtype);o.texData.get(g.dataId).values=t}else g=Jh(h,m,y,o);return p&&o.disposeData(h.dataId),g}};const rf={kernelName:"MaxPoolWithArgmax",backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{filterSize:s,strides:a,pad:o,includeBatchInIndex:i}=t,u=n;w(4===r.shape.length,()=>`Error in maxPool: input must be rank 4 but got rank ${r.shape.length}.`);const l=[1,1];w(Ft(a,l),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${l}'`);const c=$t(r.shape,s,a,l,o),[p,d]=function(e,t,n,r){let s=new Xd(n,"max",!1);const a=r.runWebGLProgram(s,[e],"float32");return s=new Xd(n,"max",!0,!0,t),[a,r.runWebGLProgram(s,[e],"float32")]}(r,i,c,u);return[p,d]}},sf={kernelName:"NonMaxSuppressionV3",backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{hc("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{boxes:r,scores:s}=e,{maxOutputSize:a,iouThreshold:o,scoreThreshold:i}=n,u=t;return gl(u.readSync(r.dataId),u.readSync(s.dataId),a,o,i)}},af=yl,of={kernelName:"NonMaxSuppressionV4",backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{hc("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{boxes:r,scores:s}=e,{maxOutputSize:a,iouThreshold:o,scoreThreshold:i,padToMaxOutputSize:u}=n,l=t,c=l.readSync(r.dataId),p=l.readSync(s.dataId),{selectedIndices:d,validOutputs:h}=af(c,p,a,o,i,u);return[d,h]}},uf=xl,lf={kernelName:"NonMaxSuppressionV5",backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{hc("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{boxes:r,scores:s}=e,{maxOutputSize:a,iouThreshold:o,scoreThreshold:i,softNmsSigma:u}=n,l=t,c=l.readSync(r.dataId),p=l.readSync(s.dataId),d=a,h=o,f=i,m=u,{selectedIndices:g,selectedScores:y}=uf(c,p,d,h,f,m);return[g,y]}};class cf{constructor(e,t,n,r){this.variableNames=["Image"],this.outputShape=[];const s=e[1],a=e[2],o=Math.sin(t).toFixed(3),i=Math.cos(t).toFixed(3);this.outputShape=e;const[u,l]=ic(r,s,a),c=u.toFixed(3),p=l.toFixed(3);let d="";d="number"==typeof n?`float outputValue = ${n.toFixed(2)};`:`\n        vec3 fill = vec3(${n.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - ${c}) * ${i} - (float(y) - ${p}) * ${o};\n          float coordYFloat = (float(x) - ${c}) * ${o} + (float(y) - ${p}) * ${i};\n          int coordX = int(round(coordXFloat + ${c}));\n          int coordY = int(round(coordYFloat + ${p}));\n          ${d}\n          if(coordX >= 0 && coordX < ${a} && coordY >= 0 && coordY < ${s}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const pf=[nf,Hh,Uh,rf,sf,of,lf,{kernelName:"RotateWithOffset",backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,{radians:s,fillValue:a,center:o}=t,i=n,u=new cf(r.shape,s,a,o);return i.runWebGLProgram(u,[r],r.dtype)}},{kernelName:"Square",backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,r=t,s=new xh(n.shape,"return x * x;");return r.runWebGLProgram(s,[n],n.dtype)}},{kernelName:"SquaredDifference",backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{a:n,b:r}=e,a=t,o=s().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Gp("return (a - b) * (a - b);",n.shape,r.shape):new zp("return (a - b) * (a - b);",n.shape,r.shape);return a.compileAndRun(o,[n,r])}},{kernelName:"Transpose",backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{perm:s}=t,a=n,o=r.shape.length,i=new Array(o);for(let e=0;e<i.length;e++)i[e]=r.shape[s[e]];let u;if(a.shouldExecuteOnCPU([r])){const e=a.texData.get(r.dataId).values,t=Yh(e,r.shape,r.dtype,s,i);u=a.makeTensorInfo(i,r.dtype);a.texData.get(u.dataId).values=t}else u=tf(r,s,a);return u}}];for(const e of pf)f(e);De()&&Xa("webgl",()=>new zh,2);var df=Ai((function(e,t){!function(e,t){var n,r;(function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF"})(n||(n={})),function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(r||(r={}));const s={};function a(e){return s[e]}function o(e,n,r,s){const a=n.inputParams[e];if(a&&void 0!==a.inputIndexStart){const e=a.inputIndexStart,o=0===a.inputIndexEnd?void 0:void 0===a.inputIndexEnd?e+1:a.inputIndexEnd;if("tensor"===a.type)return i(n.inputNames[a.inputIndexStart],r,s);if("tensors"===a.type)return n.inputNames.slice(e,o).map(e=>i(e,r,s));const u=i(n.inputNames.slice(e)[0],r,s),l=u.dataSync();return"number"===a.type?l[0]:t.util.toNestedArray(u.shape,l)}const o=n.attrParams[e];return o&&o.value}function i(e,t,n){const[r,s]=c(e),a=n.currentContextIds.find(e=>!!t[l(r,e)]);return void 0!==a?t[l(r,a)][s]:void 0}function u(e,t){const[n,r]=c(e);return[l(n,t&&t.currentContextId),r]}function l(e,t){return t?`${e}-${t}`:e}function c(e){const t=e.split(":");return 1===t.length?[e,0]:[t[0],Number(t[t.length-1])]}function p(e,t,n){let r=o("pad",e,t,n);if("explicit"===r){r=o("explicitPaddings",e,t,n);const s=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)s[e][0]=r[2*e],s[e][1]=r[2*e+1];return s}return r}var d=Object.freeze({__proto__:null,json:[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]}),h=Object.freeze({__proto__:null,json:[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"clip_value_min",name:"clipValueMin",type:"number"},{tfName:"clip_value_max",name:"clipValueMax",type:"number"}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"clipValueMin",name:"clipValueMin",type:"number",defaultValue:0},{tfName:"clipValueMax",name:"clipValueMax",type:"number",defaultValue:6}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]}),f=Object.freeze({__proto__:null,json:[{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]}]}),m=Object.freeze({__proto__:null,json:[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}]}),g=Object.freeze({__proto__:null,json:[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}]}),y=Object.freeze({__proto__:null,json:[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]}),x=Object.freeze({__proto__:null,json:[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]}]}),b=Object.freeze({__proto__:null,json:[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}]}),v=Object.freeze({__proto__:null,json:[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}]}),w=Object.freeze({__proto__:null,json:[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]}),C=Object.freeze({__proto__:null,json:[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]}),N=Object.freeze({__proto__:null,json:[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}]}),$=Object.freeze({__proto__:null,json:[{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}]}),E=Object.freeze({__proto__:null,json:[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool",notSupported:!0}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}]}),k=Object.freeze({__proto__:null,json:[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}]}),S=Object.freeze({__proto__:null,json:[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]}]});class T{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[d,h,f,m,g,y,x,w,v,b,C,N,$,E,k,S].map(e=>e.json));this.opMappers=e.reduce((e,t)=>(e[t.tfOpName]=t,e),{})}transformGraph(e,t={}){const n=e.node,r=[],s=[],a=n.reduce((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")&&r.push(e[t.name]),"Const"===t.op&&s.push(e[t.name]),e),{});let o=[];const i=[];let l={},c={};null!=t&&(l=this.mapSignatureEntries(t.inputs),c=this.mapSignatureEntries(t.outputs));const p=Object.keys(a);p.forEach(e=>{const t=a[e];t.inputNames.forEach(e=>{const[n]=u(e);t.inputs.push(a[n]),a[n].children.push(t)})}),0===Object.keys(c).length?p.forEach(e=>{const t=a[e];0===t.children.length&&i.push(t)}):Object.keys(c).forEach(e=>{const[t]=u(e),n=a[t];null!=n&&(n.signatureKey=c[e],i.push(n))}),Object.keys(l).length>0?Object.keys(l).forEach(e=>{const[t]=u(e),n=a[t];n&&(n.signatureKey=l[e],o.push(n))}):o=r;let d={};return null!=e.library&&null!=e.library.function&&(d=e.library.function.reduce((e,t)=>(e[t.signature.name]=this.mapFunction(t),e),{})),{nodes:a,inputs:o,outputs:i,weights:s,placeholders:r,signature:t,functions:d}}mapSignatureEntries(e){return Object.keys(e||{}).reduce((t,n)=>(t[e[n].name]=n,t),{})}mapNode(e){const t=a(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map(e=>e.startsWith("^")?e.substr(1):e),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr};return null!=t.inputs&&(n.inputParams=t.inputs.reduce((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce((t,n)=>{const r=n.type;let s=void 0;switch(n.type){case"string":s=I(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=I(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":s=V(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=V(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":s=_(e.attr,n.tfName,n.defaultValue||0),void 0===s&&n.tfDeprecatedName&&(s=_(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":s=L(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=L(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":s=A(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=A(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":s=z(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=z(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":s=P(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=P(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":s=W(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=W(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":s=O(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=O(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":s=M(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=M(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":s=F(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=F(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:s,type:r},t},{})),n}mapFunction(e){const t=e.nodeDef,n=[];let r={};null!=t&&(r=t.reduce((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e),{}));const s=[],a=[];e.signature.inputArg.forEach(e=>{const[t]=u(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:D(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,s.push(n),r[t]=n}),Object.keys(r).forEach(e=>{const t=r[e];t.inputNames.forEach(e=>{const[n]=u(e);t.inputs.push(r[n]),r[n].children.push(t)})});const o=e.ret;e.signature.outputArg.forEach(e=>{const[t,n]=u(o[e.name]),s=r[t];null!=s&&(s.defaultOutput=n,a.push(s))});const i=this.mapArgsToSignature(e);return{nodes:r,inputs:s,outputs:a,weights:n,placeholders:[],signature:i}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e),{}),outputs:e.signature.outputArg.reduce((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function R(e,n){const r=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const n=t.env().global;if(void 0!==n.atob)return n.atob(e);if("undefined"!=typeof Buffer)return new Buffer(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return n?r:r.toLowerCase()}function I(e,t,n,r=!1){const s=e[t];return null!=s?R(s.s,r):n}function A(e,t,n){const r=e[t];return r?r.b:n}function _(e,t,n){const r=e[t]||{},s=null!=r.i?r.i:null!=r.f?r.f:n;return"number"==typeof s?s:parseInt(s,10)}function D(e){switch("string"==typeof e&&(e=n[e]),e){case n.DT_FLOAT:return"float32";case n.DT_INT32:case n.DT_INT64:case n.DT_INT8:case n.DT_UINT8:return"int32";case n.DT_BOOL:return"bool";case n.DT_DOUBLE:return"float32";case n.DT_STRING:return"string";default:return null}}function F(e,t,n){const r=e[t];return r&&r.func?r.func.name:n}function O(e,t,n){const r=e[t];return r&&r.type?D(r.type):n}function M(e,t,n){const r=e[t];return r&&r.list&&r.list.type?r.list.type.map(e=>D(e)):n}function B(e){if(!e.unknownRank)return null!=e.dim?e.dim.map(e=>"number"==typeof e.size?e.size:parseInt(e.size,10)):[]}function P(e,t,n){const r=e[t];return r&&r.shape?B(r.shape):n}function L(e,t,n){const r=e[t];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map(e=>"number"==typeof e?e:parseInt(e,10)):n}function V(e,t,n,r=!1){const s=e[t];return s&&s.list&&s.list.s?s.list.s.map(e=>R(e,r)):n}function W(e,t,n){const r=e[t];return r&&r.list&&r.list.shape?r.list.shape.map(e=>B(e)):n}function z(e,t,n){const r=e[t];return r&&r.list&&r.list.b?r.list.b:n}class U{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map(e=>this.getInput(e)),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce((e,t)=>(e[t]=this.getAttr(t),e),{}))}getInput(e){return i(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return i(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return _(this.node.rawAttrs,e,t);if(null!=n.s)return I(this.node.rawAttrs,e,t);if(null!=n.b)return A(this.node.rawAttrs,e,t);if(null!=n.shape)return P(this.node.rawAttrs,e,t);if(null!=n.type)return O(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return L(this.node.rawAttrs,e,t);if(null!=n.list.s)return V(this.node.rawAttrs,e,t);if(null!=n.list.shape)return W(this.node.rawAttrs,e,t);if(null!=n.list.b)return z(this.node.rawAttrs,e,t);if(null!=n.list.type)return M(this.node.rawAttrs,e,t)}return t}}function G(e,n,r=""){t.util.assert(function(e,t){if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(-1!==e[n]&&-1!==t[n]&&e[n]!==t[n])return!1;return!0}(e,n),()=>r+` Shapes ${e} and ${n} must match`)}class q{constructor(e,n,r,s,a,o,i){this.name=e,this.dtype=n,this.maxSize=r,this.elementShape=s,this.identicalElementShapes=a,this.dynamicSize=o,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.idTensor=t.scalar(0),t.keep(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(){this.tensors.forEach(e=>e.tensor.dispose()),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map(e=>this.read(e))}write(e,n){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const r=this.tensors[e]||{};if(n.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${n.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=n.shape),G(this.elementShape,n.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),r.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(r.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);r.tensor=n,t.keep(n),r.written=!0,this.tensors[e]=r}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach((e,n)=>this.write(e,t[n]))}gather(e,n){if(n&&n!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${n}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return t.tensor([],[0].concat(this.elementShape));const r=this.readMany(e);return G(this.elementShape,r[0].shape,"TensorArray shape mismatch: "),t.stack(r,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return t.tensor([],[0].concat(this.elementShape));const n=[];for(let e=0;e<this.size();e++)n.push(e);const r=this.readMany(n);return G(this.elementShape,r[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${r[0].shape})`),t.concat(r,0)}scatter(e,n){if(n.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${n.dtype}`);if(e.length!==n.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${n.shape[0]}`);const r=Math.max(...e);if(!this.dynamicSize&&r>=this.maxSize)throw new Error(`Max index must be < array size (${r}  vs. ${this.maxSize})`);this.writeMany(e,t.unstack(n,0))}split(e,n){if(n.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${n.dtype}`);let r=0;const s=e.map(e=>(r+=e,r));if(r!==n.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${r}, and tensor's shape is: ${n.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const a=0===r?0:n.size/r,o=[];t.tidy(()=>{n=n.reshape([1,r,a]);for(let r=0;r<e.length;++r){const i=[0,0===r?0:s[r-1],0],u=[1,e[r],a];o[r]=t.slice(n,i,u).reshape(this.elementShape)}return o});const i=[];for(let t=0;t<e.length;t++)i[t]=t;this.writeMany(i,o)}}class H{constructor(e,n,r,s=-1){this.tensors=e,this.elementShape=n,this.elementDtype=r,null!=e&&e.forEach(e=>{if(r!==e.dtype)throw new Error(`Invalid data types; op elements ${r}, but list elements ${e.dtype}`);G(n,e.shape,"TensorList shape mismatch: "),t.keep(e)}),this.idTensor=t.scalar(0),this.maxNumElements=s,t.keep(this.idTensor)}get id(){return this.idTensor.id}copy(){return new H([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(){this.tensors.forEach(e=>e.dispose()),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,n,r=-1){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(-1!==r&&this.tensors.length!==r)throw new Error(`Operation expected a list with ${r} elements but got a list with ${this.tensors.length} elements.`);return G(e,this.elementShape,"TensorList shape mismatch: "),t.tidy(()=>{const n=this.tensors.map(t=>t.reshape(e));return t.stack(n,0)})}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=this.tensors.pop();return G(n.shape,e,"TensorList shape mismatch: "),n.reshape(e)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(G(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");t.keep(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error("TensorListResize expects size to be non-negative. Got: "+e);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);this.tensors.length=e}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);return G(this.tensors[e].shape,t,"TensorList shape mismatch: "),this.tensors[e]}setItem(e,n){if(n.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);G(this.elementShape,n.shape,"TensorList shape mismatch: "),t.keep(n),this.tensors[e]=n}gather(e,n,r){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);return G(this.elementShape,r,"TensorList shape mismatch: "),0===(e=e.slice(0,this.size())).length?t.tensor([],[0].concat(this.elementShape)):t.tidy(()=>{const n=e.map(e=>this.tensors[e].reshape(r));return t.stack(n,0)})}concat(e,n){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);return G(this.elementShape,n,"TensorList shape mismatch: "),0===this.size()?t.tensor([],[0].concat(this.elementShape)):t.tidy(()=>{const e=this.tensors.map(e=>e.reshape(n));return t.concat(e,0)})}}const j=async(e,n,r)=>{switch(e.op){case"If":case"StatelessIf":{const t=o("thenBranch",e,n,r),s=o("elseBranch",e,n,r),a=o("cond",e,n,r),i=o("args",e,n,r);return(await a.data())[0]?r.functionMap[t].executeFunctionAsync(i,r.tensorArrayMap,r.tensorListMap):r.functionMap[s].executeFunctionAsync(i,r.tensorArrayMap,r.tensorListMap)}case"While":case"StatelessWhile":{const t=o("body",e,n,r),s=o("cond",e,n,r),a=o("args",e,n,r),i=await r.functionMap[s].executeFunctionAsync(a,r.tensorArrayMap,r.tensorListMap),u=a.map(e=>e.id);let l=await i[0].data();i.forEach(e=>{e.kept||-1!==u.indexOf(e.id)||e.dispose()});let c=a;for(;l[0];){const e=c;c=await r.functionMap[t].executeFunctionAsync(c,r.tensorArrayMap,r.tensorListMap);const n=c.map(e=>e.id);e.forEach(e=>{e.kept||-1!==u.indexOf(e.id)||-1!==n.indexOf(e.id)||e.dispose()});const a=await r.functionMap[s].executeFunctionAsync(c,r.tensorArrayMap,r.tensorListMap);l=await a[0].data(),a.forEach(e=>{e.kept||-1!==u.indexOf(e.id)||-1!==n.indexOf(e.id)||e.dispose()})}return c}case"LoopCond":return[o("pred",e,n,r).clone()];case"Switch":{const t=o("pred",e,n,r),s=o("data",e,n,r);return(await t.data())[0]?[void 0,s.clone()]:[s.clone(),void 0]}case"Merge":{const t=e.inputNames.find(e=>void 0!==i(e,n,r));return t?[i(t,n,r).clone()]:void 0}case"Enter":{const t=o("frameName",e,n,r),s=o("tensor",e,n,r);return r.enterFrame(t),[s.clone()]}case"Exit":{const t=o("tensor",e,n,r);return r.exitFrame(),[t.clone()]}case"NextIteration":{const t=o("tensor",e,n,r);return r.nextIteration(),[t.clone()]}case"TensorArrayV3":{const s=o("size",e,n,r),a=o("dtype",e,n,r),i=o("elementShape",e,n,r),u=o("dynamicSize",e,n,r),l=o("clearAfterRead",e,n,r),c=o("identicalElementShapes",e,n,r),p=o("name",e,n,r),d=new q(p,a,s,i,c,u,l);return r.addTensorArray(d),[d.idTensor,t.scalar(1)]}case"TensorArrayWriteV3":{const t=o("tensorArrayId",e,n,r),s=o("index",e,n,r),a=o("tensor",e,n,r),i=r.getTensorArray(t.id);return i.write(s,a),[i.idTensor]}case"TensorArrayReadV3":{const t=o("tensorArrayId",e,n,r),s=o("index",e,n,r);return[r.getTensorArray(t.id).read(s)]}case"TensorArrayGatherV3":{const t=o("tensorArrayId",e,n,r),s=o("indices",e,n,r),a=o("dtype",e,n,r);return[r.getTensorArray(t.id).gather(s,a)]}case"TensorArrayScatterV3":{const t=o("tensorArrayId",e,n,r),s=o("indices",e,n,r),a=o("tensor",e,n,r),i=r.getTensorArray(t.id);return i.scatter(s,a),[i.idTensor]}case"TensorArrayConcatV3":{const t=o("tensorArrayId",e,n,r),s=r.getTensorArray(t.id),a=o("dtype",e,n,r);return[s.concat(a)]}case"TensorArraySplitV3":{const t=o("tensorArrayId",e,n,r),s=o("tensor",e,n,r),a=o("lengths",e,n,r),i=r.getTensorArray(t.id);return i.split(a,s),[i.idTensor]}case"TensorArraySizeV3":{const s=o("tensorArrayId",e,n,r),a=r.getTensorArray(s.id);return[t.scalar(a.size(),"int32")]}case"TensorArrayCloseV3":{const t=o("tensorArrayId",e,n,r),s=r.getTensorArray(t.id);return s.clearAndClose(),[s.idTensor]}case"TensorListSetItem":{const t=o("tensorListId",e,n,r),s=o("index",e,n,r),a=o("tensor",e,n,r),i=r.getTensorList(t.id);return i.setItem(s,a),[i.idTensor]}case"TensorListGetItem":{const t=o("tensorListId",e,n,r),s=o("index",e,n,r),a=o("elementShape",e,n,r),i=o("elementDType",e,n,r);return[r.getTensorList(t.id).getItem(s,a,i)]}case"TensorListScatterV2":case"TensorListScatter":{const s=o("indices",e,n,r),a=function(e,n,r,s){if(n.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${n.length} vs. ${e.shape[0]}`);const a=Math.max(...n);if(null!=s&&-1!==s&&a>=s)throw new Error(`Max index must be < array size (${a}  vs. ${s})`);const o=new H([],r,e.dtype,s),i=t.unstack(e,0);return n.forEach((e,t)=>{o.setItem(e,i[t])}),o}(o("tensor",e,n,r),s,o("elementShape",e,n,r),o("numElements",e,n,r));return r.addTensorList(a),[a.idTensor]}case"TensorListReserve":{const t=function(e,t,n){return new H([],e,t,n)}(o("elementShape",e,n,r),o("elementDType",e,n,r),o("numElements",e,n,r));return r.addTensorList(t),[t.idTensor]}case"TensorListGather":{const t=o("tensorListId",e,n,r),s=o("indices",e,n,r),a=o("elementShape",e,n,r),i=o("elementDType",e,n,r);return[r.getTensorList(t.id).gather(s,i,a)]}case"TensorListStack":{const t=o("tensorListId",e,n,r),s=o("elementShape",e,n,r),a=o("elementDType",e,n,r),i=o("numElements",e,n,r);return[r.getTensorList(t.id).stack(s,a,i)]}case"TensorListFromTensor":{const t=function(e,t,n){const r=e.dtype;if(e.shape.length<1)throw new Error("Tensor must be at least a vector, but saw shape: "+e.shape);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);G(e.shape.slice(1),t,"TensorList shape mismatch: ");const s=e.unstack();return new H(s,t,r)}(o("tensor",e,n,r),o("elementShape",e,n,r),o("elementDType",e,n,r));return r.addTensorList(t),[t.idTensor]}case"TensorListConcat":{const t=o("tensorListId",e,n,r),s=r.getTensorList(t.id),a=o("dtype",e,n,r),i=o("elementShape",e,n,r);return[s.concat(a,i)]}case"TensorListPushBack":{const t=o("tensorListId",e,n,r),s=o("tensor",e,n,r),a=r.getTensorList(t.id);return a.pushBack(s),[a.idTensor]}case"TensorListPopBack":{const t=o("tensorListId",e,n,r),s=o("elementShape",e,n,r),a=o("elementDType",e,n,r);return[r.getTensorList(t.id).popBack(s,a)]}case"TensorListSplit":{const s=o("tensor",e,n,r),a=o("elementShape",e,n,r),i=function(e,n,r){let s=0;const a=n.map(e=>(s+=e,s));if(s!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${s}, and tensor's shape is: ${e.shape}`);const o=0===s?0:e.size/s,i=t.tidy(()=>{const i=[];e=e.reshape([1,s,o]);for(let s=0;s<n.length;++s){const u=[0,0===s?0:a[s-1],0],l=[1,n[s],o];i[s]=t.slice(e,u,l).reshape(r)}return e.dispose(),i}),u=new H([],r,e.dtype,n.length);for(let e=0;e<i.length;e++)u.setItem(e,i[e]);return u}(s,o("lengths",e,n,r),a);return r.addTensorList(i),[i.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}};function K(e,n,r){const s=((e,n,r)=>{switch(e.category){case"arithmetic":return t.tidy(()=>((e,n,r)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[t.add(o("a",e,n,r),o("b",e,n,r))];case"AddN":return[t.addN(o("tensors",e,n,r))];case"FloorMod":case"Mod":return[t.mod(o("a",e,n,r),o("b",e,n,r))];case"Mul":return[t.mul(o("a",e,n,r),o("b",e,n,r))];case"RealDiv":case"Div":return[t.div(o("a",e,n,r),o("b",e,n,r))];case"DivNoNan":return[t.divNoNan(o("a",e,n,r),o("b",e,n,r))];case"FloorDiv":return[t.floorDiv(o("a",e,n,r),o("b",e,n,r))];case"Sub":return[t.sub(o("a",e,n,r),o("b",e,n,r))];case"Minimum":return[t.minimum(o("a",e,n,r),o("b",e,n,r))];case"Maximum":return[t.maximum(o("a",e,n,r),o("b",e,n,r))];case"Pow":return[t.pow(o("a",e,n,r),o("b",e,n,r))];case"SquaredDifference":return[t.squaredDifference(o("a",e,n,r),o("b",e,n,r))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,n,r));case"basic_math":return t.tidy(()=>((e,n,r)=>{switch(e.op){case"Abs":case"ComplexAbs":return[t.abs(o("x",e,n,r))];case"Acos":return[t.acos(o("x",e,n,r))];case"Acosh":return[t.acosh(o("x",e,n,r))];case"Asin":return[t.asin(o("x",e,n,r))];case"Asinh":return[t.asinh(o("x",e,n,r))];case"Atan":return[t.atan(o("x",e,n,r))];case"Atan2":return[t.atan2(o("x",e,n,r),o("y",e,n,r))];case"Atanh":return[t.atanh(o("x",e,n,r))];case"Ceil":return[t.ceil(o("x",e,n,r))];case"Complex":return[t.complex(o("real",e,n,r),o("imag",e,n,r))];case"Cos":return[t.cos(o("x",e,n,r))];case"Cosh":return[t.cosh(o("x",e,n,r))];case"Elu":return[t.elu(o("x",e,n,r))];case"Erf":return[t.erf(o("x",e,n,r))];case"Exp":return[t.exp(o("x",e,n,r))];case"Expm1":return[t.expm1(o("x",e,n,r))];case"Floor":return[t.floor(o("x",e,n,r))];case"Log":return[t.log(o("x",e,n,r))];case"Log1p":return[t.log1p(o("x",e,n,r))];case"Imag":return[t.imag(o("x",e,n,r))];case"Neg":return[t.neg(o("x",e,n,r))];case"Reciprocal":return[t.reciprocal(o("x",e,n,r))];case"Real":return[t.real(o("x",e,n,r))];case"Relu":return[t.relu(o("x",e,n,r))];case"Round":return[t.round(o("x",e,n,r))];case"Selu":return[t.selu(o("x",e,n,r))];case"Sigmoid":return[t.sigmoid(o("x",e,n,r))];case"Sin":return[t.sin(o("x",e,n,r))];case"Sign":return[t.sign(o("x",e,n,r))];case"Sinh":return[t.sinh(o("x",e,n,r))];case"Softplus":return[t.softplus(o("x",e,n,r))];case"Sqrt":return[t.sqrt(o("x",e,n,r))];case"Square":return[t.square(o("x",e,n,r))];case"Tanh":return[t.tanh(o("x",e,n,r))];case"Tan":return[t.tan(o("x",e,n,r))];case"Relu6":case"ClipByValue":return[t.clipByValue(o("x",e,n,r),o("clipValueMin",e,n,r),o("clipValueMax",e,n,r))];case"Rsqrt":return[t.rsqrt(i(e.inputNames[0],n,r))];case"Prod":return[t.prod(o("x",e,n,r),o("axes",e,n,r))];case"LeakyRelu":return[t.leakyRelu(o("x",e,n,r),o("alpha",e,n,r))];case"Prelu":return[t.prelu(o("x",e,n,r),o("alpha",e,n,r))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,n,r));case"control":return j(e,n,r);case"convolution":return t.tidy(()=>((e,n,r)=>{switch(e.op){case"Conv1D":{const s=o("stride",e,n,r),a=o("pad",e,n,r),i=o("dataFormat",e,n,r).toUpperCase(),u=o("dilation",e,n,r);return[t.conv1d(o("x",e,n,r),o("filter",e,n,r),s,a,i,u)]}case"Conv2D":{const s=o("strides",e,n,r),a=p(e,n,r),i=o("dataFormat",e,n,r).toUpperCase(),u=o("dilations",e,n,r);return[t.conv2d(o("x",e,n,r),o("filter",e,n,r),[s[1],s[2]],a,i,[u[1],u[2]])]}case"_FusedConv2D":case"FusedDepthwiseConv2dNative":{const[s,a]=o("fusedOps",e,n,r),i="biasadd"===s,u="prelu"===a,l="fusedbatchnorm"===s,c=o("numArgs",e,n,r);if(i){if(u&&2!==c)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!u&&1!==c)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(l)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.");const d=o("strides",e,n,r),h=p(e,n,r),f=o("dataFormat",e,n,r).toUpperCase(),m=o("dilations",e,n,r),[g,y]=o("args",e,n,r);return[("_FusedConv2D"===e.op?t.fused.conv2d:t.fused.depthwiseConv2d)({x:o("x",e,n,r),filter:o("filter",e,n,r),strides:[d[1],d[2]],pad:h,dataFormat:f,dilations:[m[1],m[2]],bias:g,activation:a,preluActivationWeights:y})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const s=o("outputShape",e,n,r),a=o("strides",e,n,r),i=p(e,n,r);return[t.conv2dTranspose(o("x",e,n,r),o("filter",e,n,r),s,[a[1],a[2]],i)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const s=o("strides",e,n,r),a=p(e,n,r),i=o("dilations",e,n,r),u=o("dataFormat",e,n,r).toUpperCase();return[t.depthwiseConv2d(o("input",e,n,r),o("filter",e,n,r),[s[1],s[2]],a,u,[i[1],i[2]])]}case"Conv3D":{const s=o("strides",e,n,r),a=o("pad",e,n,r),i=o("dataFormat",e,n,r).toUpperCase(),u=o("dilations",e,n,r);return[t.conv3d(o("x",e,n,r),o("filter",e,n,r),[s[1],s[2],s[3]],a,i,[u[1],u[2],u[3]])]}case"AvgPool":{const s=o("strides",e,n,r),a=o("pad",e,n,r),i=o("kernelSize",e,n,r);return[t.avgPool(o("x",e,n,r),[i[1],i[2]],[s[1],s[2]],a)]}case"MaxPool":{const s=o("strides",e,n,r),a=o("pad",e,n,r),i=o("kernelSize",e,n,r);return[t.maxPool(o("x",e,n,r),[i[1],i[2]],[s[1],s[2]],a)]}case"MaxPoolWithArgmax":{const s=o("strides",e,n,r),a=o("pad",e,n,r),i=o("kernelSize",e,n,r),u=o("includeBatchInIndex",e,n,r),{result:l,indexes:c}=t.maxPoolWithArgmax(o("x",e,n,r),[i[1],i[2]],[s[1],s[2]],a,u);return[l,c]}case"AvgPool3D":{const s=o("strides",e,n,r),a=o("pad",e,n,r),i=o("kernelSize",e,n,r);return[t.avgPool3d(o("x",e,n,r),[i[1],i[2],i[3]],[s[1],s[2],s[3]],a)]}case"MaxPool3D":{const s=o("strides",e,n,r),a=o("pad",e,n,r),i=o("kernelSize",e,n,r);return[t.maxPool3d(o("x",e,n,r),[i[1],i[2],i[3]],[s[1],s[2],s[3]],a)]}case"Dilation2D":{const s=o("strides",e,n,r),a=o("pad",e,n,r),i=o("dilations",e,n,r),u=s[1],l=s[2],c=i[1],p=i[2];return[t.dilation2d(o("x",e,n,r),o("filter",e,n,r),[u,l],a,[c,p],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,n,r));case"creation":return t.tidy(()=>((e,n,r)=>{switch(e.op){case"Fill":{const s=o("shape",e,n,r),a=o("dtype",e,n,r),i=o("value",e,n,r);return[t.fill(s,i,a)]}case"LinSpace":{const s=o("start",e,n,r),a=o("stop",e,n,r),i=o("num",e,n,r);return[t.linspace(s,a,i)]}case"Multinomial":{const s=o("logits",e,n,r),a=o("numSamples",e,n,r),i=o("seed",e,n,r);return[t.multinomial(s,a,i)]}case"OneHot":{const s=o("indices",e,n,r),a=o("depth",e,n,r),i=o("onValue",e,n,r),u=o("offValue",e,n,r);return[t.oneHot(s,a,i,u)]}case"Ones":return[t.ones(o("shape",e,n,r),o("dtype",e,n,r))];case"OnesLike":return[t.onesLike(o("x",e,n,r))];case"RandomUniform":return[t.randomUniform(o("shape",e,n,r),o("minval",e,n,r),o("maxval",e,n,r),o("dtype",e,n,r))];case"Range":{const s=o("start",e,n,r),a=o("stop",e,n,r),i=o("step",e,n,r);return[t.range(s,a,i,o("dtype",e,n,r))]}case"TruncatedNormal":{const s=o("shape",e,n,r),a=o("mean",e,n,r),i=o("stdDev",e,n,r),u=o("seed",e,n,r);return[t.truncatedNormal(s,a,i,o("dtype",e,n,r),u)]}case"Zeros":return[t.zeros(o("shape",e,n,r),o("dtype",e,n,r))];case"ZerosLike":return[t.zerosLike(o("x",e,n,r))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,n,r));case"dynamic":return(async(e,n,r)=>{switch(e.op){case"NonMaxSuppressionV5":case"NonMaxSuppressionV4":case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const s=o("boxes",e,n,r),a=o("scores",e,n,r),i=o("maxOutputSize",e,n,r),u=o("iouThreshold",e,n,r),l=o("scoreThreshold",e,n,r);if("NonMaxSuppressionV5"===e.op){const c=o("softNmsSigma",e,n,r),p=await t.image.nonMaxSuppressionWithScoreAsync(s,a,i,u,l,c);return[p.selectedIndices,p.selectedScores]}if("NonMaxSuppressionV4"===e.op){const c=o("padToMaxOutputSize",e,n,r),p=await t.image.nonMaxSuppressionPaddedAsync(s,a,i,u,l,c);return[p.selectedIndices,p.validOutputs]}return[await t.image.nonMaxSuppressionAsync(s,a,i,u,l)]}case"Where":{const s=o("condition",e,n,r).asType("bool"),a=[await t.whereAsync(s)];return s.dispose(),a}case"ListDiff":return t.setdiff1dAsync(o("x",e,n,r),o("y",e,n,r));default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,n,r);case"evaluation":return t.tidy(()=>((e,n,r)=>{switch(e.op){case"TopKV2":{const s=o("x",e,n,r),a=o("k",e,n,r),i=o("sorted",e,n,r),u=t.topk(s,a,i);return[u.values,u.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,n,r));case"image":return t.tidy(()=>((e,n,r)=>{switch(e.op){case"ResizeBilinear":{const s=o("images",e,n,r),a=o("size",e,n,r),i=o("alignCorners",e,n,r);return[t.image.resizeBilinear(s,[a[0],a[1]],i)]}case"ResizeNearestNeighbor":{const s=o("images",e,n,r),a=o("size",e,n,r),i=o("alignCorners",e,n,r);return[t.image.resizeNearestNeighbor(s,[a[0],a[1]],i)]}case"CropAndResize":{const s=o("image",e,n,r),a=o("boxes",e,n,r),i=o("boxInd",e,n,r),u=o("cropSize",e,n,r),l=o("method",e,n,r),c=o("extrapolationValue",e,n,r);return[t.image.cropAndResize(s,a,i,u,l,c)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,n,r));case"graph":return t.tidy(()=>((e,n,r)=>{switch(e.op){case"Const":return n[e.name];case"PlaceholderWithDefault":const s=o("default",e,n,r);return[i(e.name,n,r)||s];case"Placeholder":return[i(e.name,n,r)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":return[o("x",e,n,r).clone()];case"IdentityN":return o("x",e,n,r).map(e=>e.clone());case"Snapshot":return[o("x",e,n,r).clone()];case"Shape":return[t.tensor1d(o("x",e,n,r).shape,"int32")];case"ShapeN":return o("x",e,n,r).map(e=>t.tensor1d(e.shape));case"Size":return[t.scalar(o("x",e,n,r).size,"int32")];case"Rank":return[t.scalar(o("x",e,n,r).rank,"int32")];case"NoOp":return[t.scalar(1)];case"Print":const a=o("x",e,n,r),u=o("data",e,n,r),l=o("message",e,n,r),c=o("summarize",e,n,r);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(l);for(let e=0;e<u.length;e++)console.log(Array.prototype.slice.call(u[e].dataSync()).slice(0,c));return[a];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,n,r));case"logical":return t.tidy(()=>((e,n,r)=>{switch(e.op){case"Equal":return[t.equal(o("a",e,n,r),o("b",e,n,r))];case"NotEqual":return[t.notEqual(o("a",e,n,r),o("b",e,n,r))];case"Greater":return[t.greater(o("a",e,n,r),o("b",e,n,r))];case"GreaterEqual":return[t.greaterEqual(o("a",e,n,r),o("b",e,n,r))];case"Less":return[t.less(o("a",e,n,r),o("b",e,n,r))];case"LessEqual":return[t.lessEqual(o("a",e,n,r),o("b",e,n,r))];case"LogicalAnd":return[t.logicalAnd(o("a",e,n,r),o("b",e,n,r))];case"LogicalNot":return[t.logicalNot(o("a",e,n,r))];case"LogicalOr":return[t.logicalOr(o("a",e,n,r),o("b",e,n,r))];case"Select":case"SelectV2":return[t.where(o("condition",e,n,r),o("a",e,n,r),o("b",e,n,r))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,n,r));case"matrices":return t.tidy(()=>((e,n,r)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[t.matMul(o("a",e,n,r),o("b",e,n,r),o("transposeA",e,n,r),o("transposeB",e,n,r))];case"Transpose":return[t.transpose(o("x",e,n,r),o("perm",e,n,r))];case"_FusedMatMul":const[s,a]=o("fusedOps",e,n,r),i="biasadd"===s,u="prelu"===a,l=o("numArgs",e,n,r);if(i){if(u&&2!==l)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!u&&1!==l)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[c,p]=o("args",e,n,r);return[t.fused.matMul({a:o("a",e,n,r),b:o("b",e,n,r),transposeA:o("transposeA",e,n,r),transposeB:o("transposeB",e,n,r),bias:c,activation:a,preluActivationWeights:p})];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,n,r));case"normalization":return t.tidy(()=>((e,n,r)=>{switch(e.op){case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[t.batchNorm(o("x",e,n,r),o("mean",e,n,r),o("variance",e,n,r),o("offset",e,n,r),o("scale",e,n,r),o("epsilon",e,n,r))];case"LRN":return[t.localResponseNormalization(o("x",e,n,r),o("radius",e,n,r),o("bias",e,n,r),o("alpha",e,n,r),o("beta",e,n,r))];case"Softmax":return[t.softmax(o("x",e,n,r))];case"LogSoftmax":return[t.logSoftmax(o("x",e,n,r))];case"SparseToDense":return[t.sparseToDense(o("sparseIndices",e,n,r),o("outputShape",e,n,r),o("sparseValues",e,n,r),o("defaultValue",e,n,r))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,n,r));case"reduction":return t.tidy(()=>((e,n,r)=>{switch(e.op){case"Max":{const s=o("axis",e,n,r),a=o("keepDims",e,n,r);return[t.max(o("x",e,n,r),s,a)]}case"Mean":{const s=o("axis",e,n,r),a=o("keepDims",e,n,r);return[t.mean(o("x",e,n,r),s,a)]}case"Min":{const s=o("axis",e,n,r),a=o("keepDims",e,n,r);return[t.min(o("x",e,n,r),s,a)]}case"Sum":{const s=o("axis",e,n,r),a=o("keepDims",e,n,r);return[t.sum(o("x",e,n,r),s,a)]}case"All":{const s=o("axis",e,n,r),a=o("keepDims",e,n,r);return[t.all(o("x",e,n,r),s,a)]}case"Any":{const s=o("axis",e,n,r),a=o("keepDims",e,n,r);return[t.any(o("x",e,n,r),s,a)]}case"ArgMax":{const s=o("axis",e,n,r);return[t.argMax(o("x",e,n,r),s)]}case"ArgMin":{const s=o("axis",e,n,r);return[t.argMin(o("x",e,n,r),s)]}case"Prod":{const s=o("axis",e,n,r),a=o("keepDims",e,n,r);return[t.prod(o("x",e,n,r),s,a)]}case"Cumsum":{const s=o("axis",e,n,r),a=o("exclusive",e,n,r),i=o("reverse",e,n,r);return[t.cumsum(o("x",e,n,r),s,a,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,n,r));case"slice_join":return t.tidy(()=>((e,n,r)=>{switch(e.op){case"ConcatV2":case"Concat":{const s=o("n",e,n,r),a=o("axis",e,n,r);let i=o("tensors",e,n,r);return i=i.slice(0,s),[t.concat(i,a)]}case"GatherV2":case"Gather":{const s=o("axis",e,n,r),a=o("x",e,n,r),i=o("indices",e,n,r);return[t.gather(a,i.asType("int32"),s)]}case"ReverseV2":case"Reverse":{const s=o("axis",e,n,r),a=o("x",e,n,r);return[t.reverse(a,s)]}case"Slice":{const s=o("begin",e,n,r),a=o("size",e,n,r);return[t.slice(o("x",e,n,r),s,a)]}case"StridedSlice":{const s=o("begin",e,n,r),a=o("end",e,n,r),i=o("strides",e,n,r),u=o("beginMask",e,n,r),l=o("endMask",e,n,r),c=o("ellipsisMask",e,n,r),p=o("newAxisMask",e,n,r),d=o("shrinkAxisMask",e,n,r),h=o("x",e,n,r);return[t.stridedSlice(h,s,a,i,u,l,c,p,d)]}case"Pack":return t.tidy(()=>{const s=o("axis",e,n,r),a=o("tensors",e,n,r),i=a[0].shape,u=a[0].squeeze().shape,l=a.map(e=>{const n=t.util.arraysEqual(e.shape,i);if(!n&&!t.util.arraysEqual(e.squeeze().shape,u))throw new Error("the input tensors shape does not match");return n?e:e.reshape(i)});return[t.stack(l,s)]});case"Unpack":return t.tidy(()=>{const s=o("axis",e,n,r),a=o("tensor",e,n,r);return t.unstack(a,s)});case"Tile":{const s=o("reps",e,n,r);return[t.tile(o("x",e,n,r),s)]}case"Split":case"SplitV":{const s=o("axis",e,n,r),a=o("numOrSizeSplits",e,n,r),i=o("x",e,n,r);return t.split(i,a,s)}case"ScatterNd":{const s=o("indices",e,n,r),a=o("values",e,n,r),i=o("shape",e,n,r);return[t.scatterND(s,a,i)]}case"GatherNd":{const s=o("x",e,n,r),a=o("indices",e,n,r);return[t.gatherND(s,a)]}case"SparseToDense":{const s=o("sparseIndices",e,n,r),a=o("outputShape",e,n,r),i=o("sparseValues",e,n,r),u=o("defaultValue",e,n,r);return[t.sparseToDense(s,i,a,i.dtype===u.dtype?u:u.asType(i.dtype))]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,n,r));case"spectral":return t.tidy(()=>((e,n,r)=>{switch(e.op){case"FFT":return[t.fft(o("x",e,n,r))];case"IFFT":return[t.ifft(o("x",e,n,r))];case"RFFT":return[t.rfft(o("x",e,n,r))];case"IRFFT":return[t.irfft(o("x",e,n,r))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,n,r));case"transformation":return t.tidy(()=>((e,n,r)=>{switch(e.op){case"Cast":return[t.cast(o("x",e,n,r),o("dtype",e,n,r))];case"ExpandDims":{const s=o("axis",e,n,r);return[t.expandDims(o("x",e,n,r),s)]}case"Squeeze":{const s=o("axis",e,n,r);return[t.squeeze(o("x",e,n,r),s)]}case"Reshape":return[t.reshape(o("x",e,n,r),o("shape",e,n,r))];case"PadV2":case"Pad":return[t.pad(o("x",e,n,r),o("padding",e,n,r),o("constantValue",e,n,r))];case"SpaceToBatchND":{const s=o("blockShape",e,n,r),a=o("paddings",e,n,r);return[t.spaceToBatchND(o("x",e,n,r),s,a)]}case"BatchToSpaceND":{const s=o("blockShape",e,n,r),a=o("crops",e,n,r);return[t.batchToSpaceND(o("x",e,n,r),s,a)]}case"DepthToSpace":{const s=o("blockSize",e,n,r),a=o("dataFormat",e,n,r).toUpperCase();return[t.depthToSpace(o("x",e,n,r),s,a)]}case"BroadcastTo":return[t.broadcastTo(o("x",e,n,r),o("shape",e,n,r))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,n,r));case"custom":const s=a(e.op);if(s&&s.customExecutor)return s.customExecutor(new U(e,n,r));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,n,r);return s instanceof Promise?s.then(e=>[].concat(e)):[].concat(s)}class X{constructor(e={},t={},n={},r={}){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=r,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map(e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(){for(const e in this.tensorArrayMap)this.tensorArrayMap[e].clearAndClose();for(const e in this.tensorListMap)this.tensorListMap[e].clearAndClose()}}function Y(e,t,n){const r=new Set,s=[];let a=null,o=null;const i=new Set,u=Object.keys(e).map(e=>c(e)[0]),l=[...t];for(;l.length>0;){const e=l.pop();(Z(e)||ee(e))&&null==a&&(a=e,o=a.children.map(e=>e.name).filter(e=>r.has(e))),r.add(e.name),null==n[e.name]&&-1===u.indexOf(e.name)&&(0!==e.inputs.length?e.inputs.forEach(e=>{i.has(e.name)||(i.add(e.name),l.push(e))}):s.push(e.name))}return{inputs:e,outputs:t,usedNodes:r,missingInputs:s,dynamicNode:a,syncInputs:o}}const Q=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],J=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"];function Z(e){return Q.indexOf(e.op)>=0}function ee(e){return J.indexOf(e.op)>=0}class te{constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this._outputs=e.outputs,this._inputs=e.inputs,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach(t=>{this._functionExecutorMap[t]=new te(e.functions[t],this)})}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map(t=>e[t].map(e=>e.id));this._weightIds=[].concat(...t),this._weightMap=e}get inputs(){return this._inputs.map(e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}))}get outputs(){return this._outputs.map(e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}))}get inputNodes(){return this._inputs.map(e=>e.signatureKey||e.name)}get outputNodes(){return this._outputs.map(e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t})}get functions(){return Object.keys(this._functions).reduce((e,t)=>(e[t]=this._functions[t].signature,e),{})}getCompilationKey(e,t){const n=e.map(e=>e.name).sort(),r=t.map(e=>e.name).sort();return n.join(this.SEPERATOR)+"--"+r.join(this.SEPERATOR)}compile(e,t){const n=Y(e,t,this.weightMap),{missingInputs:r,dynamicNode:s,syncInputs:a}=n;if(null!=s)throw new Error(`This execution contains the node '${s.name}', which has the dynamic op '${s.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(r.length>0){const n=t.map(e=>e.name),s=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${s}]. Missing the following inputs: [${r}]`)}return function(e,t,n){const{usedNodes:r,inputs:s}=n,a=[];Object.keys(s).map(e=>c(e)[0]).map(t=>e.nodes[t]).forEach(e=>{r.has(e.name)&&a.push(e)}),e.weights.forEach(e=>{r.has(e.name)&&a.push(e)});const o=new Set,i=[];for(;a.length>0;){const e=a.pop();o.add(e.name),t[e.name]||i.push(e),e.children.forEach(e=>{!o.has(e.name)&&r.has(e.name)&&e.inputs.every(e=>o.has(e.name))&&a.push(e)})}return i}(this.graph,this.weightMap,n)}execute(e,n){e=this.mapInputs(e);const r=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),n=this.mapOutputs(n),this.checkOutputs(n);const s=r.map(e=>this.graph.nodes[c(e)[0]]),a=n.map(e=>this.graph.nodes[c(e)[0]]),o=this.getCompilationKey(s,a);let u=this.compiledMap.get(o);null==u&&(u=this.compile(e,a),this.compiledMap.set(o,u));const l={},p={};return t.tidy(()=>{const t=new X(this.weightMap,l,p,this.functionExecutorMap),r=Object.assign({},this.weightMap);Object.keys(e).forEach(t=>{const[n,s]=c(t),a=[];a[s]=e[t],r[n]=a});const s=this.getFrozenTensorIds(r),a={};for(let e=0;e<u.length;e++){const o=u[e];if(!r[o.name]){const e=K(o,r,t);if(e instanceof Promise)throw new Error(`The execution of the op '${o.op}' returned a promise. Please use model.executeAsync() instead.`);r[o.name]=e,this.checkTensorForDisposal(o.name,o,r,t,s,n,a)}}return null==this.parent&&t.dispose(),n.map(e=>i(e,r,t))})}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map(t=>e[t]).map(e=>e.map(e=>e.id)));return new Set(t)}checkTensorForDisposal(e,t,n,r,s,a,o){"control"!==t.category&&-1===a.indexOf(e)&&(n[e].forEach(e=>{null!=e&&(o[e.id]=(o[e.id]||0)+t.children.length)}),t.inputs.forEach(e=>{if("control"!==e.category){const t=function(e,t,n){return t[l(e,n.currentContextId)]}(e.name,n,r);null!=t&&t.forEach(e=>{if(e&&!s.has(e.id)){const t=o[e.id];1===t?(e.dispose(),delete o[e.id]):null!=t&&o[e.id]--}})}}))}async executeAsync(e,t){return this._executeAsync(e,t)}async _executeAsync(e,t,n=!1,r={},s={}){n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));const a=new X(this.weightMap,r,s,this.functionExecutorMap),o=await this.executeWithControlFlow(e,a,t,n),u=t.map(e=>i(e,o,a)),l=new Set(u.map(e=>e.id)),c=new Set(Object.keys(e).map(t=>e[t].id));return Object.keys(o).forEach(e=>{o[e].forEach(e=>{!e||e.isDisposed||l.has(e.id)||c.has(e.id)||-1!==this.weightIds.indexOf(e.id)||e.dispose()})}),null==this.parent&&a.dispose(),u}async executeFunctionAsync(e,t,n){const r=e.reduce((e,t,n)=>(e[this.inputs[n].name]=t,e),{});return this._executeAsync(r,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,r){const s=Object.keys(e),a=s.map(e=>this.graph.nodes[c(e)[0]]),o=n.map(e=>this.graph.nodes[c(e)[0]]),{usedNodes:u,missingInputs:l,dynamicNode:p,syncInputs:d}=Y(e,o,this.weightMap),h=[...a,...this.graph.weights].map(e=>({node:e,contexts:t.currentContext})),f=Object.assign({},this.weightMap);Object.keys(e).forEach(t=>{const[n,r]=c(t),s=[];s[r]=e[t],f[n]=s});const m={},g=this.getFrozenTensorIds(f),y={};for(;h.length>0;){const e=this.processStack(a,h,t,f,y,g,n,m,u);await Promise.all(e)}null!=p||r||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const x=o.filter(e=>!Z(e)&&!i(e.name,f,t)).map(e=>e.name);if(x.length>0){let e="";throw null!=p&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${d}]`),new Error(`Cannot compute the outputs [${x}] from the provided inputs [${s}]. Consider providing the following inputs: [${l}]. ${e}`)}return f}processStack(e,t,n,r,s,a,i,l,c){const p=[];for(;t.length>0;){const d=t.pop();n.currentContext=d.contexts;let h="";if("Enter"===d.node.op&&o("isConstant",d.node,r,n)&&([h]=u(d.node.name,n)),-1===e.indexOf(d.node)){const e=K(d.node,r,n);h||([h]=u(d.node.name,n));const o=n.currentContext;e instanceof Promise?p.push(e.then(e=>(r[h]=e,n.currentContext=o,this.checkTensorForDisposal(h,d.node,r,n,a,i,l),this.processChildNodes(d.node,t,n,r,s,c),e))):(r[h]=e,this.checkTensorForDisposal(h,d.node,r,n,a,i,l),this.processChildNodes(d.node,t,n,r,s,c))}else this.processChildNodes(d.node,t,n,r,s,c)}return p}processChildNodes(e,t,n,r,s,a){e.children.forEach(e=>{const[o]=u(e.name,n);!s[o]&&a.has(e.name)&&("Merge"===e.op?e.inputNames.some(e=>!!i(e,r,n))&&(s[o]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every(e=>!!i(e,r,n))&&(s[o]=!0,t.push({contexts:n.currentContext,node:e})))})}dispose(){Object.keys(this.weightMap).forEach(e=>this.weightMap[e].forEach(e=>e.dispose()))}checkInputShapeAndType(e){Object.keys(e).forEach(n=>{const r=e[n],[s]=c(n),a=this.graph.nodes[s];if(a.attrParams.shape&&a.attrParams.shape.value){const e=a.attrParams.shape.value,n=e.length===r.shape.length&&r.shape.every((t,n)=>-1===e[n]||e[n]===t);t.util.assert(n,()=>`The shape of dict['${a.name}'] provided in model.execute(dict) must be [${e}], but was [${r.shape}]`)}a.attrParams.dtype&&a.attrParams.dtype.value&&t.util.assert(r.dtype===a.attrParams.dtype.value,()=>`The dtype of dict['${a.name}'] provided in model.execute(dict) must be ${a.attrParams.dtype.value}, but was ${r.dtype}`)})}mapInputs(e){const t={};for(const n in e)null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]?t[this._signature.inputs[n].name]=e[n]:t[n]=e[n];return t}checkInputs(e){const t=Object.keys(e).filter(e=>{const[t]=c(e);return null==this.graph.nodes[t]});if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map(e=>null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[e]?this._signature.outputs[e].name:e,{})}checkOutputs(e){e.forEach(e=>{const[t]=c(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)})}}class ne{constructor(e,t={}){this.modelUrl=e,this.loadOptions=t,this.version="n/a",null==t&&(this.loadOptions={})}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=t.io.browserHTTPRequest(e,this.loadOptions);else{const n=t.io.getLoadHandlers(e,this.loadOptions);if(0===n.length)n.push(t.io.browserHTTPRequest(e,this.loadOptions));else if(n.length>1)throw new Error(`Found more than one (${n.length}) load handlers for URL '${[e]}'`);this.handler=n[0]}}async load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=await this.handler.load();return this.loadSync(e)}loadSync(e){this.artifacts=e;const n=this.artifacts.modelTopology;let r={};null!=this.artifacts.userDefinedMetadata&&(r=this.artifacts.userDefinedMetadata.signature),this.version=`${n.versions.producer}.${n.versions.minConsumer}`;const s=t.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);return this.executor=new te(T.Instance.transformGraph(n,r)),this.executor.weightMap=this.convertTensorMapToTensorsMap(s),!0}async save(e,n){if("string"==typeof e){const n=t.io.getSaveHandlers(e);if(0===n.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(n.length>1)throw new Error(`Found more than one (${n.length}) save handlers for URL '${e}'`);e=n[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}predict(e,t){return this.execute(e,this.outputNodes)}normalizeInputs(e){if(!(e instanceof t.Tensor||Array.isArray(e)))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${e.length} input tensors.`);return this.inputNodes.reduce((t,n,r)=>(t[n]=e[r],t),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}execute(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce((t,n)=>(t[n]=[e[n]],t),{})}dispose(){this.executor.dispose()}}e.GraphModel=ne,e.deregisterOp=function(e){delete s[e]},e.loadGraphModel=async function(e,t={}){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&null==e.load&&(e.endsWith("/")||(e+="/"),e+="model.json?tfjs-format=file");const n=new ne(e,t);return await n.load(),n},e.registerOp=function(e,t){const n={tfOpName:e,category:"custom",inputs:[],attrs:[],customExecutor:t};s[e]=n},e.version_converter="2.1.0",Object.defineProperty(e,"__esModule",{value:!0})}(t,kc)}));console.log(df.version_converter);const hf=si([1,2,3,4]);console.log(hf.dataSync())}));
//# sourceMappingURL=core_webgl_converter.js.map
