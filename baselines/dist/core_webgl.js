!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(require("crypto")):"function"==typeof define&&define.amd?define(["crypto"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).crypto)}(this,(function(e){"use strict";function t(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var n=t(e);class r{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(t instanceof Promise)throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=function(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("="))),t}(this.global.location.search);if("tfjsflags"in e){e.tfjsflags.split(",").forEach(e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)})}}}function o(){return a}let s,a=null;function i(){if(null==s){let e;if("undefined"!=typeof window)e=window;else if("undefined"!=typeof global)e=global;else if("undefined"!=typeof process)e=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}s=e}return s}function u(e,t){const n=function(){const e=i();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const r=t();return n.set(e,r),n.get(e)}}const l=u("kernelRegistry",()=>new Map),c=u("gradRegistry",()=>new Map);function h(e,t){const n=m(e,t);return l.get(n)}function d(e){return c.get(e)}function p(e){const t=l.entries(),n=[];for(;;){const{done:r,value:o}=t.next();if(r)break;const[s,a]=o,[i]=s.split("_");i===e&&n.push(a)}return n}function f(e){const{kernelName:t,backendName:n}=e,r=m(t,n);l.has(r)&&console.warn(`The kernel '${t}' for backend '${n}' is already registered`),l.set(r,e)}function g(e){const{kernelName:t}=e;c.has(t)&&o().getBool("DEBUG")&&console.warn(`Overriding the gradient for '${t}'`),c.set(t,e)}function m(e,t){return`${t}_${e}`}function x(e,t,n){return Math.max(e,Math.min(t,n))}function v(e){return e%2==0?e:e+1}function b(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function y(e,t,n=""){b(R(e,t),()=>n+` Shapes ${e} and ${t} must match`)}function w(e){b(null!=e,()=>"The input to the tensor constructor must be a non-null value.")}function C(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||F(e)&&!n)for(let r=0;r<e.length;++r)C(e[r],t,n);else t.push(e);return t}function $(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function R(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function E(e){return e%1==0}function k(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function I(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function S(e,t=(e=>0),n){return new Promise((r,o)=>{let s=0;const a=()=>{if(e())return void r();s++;const i=t(s);null!=n&&s>=n?o():setTimeout(a,i)};a()})}function A(e,t){const n=t.length;return b((e=null==e?t.map((e,t)=>t):[].concat(e)).every(e=>e>=-n&&e<n),()=>`All values in axis param must be in range [-${n}, ${n}) but got axis `+e),b(e.every(e=>E(e)),()=>"All values in axis param must be integers but got axis "+e),e.map(e=>e<0?n+e:e)}function N(e,t){const n=[],r=[],o=null!=t&&Array.isArray(t)&&0===t.length,s=null==t||o?null:A(t,e).sort();let a=0;for(let t=0;t<e.length;++t){if(null!=s){if(s[a]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==s[a]||s[a]>t)&&1===e[t]&&(n.push(e[t]),r.push(t)),s[a]<=t&&a++}1!==e[t]&&(n.push(e[t]),r.push(t))}return{newShape:n,keptDims:r}}function T(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error("Unknown data type "+e);n=new Uint8Array(t)}return n}function D(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error("Unknown data type "+e);n=new Array(t)}return n}function F(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array}function _(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error("Unknown dtype "+e)}function O(e){return"string"==typeof e||e instanceof String}function B(e){return Array.isArray(e)?B(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array?"int32":"number"==typeof e?"float32":O(e)?"string":function(e){return"boolean"==typeof e}(e)?"bool":"float32"}function M(e){return!!(e&&e.constructor&&e.call&&e.apply)}function P(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function L(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n}function W(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=C(e)),o().getBool("DEBUG")&&function(e,t){for(let n=0;n<e.length;n++){const r=e[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${t} being uploaded contains ${r}.`)}}(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error("Unknown data type "+t)}function V(e,t){if(0===e.length)return t[0];const n=e.reduce((e,t)=>e*t);if(0===n)return[];if(n!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}.`);return function e(t,n,r){const o=new Array;if(1===n.length){const e=n[0];for(let n=0;n<e;n++)o[n]=r[t+n]}else{const s=n[0],a=n.slice(1),i=a.reduce((e,t)=>e*t);for(let n=0;n<s;n++)o[n]=e(t+n*i,a,r)}return o}(0,e,t)}function U(e,t){const n=G(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function G(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error("Unknown data type "+t)}function z(){return o().platform.now()}function H(e){e.forEach(t=>{b(Number.isInteger(t)&&t>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`)})}function K(e,t="utf-8"){return t=t||"utf-8",o().platform.decode(e,t)}function q(e,t,n){if(0===t)return 0;if(1===t)return e[0];let r=e[e.length-1];for(let t=0;t<e.length-1;++t)r+=n[t]*e[t];return r}function X(e,t,n){if(0===t)return[];if(1===t)return[e];const r=new Array(t);for(let t=0;t<r.length-1;++t)r[t]=Math.floor(e/n[t]),e-=r[t]*n[t];return r[r.length-1]=e,r}class j{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new Y)}profileKernel(e,t,n){let r;const o=this.backendTimer.time(()=>{r=n()});r.map(t=>{t.data().then(n=>{!function(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const r=e[t];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${n}'`),!0}}(n,t.dtype,e)})});return{kernelName:e,outputs:r,inputs:t,timeMs:o.then(e=>e.kernelMs),extraInfo:o.then(e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():"")}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:r,inputs:o,extraInfo:s}=e;n.forEach(e=>{Promise.all([e.data(),r,s]).then(n=>{this.logger.logKernelProfile(t,e,n[0],n[1],o,n[2])})})}}class Y{logKernelProfile(e,t,n,r,o,s){const a="number"==typeof r?I(r+"ms",9):r.error,i=I(e,25),u=t.rank,l=t.size,c=I(t.shape.toString(),14);let h="";for(const e in o){const n=o[e].shape||t.shape,r=n.length;h+=`${e}: ${r}D ${r>0?n:""} `}console.log(`%c${i}\t%c${a}\t%c${u}D ${c}\t%c${l}\t%c${h}\t%c${s}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function Q(e,t,n,r){const o=L(t),s=function(e,t,n,r){const o=$(t),s=r[r.length-1],a=new Array(s).fill(0),i=t.length,u="complex64"===n?ee(e):e;if(i>1)for(let e=0;e<o/s;e++){const t=e*s;for(let e=0;e<s;e++)a[e]=Math.max(a[e],J(u[t+e],0,n).length)}return a}(e,t,n,o),a=t.length,i=function e(t,n,r,o,s,a=!0){const i="complex64"===r?2:1,u=n[0],l=n.length;if(0===l){if("complex64"===r){return[J(ee(t)[0],0,r)]}return"bool"===r?[Z(t[0])]:[t[0].toString()]}if(1===l){if(u>20){const e=3*i;let n=Array.from(t.slice(0,e)),o=Array.from(t.slice((u-3)*i,u*i));return"complex64"===r&&(n=ee(n),o=ee(o)),["["+n.map((e,t)=>J(e,s[t],r)).join(", ")+", ..., "+o.map((e,t)=>J(e,s[u-3+t],r)).join(", ")+"]"]}return["["+("complex64"===r?ee(t):Array.from(t)).map((e,t)=>J(e,s[t],r)).join(", ")+"]"]}const c=n.slice(1),h=o.slice(1),d=o[0]*i,p=[];if(u>20){for(let n=0;n<3;n++){const o=n*d,a=o+d;p.push(...e(t.slice(o,a),c,r,h,s,!1))}p.push("...");for(let n=u-3;n<u;n++){const o=n*d,a=o+d;p.push(...e(t.slice(o,a),c,r,h,s,n===u-1))}}else for(let n=0;n<u;n++){const o=n*d,a=o+d;p.push(...e(t.slice(o,a),c,r,h,s,n===u-1))}const f=2===l?",":"";p[0]="["+p[0]+f;for(let e=1;e<p.length-1;e++)p[e]=" "+p[e]+f;let g=",\n";for(let e=2;e<l;e++)g+="\n";return p[p.length-1]=" "+p[p.length-1]+"]"+(a?"":g),p}(e,t,n,o,s),u=["Tensor"];return r&&(u.push("  dtype: "+n),u.push("  rank: "+a),u.push(`  shape: [${t}]`),u.push("  values:")),u.push(i.map(e=>"    "+e).join("\n")),u.join("\n")}function J(e,t,n){let r;return r=Array.isArray(e)?parseFloat(e[0].toFixed(7))+" + "+parseFloat(e[1].toFixed(7))+"j":O(e)?`'${e}'`:"bool"===n?Z(e):parseFloat(e.toFixed(7)).toString(),I(r,t)}function Z(e){return 0===e?"false":"true"}function ee(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class te{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=$(e),null!=n){const e=n.length;b(e===this.size,()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`)}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||D(t,this.size),this.strides=L(e)}set(e,...t){0===t.length&&(t=[0]),b(t.length===this.rank,()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`);const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=`+this.shape;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return ne().makeTensor(this.values,this.shape,this.dtype)}}let ne=null,re=null;class oe{constructor(e,t,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=$(e),this.strides=L(e),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return re.buffer(this.shape,this.dtype,e)}bufferSync(){return re.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return V(this.shape,e)}arraySync(){return V(this.shape,this.dataSync())}async data(){this.throwIfDisposed();const e=ne().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map(e=>K(e))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataSync(){this.throwIfDisposed();const e=ne().readSync(this.dataId);if("string"===this.dtype)try{return e.map(e=>K(e))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await ne().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(ne().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return re.print(this,e)}clone(){return this.throwIfDisposed(),re.clone(this)}toString(e=!1){return Q(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),re.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),ne().makeVariable(this,e,t,n)}}Object.defineProperty(oe,Symbol.hasInstance,{value:e=>!!e&&null!=e.dataId&&null!=e.shape&&null!=e.dtype});class se extends oe{constructor(e,t,n,r){super(e.shape,e.dtype,e.dataId,r),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!R(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);ne().disposeTensor(this),this.dataId=e.dataId,ne().incRef(this,null)}dispose(){ne().disposeVariable(this),this.isDisposedInternal=!0}}var ae,ie,ue,le,ce;Object.defineProperty(se,Symbol.hasInstance,{value:e=>e instanceof oe&&null!=e.assign&&e.assign instanceof Function}),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(ae||(ae={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(ie||(ie={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(ue||(ue={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(le||(le={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(ce||(ce={}));const he={float32:le,int32:ie,bool:ue,complex64:ce};function de(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return he[e][t]}function pe(e){return de(e,"int32")}function fe(e,t){if(e.dtype===t.dtype)return[e,t];const n=de(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function ge(e){const t=[];return function e(t,n,r){if(null==t)return;if(t instanceof oe)return void n.push(t);if(o=t,!Array.isArray(o)&&"object"!=typeof o)return;var o;const s=t;for(const t in s){const o=s[t];r.has(o)||(r.add(o),e(o,n,r))}}(e,t,new Set),t}class me{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class xe{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new me}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then(()=>{});if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(console.warn(e+" backend was already registered. Reusing existing backend factory."),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new j(this.backendInstance),!0}setupRegisteredKernels(){p(this.backendName).forEach(e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)})}disposeRegisteredKernels(e){p(e).forEach(t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])})}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(Promise.resolve(n)===n){const t=++this.pendingBackendInitId,r=n.then(n=>!(t<this.pendingBackendInitId)&&(this.registry[e]=n,this.pendingBackendInit=null,!0)).catch(n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,console.warn(`Initialization of backend ${e} failed`),console.warn(n.stack||n.message)),!1));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}return this.registry[e]=n,{success:!0,asyncInit:!1}}catch(t){return console.warn(`Initialization of backend ${e} failed`),console.warn(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(e+" backend not found in registry");this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority)}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:r,asyncInit:o}=this.initializeBackend(n);if(o||r)return{name:n,asyncInit:o}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),r=n.backend,o=this.readSync(t);r.disposeData(t),n.backend=e,e.move(t,o,n.shape,n.dtype),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,r=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun(()=>this.startScope(r),()=>this.endScope(n),()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return xe.nextTensorId++}nextVariableId(){return xe.nextVariableId++}clone(e){const t=this.makeTensorFromDataId(e.dataId,e.shape,e.dtype),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],e=>({x:()=>e.toFloat()}),[],{}),t}runKernel(e,t,n,r,o){return this.runKernelFunc(null,t,null,e,n,r,o)}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const r=this.backend.numDataIds();let o=0;n.forEach(e=>{o+="complex64"===e.dtype?3:1});const s=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],a=r-t-o-s;if(a>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${a} data ids) after running '${e}'`)}runKernelFunc(e,t,n,r,o,s,a){let i,u=[];const l=this.isTapeOn();null==r&&(r=null!=this.state.activeScope?this.state.activeScope.name:"");const c=this.state.numBytes,d=this.state.numTensors;let p;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);const f=h(r,this.backendName);let g;if(null!=f)p=()=>{const e=this.backend.numDataIds();g=f.kernelFunc({inputs:t,attrs:o,backend:this.backend});const n=Array.isArray(g)?g:[g];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(r,e,n);const i=n.map(({dataId:e,shape:t,dtype:n})=>this.makeTensorFromDataId(e,t,n));if(l){let e=this.getTensorsForGradient(r,t,i);if(null==e){null==a&&(a=[]);const t=i.filter((e,t)=>a[t]);e=(s||[]).slice().concat(t)}u=this.saveTensorsForBackwardMode(e)}return i};else{const t=e=>{l&&(u=e.map(e=>this.keep(this.clone(e))))};p=()=>{const n=this.backend.numDataIds();g=this.tidy(()=>e(this.backend,t));const o=Array.isArray(g)?g:[g];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(r,n,o),o}}return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{if(this.ENV.getBool("DEBUG")){let e;e=this.profiler.profileKernel(r,t,()=>p()),this.profiler.logKernelProfile(e),i=e.outputs}else i=p()}),l&&this.addTapeNode(r,t,i,n,u,o),this.state.profiling&&this.state.activeProfile.kernels.push({name:r,bytesAdded:this.state.numBytes-c,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-d,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(t).map(e=>null!=t[e]?t[e].shape:null),outputShapes:i.map(e=>e.shape)}),Array.isArray(g)?i:i[0]}saveTensorsForBackwardMode(e){return e.map(e=>this.keep(this.clone(e)))}getTensorsForGradient(e,t,n){const r=d(e);if(null!=r){const e=r.inputsToSave||[],o=r.outputsToSave||[];let s;r.saveAllInputs?(b(Array.isArray(t),()=>"saveAllInputs is true, expected inputs to be an array."),s=Object.keys(t).map(e=>t[e])):s=e.map(e=>t[e]);const a=n.filter((e,t)=>o[t]);return s.concat(a)}return null}makeTensor(e,t,n,r){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let s=e;"string"===n&&O(e[0])&&(s=e.map(e=>function(e,t="utf-8"){return t=t||"utf-8",o().platform.encode(e,t)}(e)));const a=r.write(s,t,n),i=new oe(t,n,a,this.nextTensorId());if(this.incRef(i,r),"string"===n){const e=this.state.tensorInfo.get(a),t=function(e){if(null==e)return 0;let t=0;return e.forEach(e=>t+=e.length),t}(s);this.state.numBytes+=t-e.bytes,e.bytes=t}return i}makeTensorFromDataId(e,t,n,r){const o=new oe(t,n=n||"float32",e,this.nextTensorId());return this.incRef(o,r),o}makeVariable(e,t=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==e.dtype&&(e=e.cast(r));const o=new se(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[o.name])throw new Error(`Variable with name ${o.name} was already registered`);return this.state.registeredVariables[o.name]=o,this.incRef(o,this.backend),o}incRef(e,t){const n=this.state.tensorInfo.has(e.dataId)?this.state.tensorInfo.get(e.dataId).refCount:0;if(this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++,0===n){this.state.numDataBuffers++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*_(e.dtype)),this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n,refCount:0}),this.state.numBytes+=n}this.state.tensorInfo.get(e.dataId).refCount++,e instanceof se||this.track(e)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;this.state.numTensors--,"string"===e.dtype&&this.state.numStringTensors--;const t=this.state.tensorInfo.get(e.dataId);t.refCount<=1?("complex64"!==e.dtype&&(this.state.numBytes-=t.bytes),this.state.numDataBuffers--,t.backend.disposeData(e.dataId),this.state.tensorInfo.delete(e.dataId)):this.state.tensorInfo.get(e.dataId).refCount--}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;return this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map(e=>e.totalBytesSnapshot)),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n,this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,r,o,s){const a={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:o},i=d(e);null!=i&&(r=i.gradFunc),null!=r&&(a.gradient=e=>(e=e.map((e,t)=>{if(null==e){const e=n[t],r=G(e.size,e.dtype);return this.makeTensor(r,e.shape,e.dtype)}return e}),r(e.length>1?e:e[0],o,s))),this.state.activeTape.push(a)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=ge(e),n=new Set(t.map(e=>e.id));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach(e=>{e.kept||e.scopeId!==r.id||this.track(e)})}gradients(e,t,n,r=!1){if(b(t.length>0,()=>"gradients() received an empty list of xs."),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const o=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",e));b(o instanceof oe,()=>"The result y returned by f() must be a tensor.");const s=function(e,t,n){const r={},o={};for(let e=0;e<t.length;e++)r[t[e].id]=!0;for(let n=0;n<e.length;n++){const s=e[n],a=s.inputs;for(const e in a){const n=a[e];let i=!1;for(let e=0;e<t.length;e++)if(r[n.id]){s.outputs.forEach(e=>r[e.id]=!0),i=!0,o[s.id]=!0;break}if(i)break}}const s={};s[n.id]=!0;const a={};for(let t=e.length-1;t>=0;t--){const n=e[t],r=n.inputs;for(let e=0;e<n.outputs.length;e++)if(s[n.outputs[e].id]){for(const e in r)s[r[e].id]=!0,a[n.id]=!0;break}}const i=[];for(let t=0;t<e.length;t++){const n=e[t];if(o[n.id]&&a[n.id]){const e={};for(const t in n.inputs){const o=n.inputs[t];r[o.id]&&(e[t]=o)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,i.push(t)}}return i}(this.state.activeTape,t,o);if(!r&&0===s.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{const e={};e[o.id]=null==n?function(e){const t=U($(e),"float32");return ve.makeTensor(t,e,"float32")}(o.shape):n,function(e,t,n){for(let r=t.length-1;r>=0;r--){const o=t[r],s=[];if(o.outputs.forEach(t=>{const n=e[t.id];null!=n?s.push(n):s.push(null)}),null==o.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${o.kernelName}.`);const a=o.gradient(s);for(const t in o.inputs){if(!(t in a))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(a)}.`);const r=n(()=>a[t]());if("float32"!==r.dtype)throw new Error(`Error in gradient for op ${o.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${r.dtype}'`);const s=o.inputs[t];if(!R(r.shape,s.shape))throw new Error(`Error in gradient for op ${o.kernelName}. The gradient of input '${t}' has shape '${r.shape}', which does not match the shape of the input '${s.shape}'`);if(null==e[s.id])e[s.id]=r;else{const t=e[s.id];e[s.id]=t.add(r),t.dispose()}}}}(e,s,e=>this.tidy(e));const r=t.map(t=>e[t.id]);return 0===this.state.gradientDepth&&(this.state.activeTape.forEach(e=>{for(const t of e.saved)t.dispose()}),this.state.activeTape=null),{value:o,grads:r}})}customGrad(e){return b(M(e),()=>"The f passed in customGrad(f) must be a function."),(...t)=>{let n;b(t.every(e=>e instanceof oe),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");const r={};return t.forEach((e,t)=>{r[t]=e}),this.runKernelFunc((r,o)=>(n=e(...t,o),b(n.value instanceof oe,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),b(M(n.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),n.value),r,(e,r)=>{const o=n.gradFunc(e,r),s=Array.isArray(o)?o:[o];b(s.length===t.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),b(s.every(e=>e instanceof oe),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");const a={};return s.forEach((e,t)=>{a[t]=()=>e}),a})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}async time(e){const t=z(),n=await this.backend.time(e);return n.wallMs=z()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new me;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}xe.nextTensorId=0,xe.nextVariableId=0;const ve=function(){const e=i();if(null==e._tfengine){const t=new r(e);e._tfengine=new xe(t)}var t;return t=e._tfengine.ENV,a=t,ne=()=>e._tfengine,e._tfengine}();function be(){if("undefined"!=typeof navigator&&null!=navigator){const e=navigator.userAgent||navigator.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(e)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0,4))}return!1}function ye(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}const we=o();we.registerFlag("DEBUG",()=>!1,e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}),we.registerFlag("IS_BROWSER",()=>ye()),we.registerFlag("IS_NODE",()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node),we.registerFlag("IS_CHROME",()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),we.registerFlag("PROD",()=>!1),we.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>we.getBool("DEBUG")),we.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),we.registerFlag("IS_TEST",()=>!1);function Ce(e,t){let n=e;if(F(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];const r=[];for(;Array.isArray(n)||F(n)&&"string"!==t;)r.push(n.length),n=n[0];return Array.isArray(e)&&o().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&function e(t,n,r){if(r=r||[],!Array.isArray(t)&&!F(t))return void b(0===n.length,()=>`Element arr[${r.join("][")}] is a primitive, but should be an array/TypedArray of ${n[0]} elements`);b(n.length>0,()=>`Element arr[${r.join("][")}] should be a primitive, but is an array of ${t.length} elements`),b(t.length===n[0],()=>`Element arr[${r.join("][")}] should have ${n[0]} elements, but has ${t.length} elements`);const o=n.slice(1);for(let n=0;n<t.length;++n)e(t[n],o,r.concat(n))}(e,r,[]),r}function $e(e,t,n,r){if(null!=e&&("numeric"!==e&&e!==t||"numeric"===e&&"string"===t))throw new Error(`Argument '${n}' passed to '${r}' must be ${e} tensor, but got ${t} tensor`)}function Re(e,t,n,r="numeric"){if(e instanceof oe)return $e(r,e.dtype,t,n),e;let o=B(e);if("string"!==o&&["bool","int32","float32"].indexOf(r)>=0&&(o=r),$e(r,o,t,n),null==e||!F(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const r=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const s=Ce(e,o);F(e)||Array.isArray(e)||(e=[e]);const a="string"!==o?W(e,o):C(e,[],!0);return ve.makeTensor(a,s,o)}function Ee(e,t,n,r="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map((e,r)=>Re(e,`${t}[${r}]`,n),r)}function ke(e){const t=Object.keys(e);if(1!==t.length)throw new Error("Please provide an object with a single key (operation name) mapping to a function. Got an object with "+t.length+" keys.");let n=t[0];const r=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1));const o=(...e)=>{ve.startScope(n);try{const t=r(...e);return t instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),ve.endScope(t),t}catch(e){throw ve.endScope(null),e}};return Object.defineProperty(o,"name",{value:n,configurable:!0}),o}const Ie=ke({cast_:function(e,t){const n=Re(e,"x","cast");if(!function(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}(t))throw new Error("Failed to cast to unknown dtype "+t);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const r={x:n},o={dtype:t};return ve.runKernelFunc(e=>e.cast(n,t),r,null,"Cast",o)}});const Se=ke({mul_:function(e,t){let n=Re(e,"a","mul"),r=Re(t,"b","mul");[n,r]=fe(n,r);const o={a:n,b:r};return ve.runKernelFunc((e,t)=>{const o=e.multiply(n,r);return t([n,r]),o},o,null,"Multiply")}});const Ae=ke({step_:function(e,t=0){const n=Re(e,"x","step"),r={x:n},o={alpha:t};return ve.runKernelFunc(e=>e.step(n,t),r,null,"Step",o)}}),Ne={kernelName:"Abs",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Se(e,Ae(Ie(n,"float32"),-1))}}};const Te=ke({floorDiv_:function(e,t){let n=Re(e,"a","floorDiv"),r=Re(t,"b","floorDiv");[n,r]=fe(n,r);const o={a:n,b:r};return ve.runKernelFunc((e,t)=>{const o=e.floorDiv(n,r);return t([n,r]),o},o,null,"FloorDiv")}});const De=ke({div_:function(e,t){let n=Re(e,"a","div"),r=Re(t,"b","div");if([n,r]=fe(n,r),"int32"===n.dtype&&"int32"===r.dtype)return Te(n,r);const o={a:n,b:r};return ve.runKernelFunc((e,t)=>{const o=e.realDivide(n,r);return t([n,r]),o},o,null,"Div",{})}});const Fe=ke({neg_:function(e){const t=Re(e,"x","neg"),n={x:t};return ve.runKernelFunc(e=>e.neg(t),n,null,"Negate")}});function _e(e,t,n,r){if(null==r&&(r=B(e)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!F(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){H(t);const e=$(t),r=$(n);b(e===r,()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${r}`);for(let e=0;e<n.length;++e){const r=n[e],o=e!==n.length-1||r!==$(t.slice(e));b(n[e]===t[e]||!o,()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `)}}return F(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==r?W(e,r):C(e,[],!0),ve.makeTensor(e,t,r)}function Oe(e,t){if((F(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&F(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return _e(e,[],[],t)}const Be=ke({sqrt_:function(e){const t=Re(e,"x","sqrt"),n={x:t};return ve.runKernelFunc((e,n)=>{const r=e.sqrt(t);return n([t]),r},n,null,"Sqrt")}});const Me=ke({square_:function(e){const t=Re(e,"x","square"),n=[t];return ve.runKernelFunc((e,n)=>(n([t]),e.square(t)),{x:t},null,"Square",{},n,[])}});const Pe=ke({sub_:function(e,t){let n=Re(e,"a","sub"),r=Re(t,"b","sub");[n,r]=fe(n,r);const o={a:n,b:r};return ve.runKernelFunc((e,t)=>{const o=e.subtract(n,r);return t([n,r]),o},o,null,"Sub")}}),Le={kernelName:"Acos",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Me(Ie(n,"float32")),r=Be(Pe(Oe(1),t));return Fe(De(e,r))}}}},We={kernelName:"Acosh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Be(Pe(Me(Ie(n,"float32")),1));return De(e,t)}}}};function Ve(e,t){const n=[];for(let r=0;r<t.length;r++){const o=e[e.length-r-1],s=t.length-r-1,a=t[s];(null==o||1===o&&a>1)&&n.unshift(s)}return n}function Ue(e,t){const n=[],r=Math.max(e.length,t.length);for(let o=0;o<r;o++){let r=e[e.length-o-1];null==r&&(r=1);let s=t[t.length-o-1];if(null==s&&(s=1),1===r)n.unshift(s);else if(1===s)n.unshift(r);else{if(r!==s){throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`)}n.unshift(r)}}return n}const Ge={kernelName:"Add",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,o=Ue(n.shape,r.shape);return{a:()=>{let t=e;const r=Ve(n.shape,o);return r.length>0&&(t=t.sum(r)),t.reshape(n.shape)},b:()=>{let t=e;const n=Ve(r.shape,o);return n.length>0&&(t=t.sum(n)),t.reshape(r.shape)}}}},ze={kernelName:"AddN",saveAllInputs:!0,gradFunc:(e,t)=>{const n={};return t.forEach((t,r)=>{n[r]=()=>e.clone()}),n}};const He=ke({zerosLike_:function(e){const t=Re(e,"x","zerosLike"),n={x:t};return ve.runKernelFunc(e=>e.zerosLike(t),n,null,"ZerosLike")}}),Ke={kernelName:"ArgMax",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>He(n)}}},qe={kernelName:"ArgMin",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>He(n)}}},Xe={kernelName:"Asin",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>De(e,Be(Pe(Oe(1),Me(Ie(n,"float32")))))}}};const je=ke({add_:function(e,t){let n=Re(e,"a","add"),r=Re(t,"b","add");[n,r]=fe(n,r);const o={a:n,b:r};return ve.runKernelFunc((e,t)=>{const o=e.add(n,r);return t([n,r]),o},o,null,"Add")}}),Ye={kernelName:"Asinh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Be(je(Oe(1),Me(Ie(n,"float32"))));return De(e,t)}}}};const Qe=ke({reshape_:function(e,t){const n=Re(e,"x","reshape",null);t=function(e,t){let n=1,r=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${t}`);r=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===r){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const o=e.slice();return o[r]=t/n,o}(t,n.size),b(n.size===$(t),()=>"new shape and old shape must have the same number of elements.");const r={x:n},o={shape:t};return ve.runKernelFunc((e,r)=>(r([n]),e.reshape(n,t)),r,null,"Reshape",o)}});function Je(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function Ze(e,t,n){const r=e.length+t.length,o=[];let s=0,a=0;for(let i=0;i<r;i++)-1===n.indexOf(i)?o.push(e[s++]):o.push(t[a++]);return o}function et(e,t){const n=[],r=e.length;for(let o=0;o<r;o++)-1===t.indexOf(o)&&n.push(e[o]);return[n,t.map(t=>e[t])]}function tt(e,t){return Ze(e,t.map(e=>1),t)}function nt(e,t,n){b(Je(t,n),()=>e+" supports only inner-most axes for now. "+`Got axes ${t} and rank-${n} input.`)}function rt(e,t){if(Je(e,t))return null;const n=[];for(let r=0;r<t;++r)-1===e.indexOf(r)&&n.push(r);return e.forEach(e=>n.push(e)),n}function ot(e){return e.map((e,t)=>[t,e]).sort((e,t)=>e[1]-t[1]).map(e=>e[0])}function st(e,t){const n=[];for(let r=t-e;r<t;++r)n.push(r);return n}const at=ke({sum_:function(e,t=null,n=!1){let r=Re(e,"x","sum");"bool"===r.dtype&&(r=r.toInt());const o={x:r},s={axis:t,keepDims:n};return ve.runKernelFunc((e,o)=>{o([r]);const s=A(t,r.shape),a=rt(s,r.rank);let i=s,u=r;null!=a&&(u=r.transpose(a),i=st(i.length,r.rank));let l=e.sum(u,i);if(n){const e=tt(l.shape,s);l=l.reshape(e)}return l},o,null,"Sum",s)}}),it={kernelName:"Atan2",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,o=Ue(n.shape,r.shape);return{a:()=>{const t=je(Me(n),Me(r));let s=Se(e,De(r,t));const a=Ve(n.shape,o);return a.length>0&&(s=at(s,a)),Qe(s,n.shape)},b:()=>{const t=je(Me(n),Me(r));let s=Fe(Se(e,De(n,t)));const a=Ve(r.shape,o);return a.length>0&&(s=at(s,a)),Qe(s,r.shape)}}}},ut={kernelName:"Atan",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>De(e,je(Me(Ie(n,"float32")),1))}}},lt={kernelName:"Atanh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>De(e,Pe(Oe(1),Me(Ie(n,"float32"))))}}};function ct(e,t,n,r,o,s,a="channelsLast"){const[i,u]=gt(t);let l;if("channelsLast"===a)l=[i,u,e[3],e[3]];else{if("channelsFirst"!==a)throw new Error("Unknown dataFormat "+a);l=[i,u,e[1],e[1]]}return dt(e,l,n,r,o,s,!1,a)}function ht(e,t,n,r,o,s,a="NDHWC"){const[i,u,l]=mt(t);let c,h;if("NDHWC"===a)h="channelsLast",c=[i,u,l,e[4],e[4]];else{if("NCDHW"!==a)throw new Error("Unknown dataFormat "+a);h="channelsFirst",c=[i,u,l,e[1],e[1]]}return pt(e,c,n,r,o,!1,h,s)}function dt(e,t,n,r,o,s,a=!1,i="channelsLast"){let[u,l,c,h]=[-1,-1,-1,-1];if("channelsLast"===i)[u,l,c,h]=e;else{if("channelsFirst"!==i)throw new Error("Unknown dataFormat "+i);[u,h,l,c]=e}const[d,p,,f]=t,[g,m]=gt(n),[x,v]=gt(r),y=xt(d,x),w=xt(p,v),{padInfo:C,outHeight:$,outWidth:R}=function(e,t,n,r,o,s,a,i,u){let l,c,h;if("number"==typeof e){l={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const o=function(e,t,n,r,o){null==r&&(r=ft(e,t,n));const s=e[0],a=e[1],i=vt((s-t+2*r)/n+1,o);b(E(i),()=>`The output # of rows (${i}) must be an integer. Change the stride and/or zero pad parameters`);const u=vt((a-t+2*r)/n+1,o);return b(E(u),()=>`The output # of columns (${u}) must be an integer. Change the stride and/or zero pad parameters`),[i,u]}([t,n],s,r,e,i);c=o[0],h=o[1]}else if("same"===e){c=Math.ceil(t/r),h=Math.ceil(n/o);const e=Math.max(0,(c-1)*r+s-t),i=Math.max(0,(h-1)*o+a-n),u=Math.floor(e/2),d=e-u,p=Math.floor(i/2);l={top:u,bottom:d,left:p,right:i-p,type:"SAME"}}else if("valid"===e)l={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-s+1)/r),h=Math.ceil((n-a+1)/o);else{if("object"!=typeof e)throw Error("Unknown padding parameter: "+e);{const d="channelsLast"===u?e[1][0]:e[2][0],p="channelsLast"===u?e[1][1]:e[2][1],f="channelsLast"===u?e[2][0]:e[3][0],g="channelsLast"===u?e[2][1]:e[3][1];l={top:d,bottom:p,left:f,right:g,type:0===d&&0===p&&0===f&&0===g?"VALID":"EXPLICIT"},c=vt((t-s+d+p)/r+1,i),h=vt((n-a+f+g)/o+1,i)}}return{padInfo:l,outHeight:c,outWidth:h}}(o,l,c,g,m,y,w,s,i),k=a?f*h:f;let I;return"channelsFirst"===i?I=[u,k,$,R]:"channelsLast"===i&&(I=[u,$,R,k]),{batchSize:u,dataFormat:i,inHeight:l,inWidth:c,inChannels:h,outHeight:$,outWidth:R,outChannels:k,padInfo:C,strideHeight:g,strideWidth:m,filterHeight:d,filterWidth:p,effectiveFilterHeight:y,effectiveFilterWidth:w,dilationHeight:x,dilationWidth:v,inShape:e,outShape:I,filterShape:t}}function pt(e,t,n,r,o,s=!1,a="channelsLast",i){let[u,l,c,h,d]=[-1,-1,-1,-1,-1];if("channelsLast"===a)[u,l,c,h,d]=e;else{if("channelsFirst"!==a)throw new Error("Unknown dataFormat "+a);[u,d,l,c,h]=e}const[p,f,g,,m]=t,[x,v,y]=mt(n),[w,C,$]=mt(r),R=xt(p,w),k=xt(f,C),I=xt(g,$),{padInfo:S,outDepth:A,outHeight:N,outWidth:T}=function(e,t,n,r,o,s,a,i,u,l,c){let h,d,p,f;if("number"==typeof e){h={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const s=function(e,t,n,r,o,s){null==o&&(o=ft(e,t,r));const a=e[0],i=e[1],u=e[2],l=vt((a-t+2*o)/r+1,s);b(E(l),()=>`The output # of depths (${l}) must be an integer. Change the stride and/or zero pad parameters`);const c=vt((i-t+2*o)/r+1,s);b(E(c),()=>`The output # of rows (${c}) must be an integer. Change the stride and/or zero pad parameters`);const h=vt((u-t+2*o)/r+1,s);return b(E(h),()=>`The output # of columns (${h}) must be an integer. Change the stride and/or zero pad parameters`),[l,c,h,n]}([t,n,r,1],i,1,o,e,c);d=s[0],p=s[1],f=s[2]}else if("same"===e){d=Math.ceil(t/o),p=Math.ceil(n/s),f=Math.ceil(r/a);const e=(d-1)*o+i-t,c=(p-1)*s+u-n,g=(f-1)*a+l-r,m=Math.floor(e/2),x=e-m,v=Math.floor(c/2),b=c-v,y=Math.floor(g/2);h={top:v,bottom:b,left:y,right:g-y,front:m,back:x,type:"SAME"}}else{if("valid"!==e)throw Error("Unknown padding parameter: "+e);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},d=Math.ceil((t-i+1)/o),p=Math.ceil((n-u+1)/s),f=Math.ceil((r-l+1)/a)}return{padInfo:h,outDepth:d,outHeight:p,outWidth:f}}(o,l,c,h,x,v,y,R,k,I,i),D=s?m*d:m;let F;return"channelsFirst"===a?F=[u,D,A,N,T]:"channelsLast"===a&&(F=[u,A,N,T,D]),{batchSize:u,dataFormat:a,inDepth:l,inHeight:c,inWidth:h,inChannels:d,outDepth:A,outHeight:N,outWidth:T,outChannels:D,padInfo:S,strideDepth:x,strideHeight:v,strideWidth:y,filterDepth:p,filterHeight:f,filterWidth:g,effectiveFilterDepth:R,effectiveFilterHeight:k,effectiveFilterWidth:I,dilationDepth:w,dilationHeight:C,dilationWidth:$,inShape:e,outShape:F,filterShape:t}}function ft(e,t,n,r=1){const o=xt(t,r);return Math.floor((e[0]*(n-1)-n+o)/2)}function gt(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function mt(e){return"number"==typeof e?[e,e,e]:e}function xt(e,t){return t<=1?e:e+(e-1)*(t-1)}function vt(e,t){if(!t)return e;switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error("Unknown roundingMode "+t)}}function bt(e){const[t,n,r]=gt(e);return 1===t&&1===n&&1===r}function yt(e,t){return bt(e)||bt(t)}function wt(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error("Unknown dataFormat "+e)}const Ct=ke({avgPool3dBackprop_:function(e,t,n,r,o=[1,1,1],s,a){const i=Re(e,"dy","avgPool3dBackprop"),u=Re(t,"input","avgPool3dBackprop");let l=i,c=u,h=!1;4===u.rank&&(h=!0,l=Qe(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),c=Qe(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),b(5===l.rank,()=>"Error in avgPool3dBackprop: dy must be rank 5 but got rank "+l.rank+"."),b(5===c.rank,()=>"Error in avgPool3dBackprop: input must be rank 5 but got rank "+c.rank+"."),b(yt(r,o),()=>`Error in avgPool3dBackprop: Either strides or dilations must be 1. Got strides ${r} and dilations '${o}'`),null!=a&&b(E(s),()=>`Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode ${a} but got pad ${s}.`);const d={dy:l,input:c},p={filterSize:n,strides:r,dilations:o,pad:s,dimRoundingMode:a},f=ve.runKernelFunc(e=>{const t=ht(c.shape,n,r,o,s,a);return e.avgPool3dBackprop(l,c,t)},d,null,"AvgPool3DBackprop",p);return h?Qe(f,[f.shape[1],f.shape[2],f.shape[3],f.shape[4]]):f}}),$t={kernelName:"AvgPool3D",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{filterSize:o,strides:s,dilations:a,pad:i,dimRoundingMode:u}=n,l=null==a?[1,1,1]:a;return{x:()=>Ct(e,r,o,s,l,i,u)}}};const Rt=ke({avgPoolBackprop_:function(e,t,n,r,o){const s=Re(e,"dy","avgPoolBackprop"),a=Re(t,"input","avgPoolBackprop");b(a.rank===s.rank,()=>`Rank of input (${a.rank}) does not match rank of dy (${s.rank})`);let i=a,u=s,l=!1;3===a.rank&&(l=!0,i=Qe(a,[1,a.shape[0],a.shape[1],a.shape[2]]),u=Qe(s,[1,s.shape[0],s.shape[1],s.shape[2]])),b(4===u.rank,()=>"Error in avgPoolBackprop: dy must be rank 4 but got rank "+u.rank+"."),b(4===i.rank,()=>"Error in avgPoolBackprop: input must be rank 4 but got rank "+i.rank+".");const c={dy:u,input:i},h={filterSize:n,strides:r,pad:o},d=ve.runKernelFunc(e=>{const t=ct(i.shape,n,r,1,o);return e.avgPoolBackprop(u,i,t)},c,null,"AvgPoolBackprop",h);return l?Qe(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),Et={kernelName:"AvgPool",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{filterSize:o,strides:s,pad:a}=n;return{x:()=>Rt(e,r,o,s,a)}}};const kt=ke({matMul_:function(e,t,n=!1,r=!1){let o=Re(e,"a","matMul"),s=Re(t,"b","matMul");[o,s]=fe(o,s),b(o.rank>=2&&s.rank>=2&&o.rank===s.rank,()=>`Error in matMul: inputs must have the same rank of at least 2, got ranks ${o.rank} and ${s.rank}.`);const a=n?o.shape[o.rank-2]:o.shape[o.rank-1],i=r?s.shape[s.rank-1]:s.shape[s.rank-2],u=n?o.shape[o.rank-1]:o.shape[o.rank-2],l=r?s.shape[s.rank-2]:s.shape[s.rank-1],c=o.shape.slice(0,-2),h=s.shape.slice(0,-2),d=$(c),p=$(h);b(R(c,h),()=>`Error in matMul: outer dimensions (${c}) and (${h}) of Tensors with shapes ${o.shape} and `+s.shape+" must match."),b(a===i,()=>`Error in matMul: inner shapes (${a}) and (${i}) of Tensors with shapes ${o.shape} and ${s.shape} and transposeA=${n} and transposeB=${r} must match.`);const f=o.shape.slice(0,-2).concat([u,l]),g=Qe(o,n?[d,a,u]:[d,u,a]),m=Qe(s,r?[p,l,i]:[p,i,l]),x={a:g,b:m},v={transposeA:n,transposeB:r},y=ve.runKernelFunc((e,t)=>(t([g,m]),e.batchMatMul(g,m,n,r)),x,null,"BatchMatMul",v);return Qe(y,f)}}),It={kernelName:"BatchMatMul",inputsToSave:["a","b"],gradFunc:(e,t,n)=>{const[r,o]=t,{transposeA:s,transposeB:a}=n;return s||a?!s&&a?{a:()=>kt(e,o,!1,!1),b:()=>kt(e,r,!0,!1)}:s&&!a?{a:()=>kt(o,e,!1,!0),b:()=>kt(r,e,!1,!1)}:{a:()=>kt(o,e,!0,!0),b:()=>kt(e,r,!0,!0)}:{a:()=>kt(e,o,!1,!0),b:()=>kt(r,e,!0,!1)}}};const St=ke({spaceToBatchND_:function(e,t,n){const r=Re(e,"x","spaceToBatchND");b(r.rank>=1+t.length,()=>`input rank ${r.rank} should be > than [blockShape] ${t.length}`),b(n.length===t.length,()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`),b(r.shape.reduce((e,r,o)=>o>0&&o<=t.length?e&&(r+n[o-1][0]+n[o-1][1])%t[o-1]==0:e,!0),()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`);const o={x:r},s={blockShape:t,paddings:n};return ve.runKernelFunc(e=>e.spaceToBatchND(r,t,n),o,null,"SpaceToBatchND",s)}}),At={kernelName:"BatchToSpaceND",gradFunc:(e,t,n)=>{const{blockShape:r,crops:o}=n;return{x:()=>St(e,r,o)}}},Nt={kernelName:"BroadcastTo",gradFunc:(e,t,n)=>{const r=n,o=r.inputShape,s=r.shape,a=Array.from(s);for(let e=o.length-1;e>=0;e--)if(o[e]===s[e])a[e]=1;else if(1!==o[e])throw new Error(`broadcastTo(): [${o}] cannot be broadcast to [${s}].`);const i=[];for(let e=0;e<a.length;e++)a[e]>1&&i.push(e);return{x:()=>at(e,i,!0)}}},Tt={kernelName:"Cast",gradFunc:e=>({x:()=>e.clone()})},Dt={kernelName:"Ceil",gradFunc:e=>({x:()=>He(e)})};const Ft=ke({greaterEqual_:function(e,t){let n=Re(e,"a","greaterEqual"),r=Re(t,"b","greaterEqual");[n,r]=fe(n,r),Ue(n.shape,r.shape);const o={a:n,b:r};return ve.runKernelFunc((e,t)=>{const o=e.greaterEqual(n,r);return t([n,r]),o},o,null,"GreaterEqual")}});const _t=ke({lessEqual_:function(e,t){let n=Re(e,"a","lessEqual"),r=Re(t,"b","lessEqual");[n,r]=fe(n,r),Ue(n.shape,r.shape);const o={a:n,b:r};return ve.runKernelFunc((e,t)=>{const o=e.lessEqual(n,r);return t([n,r]),o},o,null,"LessEqual")}});const Ot=ke({logicalAnd_:function(e,t){const n=Re(e,"a","logicalAnd","bool"),r=Re(t,"b","logicalAnd","bool");Ue(n.shape,r.shape);const o={a:n,b:r};return ve.runKernelFunc(e=>e.logicalAnd(n,r),o,null,"LogicalAnd")}});const Bt=ke({where_:function(e,t,n){const r=Re(t,"a","where"),o=Re(n,"b","where"),s=Re(e,"condition","where","bool"),a=Ue(r.shape,o.shape),i=r.broadcastTo(a),u=o.broadcastTo(a);1===s.rank&&b(s.shape[0]===r.shape[0],()=>"The first dimension of `a` must match the size of `condition`."),1!==s.rank&&y(s.shape,u.shape,"Error in where: ");const l={condition:s,t:i,e:u};return ve.runKernelFunc((e,t)=>{const n=e.select(s,i,u);return t([s]),n},l,null,"SelectV2")}}),Mt={kernelName:"ClipByValue",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{clipValueMin:o,clipValueMax:s}=n;return{x:()=>Bt(Ot(Ft(r,o),_t(r,s)),e,He(e))}}};function Pt(e,t,n=0){let r=[];if("number"==typeof t)b(e.shape[n]%t==0,()=>"Number of splits must evenly divide the axis."),r=new Array(t).fill(e.shape[n]/t);else{b(t.reduce((e,t)=>(-1===t&&(e+=1),e),0)<=1,()=>"There should be only one negative value in split array.");const o=t.indexOf(-1);if(-1!==o){const r=t.reduce((e,t)=>t>0?e+t:e);t[o]=e.shape[n]-r}b(e.shape[n]===t.reduce((e,t)=>e+t),()=>"The sum of sizes must match the size of the axis dimension."),r=t}return r}const Lt=ke({split_:function(e,t,n=0){const r=Re(e,"x","split"),o={x:r},s={numOrSizeSplits:t,axis:n};return ve.runKernelFunc((e,o)=>{const s=A(n,r.shape)[0],a=Pt(r,t,s);return e.split(r,a,s)},o,null,"SplitV",s)}}),Wt={kernelName:"Concat",saveAllInputs:!0,gradFunc:(e,t,n)=>{const r=t.map(e=>e.shape),{axis:o}=n,s=A(o,t[0].shape)[0],a=r.map(e=>e[s]);return Lt(e,a,s).map(e=>()=>e)}};const Vt=ke({conv2DBackpropFilter_:function(e,t,n,r,o,s="NHWC",a){let i=e;3===e.rank&&(i=Qe(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let u=t;3===u.rank&&(u=Qe(t,[1,t.shape[0],t.shape[1],t.shape[2]])),b(4===i.rank,()=>"Error in conv2dDerFilter: input must be rank 4, but got shape "+i.shape+"."),b(4===u.rank,()=>"Error in conv2dDerFilter: dy must be rank 4, but got shape "+u.shape+"."),b(4===n.length,()=>"Error in conv2dDerFilter: filterShape must be length 4, but got "+n+".");const l="NHWC"===s?i.shape[3]:i.shape[1],c="NHWC"===s?u.shape[3]:u.shape[1];b(l===n[2],()=>`Error in conv2dDerFilter: depth of input ${l}) must match input depth in filter (${n[2]}.`),b(c===n[3],()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`),null!=a&&b(E(o),()=>`Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode ${a} but got pad ${o}.`);const h={x:i,dy:u},d={strides:r,pad:o,dataFormat:s,dimRoundingMode:a};return ve.runKernelFunc(e=>{const t=wt(s),l=dt(i.shape,n,r,1,o,a,!1,t);return e.conv2dDerFilter(i,u,l)},h,null,"Conv2DBackpropFilter",d)}});const Ut=ke({conv2DBackpropInput_:function(e,t,n,r,o,s="NHWC",a){b(e.length===t.rank,()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`);let i=e,u=t,l=!1;3===t.rank&&(l=!0,u=Qe(t,[1,t.shape[0],t.shape[1],t.shape[2]]),i=[1,e[0],e[1],e[2]]),b(4===i.length,()=>"Error in conv2dDerInput: inShape must be length 4, but got length "+i.length+"."),b(4===u.rank,()=>"Error in conv2dDerInput: dy must be rank 4, but got rank "+u.rank),b(4===n.rank,()=>"Error in conv2dDerInput: filter must be rank 4, but got rank "+n.rank);const c="NHWC"===s?i[3]:i[1],h="NHWC"===s?u.shape[3]:u.shape[1];b(c===n.shape[2],()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`),b(h===n.shape[3],()=>`Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${n.shape[3]}.`),null!=a&&b(E(o),()=>`Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode ${a} but got pad ${o}.`);const d={dy:u,filter:n},p={strides:r,pad:o,dataFormat:s,dimRoundingMode:a,inputShape:i},f=ve.runKernelFunc((e,t)=>{const l=wt(s),c=dt(i,n.shape,r,1,o,a,!1,l),h=e.conv2dDerInput(u,n,c);return t([u,n]),h},d,null,"Conv2DBackpropInput",p);return l?Qe(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),Gt={kernelName:"Conv2D",inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[r,o]=t,{dilations:s,strides:a,pad:i,dataFormat:u}=n;return b(bt(s),()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`),{x:()=>Ut(r.shape,e,o,a,i,u),filter:()=>Vt(r,e,o.shape,a,i,u)}}};const zt=ke({conv2d_:function(e,t,n,r,o="NHWC",s=[1,1],a){const i=Re(e,"x","conv2d"),u=Re(t,"filter","conv2d");let l=i,c=!1;3===i.rank&&(c=!0,l=Qe(i,[1,i.shape[0],i.shape[1],i.shape[2]])),b(4===l.rank,()=>`Error in conv2d: input must be rank 4, but got rank ${l.rank}.`),b(4===u.rank,()=>"Error in conv2d: filter must be rank 4, but got rank "+u.rank+"."),null!=a&&b(E(r),()=>`Error in conv2d: pad must be an integer when using, dimRoundingMode ${a} but got pad ${r}.`);const h="NHWC"===o?l.shape[3]:l.shape[1];b(h===u.shape[2],()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${u.shape[2]}.`),b(yt(n,s),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`);const d={x:l,filter:u},p={strides:n,pad:r,dataFormat:o,dilations:s,dimRoundingMode:a},f=ve.runKernelFunc((e,t)=>{const i=wt(o),c=dt(l.shape,u.shape,n,s,r,a,!1,i),h=e.conv2d(l,u,c);return t([l,u]),h},d,null,"Conv2D",p);return c?Qe(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),Ht={kernelName:"Conv2DBackpropInput",inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{const[r,o]=t,{strides:s,pad:a,dataFormat:i,dimRoundingMode:u}=n;return{dy:()=>zt(e,o,s,a,i,1,u),filter:()=>Vt(e,r,o.shape,s,a,i,u)}}};const Kt=ke({conv3DBackpropFilter_:function(e,t,n,r,o){let s=e;4===e.rank&&(s=Qe(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let a=t;4===a.rank&&(a=Qe(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),b(5===s.rank,()=>"Error in conv3dDerFilter: input must be rank 5, but got shape "+s.shape+"."),b(5===a.rank,()=>"Error in conv3dDerFilter: dy must be rank 5, but got shape "+a.shape+"."),b(5===n.length,()=>"Error in conv3dDerFilter: filterShape must be length 5, but got "+n+"."),b(s.shape[4]===n[3],()=>`Error in conv3dDerFilter: depth of input ${s.shape[4]}) must match input depth in filter (${n[3]}.`),b(a.shape[4]===n[4],()=>`Error in conv3dDerFilter: depth of dy (${a.shape[4]}) must match output depth for filter (${n[4]}).`);const i={x:s,y:a},u={strides:r,pad:o};return ve.runKernelFunc(e=>{const t=pt(s.shape,n,r,1,o);return e.conv3dDerFilter(s,a,t)},i,null,"Conv3DBackpropFilterV2",u)}});const qt=ke({conv3DBackpropInput_:function(e,t,n,r,o){b(e.length===t.rank,()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`);let s=e,a=t,i=!1;4===t.rank&&(i=!0,a=Qe(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),s=[1,e[0],e[1],e[2],e[3]]);const u=s[4],l=a.shape[4];b(5===s.length,()=>"Error in conv3dDerInput: inShape must be length 5, but got length "+s.length+"."),b(5===a.rank,()=>"Error in conv3dDerInput: dy must be rank 5, but got rank "+a.rank),b(5===n.rank,()=>"Error in conv3dDerInput: filter must be rank 5, but got rank "+n.rank),b(u===n.shape[3],()=>`Error in conv3dDerInput: depth of input (${u}) must match input depth for filter ${n.shape[3]}.`),b(l===n.shape[4],()=>`Error in conv3dDerInput: depth of output (${l}) must match output depth for filter ${n.shape[4]}.`);const c={dy:a},h={pad:o},d=ve.runKernelFunc(e=>{const t=pt(s,n.shape,r,1,o);return e.conv3dDerInput(a,n,t)},c,null,"Conv3DBackpropInputV2",h);return i?Qe(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),Xt={kernelName:"Conv3D",inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:r,strides:o,pad:s}=n;b(bt(r),()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`);const[a,i]=t;return{x:()=>qt(a.shape,e,i,o,s),filter:()=>Kt(a,e,i.shape,o,s)}}};const jt=ke({sin_:function(e){const t=Re(e,"x","sin"),n={x:t};return ve.runKernelFunc((e,n)=>{const r=e.sin(t);return n([t]),r},n,null,"Sin")}}),Yt={kernelName:"Cos",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Se(Fe(jt(Ie(n,"float32"))),e)}}};const Qt=ke({sinh_:function(e){const t=Re(e,"x","sinh"),n={x:t};return ve.runKernelFunc((e,n)=>{const r=e.sinh(t);return n([t]),r},n,null,"Sinh")}}),Jt={kernelName:"Cosh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Se(Qt(Ie(n,"float32")),e)}}};const Zt=ke({transpose_:function(e,t){const n=Re(e,"x","transpose");if(null==t&&(t=n.shape.map((e,t)=>t).reverse()),b(n.rank===t.length,()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${t}.`),t.forEach(e=>{b(e>=0&&e<n.rank,()=>"All entries in 'perm' must be between 0 and "+(n.rank-1)+" but got "+t)}),n.rank<=1)return n.clone();const r={x:n},o={perm:t};return ve.runKernelFunc(e=>e.transpose(n,t),r,null,"Transpose",o)}});const en=ke({cumsum_:function(e,t=0,n=!1,r=!1){const o=Re(e,"x","cumsum"),s={x:o},a={axis:t,exclusive:n,reverse:r};return ve.runKernelFunc((e,s)=>{const a=rt([t],o.rank);let i=o;null!=a&&(i=Zt(o,a));const u=st(1,o.rank)[0];let l=e.cumsum(i,u,n,r);if(s([o]),null!=a){const e=ot(a);l=Zt(l,e)}return l},s,null,"Cumsum",a)}}),tn={kernelName:"Cumsum",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{axis:o,exclusive:s,reverse:a}=n;return{x:()=>{const t=rt([o],r.rank);let n=en(e,o,s,!a);return null!=t&&(n=Zt(n,t)),n}}}};const nn=ke({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,r){let o=e;3===e.rank&&(o=Qe(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let s=t;3===s.rank&&(s=Qe(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const a={x:o,dy:s};return ve.runKernelFunc(e=>e.depthwiseConv2DDerFilter(o,s,r),a,null,"DepthwiseConv2dNativeBackpropFilter")}});const rn=ke({depthwiseConv2dNativeBackpropInput_:function(e,t,n,r){let o=t,s=!1;3===t.rank&&(s=!0,o=Qe(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const a={dy:o},i=ve.runKernelFunc(e=>e.depthwiseConv2DDerInput(o,n,r),a,null,"DepthwiseConv2dNativeBackpropInput");return s?Qe(i,[i.shape[1],i.shape[2],i.shape[3]]):i}}),on={kernelName:"DepthwiseConv2dNative",inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:r,strides:o,pad:s,dimRoundingMode:a}=n,i=null==r?[1,1]:r;b(bt(i),()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${i}'`);const[u,l]=t;b(4===u.rank,()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${u.rank}.`),b(4===l.rank,()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${l.rank}.`),b(u.shape[3]===l.shape[2],()=>`Error in gradient of depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${l.shape[2]}.`),b(yt(o,i),()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${o} and dilations '${i}'.`),null!=a&&b(E(s),()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${a} but got pad ${s}.`);const c=dt(u.shape,l.shape,o,i,s,a,!0);return{x:()=>rn(u.shape,e,l,c),filter:()=>nn(u,e,l.shape,c)}}},sn={kernelName:"Dilation2D",inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[r,o]=t,s={x:r,filter:o,dy:e},a={x:r,filter:o,dy:e};return{x:()=>ve.runKernel("Dilation2DBackpropInput",s,n),filter:()=>ve.runKernel("Dilation2DBackpropFilter",a,n)}}},an={kernelName:"Div",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,o=Ue(n.shape,r.shape);return{a:()=>{const t=De(e,r.toFloat()),s=Ve(n.shape,o);return s.length>0?at(t,s).reshape(n.shape):t},b:()=>{let t=Se(e,n.toFloat());const s=Ve(r.shape,o);s.length>0&&(t=Qe(at(t,s),r.shape));const a=Me(r);return Fe(De(t,a.toFloat()))}}}},un={kernelName:"Elu",outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t,r=t=>t.eluDer(e,n),o={dy:e,y:n};return{x:()=>ve.runKernelFunc(r,o,null,"EluGrad")}}};const ln=ke({exp_:function(e){const t=Re(e,"x","exp"),n={x:t};return ve.runKernelFunc((e,n)=>{const r=e.exp(t);return n([r]),r},n,null,"Exp")}}),cn={kernelName:"Erf",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,r=Se(ln(Fe(Me(n))),2/Math.sqrt(Math.PI));return{x:()=>Se(e,r)}}},hn={kernelName:"Exp",outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Se(e,n)}}},dn={kernelName:"Expm1",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Se(e,ln(n))}}},pn={kernelName:"Floor",gradFunc:e=>({x:()=>He(e)})},fn={kernelName:"FloorDiv",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,o=Ue(n.shape,r.shape);return{a:()=>{const t=e.div(r.toFloat()),s=Ve(n.shape,o);return s.length>0?t.sum(s).reshape(n.shape):t},b:()=>{let t=e.mul(n.toFloat());const s=Ve(r.shape,o);s.length>0&&(t=t.sum(s).reshape(r.shape));const a=r.square();return t.div(a.toFloat()).neg()}}}};const gn=ke({rsqrt_:function(e){const t=Re(e,"x","rsqrt"),n={x:t};return ve.runKernelFunc((e,n)=>{const r=e.rsqrt(t);return n([t]),r},n,null,"Rsqrt")}});const mn=ke({tile_:function(e,t){const n=Re(e,"x","tile",null);b(n.rank===t.length,()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`);const r=[n],o={x:n},s={reps:t};return ve.runKernelFunc((e,r)=>{const o=e.tile(n,t);return r([n]),o},o,null,"Tile",s,r)}}),xn={kernelName:"FusedBatchNorm",inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{const{varianceEpsilon:r}=n,[o,s,a,i]=t,u=null==i?Oe(1):i,l=Ve(s.shape,o.shape),c=[];if(1===s.rank){for(let e=0;e<o.shape.length-1;++e)c.push(o.shape[e]);c.push(1)}const h=Pe(o,s),d=Se(e,u),p=gn(je(a,Oe(r))),f=Se(Se(Se(p,p),p),Oe(-.5));return{x:()=>1===s.rank?Qe(Se(Se(e,mn(p.as4D(1,1,1,s.shape[0]),c)),u),o.shape):Qe(Se(Se(e,p),u),o.shape),mean:()=>{let e=Se(Se(p,Oe(-1)),d);return 1===s.rank&&(e=at(e,l)),Qe(e,s.shape)},variance:()=>{let e=Se(Se(f,h),d);return 1===s.rank&&(e=at(e,l)),Qe(e,s.shape)},scale:()=>{const t=Se(h,p);let n=Se(e,t);return 1===s.rank&&(n=at(n,l)),Qe(n,s.shape)},offset:()=>{let t=e;return 1===s.rank&&(t=at(t,l)),Qe(t,s.shape)}}}};const vn=ke({unsortedSegmentSum_:function(e,t,n){const r=Re(e,"x","unsortedSegmentSum"),o=Re(t,"segmentIds","unsortedSegmentSum","int32");b(E(n),()=>"numSegments must be of dtype int");const s={x:r,segmentIds:o},a={numSegments:n};return ve.runKernelFunc((e,t)=>{const s=e.unsortedSegmentSum(r,o,n);return t([o]),s},s,null,"UnsortedSegmentSum",a)}}),bn={kernelName:"GatherV2",inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{const[r,o]=t,{axis:s}=n,a=A(s,r.shape)[0];return{x:()=>{const t=r.shape,n=o.size,i=t.slice(0,a),u=i.length,l=t.slice(s,t.length).slice(1),c=l.length,h=yn(0,u),d=yn(u+1,u+1+c),p=wn([i,[n],l]),f=Qe(e,p),g=Qe(o,[n]),m=wn([[u],h,d]),x=Zt(f,m);let v=vn(x,g,r.shape[a]);const b=ot(m);return v=Zt(v,b),v},indices:()=>o}}};function yn(e,t){const n=[];for(let r=e;r<t;++r)n.push(r);return n}function wn(e){const t=[];for(let n=0;n<e.length;++n)for(let r=0;r<e[n].length;++r)t.push(e[n][r]);return t}const Cn={kernelName:"GreaterEqual",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>He(n),b:()=>He(r)}}},$n={kernelName:"Identity",gradFunc:e=>({x:()=>e.toFloat()})},Rn={kernelName:"IsFinite",gradFunc:e=>({x:()=>He(e)})},En={kernelName:"IsInf",gradFunc:e=>({x:()=>He(e)})},kn={kernelName:"IsNan",gradFunc:e=>({x:()=>He(e)})},In={kernelName:"Log1p",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>De(e,je(n,1))}}},Sn={kernelName:"Log",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>De(e,Ie(n,"float32"))}}},An={kernelName:"LogSoftmax",inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r]=t,{axis:o}=n;return{logits:()=>{const t=r.exp();return e.sub(e.sum(o,!0).mul(t))}}}};const Nn=ke({localResponseNormalizationBackprop_:function(e,t,n,r=5,o=1,s=1,a=.5){const i={x:e,y:t,dy:n},u={depthRadius:r,bias:o,alpha:s,beta:a};return ve.runKernelFunc(i=>i.LRNGrad(n,e,t,r,o,s,a),i,null,"LRNBackprop",u)}}),Tn={kernelName:"LRN",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,o]=t,{depthRadius:s,bias:a,alpha:i,beta:u}=n;return{x:()=>Nn(r,o,e,s,a,i,u)}}};const Dn=ke({equal_:function(e,t){let n=Re(e,"a","equal"),r=Re(t,"b","equal");[n,r]=fe(n,r),Ue(n.shape,r.shape);const o={a:n,b:r};return ve.runKernelFunc(e=>e.equal(n,r),o,null,"Equal")}});function Fn(e,t,n,r,o){return t.rank<n.rank&&(t=Qe(t,tt(t.shape,r))),e.rank<n.rank&&(e=Qe(e,tt(e.shape,r))),{x:()=>{const r=Se(e,Ie(Dn(n,t),e.dtype));return null==o?r:Zt(r,o)}}}const _n={kernelName:"Max",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const r=n,{reductionIndices:o}=r,[s,a]=t,i=A(o,s.shape),u=rt(i,s.rank),l=Fn(e,a,s,i,u);return{x:()=>{let e=l.x();return null!=u&&(e=Zt(e)),e}}}};const On=ke({less_:function(e,t){let n=Re(e,"a","less"),r=Re(t,"b","less");[n,r]=fe(n,r),Ue(n.shape,r.shape);const o={a:n,b:r};return ve.runKernelFunc(e=>e.less(n,r),o,null,"Less")}}),Bn={kernelName:"Maximum",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>Se(e,Ie(Ft(n,r),"float32")),b:()=>Se(e,Ie(On(n,r),"float32"))}}};const Mn=ke({maxPool3dBackprop_:function(e,t,n,r,o,s=[1,1,1],a,i){const u=Re(e,"dy","maxPool3dBackprop"),l=Re(t,"input","maxPool3dBackprop"),c=Re(n,"output","maxPool3dBackprop");let h=u,d=l,p=c,f=!1;4===l.rank&&(f=!0,h=Qe(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]]),d=Qe(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),p=Qe(c,[1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]])),b(5===h.rank,()=>"Error in maxPool3dBackprop: dy must be rank 5 but got rank "+h.rank+"."),b(5===d.rank,()=>"Error in maxPool3dBackprop: input must be rank 5 but got rank "+d.rank+"."),b(5===p.rank,()=>"Error in maxPool3dBackprop: output must be rank 5 but got rank "+p.rank+"."),b(yt(o,s),()=>`Error in maxPool3dBackprop: Either strides or dilations must be 1. Got strides ${o} and dilations '${s}'`),null!=i&&b(E(a),()=>`Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`);const g={dy:h,input:d,output:p},m={filterSize:r,strides:o,dilations:s,pad:a,dimRoundingMode:i},x=ve.runKernelFunc(e=>{const t=ht(d.shape,r,o,s,a,i);return e.maxPool3dBackprop(h,d,p,t)},g,null,"MaxPool3DBackprop",m);return f?Qe(x,[x.shape[1],x.shape[2],x.shape[3],x.shape[4]]):x}}),Pn={kernelName:"MaxPool3D",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,o]=t,{filterSize:s,strides:a,dilations:i,pad:u,dimRoundingMode:l}=n,c=null==i?[1,1,1]:i;return{x:()=>Mn(e,r,o,s,a,c,u,l)}}};const Ln=ke({maxPoolBackprop_:function(e,t,n,r,o,s,a){const i=Re(e,"dy","maxPoolBackprop"),u=Re(t,"input","maxPoolBackprop"),l=Re(n,"output","maxPoolBackprop");b(u.rank===i.rank,()=>`Rank of input (${u.rank}) does not match rank of dy (${i.rank})`),b(4===i.rank,()=>"Error in maxPoolBackprop: dy must be rank 4 but got rank "+i.rank+"."),b(4===u.rank,()=>"Error in maxPoolBackprop: input must be rank 4 but got rank "+u.rank+"."),null!=a&&b(E(s),()=>`Error in maxPoolBackprop: pad must be an integer when using, dimRoundingMode ${a} but got pad ${s}.`);const c={dy:i,input:u,output:l},h={filterSize:r,strides:o,pad:s,dimRoundingMode:a};return ve.runKernelFunc(e=>{const t=ct(u.shape,r,o,1,s,a);return e.maxPoolBackprop(i,u,l,t)},c,null,"MaxPoolBackprop",h)}}),Wn={kernelName:"MaxPool",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,o]=t,{filterSize:s,strides:a,pad:i}=n;return{x:()=>Ln(e,r,o,s,a,i)}}},Vn={kernelName:"Min",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const r=n,{axis:o}=r,[s,a]=t,i=A(o,s.shape),u=rt(i,s.rank),l=Fn(e,a,s,i,u);return{x:()=>{let e=l.x();return null!=u&&(e=Zt(e)),e}}}};const Un=ke({greater_:function(e,t){let n=Re(e,"a","greater"),r=Re(t,"b","greater");[n,r]=fe(n,r),Ue(n.shape,r.shape);const o={a:n,b:r};return ve.runKernelFunc(e=>e.greater(n,r),o,null,"Greater")}}),Gn={kernelName:"Minimum",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>Se(e,Ie(_t(n,r),"float32")),b:()=>Se(e,Ie(Un(n,r),"float32"))}}};const zn=ke({floor_:function(e){const t=Re(e,"x","floor"),n={x:t};return ve.runKernelFunc(e=>e.floor(t),n,null,"Floor")}}),Hn={kernelName:"Mod",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,o=Ue(n.shape,r.shape);return{a:()=>{const t=Ve(n.shape,o);return t.length>0?Qe(at(e,t),n.shape):e},b:()=>{const t=Se(e,Fe(zn(De(n,r)))),s=Ve(r.shape,o);return s.length>0?Qe(at(t,s),r.shape):t}}}},Kn={kernelName:"Multiply",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,o=Ue(n.shape,r.shape);return{a:()=>{const t=Se(e,Ie(r,"float32")),s=Ve(n.shape,o);return s.length>0?Qe(at(t,s),n.shape):t},b:()=>{const t=Se(e,Ie(n,"float32")),s=Ve(r.shape,o);return s.length>0?Qe(at(t,s),r.shape):t}}}},qn={kernelName:"Negate",gradFunc:e=>({x:()=>Fe(e)})};const Xn=ke({complex_:function(e,t){const n=Re(e,"real","complex"),r=Re(t,"imag","complex");y(n.shape,r.shape,`real and imag shapes, ${n.shape} and ${r.shape}, must match in call to tf.complex().`);const o={real:n,imag:r};return ve.runKernelFunc(e=>e.complex(n,r),o,null,"Complex")}});function jn(e,t="float32"){if("complex64"===t){const t=jn(e,"float32"),n=jn(e,"float32");return Xn(t,n)}const n=G($(e),t);return ve.makeTensor(n,e,t)}const Yn={kernelName:"OneHot",inputsToSave:["indices"],gradFunc:(e,t)=>{const n=t[0];return{indices:()=>jn(n.shape,"float32")}}},Qn={kernelName:"OnesLike",gradFunc:e=>({x:()=>He(e)})},Jn={kernelName:"PadV2",inputsToSave:["x"],gradFunc:(e,t,n)=>{const r=t[0],{paddings:o}=n,s=o.map(e=>e[0]);return{x:()=>e.slice(s,r.shape)}}};const Zn=ke({log_:function(e){const t=Re(e,"x","log"),n={x:t};return ve.runKernelFunc((e,n)=>{const r=e.log(t);return n([t]),r},n,null,"Log")}});const er=ke({pow_:function(e,t){let n=Re(e,"base","pow"),r=Re(t,"exp","pow");[n,r]=fe(n,r);const o={a:n,b:r};return ve.runKernelFunc((e,t)=>{const o=e.pow(n,r);return t([n,r,o]),o},o,null,"Pow")}}),tr={kernelName:"Pow",inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{const[n,r,o]=t,s=n,a=r,i=Ue(s.shape,a.shape);return{a:()=>{const t=Ie(a,"float32");let n=Se(e,Se(t,er(s,Pe(t,Oe(1)))));const r=Ve(s.shape,i);return r.length>0&&(n=at(n,r)),Qe(n,s.shape)},b:()=>{const t=Un(s,0),n=Bt(t,Zn(s),He(s));let r=Se(e,Se(o,n));const u=Ve(a.shape,i);return u.length>0&&(r=at(r,u)),Qe(r,a.shape)}}}},nr={kernelName:"Prelu",inputsToSave:["x","alpha"],gradFunc:(e,t)=>{const[n,r]=t,o=Un(n,0);return{x:()=>Bt(o,e,Se(e,r)),alpha:()=>{let t=Bt(o,He(e),Se(e,n));const s=Ve(r.shape,e.shape);return s.length>0&&(t=at(t,s)),Qe(t,r.shape)}}}},rr={kernelName:"Reciprocal",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>De(e,Fe(Me(n)))}}},or={kernelName:"Relu6",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,r=Se(_t(n,6),Ae(n));return{x:()=>Se(e,Ie(r,"float32"))}}},sr={kernelName:"Relu",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Se(e,Ie(Ae(n),"float32"))}}},ar={kernelName:"Reshape",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Qe(e,n.shape)}}},ir={kernelName:"ResizeBilinear",inputsToSave:["images"],gradFunc:(e,t,n)=>{const[r]=t,o=t=>{const{alignCorners:o}=n;return t.resizeBilinearBackprop(e,r,o)},s={images:r};return{images:()=>ve.runKernelFunc(o,s,null,"ResizeBilinearGrad",n)}}},ur={kernelName:"ResizeNearestNeighbor",inputsToSave:["images"],gradFunc:(e,t,n)=>{const[r]=t,o=t=>{const{alignCorners:o}=n;return t.resizeNearestNeighborBackprop(e,r,o)},s={images:r};return{images:()=>ve.runKernelFunc(o,s,null,"ResizeNearestNeighborGrad",n)}}};const lr=ke({clone_:function(e){const t=Re(e,"x","clone",null),n={x:t};return ve.runKernelFunc(()=>ve.makeTensorFromDataId(t.dataId,t.shape,t.dtype),n,null,"Identity")}});const cr=ke({reverse_:function(e,t){const n=Re(e,"x","reverse"),r={x:n},o={dims:t};return ve.runKernelFunc(e=>{const r=A(t,n.shape);if(0===n.rank)return lr(n);const o=e.reverse(n,r);return Qe(o,n.shape)},r,null,"Reverse",o)}}),hr={kernelName:"Reverse",gradFunc:(e,t,n)=>{const{dims:r}=n,o=A(r,e.shape);return{x:()=>cr(e,o)}}},dr={kernelName:"Round",gradFunc:e=>({x:()=>He(e)})},pr={kernelName:"Rsqrt",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Fe(De(e,Se(er(n,1.5),2)))}}};const fr=ke({logicalNot_:function(e){const t=Re(e,"x","logicalNot","bool"),n={x:t};return ve.runKernelFunc(e=>e.logicalNot(t),n,null,"LogicalNot")}}),gr={kernelName:"SelectV2",inputsToSave:["condition"],gradFunc:(e,t)=>{const[n]=t;return{condition:()=>Ie(He(n),"float32"),t:()=>Se(e,Ie(n,e.dtype)),e:()=>Se(e,Ie(fr(n),e.dtype))}}},mr={kernelName:"Selu",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Un(n,Oe(0)),r=Oe(1.7580993408473768),o=Oe(1.0507009873554805),s=Se(e,o),a=Se(Se(e,r),ln(Ie(n,"float32")));return Bt(t,s,a)}}}},xr={kernelName:"Sigmoid",outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Se(e,Se(n,Pe(Oe(1),n)))}}},vr={kernelName:"Sign",gradFunc:e=>({x:()=>He(e)})};const br=ke({cos_:function(e){const t=Re(e,"x","cos"),n={x:t};return ve.runKernelFunc((e,n)=>{const r=e.cos(t);return n([t]),r},n,null,"Cos")}}),yr={kernelName:"Sin",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Se(br(Ie(n,"float32")),e)}}};const wr=ke({cosh_:function(e){const t=Re(e,"x","cosh"),n={x:t};return ve.runKernelFunc((e,n)=>{const r=e.cosh(t);return n([t]),r},n,null,"Cosh")}}),Cr={kernelName:"Sinh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Se(wr(Ie(n,"float32")),e)}}};const $r=ke({pad_:function(e,t,n=0){const r=Re(e,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const o={paddings:t,constantValue:n},s={x:r};return ve.runKernelFunc((e,o)=>(o([r]),e.pad(r,t,n)),s,null,"PadV2",o)}});function Rr(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function Er(e,t,n){const r=[];for(let o=0;o<e.length;o++)r[o]=Math.ceil((t[o]-e[o])/n[o]);return r}function kr(e,t,n){return n<=e?n:n-(t-1)}function Ir(e,t){const n=[];for(let r=0;r<e;r++)n.push(t+r);return n}function Sr(e,t,n){let r=e[t];return(n&1<<t||null==r)&&(r=1),r}function Ar(e,t,n,r,o,s){let a=t[o];const i=n[o]||1;(e&1<<o||s&1<<o||null==a)&&(a=i>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const u=r[o];return a<0&&(a+=u),a=x(0,a,u-1),a}function Nr(e,t,n,r,o,s){let a=t[o];const i=n[o]||1;(e&1<<o||s&1<<o||null==a)&&(a=i>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const u=r[o];return a<0&&(a+=u),a=i>0?x(0,a,u):x(-1,a,u-1),a}function Tr(e,t,n){let r,o;return r="number"==typeof t?[t,...new Array(e.rank-1).fill(0)]:t.length<e.rank?t.concat(new Array(e.rank-t.length).fill(0)):t.slice(),r.forEach(e=>{b(-1!==e,()=>"slice() does not support negative begin indexing.")}),o=null==n?new Array(e.rank).fill(-1):"number"==typeof n?[n,...new Array(e.rank-1).fill(-1)]:n.length<e.rank?n.concat(new Array(e.rank-n.length).fill(-1)):n,o=o.map((t,n)=>t>=0?t:(b(-1===t,()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`),e.shape[n]-r[n])),[r,o]}const Dr={kernelName:"Slice",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{begin:o,size:s}=n,a=r.shape,[i,u]=Tr(r,o,s),l=[];for(let t=0;t<e.rank;t++)l.push([i[t],a[t]-i[t]-u[t]]);return{x:()=>$r(e,l)}}},Fr={kernelName:"Softmax",outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r]=t,{dim:o}=n,s=Se(e,r);return{logits:()=>Pe(s,Se(at(s,[o],!0),r))}}};const _r=ke({sigmoid_:function(e){const t=Re(e,"x","sigmoid"),n={x:t};return ve.runKernelFunc((e,n)=>{const r=e.sigmoid(t);return n([r]),r},n,null,"Sigmoid")}}),Or={kernelName:"Softplus",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Se(e,_r(n))}}};const Br=ke({batchToSpaceND_:function(e,t,n){const r=Re(e,"x","batchToSpaceND"),o=t.reduce((e,t)=>e*t);b(r.rank>=1+t.length,()=>`input rank is ${r.rank} but should be > than blockShape.length ${t.length}`),b(n.length===t.length,()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`),b(r.shape[0]%o==0,()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${o}`);const s={x:r},a={blockShape:t,crops:n};return ve.runKernelFunc(e=>e.batchToSpaceND(r,t,n),s,null,"BatchToSpaceND",a)}}),Mr={kernelName:"SpaceToBatchND",gradFunc:(e,t,n)=>{const{blockShape:r,paddings:o}=n;return{x:()=>Br(e,r,o)}}};function Pr(e,t){const n=e[0].length;e.forEach((e,t)=>{b(e.length===n,()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`)}),b(t>=0&&t<n,()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`);const r=e[0];e.forEach((e,o)=>{for(let s=0;s<n;s++)b(s===t||e[s]===r[s],()=>`Error in concat${n}D: Shape of tensors[${o}] (${e}) does not match the shape of the rest (${r}) along the non-concatenated axis ${o}.`)})}function Lr(e,t){const n=e[0].slice();for(let r=1;r<e.length;r++)n[t]+=e[r][t];return n}function Wr(e,t,n){return _e(e,t,Ce(e,n),n)}const Vr=ke({concat_:function(e,t=0){b(e.length>=1,()=>"Pass at least one tensor to concat");let n=Ee(e,"tensors","concat");"complex64"===n[0].dtype&&n.forEach(e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)});const r=A(t,n[0].shape)[0],o=Lr(n.map(e=>e.shape),r);if(0===$(o))return Wr([],o);if(n=n.filter(e=>e.size>0),1===n.length)return n[0];Pr(n.map(e=>e.shape),r);const s=n,a={axis:t};return ve.runKernelFunc((e,t)=>{const o=e.concat(n,r);return t(n),o},s,null,"Concat",a)}}),Ur={kernelName:"SplitV",gradFunc:(e,t,n)=>{const{axis:r}=n;return{x:()=>Vr(e,r)}}},Gr={kernelName:"Sqrt",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>De(e,Se(Be(Ie(n,"float32")),2))}}},zr={kernelName:"Square",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Se(e,Se(n.toFloat(),2))}}},Hr={kernelName:"SquaredDifference",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,o=Oe(2);return{a:()=>Se(e,Se(o,Pe(n,r))),b:()=>Se(e,Se(o,Pe(r,n)))}}},Kr={kernelName:"Step",gradFunc:e=>({x:()=>He(e)})},qr={kernelName:"Sub",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,o=Ue(n.shape,r.shape);return{a:()=>{let t=e;const r=Ve(n.shape,o);return r.length>0&&(t=at(t,r)),Qe(t,n.shape)},b:()=>{let t=e;const n=Ve(r.shape,o);return n.length>0&&(t=at(t,n)),Qe(Fe(t),r.shape)}}}};function Xr(e,t="float32"){if("complex64"===t){const t=Xr(e,"float32"),n=jn(e,"float32");return Xn(t,n)}const n=U($(e),t);return ve.makeTensor(n,e,t)}const jr={kernelName:"Sum",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,o=r.shape.slice(),{axis:s}=n;A(s,r.shape).forEach(e=>{o[e]=1});const a=Qe(e,o),i=Se(a,Xr(r.shape,"float32"));return{x:()=>i}}},Yr={kernelName:"Tan",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>De(e,Me(br(n)))}}},Qr={kernelName:"Tanh",outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Se(Pe(Oe(1),Me(n)),e)}}};const Jr=ke({slice_:function(e,t,n){const r=Re(e,"x","slice");if(0===r.rank)throw new Error("Slicing scalar is not possible");const[o,s]=Tr(r,t,n);!function(e,t,n){b(e.rank===t.length,()=>`Error in slice${e.rank}D: Length of begin ${t} must match the rank of the array (${e.rank}).`),b(e.rank===n.length,()=>`Error in slice${e.rank}D: Length of size ${n} must match the rank of the array (${e.rank}).`);for(let r=0;r<e.rank;++r)b(t[r]+n[r]<=e.shape[r],()=>`Error in slice${e.rank}D: begin[${r}] + size[${r}] (${t[r]+n[r]}) would overflow input.shape[${r}] (${e.shape[r]})`)}(r,o,s);const a={x:r},i={begin:t,size:n};return ve.runKernelFunc((e,t)=>(t([r]),e.slice(r,o,s)),a,null,"Slice",i)}}),Zr={kernelName:"Tile",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{reps:o}=n;return{x:()=>{let t=He(r);if(1===r.rank)for(let n=0;n<o[0];++n)t=je(t,Jr(e,[n*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(let n=0;n<o[0];++n)for(let s=0;s<o[1];++s)t=je(t,Jr(e,[n*r.shape[0],s*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(let n=0;n<o[0];++n)for(let s=0;s<o[1];++s)for(let a=0;a<o[2];++a)t=je(t,Jr(e,[n*r.shape[0],s*r.shape[1],a*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else{if(4!==r.rank)throw new Error("Gradient for tile operation is not implemented for rank-"+r.rank+" tensors yet.");for(let n=0;n<o[0];++n)for(let s=0;s<o[1];++s)for(let a=0;a<o[2];++a)for(let i=0;i<o[3];++i)t=je(t,Jr(e,[n*r.shape[0],s*r.shape[1],a*r.shape[2],i*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]))}return t}}}},eo={kernelName:"Transpose",gradFunc:(e,t,n)=>{const r=n,{perm:o}=r,s=ot(o);return{x:()=>Zt(e,s)}}};const to=ke({expandDims_:function(e,t=0){const n=Re(e,"x","expandDims",null);b(t<=n.rank,()=>"Axis must be <= rank of the tensor");const r=n.shape.slice();return t<0&&(b(-(n.rank+1)<=t,()=>`Axis must be in the interval [${-(n.rank+1)}, ${n.rank}]`),t=n.rank+t+1),r.splice(t,0,1),Qe(n,r)}});const no=ke({stack_:function(e,t=0){const n=Ee(e,"tensors","stack");if(b(n.length>=1,()=>"Pass at least one tensor to tf.stack"),1===n.length)return to(n[0],t);const r=n[0].rank,o=n[0].shape,s=n[0].dtype;b(t<=r,()=>"Axis must be <= rank of the tensor"),n.forEach(e=>{y(o,e.shape,"All tensors passed to stack must have matching shapes"),b(s===e.dtype,()=>"All tensors passed to stack must have matching dtypes")});const a=n.map(e=>to(e,t));return Vr(a,t)}}),ro={kernelName:"Unpack",gradFunc:(e,t,n)=>{const r=n,{axis:o}=r;return{value:()=>no(e,o)}}};function oo(e){return e<=30?e:P(e,Math.floor(Math.sqrt(e)))}function so(e,t,n){const r=e.shape[n],o=[];let s=1,a=1;for(let t=0;t<n;t++)o.push(e.shape[t]),s*=e.shape[t];for(let e=0;e<t.rank;e++)o.push(t.shape[e]);for(let t=n+1;t<e.rank;t++)o.push(e.shape[t]),a*=e.shape[t];return{batchSize:s,sliceSize:a,dimSize:r,outputShape:o}}var ao=Object.freeze({__proto__:null,segOpComputeOptimalWindowSize:function(e,t){let n,r=!1;for(e<=30?(n=e,r=!0):n=P(e,Math.floor(Math.sqrt(e)));!r;)n>t||n===e?r=!0:n=P(e,n+1);return n},computeOutShape:function(e,t,n){const r=[],o=e.length;for(let s=0;s<o;s++)s!==t?r.push(e[s]):r.push(n);return r},collectGatherOpShapeInfo:so});const io=ke({gather_:function(e,t,n=0){const r=Re(e,"x","gather"),o=Re(t,"indices","gather","int32"),s={x:r,indices:o},a={axis:n};return ve.runKernelFunc((e,t)=>{const s=A(n,r.shape)[0],a=so(r,o,s),i=e.gather(r,o.flatten(),s);return t([r,o]),i.reshape(a.outputShape)},s,null,"GatherV2",a)}});const uo=ke({maximum_:function(e,t){let n=Re(e,"a","maximum"),r=Re(t,"b","maximum");[n,r]=fe(n,r),"bool"===n.dtype&&(n=Ie(n,"int32"),r=Ie(r,"int32")),Ue(n.shape,r.shape);const o={a:n,b:r};return ve.runKernelFunc((e,t)=>{const o=e.maximum(n,r);return t([n,r]),o},o,null,"Maximum")}});const lo=[Ne,Le,We,Ge,ze,Ke,qe,Xe,Ye,it,ut,lt,$t,Et,It,At,Nt,Tt,Dt,Mt,Wt,Ht,Gt,Xt,Yt,Jt,tn,on,sn,an,un,cn,hn,dn,fn,pn,xn,bn,Cn,$n,Rn,En,kn,In,Sn,An,Tn,_n,_n,Bn,Pn,Wn,Vn,Gn,Hn,Kn,qn,Yn,Qn,Jn,Jn,tr,nr,rr,or,sr,ar,ir,ur,hr,dr,pr,gr,mr,xr,vr,yr,Cr,Dr,Fr,Or,Mr,Mr,Ur,Ur,Gr,Hr,zr,Kr,qr,jr,Yr,Qr,Zr,eo,ro,{kernelName:"UnsortedSegmentSum",inputsToSave:["segmentIds"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>function(e,t){const n=uo(t,He(t)),r=io(e,n);let o=Ft(t,Oe(0,"int32"));const s=r.rank-o.rank;for(let e=0;e<s;++e)o=to(o,e+1);o=Ot(o,Xr(r.shape,"bool"));const a=He(r);return Bt(o,r,a)}(e,n)}}},{kernelName:"ZerosLike",gradFunc:e=>({x:()=>He(e)})}];for(const e of lo)g(e);class co{fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error("Browser's encoder only supports utf-8, but got "+t);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}}o().get("IS_BROWSER")&&o().setPlatform("browser",new co);const ho=()=>require("node-fetch");let po;class fo{constructor(){this.util=require("util"),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=o().global.fetch?o().global.fetch(e,t):(null==po&&(po=ho()),po(e,t))}now(){const e=process.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error("Node built-in encoder only supports utf-8, but got "+t);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}}o().get("IS_NODE")&&o().setPlatform("node",new fo);const go="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function mo(e){return go?Buffer.byteLength(e):new Blob([e]).size}function xo(e){if(1===e.length)return e[0];let t=0;e.forEach(e=>{t+=e.byteLength});const n=new Uint8Array(t);let r=0;return e.forEach(e=>{n.set(new Uint8Array(e),r),r+=e.byteLength}),n.buffer}function vo(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:mo(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:mo(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}class bo{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==bo.instance&&(bo.instance=new bo),bo.instance}static registerSaveRouter(e){bo.getInstance().saveRouters.push(e)}static registerLoadRouter(e){bo.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return bo.getHandlers(e,"save")}static getLoadHandlers(e,t){return bo.getHandlers(e,"load",t)}static getHandlers(e,t,n){const r=[];return("load"===t?bo.getInstance().loadRouters:bo.getInstance().saveRouters).forEach(t=>{const o=t(e,n);null!==o&&r.push(o)}),r}}class yo{constructor(){this.managers={}}static getInstance(){return null==yo.instance&&(yo.instance=new yo),yo.instance}static registerManager(e,t){b(null!=e,()=>"scheme must not be undefined or null."),e.endsWith("://")&&(e=e.slice(0,e.indexOf("://"))),b(e.length>0,()=>"scheme must not be an empty string.");const n=yo.getInstance();b(null==n.managers[e],()=>`A model store manager is already registered for scheme '${e}'.`),n.managers[e]=t}static getManager(e){const t=this.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(this.getInstance().managers)}}function wo(){if(!o().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function Co(e){const t=e.result;t.createObjectStore("models_store",{keyPath:"modelPath"}),t.createObjectStore("model_info_store",{keyPath:"modelPath"})}class $o{constructor(e){if(this.indexedDB=wo(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise((e,n)=>{const r=this.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=()=>Co(r),r.onsuccess=()=>{const o=r.result;if(null==t){const t=o.transaction("models_store","readonly"),r=t.objectStore("models_store").get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return o.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(r.result.modelArtifacts)},r.onerror=e=>(o.close(),n(r.error)),t.oncomplete=()=>o.close()}else{const r=vo(t),s=o.transaction("model_info_store","readwrite");let a=s.objectStore("model_info_store");const i=a.put({modelPath:this.modelPath,modelArtifactsInfo:r});let u;i.onsuccess=()=>{u=o.transaction("models_store","readwrite");const i=u.objectStore("models_store").put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:r});i.onsuccess=()=>e({modelArtifactsInfo:r}),i.onerror=e=>{a=s.objectStore("model_info_store");const t=a.delete(this.modelPath);t.onsuccess=()=>(o.close(),n(i.error)),t.onerror=e=>(o.close(),n(i.error))}},i.onerror=e=>(o.close(),n(i.error)),s.oncomplete=()=>{null==u?o.close():u.oncomplete=()=>o.close()}}},r.onerror=e=>n(r.error)})}}$o.URL_SCHEME="indexeddb://";const Ro=e=>{return o().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith($o.URL_SCHEME)?(t=e.slice($o.URL_SCHEME.length),new $o(t)):null;var t};bo.registerSaveRouter(Ro),bo.registerLoadRouter(Ro);class Eo{constructor(){this.indexedDB=wo()}async listModels(){return new Promise((e,t)=>{const n=this.indexedDB.open("tensorflowjs",1);n.onupgradeneeded=()=>Co(n),n.onsuccess=()=>{const r=n.result,o=r.transaction("model_info_store","readonly"),s=o.objectStore("model_info_store").getAll();s.onsuccess=()=>{const t={};for(const e of s.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},s.onerror=e=>(r.close(),t(s.error)),o.oncomplete=()=>r.close()},n.onerror=e=>t(n.error)})}async removeModel(e){var t;return e=(t=e).startsWith($o.URL_SCHEME)?t.slice($o.URL_SCHEME.length):t,new Promise((t,n)=>{const r=this.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=()=>Co(r),r.onsuccess=()=>{const o=r.result,s=o.transaction("model_info_store","readwrite"),a=s.objectStore("model_info_store"),i=a.get(e);let u;i.onsuccess=()=>{if(null==i.result)return o.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const r=a.delete(e),s=()=>{u=o.transaction("models_store","readwrite");const r=u.objectStore("models_store").delete(e);r.onsuccess=()=>t(i.result.modelArtifactsInfo),r.onerror=e=>n(i.error)};r.onsuccess=s,r.onerror=e=>(s(),o.close(),n(i.error))}},i.onerror=e=>(o.close(),n(i.error)),s.oncomplete=()=>{null==u?o.close():u.oncomplete=()=>o.close()}},r.onerror=e=>n(r.error)})}}if(o().getBool("IS_BROWSER"))try{yo.registerManager($o.URL_SCHEME,new Eo)}catch(e){}const ko="tensorflowjs_models",Io="info",So="model_topology",Ao="weight_specs",No="weight_data",To="model_metadata";function Do(e){return{info:[ko,e,Io].join("/"),topology:[ko,e,So].join("/"),weightSpecs:[ko,e,Ao].join("/"),weightData:[ko,e,No].join("/"),modelMetadata:[ko,e,To].join("/")}}function Fo(e){const t=e.split("/");if(t.length<3)throw new Error("Invalid key format: "+e);return t.slice(1,t.length-1).join("/")}class _o{constructor(e){if(!o().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=Do(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),r=vo(e);try{return this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(e){if(go)return Buffer.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,r=t.length;e<r;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(e.weightData)),this.LS.setItem(this.keys.modelMetadata,JSON.stringify({format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,userDefinedMetadata:e.userDefinedMetadata})),{modelArtifactsInfo:r}}catch(e){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=r;const o=this.LS.getItem(this.keys.modelMetadata);if(null!=o){const e=JSON.parse(o);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,t.userDefinedMetadata=e.userDefinedMetadata}const s=this.LS.getItem(this.keys.weightData);if(null==s)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(go){const t=Buffer.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}(s),t}}_o.URL_SCHEME="localstorage://";const Oo=e=>{return o().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(_o.URL_SCHEME)?(t=e.slice(_o.URL_SCHEME.length),new _o(t)):null;var t};bo.registerSaveRouter(Oo),bo.registerLoadRouter(Oo);class Bo{constructor(){b(o().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),b("undefined"==typeof window||void 0!==window.localStorage,()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}async listModels(){const e={},t=ko+"/",n="/"+Io;for(let r=0;r<this.LS.length;++r){const o=this.LS.key(r);if(o.startsWith(t)&&o.endsWith(n)){e[Fo(o)]=JSON.parse(this.LS.getItem(o))}}return e}async removeModel(e){var t;const n=Do(e=(t=e).startsWith(_o.URL_SCHEME)?t.slice(_o.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const r=JSON.parse(this.LS.getItem(n.info));return this.LS.removeItem(n.info),this.LS.removeItem(n.topology),this.LS.removeItem(n.weightSpecs),this.LS.removeItem(n.weightData),r}}if(o().getBool("IS_BROWSER"))try{yo.registerManager(_o.URL_SCHEME,new Bo)}catch(e){}function Mo(e){return new Promise(e=>setTimeout(e)).then(e)}class Po{constructor(e){if(!o().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(Po.URL_SCHEME)&&(e=e.slice(Po.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelTopologyFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}],r={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:n},o=window.URL.createObjectURL(new Blob([JSON.stringify(r)],{type:"application/json"})),s=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor;if(s.download=this.modelTopologyFileName,s.href=o,await Mo(()=>s.dispatchEvent(new MouseEvent("click"))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await Mo(()=>e.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:vo(e)}}}}Po.URL_SCHEME="downloads://";function Lo(e,t,n,r){!function(e){b(null!=e&&Array.isArray(e)&&e.length>0,()=>"promises must be a none empty array")}(e),function(e,t){b(e>=0&&e<=1,()=>"Progress fraction must be in range [0, 1], but got startFraction "+e),b(t>=0&&t<=1,()=>"Progress fraction must be in range [0, 1], but got endFraction "+t),b(t>=e,()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction `+t)}(n=null==n?0:n,r=null==r?1:r);let o=0;return Promise.all(e.map(s=>(s.then(s=>{const a=n+ ++o/e.length*(r-n);return t(a),s}),s)))}bo.registerSaveRouter(e=>o().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Po.URL_SCHEME)?function(e="model"){return new Po(e)}(e.slice(Po.URL_SCHEME.length)):null);class Wo{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,null!=t.fetchFunc?(b("function"==typeof t.fetchFunc,()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=t.fetchFunc):this.fetch=o().platform.fetch,b(null!=e&&e.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(e)&&b(2===e.length,()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=[{paths:["./model.weights.bin"],weights:e.weightSpecs}],r={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,userDefinedMetadata:e.userDefinedMetadata,weightsManifest:n};t.body.append("model.json",new Blob([JSON.stringify(r)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const o=await this.fetch(this.path,t);if(o.ok)return{modelArtifactsInfo:vo(e),responses:[o]};throw new Error("BrowserHTTPRequest.save() failed due to HTTP response status "+o.status+".")}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code `+e.status+". Please verify this URL points to the model JSON of the model to load.");let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,r=t.weightsManifest,o=t.generatedBy,s=t.convertedBy,a=t.format,i=t.userDefinedMetadata;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);let u,l;if(null!=r){const e=await this.loadWeights(r);[u,l]=e}return{modelTopology:n,weightSpecs:u,weightData:l,userDefinedMetadata:i,generatedBy:o,convertedBy:s,format:a}}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?"),r=e.substring(0,t),o=n>t?e.substring(n):"";return[r+"/",o]}(t),s=this.weightPathPrefix||n,a=[];for(const t of e)a.push(...t.weights);const i=[];e.forEach(e=>{e.paths.forEach(e=>{i.push(s+e+r)})});return[a,xo(await async function(e,t){null==t&&(t={});const n=null==t.fetchFunc?o().platform.fetch:t.fetchFunc,r=e.map(e=>n(e,t.requestInit,{isBinary:!0})),s=(null==t.onProgress?await Promise.all(r):await Lo(r,t.onProgress,0,.5)).map(e=>e.arrayBuffer());return null==t.onProgress?await Promise.all(s):await Lo(s,t.onProgress,.5,1)}(i,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function Vo(e){return null!=e.match(Wo.URL_SCHEME_REGEX)}Wo.URL_SCHEME_REGEX=/^https?:\/\//;const Uo=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every(e=>Vo(e)):Vo(e),n)return function(e,t){return new Wo(e,t)}(e,t)}return null};bo.registerSaveRouter(Uo),bo.registerLoadRouter(Uo);const Go=ke({oneHot_:function(e,t,n=1,r=0){if(t<2)throw new Error("Error in oneHot: depth must be >=2, but it is "+t);const o=Re(e,"indices","oneHot","int32"),s=[...o.shape,t],a={indices:o},i={depth:t,onValue:n,offValue:r};return ve.runKernelFunc((e,a)=>(a([o]),Qe(e.oneHot(o.flatten(),t,n,r),s)),a,null,"OneHot",i)}});ke({confusionMatrix_:function(e,t,n){const r=Re(e,"labels","confusionMatrix"),o=Re(t,"predictions","confusionMatrix");b(null==n||n>0&&Number.isInteger(n),()=>"If provided, numClasses must be a positive integer, but got "+n),b(1===r.rank,()=>"Expected the rank of labels to be 1, but got "+r.rank),b(1===o.rank,()=>"Expected the rank of predictions to be 1, but got "+o.rank),b(r.shape[0]===o.shape[0],()=>`Mismatch in the number of examples: ${r.shape[0]} vs. ${o.shape[0]}. Labels and predictions should have the same number of elements.`),b(n>0&&Number.isInteger(n),()=>"numClasses is required to be a positive integer, but got "+n);const s=Go(r.asType("int32"),n),a=Go(o.asType("int32"),n);return s.transpose().matMul(a).asType("int32")}});function zo(e,t,n){if(w(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const r=Ce(e,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return _e(e,t,r,n)}let Ho;ke({fromPixels_:function(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,r=!1,o=!1,s=!1,a=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)r=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)o=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)s=!0;else{if(null==e.getContext)throw new Error("pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was "+e.constructor.name);a=!0}if(o){const t=2;if(o&&e.readyState<t)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}if(null!=h("FromPixels",ve.backendName)){const n={pixels:e},r={numChannels:t};return ve.runKernel("FromPixels",n,r)}const[i,u]=o?[e.videoWidth,e.videoHeight]:[e.width,e.height];let l,c;if(a?l=e.getContext("2d").getImageData(0,0,i,u).data:r||n?l=e.data:(s||o)&&(null==Ho&&(Ho=document.createElement("canvas").getContext("2d")),Ho.canvas.width=i,Ho.canvas.height=u,Ho.drawImage(e,0,0,i,u),l=Ho.getImageData(0,0,i,u).data),4===t)c=new Int32Array(l);else{const e=i*u;c=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)c[n*t+e]=l[4*n+e]}return zo(c,[u,i,t],"int32")}});function Ko(e,t){if(e.rank<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${e.rank}.`);if(t.rank<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[t.rank-1]>e.rank)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[t.rank-1]} vs. ${e.rank}`);if(0===e.size)throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const n=t.shape,r=n[n.length-1];let o=1;for(let e=0;e<n.length-1;++e)o*=n[e];const s=e.shape,a=n.slice();a.pop();let i=1;for(let t=r;t<e.rank;++t)i*=s[t],a.push(s[t]);const u=[...L(e.shape).map(e=>e/i),1].slice(0,r);return[a,o,i,u]}function qo(e,t,n){const r=t.rank>1?t.shape[t.rank-1]:1,o=t.rank>1?t.rank-1:1,s="Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: "+n.shape+`, indices.shape: ${t.shape}, shape: ${e}`+`, sliceDim: ${r}, and batchDim: ${o}.`;if(n.rank<o)throw new Error(s+` update.rank < ${o}. `);if(e.length<r+(n.rank-o))throw new Error(s+" Output shape length < "+(r+(n.rank-o)));if(n.rank!==o+e.length-r)throw new Error(s+" update.rank != "+(o+e.length-r));for(let e=0;e<o;++e)if(n.shape[e]!==t.shape[e])throw new Error(s+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-o;++t)if(n.shape[t+o]!==e[t+r])throw new Error(s+` updates.shape[${t+o}] (${n.shape[t+o]}) != shape[${t+o}] (${e[t+o]})`)}function Xo(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error("The dtype of 'indices' should be int32, but got dtype: "+t.dtype);if(n.length<1)throw new Error("Output rank must be greater or equal to 1, but got shape: "+n);if(0===n.length){if(0===t.size)throw new Error("Indices specified for empty output. indices shape: "+t.shape);if(0===e.size)throw new Error("Updates specified for empty output. updates shape: "+e.shape)}qo(n,t,e)}function jo(e,t,n){const r=t.shape.length,o=r>1?t.shape[r-1]:1,s=n.length;let a=1;for(let e=o;e<s;++e)a*=n[e];const i=o<1?1:o;return{sliceRank:o,numUpdates:$(t.shape)/i,sliceSize:a,strides:[...L(n.slice(0,o)),1],outputSize:$(n)}}class Yo{constructor(){this.classNameMap={}}static getMap(){return null==Yo.instance&&(Yo.instance=new Yo),Yo.instance}static register(e){Yo.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function Qo(e){b(null!=e.className,()=>"Class being registered does not have the static className property defined."),b("string"==typeof e.className,()=>"className is required to be a string, but got type "+typeof e.className),b(e.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),Yo.register(e)}function Jo(e){o().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function Zo(){return ve}function es(e,t){return ve.tidy(e,t)}function ts(e){ge(e).forEach(e=>e.dispose())}const ns=ke({abs_:function(e){const t=Re(e,"x","abs"),n={x:t};return ve.runKernelFunc((e,n)=>(n([t]),"complex64"===t.dtype?e.complexAbs(t):e.abs(t)),n,null,"Abs")}});const rs=ke({acos_:function(e){const t=Re(e,"x","acos"),n={x:t};return ve.runKernelFunc((e,n)=>{const r=e.acos(t);return n([t]),r},n,null,"Acos")}});const os=ke({acosh_:function(e){const t=Re(e,"x","acosh"),n={x:t};return ve.runKernelFunc((e,n)=>{const r=e.acosh(t);return n([t]),r},n,null,"Acosh")}});const ss=ke({addN_:function(e){b(Array.isArray(e),()=>"The argument passed to tf.addN() must be a list of tensors"),b(e.length>=1,()=>"Must pass at least one tensor to tf.addN(), but got "+e.length);const t=e.map((e,t)=>Re(e,"tensors"+t,"addN")),n=t[0];t.forEach(e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")}),t.forEach(e=>{if(!R(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")});const r=t;return ve.runKernelFunc((e,n)=>{const r=e.addN(t);return n(t),r},r,null,"AddN")}});const as=ke({all_:function(e,t=null,n=!1){let r=Re(e,"x","all","bool");const o={x:r},s={axis:t,keepDims:n};return ve.runKernelFunc(e=>{const o=A(t,r.shape);let s=o;const a=rt(s,r.rank);null!=a&&(r=r.transpose(a),s=st(s.length,r.rank));const i=e.all(r,s);if(n){const e=tt(i.shape,o);return i.reshape(e)}return i},o,null,"All",s)}});const is=ke({any_:function(e,t=null,n=!1){let r=Re(e,"x","any","bool");const o={x:r},s={axis:t,keepDims:n};return ve.runKernelFunc(e=>{const o=A(t,r.shape);let s=o;const a=rt(s,r.rank);null!=a&&(r=r.transpose(a),s=st(s.length,r.rank));const i=e.any(r,s);if(n){const e=tt(i.shape,o);return i.reshape(e)}return i},o,null,"Any",s)}});const us=ke({argMax_:function(e,t=0){let n=Re(e,"x","argMax");const r={x:n},o={axis:t};return ve.runKernelFunc((e,r)=>{r([n]);let o=A(t,n.shape);const s=rt(o,n.rank);return null!=s&&(n=n.transpose(s),o=st(o.length,n.rank)),e.argMax(n,o[0])},r,null,"ArgMax",o)}});const ls=ke({argMin_:function(e,t=0){let n=Re(e,"x","argMin");const r={x:n},o={axis:t};return ve.runKernelFunc((e,r)=>{r([n]),null==t&&(t=0);let o=A(t,n.shape);const s=rt(o,n.rank);return null!=s&&(n=n.transpose(s),o=st(o.length,n.rank)),e.argMin(n,o[0])},r,null,"ArgMin",o)}});const cs=ke({asin_:function(e){const t=Re(e,"x","asin"),n={x:t};return ve.runKernelFunc((e,n)=>{const r=e.asin(t);return n([t]),r},n,null,"Asin")}});const hs=ke({asinh_:function(e){const t=Re(e,"x","asinh"),n={x:t};return ve.runKernelFunc((e,n)=>{const r=e.asinh(t);return n([t]),r},n,null,"Asinh")}});const ds=ke({atan_:function(e){const t=Re(e,"x","atan"),n={x:t};return ve.runKernelFunc((e,n)=>{const r=e.atan(t);return n([t]),r},n,null,"Atan")}});const ps=ke({atan2_:function(e,t){let n=Re(e,"a","atan2"),r=Re(t,"b","atan2");[n,r]=fe(n,r);const o={a:n,b:r};return ve.runKernelFunc((e,t)=>{const o=e.atan2(n,r);return t([n,r]),o},o,null,"Atan2")}});const fs=ke({atanh_:function(e){const t=Re(e,"x","atanh"),n={x:t};return ve.runKernelFunc((e,n)=>{const r=e.atanh(t);return n([t]),r},n,null,"Atanh")}});const gs=ke({avgPool_:function(e,t,n,r,o){const s=Re(e,"x","avgPool","float32");b(yt(n,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`);let a=s,i=!1;3===s.rank&&(i=!0,a=Qe(s,[1,s.shape[0],s.shape[1],s.shape[2]])),b(4===a.rank,()=>`Error in avgPool: x must be rank 4 but got rank ${a.rank}.`),null!=o&&b(E(r),()=>`Error in avgPool: pad must be an integer when using, dimRoundingMode ${o} but got pad ${r}.`);const u={x:a},l={filterSize:t,strides:n,pad:r,dimRoundingMode:o};let c=ve.runKernelFunc((e,s)=>{const i=ct(a.shape,t,n,1,r,o);return s([a]),1===i.filterWidth&&1===i.filterHeight&&R(i.inShape,i.outShape)?a.clone():e.avgPool(a,i)},u,null,"AvgPool",l);return c=Ie(c,s.dtype),i?c.as3D(c.shape[1],c.shape[2],c.shape[3]):c}});const ms=ke({avgPool3d_:function(e,t,n,r,o,s="NDHWC",a){null==a?a=[1,1,1]:Jo("dilations is deprecated, this field will be gone in v3.0.0.");const i=Re(e,"x","avgPool3d","float32");let u=i,l=!1;4===i.rank&&(l=!0,u=Qe(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),b(5===u.rank,()=>`Error in avgPool3d: x must be rank 5 but got rank ${u.rank}.`),b("NDHWC"===s,()=>"Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of "+s),b(yt(n,a),()=>`Error in avgPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),null!=o&&b(E(r),()=>`Error in avgPool3d: pad must be an integer when using, dimRoundingMode ${o} but got pad ${r}.`);const c={x:u},h={filterSize:t,strides:n,pad:r,dimRoundingMode:o,dataFormat:s,dilations:a};let d=ve.runKernelFunc((e,i)=>{null==a&&(a=[1,1,1]);const l=ht(u.shape,t,n,a,r,o,s);return i([u]),e.avgPool3d(u,l)},c,null,"AvgPool3D",h);return d=Ie(d,u.dtype),l?d.as4D(d.shape[1],d.shape[2],d.shape[3],d.shape[4]):d}});const xs=ke({tanh_:function(e){const t=Re(e,"x","tanh"),n={x:t};return ve.runKernelFunc((e,n)=>{const r=e.tanh(t);return n([r]),r},n,null,"Tanh")}});const vs=ke({basicLSTMCell_:function(e,t,n,r,o,s){const a=Re(e,"forgetBias","basicLSTMCell"),i=Re(t,"lstmKernel","basicLSTMCell"),u=Re(n,"lstmBias","basicLSTMCell"),l=Re(r,"data","basicLSTMCell"),c=Re(o,"c","basicLSTMCell"),h=Re(s,"h","basicLSTMCell"),d=Vr([l,h],1),p=kt(d,i),f=je(p,u),g=f.shape[0],m=f.shape[1]/4,x=[g,m],v=Jr(f,[0,0],x),b=Jr(f,[0,m],x),y=Jr(f,[0,2*m],x),w=Jr(f,[0,3*m],x),C=je(Se(_r(v),xs(b)),Se(c,_r(je(a,y))));return[C,Se(xs(C),_r(w))]}});function bs(e){return null==e?null:0===e.rank?e.as1D():1===e.rank?e:2===e.rank?e.as4D(1,1,e.shape[0],e.shape[1]):3===e.rank?e.as4D(1,e.shape[0],e.shape[1],e.shape[2]):e}const ys=ke({batchNorm_:function(e,t,n,r,o,s){null==s&&(s=.001);const a=Re(e,"x","batchNorm"),i=Re(t,"mean","batchNorm"),u=Re(n,"variance","batchNorm");let l,c;null!=o&&(l=Re(o,"scale","batchNorm")),null!=r&&(c=Re(r,"offset","batchNorm")),b(i.rank===u.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),b(null==c||i.rank===c.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),b(null==l||i.rank===l.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");const h=function(e){let t;return t=0===e.rank||1===e.rank?e.as4D(1,1,1,e.size):2===e.rank?e.as4D(1,1,e.shape[0],e.shape[1]):3===e.rank?e.as4D(1,e.shape[0],e.shape[1],e.shape[2]):e,t}(a),d={x:h,scale:l,offset:c,mean:i,variance:u},p={varianceEpsilon:s},f=ve.runKernelFunc((e,t)=>(t([h,i,u,l]),e.batchNorm(h,bs(i),bs(u),bs(c),bs(l),s)),d,null,"FusedBatchNorm",p);return Qe(f,a.shape)}});const ws=ke({batchNorm2d_:function(e,t,n,r,o,s){const a=Re(e,"x","batchNorm"),i=Re(t,"mean","batchNorm"),u=Re(n,"variance","batchNorm");let l,c;return null!=o&&(l=Re(o,"scale","batchNorm")),null!=r&&(c=Re(r,"offset","batchNorm")),b(2===a.rank,()=>"Error in batchNorm3D: x must be rank 3 but got rank "+a.rank+"."),b(2===i.rank||1===i.rank,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${i.rank}.`),b(2===u.rank||1===u.rank,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${u.rank}.`),null!=l&&b(2===l.rank||1===l.rank,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${l.rank}.`),null!=c&&b(2===c.rank||1===c.rank,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`),ys(a,i,u,c,l,s)}});const Cs=ke({batchNorm3d_:function(e,t,n,r,o,s){const a=Re(e,"x","batchNorm"),i=Re(t,"mean","batchNorm"),u=Re(n,"variance","batchNorm");let l,c;return null!=o&&(l=Re(o,"scale","batchNorm")),null!=r&&(c=Re(r,"offset","batchNorm")),b(3===a.rank,()=>"Error in batchNorm3D: x must be rank 3 but got rank "+a.rank+"."),b(3===i.rank||1===i.rank,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${i.rank}.`),b(3===u.rank||1===u.rank,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${u.rank}.`),null!=l&&b(3===l.rank||1===l.rank,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${l.rank}.`),null!=c&&b(3===c.rank||1===c.rank,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`),ys(a,i,u,c,l,s)}});const $s=ke({batchNorm4d_:function(e,t,n,r,o,s){const a=Re(e,"x","batchNorm"),i=Re(t,"mean","batchNorm"),u=Re(n,"variance","batchNorm");let l,c;return null!=o&&(l=Re(o,"scale","batchNorm")),null!=r&&(c=Re(r,"offset","batchNorm")),b(4===a.rank,()=>"Error in batchNorm4D: x must be rank 4 but got rank "+a.rank+"."),b(4===i.rank||1===i.rank,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${i.rank}.`),b(4===u.rank||1===u.rank,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${u.rank}.`),null!=l&&b(4===l.rank||1===l.rank,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${l.rank}.`),null!=c&&b(4===c.rank||1===c.rank,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`),ys(a,i,u,c,l,s)}});const Rs=ke({broadcastTo_:function(e,t){let n=Re(e,"broadcastTo","x");const r=n.shape;if(t.some(e=>!(e>0)||e%1!=0))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=Qe(n,e)}const o=n.shape,s=Array.from(t);for(let e=t.length-1;e>=0;e--)if(o[e]===t[e])s[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${t}].`);if(0===s.map((e,t)=>e>1?t:-1).filter(e=>e>=0).length)return lr(n);const a={x:n},i={shape:t,inputShape:o};return ve.runKernelFunc(e=>e.tile(n,s),a,null,"BroadcastTo",i)}});function Es(e,t="float32",n){return t=t||"float32",H(e),new te(e,t,n)}const ks=ke({ceil_:function(e){const t=Re(e,"x","ceil"),n={x:t};return ve.runKernelFunc(e=>e.ceil(t),n,null,"Ceil")}});const Is=ke({clipByValue_:function(e,t,n){const r=Re(e,"x","clipByValue");b(t<=n,()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`);const o={x:r},s={clipValueMin:t,clipValueMax:n};return ve.runKernelFunc((e,o)=>{const s=e.clip(r,t,n);return o([r]),s},o,null,"ClipByValue",s)}});const Ss=ke({concat1d_:function(e){return Vr(e,0)}});const As=ke({concat2d_:function(e,t){return Vr(e,t)}});const Ns=ke({concat3d_:function(e,t){return Vr(e,t)}});const Ts=ke({concat4d_:function(e,t){return Vr(e,t)}});const Ds=ke({conv1d_:function(e,t,n,r,o="NWC",s=1,a){const i=Re(e,"x","conv1d"),u=Re(t,"filter","conv1d");let l=i,c=!1;2===i.rank&&(c=!0,l=Qe(i,[1,i.shape[0],i.shape[1]])),b(3===l.rank,()=>`Error in conv1d: input must be rank 3, but got rank ${l.rank}.`),b(3===u.rank,()=>"Error in conv1d: filter must be rank 3, but got rank "+u.rank+"."),null!=a&&b(E(r),()=>`Error in conv1d: pad must be an integer when using, dimRoundingMode ${a} but got pad ${r}.`),b(l.shape[2]===u.shape[1],()=>`Error in conv1d: depth of input (${l.shape[2]}) must match input depth for filter ${u.shape[1]}.`),b(yt(n,s),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${s}'`),b("NWC"===o,()=>`Error in conv1d: got dataFormat of ${o} but only NWC is currently supported.`);const h=Qe(u,[1,u.shape[0],u.shape[1],u.shape[2]]),d=Qe(l,[l.shape[0],1,l.shape[1],l.shape[2]]),p=zt(d,h,[1,n],r,"NHWC",[1,s],a);return Qe(p,c?[p.shape[2],p.shape[3]]:[p.shape[0],p.shape[2],p.shape[3]])}});const Fs=ke({conv2dTranspose_:function(e,t,n,r,o,s){const a=Re(e,"x","conv2dTranspose"),i=Re(t,"filter","conv2dTranspose");return Ut(n,a,i,r,o,"NHWC",s)}});const _s=ke({conv3d_:function(e,t,n,r,o="NDHWC",s=[1,1,1]){const a=Re(e,"x","conv3d"),i=Re(t,"filter","conv3d");let u=a,l=!1;4===a.rank&&(l=!0,u=Qe(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]])),b(5===u.rank,()=>`Error in conv3d: input must be rank 5, but got rank ${u.rank}.`),b(5===i.rank,()=>"Error in conv3d: filter must be rank 5, but got rank "+i.rank+"."),b(u.shape[4]===i.shape[3],()=>`Error in conv3d: depth of input (${u.shape[4]}) must match input depth for filter ${i.shape[3]}.`),b(yt(n,s),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`),b("NDHWC"===o,()=>`Error in conv3d: got dataFormat of ${o} but only NDHWC is currently supported.`);const c={x:u,filter:i},h={strides:n,pad:r,dataFormat:o,dilations:s},d=ve.runKernelFunc((e,t)=>{const o=pt(u.shape,i.shape,n,s,r),a=e.conv3d(u,i,o);return t([u,i]),a},c,null,"Conv3D",h);return l?d.as4D(d.shape[1],d.shape[2],d.shape[3],d.shape[4]):d}});const Os=ke({conv3dTranspose_:function(e,t,n,r,o){const s=Re(e,"x","conv3dTranspose"),a=Re(t,"filter","conv3dTranspose");return qt(n,s,a,r,o)}});const Bs=ke({depthToSpace_:function(e,t,n="NHWC"){const r=Re(e,"x","depthToSpace"),o="NHWC"===n?r.shape[1]:r.shape[2],s="NHWC"===n?r.shape[2]:r.shape[3],a="NHWC"===n?r.shape[3]:r.shape[1];b(o*t>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${o} and ${t}  for depthToSpace with input shape\n    ${r.shape}`),b(s*t>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${s} and ${t} for depthToSpace with input shape\n        ${r.shape}`),b(a%(t*t)==0,()=>`Dimension size must be evenly divisible by ${t*t} but is ${a} for depthToSpace with input shape ${r.shape}`);const i={x:r},u={blockSize:t,dataFormat:n};return ve.runKernelFunc(e=>e.depthToSpace(r,t,n),i,null,"DepthToSpace",u)}});const Ms=ke({depthwiseConv2d_:function(e,t,n,r,o="NHWC",s=[1,1],a){const i=Re(e,"x","depthwiseConv2d"),u=Re(t,"filter","depthwiseConv2d");let l=i,c=!1;3===i.rank&&(c=!0,l=Qe(i,[1,i.shape[0],i.shape[1],i.shape[2]])),b(4===l.rank,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${l.rank}.`),b(4===u.rank,()=>"Error in depthwiseConv2d: filter must be rank 4, but got rank "+u.rank+"."),b(l.shape[3]===u.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`),null!=a&&b(E(r),()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${a} but got pad ${r}.`);const h={x:l,filter:u},d={strides:n,pad:r,dataFormat:o,dilations:s,dimRoundingMode:a},p=ve.runKernelFunc((e,t)=>{null==s&&(s=[1,1]),b(yt(n,s),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`);const o=dt(l.shape,u.shape,n,s,r,a,!0),i=e.depthwiseConv2D(l,u,o);return t([l,u]),i},h,null,"DepthwiseConv2dNative",d);return c?Qe(p,[p.shape[1],p.shape[2],p.shape[3]]):p}});const Ps=ke({diag_:function(e){const t=Re(e,"x","diag").flatten(),n={x:t};return ve.runKernelFunc(n=>{const r=n.diag(t),o=[...e.shape,...e.shape];return Qe(r,o)},n,null,"Diag")}});const Ls=ke({dilation2d_:function(e,t,n,r,o=[1,1],s="NHWC"){const a=Re(e,"x","dilation2d"),i=Re(t,"filter","dilation2d");b(3===a.rank||4===a.rank,()=>"Error in dilation2d: input must be rank 3 or 4, but got rank "+a.rank+"."),b(3===i.rank,()=>"Error in dilation2d: filter must be rank 3, but got rank "+i.rank+"."),b("NHWC"===s,()=>"Error in dilation2d: Only NHWC is currently supported, but got dataFormat of "+s);let u=a,l=!1;3===a.rank&&(u=Qe(a,[1,a.shape[0],a.shape[1],a.shape[2]]),l=!0);const c={x:u,filter:i},h={strides:n,pad:r,dilations:o},d=ve.runKernel("Dilation2D",c,h);return l?Qe(d,[d.shape[1],d.shape[2],d.shape[3]]):d}});const Ws=ke({divNoNan_:function(e,t){let n=Re(e,"a","div"),r=Re(t,"b","div");[n,r]=fe(n,r);const o=De(n,r),s=He(o),a=r.equal(s);return Bt(a,s,o)}});const Vs=ke({dot_:function(e,t){const n=Re(e,"t1","dot"),r=Re(t,"t2","dot");b(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`);const o=1===n.rank?n.size:n.shape[1],s=1===r.rank?r.size:r.shape[0];if(b(o===s,()=>`Error in dot: inner dimensions of inputs must match, but got ${o} and ${s}.`),1===n.rank&&1===r.rank){const e=Qe(n,[1,-1]),t=Qe(r,[-1,1]),o=kt(e,t);return Qe(o,[])}if(1===n.rank&&2===r.rank){const e=Qe(n,[1,-1]),t=Qe(r,[r.shape[0],r.shape[1]]),o=kt(e,t);return Qe(o,[o.size])}if(2===n.rank&&1===r.rank){const e=Qe(r,[-1,1]),t=kt(n,e);return Qe(t,[t.size])}{const e=Qe(r,[r.shape[0],r.shape[1]]);return kt(n,e)}}});const Us=ke({elu_:function(e){const t=Re(e,"x","elu"),n={x:t};return ve.runKernelFunc((e,n)=>{const r=e.elu(t);return n([r]),r},n,null,"Elu")}});const Gs=ke({erf_:function(e){let t=Re(e,"x","erf");b("int32"===t.dtype||"float32"===t.dtype,()=>"Input dtype must be `int32` or `float32`."),"int32"===t.dtype&&(t=t.toFloat());const n={x:t};return ve.runKernelFunc((e,n)=>{const r=e.erf(t);return n([t]),r},n,null,"Erf")}});const zs=ke({expm1_:function(e){const t=Re(e,"x","expm1"),n={x:t};return ve.runKernelFunc((e,n)=>{const r=e.expm1(t);return n([t]),r},n,null,"Expm1")}});const Hs=ke({eye_:function(e,t,n,r="float32"){null==t&&(t=e);const o=Es([e,t],r),s=e<=t?e:t;for(let e=0;e<s;++e)o.set(1,e,e);const a=o.toTensor().as2D(e,t);if(null==n)return a;if(1===n.length)return mn(to(a,0),[n[0],1,1]);if(2===n.length)return mn(to(to(a,0),0),[n[0],n[1],1,1]);if(3===n.length)return mn(to(to(to(a,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});const Ks=ke({fft_:function(e){b("complex64"===e.dtype,()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`);const t={input:e};return ve.runKernelFunc(t=>{const n=e.shape[e.shape.length-1],r=e.size/n,o=e.as2D(r,n);return t.fft(o).reshape(e.shape)},t,null,"FFT")}});function qs(e,t,n){const r={shape:e,value:t,dtype:n};return ve.runKernelFunc(r=>r.fill(e,t,n),{},null,"Fill",r)}const Xs=ke({ifft_:function(e){b("complex64"===e.dtype,()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`);const t={input:e};return ve.runKernelFunc(t=>{const n=e.shape[e.shape.length-1],r=e.size/n,o=e.as2D(r,n);return t.ifft(o).reshape(e.shape)},t,null,"IFFT")}});const js=ke({imag_:function(e){const t=Re(e,"input","imag"),n={input:t};return ve.runKernelFunc(e=>e.imag(t),n,null,"Imag")}});const Ys=ke({real_:function(e){const t=Re(e,"input","real"),n={input:t};return ve.runKernelFunc(e=>e.real(t),n,null,"Real")}});const Qs=ke({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let r;if(t<=2){const o=Qe(e,[n,t]);r=Xs(o)}else{const o=[n,2*(t-1)],s=Qe(Ys(e),[n,t]),a=Qe(js(e),[n,t]),i=cr(Jr(s,[0,1],[n,t-2]),1),u=Se(cr(Jr(a,[0,1],[n,t-2]),1),Oe(-1)),l=Vr([s,i],1),c=Vr([a,u],1),h=Qe(Xn(l,c),[o[0],o[1]]);r=Xs(h)}if(r=Ys(r),3===e.rank&&0!==e.shape[0]){const t=r,n=e.shape[0];r=Qe(r,[n,r.shape[0]/n,r.shape[1]]),t.dispose()}return r}});const Js=ke({isFinite_:function(e){const t=Re(e,"x","isFinite"),n={x:t};return ve.runKernelFunc(e=>e.isFinite(t),n,null,"IsFinite")}});const Zs=ke({isInf_:function(e){const t=Re(e,"x","isInf"),n={x:t};return ve.runKernelFunc(e=>e.isInf(t),n,null,"IsInf")}});const ea=ke({isNaN_:function(e){const t=Re(e,"x","isNaN"),n={x:t};return ve.runKernelFunc(e=>e.isNaN(t),n,null,"IsNan")}});const ta=ke({leakyRelu_:function(e,t=.2){const n=Re(e,"x","leakyRelu");return uo(Se(Oe(t),n),n)}});const na=ke({localResponseNormalization_:function(e,t=5,n=1,r=1,o=.5){const s=Re(e,"x","localResponseNormalization");b(4===s.rank||3===s.rank,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${s.rank}.`),b(E(t),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`);let a=s,i=!1;3===s.rank&&(i=!0,a=Qe(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const u={x:a},l={depthRadius:t,bias:n,alpha:r,beta:o},c=ve.runKernelFunc((e,s)=>{const i=e.localResponseNormalization4D(a,t,n,r,o);return s([a,i]),i},u,null,"LRN",l);return i?c.as3D(c.shape[1],c.shape[2],c.shape[3]):c}});const ra=ke({log1p_:function(e){const t=Re(e,"x","log1p"),n={x:t};return ve.runKernelFunc((e,n)=>{const r=e.log1p(t);return n([t]),r},n,null,"Log1p")}});function oa(e){return ve.customGrad(e)}const sa=ke({logSigmoid_:function(e){const t=Re(e,"x","logSigmoid");return oa(e=>({value:Fe(Fe(e).softplus()),gradFunc:t=>Se(t,_r(Fe(e)))}))(t)}});const aa=ke({max_:function(e,t=null,n=!1){const r=Re(e,"x","max"),o={x:r},s={reductionIndices:t,keepDims:n};return ve.runKernelFunc((e,o)=>{let s=A(t,r.shape);const a=rt(s,r.rank);let i=r;null!=a&&(i=Zt(r,a),s=st(s.length,i.rank));const u=e.max(i,s);null!=a&&i.dispose();let l=u;if(n){const e=tt(l.shape,A(t,r.shape));l=Qe(l,e),u.dispose()}return o([r,l]),l},o,null,"Max",s)}});const ia=ke({logSoftmax_:function(e,t=-1){const n=Re(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);const r={logits:n},o={axis:t};return ve.runKernelFunc((n,r)=>{const o=aa(e,t,!0),s=Pe(e,o),a=s.toFloat().sub(s.exp().sum(t,!0).log());return r([a]),a},r,null,"LogSoftmax",o)}});const ua=ke({logSumExp_:function(e,t=null,n=!1){const r=Re(e,"x","logSumExp"),o=A(t,r.shape),s=aa(r,o,!0),a=Pe(r,s),i=ln(a),u=at(i,o),l=Zn(u),c=je(Qe(s,l.shape),l);if(n){const e=tt(c.shape,o);return Qe(c,e)}return c}});const la=ke({logicalOr_:function(e,t){const n=Re(e,"a","logicalOr","bool"),r=Re(t,"b","logicalOr","bool");Ue(n.shape,r.shape);const o={a:n,b:r};return ve.runKernelFunc(e=>e.logicalOr(n,r),o,null,"LogicalOr")}});const ca=ke({logicalXor_:function(e,t){const n=Re(e,"a","logicalXor","bool"),r=Re(t,"b","logicalXor","bool");return Ue(n.shape,r.shape),Ot(la(e,t),fr(Ot(e,t)))}});const ha=ke({maxPool_:function(e,t,n,r,o){const s=Re(e,"x","maxPool");let a=s,i=!1;3===s.rank&&(i=!0,a=Qe(s,[1,s.shape[0],s.shape[1],s.shape[2]])),b(4===a.rank,()=>`Error in maxPool: input must be rank 4 but got rank ${a.rank}.`),b(yt(n,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`),null!=o&&b(E(r),()=>`Error in maxPool: pad must be an integer when using, dimRoundingMode ${o} but got pad ${r}.`);const u={x:a},l={filterSize:t,strides:n,pad:r,dimRoundingMode:o},c=ve.runKernelFunc((e,s)=>{const i=ct(a.shape,t,n,1,r,o);let u;return u=1===i.filterWidth&&1===i.filterHeight&&R(i.inShape,i.outShape)?a.clone():e.maxPool(a,i),s([a,u]),u},u,null,"MaxPool",l);return i?Qe(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const da=ke({maxPool3d_:function(e,t=[1,1,1],n,r,o,s="NDHWC",a){null==a?a=[1,1,1]:Jo("dilations is deprecated, this field will be gone in v3.0.0.");const i=Re(e,"x","maxPool3d");let u=i,l=!1;4===i.rank&&(l=!0,u=i.as5D(1,i.shape[0],i.shape[1],i.shape[2],i.shape[3])),b(5===u.rank,()=>`Error in maxPool3d: x must be rank 5 but got rank ${u.rank}.`),b("NDHWC"===s,()=>"Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of "+s),b(yt(n,a),()=>`Error in maxPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),null!=o&&b(E(r),()=>`Error in maxPool3d: pad must be an integer when using, dimRoundingMode ${o} but got pad ${r}.`);const c={x:u},h={filterSize:t,strides:n,pad:r,dimRoundingMode:o,dataFormat:s,dilations:a},d=ve.runKernelFunc((e,i)=>{null==a&&(a=[1,1,1]);const l=ht(u.shape,t,n,a,r,o,s),c=e.maxPool3d(u,l);return i([u,c]),c},c,null,"MaxPool3D",h);return l?Qe(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}});const pa=ke({maxPoolWithArgmax_:function(e,t,n,r,o=!1){const s={x:Re(e,"x","maxPoolWithArgmax")},a={filterSize:t,strides:n,pad:r,includeBatchInIndex:o},i=ve.runKernel("MaxPoolWithArgmax",s,a);return{result:i[0],indexes:i[1]}}});const fa=ke({mean_:function(e,t=null,n=!1){const r=Re(e,"x","mean"),o=A(t,r.shape),s=$(et(r.shape,o)[1]);return oa(e=>{const r=Oe(s),a=r.dtype===e.dtype?e:Ie(e,r.dtype),i=De(a,r);return{value:at(i,t,n),gradFunc:t=>{const n=e.shape.slice();o.forEach(e=>{n[e]=1});const r=Qe(t,n);return De(Se(r,Xr(e.shape,"float32")),s)}}})(r)}});const ga=ke({min_:function(e,t=null,n=!1){const r=Re(e,"x","min"),o={x:r},s={axis:t,keepDims:n};return ve.runKernelFunc((e,o)=>{const s=A(t,r.shape);let a=s;const i=rt(a,r.rank);let u=r;null!=i&&(u=Zt(r,i),a=st(a.length,r.rank));const l=e.min(u,a);null!=i&&u.dispose();let c=l;if(n){const e=tt(c.shape,s);c=Qe(l,e),l.dispose()}return o([r,c]),c},o,null,"Min",s)}});const ma=ke({minimum_:function(e,t){let n=Re(e,"a","minimum"),r=Re(t,"b","minimum");[n,r]=fe(n,r),"bool"===n.dtype&&(n=Ie(n,"int32"),r=Ie(r,"int32")),Ue(n.shape,r.shape);const o={a:n,b:r};return ve.runKernelFunc((e,t)=>{const o=e.minimum(n,r);return t([n,r]),o},o,null,"Minimum")}});const xa=ke({mod_:function(e,t){let n=Re(e,"a","mod"),r=Re(t,"b","mod");[n,r]=fe(n,r);const o={a:n,b:r};return ve.runKernelFunc((e,t)=>{const o=e.mod(n,r);return t([n,r]),o},o,null,"Mod")}});const va=ke({moments_:function(e,t=null,n=!1){const r=A(t,(e=Re(e,"x","moments")).shape),o=fa(e,r,n);let s=o.shape;n||(s=tt(o.shape,r));const a=Me(Pe(Ie(e,"float32"),Qe(o,s)));return{mean:o,variance:fa(a,r,n)}}});const ba=ke({multiRNNCell_:function(e,t,n,r){const o=Re(t,"data","multiRNNCell"),s=Ee(n,"c","multiRNNCell"),a=Ee(r,"h","multiRNNCell");let i=o;const u=[];for(let t=0;t<e.length;t++){const n=e[t](i,s[t],a[t]);u.push(n[0]),u.push(n[1]),i=n[1]}const l=[],c=[];for(let e=0;e<u.length;e+=2)l.push(u[e]),c.push(u[e+1]);return[l,c]}});const ya=ke({multinomial_:function(e,t,n,r=!1){const o=Re(e,"logits","multinomial"),s=o.size,a=o.rank;if(s<2)throw new Error("Error in multinomial: you need at least 2 outcomes, but got "+s+".");if(a>2)throw new Error("Rank of probabilities must be 1 or 2, but is "+a);n=n||Math.random();const i=1===a?o.as2D(1,-1):o,u=ve.runKernelFunc(e=>e.multinomial(i,r,t,n),{logits2D:i});return 1===a?u.as1D():u}});const wa=ke({notEqual_:function(e,t){let n=Re(e,"a","notEqual"),r=Re(t,"b","notEqual");[n,r]=fe(n,r),Ue(n.shape,r.shape);const o={a:n,b:r};return ve.runKernelFunc(e=>e.notEqual(n,r),o,null,"NotEqual")}});const Ca=ke({onesLike_:function(e){const t=Re(e,"x","onesLike"),n={x:t};return ve.runKernelFunc((e,n)=>{if("complex64"===t.dtype){const e=Ca(Ys(t)),n=He(js(t));return Xn(e,n)}return e.onesLike(t)},n,null,"OnesLike")}});const $a=ke({outerProduct_:function(e,t){const n=Re(e,"v1","outerProduct"),r=Re(t,"v2","outerProduct");b(1===n.rank&&1===r.rank,()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${r.rank}.`);const o=Qe(n,[-1,1]),s=Qe(r,[1,-1]);return kt(o,s)}});const Ra=ke({pad1d_:function(e,t,n=0){return b(2===t.length,()=>"Invalid number of paddings. Must be length of 2."),$r(e,[t],n)}});const Ea=ke({pad2d_:function(e,t,n=0){return b(2===t.length&&2===t[0].length&&2===t[1].length,()=>"Invalid number of paddings. Must be length of 2 each."),$r(e,t,n)}});const ka=ke({pad3d_:function(e,t,n=0){return b(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,()=>"Invalid number of paddings. Must be length of 2 each."),$r(e,t,n)}});const Ia=ke({pad4d_:function(e,t,n=0){return b(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,()=>"Invalid number of paddings. Must be length of 2 each."),$r(e,t,n)}});const Sa=ke({pool_:function(e,t,n,r,o,s){null==o&&(o=[1,1]),null==s&&(s=1),0===r&&(r="valid");const a=Re(e,"x","maxPool");let i=a,u=!1;3===a.rank&&(u=!0,i=Qe(a,[1,a.shape[0],a.shape[1],a.shape[2]])),b(yt(s,o),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${s} and dilations '${o}'`);const l=ct(i.shape,t,s,o,r),c=[l.dilationHeight,l.dilationWidth];let h;h="same"===r?function(e,t){const n=e.map((e,n)=>e+(e-1)*(t[n]-1)).map(e=>e-1),r=n.map(e=>Math.floor(e/2)),o=n.map((e,t)=>e-r[t]);return n.map((e,t)=>[r[t],o[t]])}([l.filterHeight,l.filterWidth],c):[[0,0],[0,0]];const d=1===c[0]&&1===c[1],[p,f]=function(e,t,n){const r=n.map(e=>e[0]),o=n.map(e=>e[1]),s=e.concat(r,o),a=t.map((e,t)=>(e-s[t]%e)%e),i=o.map((e,t)=>e+a[t]),u=t.map((e,t)=>[r[t],i[t]]),l=t.map((e,t)=>[0,a[t]]);return[u,l]}([l.inHeight,l.inWidth],c,h),g=d?r:"valid",m=d?i:St(i,c,p),x=("avg"===n?()=>gs(m,t,s,g):()=>ha(m,t,s,g))(),v=d?x:Br(x,c,f);return u?Qe(v,[v.shape[1],v.shape[2],v.shape[3]]):v}});const Aa=ke({prelu_:function(e,t){const n=Re(e,"x","prelu"),r=Re(t,"alpha","prelu"),o={x:n,alpha:r};return ve.runKernelFunc((e,t)=>{const o=e.prelu(n,r);return t([n,r]),o},o,null,"Prelu")}});const Na=ke({prod_:function(e,t=null,n=!1){let r=Re(e,"x","prod");const o={x:r},s={axis:t,keepDims:n};return ve.runKernelFunc(e=>{"bool"===r.dtype&&(r=r.toInt());const o=A(t,r.shape),s=rt(o,r.rank);let a=o,i=r;null!=s&&(i=r.transpose(s),a=st(a.length,r.rank));let u=e.prod(i,a);if(n){const e=tt(u.shape,o);u=u.reshape(e)}return u},o,null,"Prod",s)}});const Ta=ke({rand_:function(e,t,n){const r=$(e);let o=null;if(null==n||"float32"===n)o=new Float32Array(r);else if("int32"===n)o=new Int32Array(r);else{if("bool"!==n)throw new Error("Unknown data type "+n);o=new Uint8Array(r)}for(let e=0;e<r;e++)o[e]=t();return ve.makeTensor(o,e,n)}});"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;function Da(e,t,n){return e(n={path:t,exports:{},require:function(e,t){return function(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}(null==t&&n.path)}},n.exports),n.exports}var Fa=Da((function(e){!function(e,t,n){function r(e){var t,n=this,r=(t=4022871197,function(e){e=e.toString();for(var n=0;n<e.length;n++){var r=.02519603282416938*(t+=e.charCodeAt(n));r-=t=r>>>0,t=(r*=t)>>>0,t+=4294967296*(r-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(e),n.s0<0&&(n.s0+=1),n.s1-=r(e),n.s1<0&&(n.s1+=1),n.s2-=r(e),n.s2<0&&(n.s2+=1),r=null}function o(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function s(e,t){var n=new r(e),s=t&&t.state,a=n.next;return a.int32=function(){return 4294967296*n.next()|0},a.double=function(){return a()+11102230246251565e-32*(2097152*a()|0)},a.quick=a,s&&("object"==typeof s&&o(s,n),a.state=function(){return o(n,{})}),a}t&&t.exports?t.exports=s:n&&n.amd?n((function(){return s})):this.alea=s}(0,e,!1)})),_a=Da((function(e){!function(e,t,n){function r(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function s(e,t){var n=new r(e),s=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,s&&("object"==typeof s&&o(s,n),a.state=function(){return o(n,{})}),a}t&&t.exports?t.exports=s:n&&n.amd?n((function(){return s})):this.xor128=s}(0,e,!1)})),Oa=Da((function(e){!function(e,t,n){function r(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),r==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function s(e,t){var n=new r(e),s=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,s&&("object"==typeof s&&o(s,n),a.state=function(){return o(n,{})}),a}t&&t.exports?t.exports=s:n&&n.amd?n((function(){return s})):this.xorwow=s}(0,e,!1)})),Ba=Da((function(e){!function(e,t,n){function r(e){var t=this;t.next=function(){var e,n,r=t.x,o=t.i;return e=r[o],n=(e^=e>>>7)^e<<24,n^=(e=r[o+1&7])^e>>>10,n^=(e=r[o+3&7])^e>>>3,n^=(e=r[o+4&7])^e<<7,e=r[o+7&7],n^=(e^=e<<13)^e<<9,r[o]=n,t.i=o+1&7,n},function(e,t){var n,r=[];if(t===(0|t))r[0]=t;else for(t=""+t,n=0;n<t.length;++n)r[7&n]=r[7&n]<<15^t.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],e.x=r,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function o(e,t){return t.x=e.x.slice(),t.i=e.i,t}function s(e,t){null==e&&(e=+new Date);var n=new r(e),s=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,s&&(s.x&&o(s,n),a.state=function(){return o(n,{})}),a}t&&t.exports?t.exports=s:n&&n.amd?n((function(){return s})):this.xorshift7=s}(0,e,!1)})),Ma=Da((function(e){!function(e,t,n){function r(e){var t=this;t.next=function(){var e,n,r=t.w,o=t.X,s=t.i;return t.w=r=r+1640531527|0,n=o[s+34&127],e=o[s=s+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=o[s]=n^e,t.i=s,n+(r^r>>>16)|0},function(e,t){var n,r,o,s,a,i=[],u=128;for(t===(0|t)?(r=t,t=null):(t+="\0",r=0,u=Math.max(u,t.length)),o=0,s=-32;s<u;++s)t&&(r^=t.charCodeAt((s+32)%t.length)),0===s&&(a=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,s>=0&&(a=a+1640531527|0,o=0==(n=i[127&s]^=r+a)?o+1:0);for(o>=128&&(i[127&(t&&t.length||0)]=-1),o=127,s=512;s>0;--s)r=i[o+34&127],n=i[o=o+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,i[o]=r^n;e.w=a,e.X=i,e.i=o}(t,e)}function o(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function s(e,t){null==e&&(e=+new Date);var n=new r(e),s=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,s&&(s.X&&o(s,n),a.state=function(){return o(n,{})}),a}t&&t.exports?t.exports=s:n&&n.amd?n((function(){return s})):this.xor4096=s}(0,e,!1)})),Pa=Da((function(e){!function(e,t,n){function r(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,r=t.d,o=t.a;return e=e<<25^e>>>7^n,n=n-r|0,r=r<<24^r>>>8^o,o=o-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-r|0,t.d=r<<16^n>>>16^o,t.a=o-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var r=0;r<n.length+20;r++)t.b^=0|n.charCodeAt(r),t.next()}function o(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function s(e,t){var n=new r(e),s=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,s&&("object"==typeof s&&o(s,n),a.state=function(){return o(n,{})}),a}t&&t.exports?t.exports=s:n&&n.amd?n((function(){return s})):this.tychei=s}(0,e,!1)})),La=Da((function(e){!function(t,r){var o,s=this,a=r.pow(256,6),i=r.pow(2,52),u=2*i;function l(e,n,l){var f=[],g=d(function e(t,n){var r,o=[],s=typeof t;if(n&&"object"==s)for(r in t)try{o.push(e(t[r],n-1))}catch(e){}return o.length?o:"string"==s?t:t+"\0"}((n=1==n?{entropy:!0}:n||{}).entropy?[e,p(t)]:null==e?function(){try{var e;return o&&(e=o.randomBytes)?e=e(256):(e=new Uint8Array(256),(s.crypto||s.msCrypto).getRandomValues(e)),p(e)}catch(e){var n=s.navigator,r=n&&n.plugins;return[+new Date,s,r,s.screen,p(t)]}}():e,3),f),m=new c(f),x=function(){for(var e=m.g(6),t=a,n=0;e<i;)e=256*(e+n),t*=256,n=m.g(1);for(;e>=u;)e/=2,t/=2,n>>>=1;return(e+n)/t};return x.int32=function(){return 0|m.g(4)},x.quick=function(){return m.g(4)/4294967296},x.double=x,d(p(m.S),t),(n.pass||l||function(e,t,n,o){return o&&(o.S&&h(o,m),e.state=function(){return h(m,{})}),n?(r.random=e,t):e})(x,g,"global"in n?n.global:this==r,n.state)}function c(e){var t,n=e.length,r=this,o=0,s=r.i=r.j=0,a=r.S=[];for(n||(e=[n++]);o<256;)a[o]=o++;for(o=0;o<256;o++)a[o]=a[s=255&s+e[o%n]+(t=a[o])],a[s]=t;(r.g=function(e){for(var t,n=0,o=r.i,s=r.j,a=r.S;e--;)t=a[o=255&o+1],n=256*n+a[255&(a[o]=a[s=255&s+t])+(a[s]=t)];return r.i=o,r.j=s,n})(256)}function h(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function d(e,t){for(var n,r=e+"",o=0;o<r.length;)t[255&o]=255&(n^=19*t[255&o])+r.charCodeAt(o++);return p(t)}function p(e){return String.fromCharCode.apply(0,e)}if(r.seedrandom=l,d(r.random(),t),e.exports){e.exports=l;try{o=n.default}catch(e){}}}([],Math)}));La.alea=Fa,La.xor128=_a,La.xorwow=Oa,La.xorshift7=Ba,La.xor4096=Ma,La.tychei=Pa;var Wa=La;class Va{constructor(e,t,n,r,o){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const s=o||Math.random();this.random=Wa.alea(s.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let r,o,s;do{r=2*this.random()-1,o=2*this.random()-1,s=r*r+o*o}while(s>=1||0===s);const a=Math.sqrt(-2*Math.log(s)/s);e=this.mean+this.stdDev*r*a,t=this.mean+this.stdDev*o*a,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class Ua{constructor(e,t,n,r){this.alpha=e,this.beta=1/t,this.dtype=n;const o=r||Math.random();this.randu=Wa.alea(o.toString()),this.randn=new Va(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,r,o,s;for(;;){do{r=this.randn.nextValue(),s=1+this.c*r}while(s<=0);if(s*=s*s,e=r*r,t=1-.331*e*e,n=.5*e+this.d*(1-s+Math.log(s)),o=this.randu(),o<t||Math.log(o)<n)break}return s=1/this.beta*this.d*s,this.alpha<1&&(s*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(s)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class Ga{constructor(e=0,t=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=Wa.alea(r)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const za=ke({randomGamma_:function(e,t,n=1,r="float32",o){if(null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error("Unsupported data type "+r);const s=new Ua(t,n,r,o),a=Es(e,r);for(let e=0;e<a.values.length;e++)a.values[e]=s.nextValue();return a.toTensor()}});const Ha=ke({randomNormal_:function(e,t=0,n=1,r,o){if(null!=r&&"bool"===r)throw new Error("Unsupported data type "+r);const s=new Va(t,n,r,!1,o),a=Es(e,r);for(let e=0;e<a.values.length;e++)a.values[e]=s.nextValue();return a.toTensor()}});const Ka=ke({randomUniform_:function(e,t=0,n=1,r="float32",o){const s=Es(e,r),a=new Ga(t,n,null,o);for(let e=0;e<s.values.length;e++)s.values[e]=a.nextValue();return s.toTensor()}});function qa(e,t){w(e);const n=Ce(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return _e(e,null,n,t)}function Xa(e,t,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");const o={start:e,stop:t,step:n,dtype:r};return ve.runKernelFunc(()=>{if(e===t||e<t&&n<0||t<e&&n>1)return jn([0],r);const o=G(Math.abs(Math.ceil((t-e)/n)),r);t<e&&1===n&&(n=-1),o[0]=e;for(let e=1;e<o.length;e++)o[e]=o[e-1]+n;return qa(o,r)},{},null,"Range",o)}const ja=ke({reciprocal_:function(e){const t=Re(e,"x","reciprocal"),n={x:t};return ve.runKernelFunc((e,n)=>{const r=e.reciprocal(t);return n([t]),r},n,null,"Reciprocal")}});const Ya=ke({relu_:function(e){const t=Re(e,"x","relu"),n={x:t};return ve.runKernelFunc((e,n)=>(n([t]),"bool"===t.dtype?t.toInt():e.relu(t)),n,null,"Relu")}});const Qa=ke({relu6_:function(e){const t=Re(e,"x","relu6"),n={x:t};return ve.runKernelFunc((e,n)=>(n([t]),"bool"===t.dtype?Ie(t,"int32"):e.relu6(t)),n,null,"Relu6")}});const Ja=ke({reverse1d_:function(e){const t=Re(e,"x","reverse");return b(1===t.rank,()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`),cr(t,0)}});const Za=ke({reverse2d_:function(e,t){const n=Re(e,"x","reverse");return b(2===n.rank,()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`),cr(n,t)}});const ei=ke({reverse3d_:function(e,t){const n=Re(e,"x","reverse");return b(3===n.rank,()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`),cr(n,t)}});const ti=ke({reverse4d_:function(e,t){const n=Re(e,"x","reverse");return b(4===n.rank,()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`),cr(n,t)}});const ni=ke({rfft_:function(e,t){b("float32"===e.dtype,()=>"The dtype for rfft() must be real value but got "+e.dtype);let n=e.shape[e.shape.length-1];const r=e.size/n;let o;if(null!=t&&t<n){const r=e.shape.map(e=>0),s=e.shape.map(e=>e);s[e.shape.length-1]=t,o=Jr(e,r,s),n=t}else if(null!=t&&t>n){const r=e.shape.map(e=>e);r[e.shape.length-1]=t-n,o=Vr([e,jn(r)],e.shape.length-1),n=t}else o=e;const s=He(o),a=Qe(Xn(o,s),[r,n]),i=Ks(a),u=Math.floor(n/2)+1,l=Ys(i),c=js(i),h=Lt(l,[u,n-u],l.shape.length-1),d=Lt(c,[u,n-u],c.shape.length-1),p=o.shape.slice();return p[o.shape.length-1]=u,Qe(Xn(h[0],d[0]),p)}});const ri=ke({round_:function(e){const t=Re(e,"x","round"),n={x:t};return ve.runKernelFunc(e=>e.round(t),n,null,"Round")}});const oi=ke({selu_:function(e){const t=Re(e,"x","selu"),n={x:t};return ve.runKernelFunc((e,n)=>{const r=e.selu(t);return n([t]),r},n,null,"Selu")}});const si=ke({separableConv2d_:function(e,t,n,r,o,s=[1,1],a="NHWC"){const i=Re(e,"x","separableConv2d"),u=Re(t,"depthwiseFilter","separableConv2d"),l=Re(n,"pointwiseFilter","separableConv2d");let c=i,h=!1;if(3===i.rank&&(h=!0,c=i.as4D(1,i.shape[0],i.shape[1],i.shape[2])),"NCHW"===a)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");b(4===c.rank,()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`),b(4===u.rank,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${u.rank}.`),b(4===l.rank,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${u.rank}.`),b(1===l.shape[0],()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${l.shape[0]}.`),b(1===l.shape[1],()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${l.shape[1]}.`);const d=u.shape[2],p=u.shape[3];b(l.shape[2]===d*p,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${d*p}, but got ${l.shape[2]}.`);const f=Ms(c,u,r,o,a,s),g=zt(f,l,1,"valid",a);return h?g.as3D(g.shape[1],g.shape[2],g.shape[3]):g}});const ai=async function(e,t){const n=Re(e,"x","setdiff1d"),r=Re(t,"y","setdiff1d");b(n.dtype===r.dtype,()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${r.dtype}).`),b(1===n.rank,()=>`x should be 1D tensor, but got x (${n.shape}).`),b(1===r.rank,()=>`y should be 1D tensor, but got y (${r.shape}).`);const o=await n.data(),s=await r.data(),a=new Set(s);let i=0;for(let e=0;e<o.length;e++)a.has(o[e])||i++;const u=new te([i],n.dtype),l=new te([i],"int32");for(let e=0,t=0;e<o.length;e++)a.has(o[e])||(u.values[t]=o[e],l.values[t]=e,t++);return[u.toTensor(),l.toTensor()]};const ii=ke({sign_:function(e){const t=Re(e,"x","sign"),n={x:t};return ve.runKernelFunc(e=>e.sign(t),n,null,"Sign")}});const ui=ke({slice1d_:function(e,t,n){const r=Re(e,"x","slice1d");return b(1===r.rank,()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`),Jr(r,[t],[n])}});const li=ke({slice2d_:function(e,t,n){const r=Re(e,"x","slice2d");return b(2===r.rank,()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`),Jr(r,t,n)}});const ci=ke({slice3d_:function(e,t,n){const r=Re(e,"x","slice3d");return b(3===r.rank,()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`),Jr(r,t,n)}});const hi=ke({slice4d_:function(e,t,n){const r=Re(e,"x","slice4d");return b(4===r.rank,()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`),Jr(r,t,n)}});const di=ke({softmax_:function(e,t=-1){const n=Re(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const r={logits:n},o={dim:t};return ve.runKernelFunc((e,r)=>{const o=e.softmax(n,t);return r([o]),o},r,null,"Softmax",o)}});const pi=ke({softplus_:function(e){const t=Re(e,"x","softplus"),n={x:t};return ve.runKernelFunc((e,n)=>{const r=e.softplus(t);return n([t]),r},n,null,"Softplus")}});const fi=ke({squaredDifference_:function(e,t){let n=Re(e,"a","squaredDifference"),r=Re(t,"b","squaredDifference");[n,r]=fe(n,r),Ue(n.shape,r.shape);const o={a:n,b:r};return ve.runKernelFunc((e,t)=>{const o=e.squaredDifference(n,r);return t([n,r]),o},o,null,"SquaredDifference",{})}});const gi=ke({squeeze_:function(e,t){const n=Re(e,"x","squeeze");return Qe(n,N(n.shape,t).newShape)}});const mi=ke({stridedSlice_:function(e,t,n,r,o=0,s=0,a=0,i=0,u=0){null==r&&(r=new Array(t.length));let l=Re(e,"x","stridedSlice");const c={x:l},h={begin:t,end:n,strides:r,beginMask:o,endMask:s,ellipsisMask:a,newAxisMask:i,shrinkAxisMask:u};return ve.runKernelFunc(e=>{const c=Rr(a);if(c.length>1)throw new Error("Multiple ellipses in slice is not allowed.");if(0!==a&&0!==i)throw new Error("Using both ellipsisMask and newAxisMask is not yet supported.");if(0!==a&&0!==u)throw new Error("Using both ellipsisMask and shrinkAxisMask is not yet supported.");const h=l.rank-t.length,d=Rr(i),p=l.shape.slice();if(d.forEach(e=>{t[e]=0,n[e]=1,p.splice(e,0,1)}),l=Qe(l,p),c.length&&h>0){const e=c[0],a=h+1;t=function(e,t,n,r,o){const s=[...o],a=Ir(n,t);for(let o=0;o<s.length;o++)if(a.indexOf(o)>-1)s[o]=0;else{const a=kr(t,n,o);let i=r[a];e&1<<a&&(i=0),s[o]=i}return s}(o,e,a,t,l.shape),n=function(e,t,n,r,o){const s=[...o],a=Ir(n,t);for(let o=0;o<s.length;o++)if(a.indexOf(o)>-1)s[o]=Number.MAX_SAFE_INTEGER;else{const a=kr(t,n,o);let i=r[a];e&1<<a&&(i=Number.MAX_SAFE_INTEGER),s[o]=i}for(let e=0;e<s.length;e++){const t=o[e];s[e]<0&&(s[e]+=t),s[e]=x(0,s[e],o[e])}return s}(s,e,a,n,l.shape),r=function(e,t,n,r){const o=[...e];for(let e=o.length;e<r.length;e++)o.push(1);for(let e=0;e<n;e++)0===e?o[t]=1:(o.splice(t,0,1),o.pop());return o}(r,e,a,l.shape)}else for(let e=0;e<l.rank;e++)t[e]=Ar(o,t,r,l.shape,e,a),n[e]=Nr(s,n,r,l.shape,e,a),r[e]=Sr(r,e,a);const f=Rr(u);f.forEach(e=>{n[e]=t[e]+1,r[e]=1});const g=Er(t,n,r),m=g.filter((e,t)=>-1===f.indexOf(t));if(r.every(e=>1===e))return Qe(Jr(l,t,g),m);return e.stridedSlice(l,t,n,r).reshape(m)},c,null,"StridedSlice",h)}});const xi=ke({tan_:function(e){const t=Re(e,"x","tan"),n={x:t};return ve.runKernelFunc((e,n)=>{const r=e.tan(t);return n([t]),r},n,null,"Tan")}});function vi(e,t,n){if(w(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const r=Ce(e,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return _e(e,t,r,n)}const bi=ke({topk_:function(e,t=1,n=!0){const r=Re(e,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const o=r.shape[r.shape.length-1];if(t>o)throw new Error(`'k' passed to topk() must be <= the last dimension (${o}) but got `+t);const s={x:r},a={k:t,sorted:n},[i,u]=ve.runKernelFunc(e=>e.topk(r,t,n),s,null,"TopK",a);return{values:i,indices:u}}});const yi=ke({truncatedNormal_:function(e,t=0,n=1,r,o){if(null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const s=new Va(t,n,r,!0,o),a=Es(e,r);for(let e=0;e<a.values.length;e++)a.values[e]=s.nextValue();return a.toTensor()}});const wi=ke({unstack_:function(e,t=0){const n=Re(e,"x","unstack");b(t>=-n.shape.length&&t<n.shape.length,()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`),t<0&&(t+=n.shape.length);const r={value:n},o={axis:t};return ve.runKernelFunc(e=>e.unstack(n,t),r,null,"Unpack",o)}});function Ci(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const r=Es(e,"int32"),o=Es([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const s=r.indexToLoc(n[t]),a=t*e.length;o.values.set(s,a)}return o.toTensor()}const $i=async function(e){const t=Re(e,"condition","whereAsync","bool"),n=await t.data(),r=Ci(t.shape,n);return e!==t&&t.dispose(),r};const Ri=async function(e,t,n){const r=Re(e,"tensor","boolMask"),o=Re(t,"mask","boolMask","bool"),s=null==n?0:n,a=o.rank,i=r.shape;b(a>0,()=>"mask cannot be scalar"),y(i.slice(s,s+a),o.shape,"mask's shape must match the first K dimensions of tensor's shape,");let u=1;for(let e=s;e<s+a;e++)u*=i[e];const l=i.slice(0,s).concat([u],i.slice(s+a)),c=r.reshape(l),h=o.reshape([-1]),d=await $i(h),p=d.squeeze([1]),f=io(c,p,s);return e!==r&&r.dispose(),t!==o&&o.dispose(),p.dispose(),c.dispose(),h.dispose(),d.dispose(),f};const Ei=ke({equalStrict_:function(e,t){Jo("strict variants of ops have been deprecated and will be removed in future");const n=Re(e,"a","equalStrict"),r=Re(t,"b","equalStrict");return y(n.shape,r.shape,"Error in equalStrict: "),n.equal(r)}}),ki=ke({greaterEqualStrict_:function(e,t){Jo("strict variants of ops have been deprecated and will be removed in future");const n=Re(e,"a","greaterEqualStrict"),r=Re(t,"b","greaterEqualStrict");return y(n.shape,r.shape,"Error in greaterEqualStrict: "),n.greaterEqual(r)}}),Ii=ke({greaterStrict_:function(e,t){Jo("strict variants of ops have been deprecated and will be removed in future");const n=Re(e,"a","greaterStrict"),r=Re(t,"b","greaterStrict");return y(n.shape,r.shape,"Error in greaterStrict: "),n.greater(r)}}),Si=ke({lessEqualStrict_:function(e,t){Jo("strict variants of ops have been deprecated and will be removed in future");const n=Re(e,"a","lessEqualStrict"),r=Re(t,"b","lessEqualStrict");return y(n.shape,r.shape,"Error in lessEqualStrict: "),n.lessEqual(r)}}),Ai=ke({lessStrict_:function(e,t){Jo("strict variants of ops have been deprecated and will be removed in future");const n=Re(e,"a","lessStrict"),r=Re(t,"b","lessStrict");return y(n.shape,r.shape,"Error in lessStrict: "),n.less(r)}}),Ni=ke({notEqualStrict_:function(e,t){Jo("strict variants of ops have been deprecated and will be removed in future");const n=Re(e,"a","notEqualStrict"),r=Re(t,"b","notEqualStrict");return y(n.shape,r.shape,"Error in notEqualStrict: "),n.notEqual(r)}});const Ti=ke({addStrict_:function(e,t){Jo("strict variants of ops have been deprecated and will be removed in future");const n=Re(e,"a","addStrict"),r=Re(t,"b","addStrict");return y(n.shape,r.shape,"Error in addStrict: "),n.add(r)}}),Di=ke({divStrict_:function(e,t){Jo("strict variants of ops have been deprecated and will be removed in future");const n=Re(e,"a","div"),r=Re(t,"b","div");return y(n.shape,r.shape,"Error in divideStrict: "),n.div(r)}}),Fi=ke({maximumStrict_:function(e,t){Jo("strict variants of ops have been deprecated and will be removed in future");const n=Re(e,"a","maximumStrict"),r=Re(t,"b","maximumStrict");return y(n.shape,r.shape,"Error in maximumStrict: "),n.maximum(r)}}),_i=ke({minimumStrict_:function(e,t){Jo("strict variants of ops have been deprecated and will be removed in future");const n=Re(e,"a","minimumStrict"),r=Re(t,"b","minimumStrict");return y(n.shape,r.shape,"Error in minimumStrict: "),n.minimum(r)}}),Oi=ke({modStrict_:function(e,t){Jo("strict variants of ops have been deprecated and will be removed in future");const n=Re(e,"a","modStrict"),r=Re(t,"b","modStrict");return y(n.shape,r.shape,"Error in modStrict: "),n.mod(r)}}),Bi=ke({mulStrict_:function(e,t){Jo("strict variants of ops have been deprecated and will be removed in future");const n=Re(e,"a","mul"),r=Re(t,"b","mul");return y(n.shape,r.shape,"Error in multiplyStrict: "),n.mul(r)}}),Mi=ke({powStrict_:function(e,t){return Jo("strict variants of ops have been deprecated and will be removed in future"),y(e.shape,t.shape,"Error in powStrict: "),e.pow(t)}}),Pi=ke({squaredDifferenceStrict_:function(e,t){Jo("strict variants of ops have been deprecated and will be removed in future");const n=Re(e,"a","squaredDifferenceStrict"),r=Re(t,"b","squaredDifferenceStrict");return y(n.shape,r.shape,"Error in squaredDifferenceStrict: "),n.squaredDifference(r)}}),Li=ke({subStrict_:function(e,t){Jo("strict variants of ops have been deprecated and will be removed in future");const n=Re(e,"a","subStrict"),r=Re(t,"b","subStrict");return y(n.shape,r.shape,"Error in subStrict: "),n.sub(r)}});const Wi=ke({norm_:function(e,t="euclidean",n=null,r=!1){const o=function e(t,n,r=null){if(0===t.rank)return ns(t);if(1!==t.rank&&null===r)return e(Qe(t,[-1]),n,r);if(1===t.rank||"number"==typeof r||Array.isArray(r)&&1===r.length){if(1===n)return at(ns(t),r);if(n===1/0)return aa(ns(t),r);if(n===-1/0)return ga(ns(t),r);if("euclidean"===n||2===n)return Be(at(er(ns(t),Oe(2,"int32")),r));throw new Error("Error in norm: invalid ord value: "+n)}if(Array.isArray(r)&&2===r.length){if(1===n)return aa(at(ns(t),r[0]),r[1]-1);if(n===1/0)return aa(at(ns(t),r[1]),r[0]);if(n===-1/0)return ga(at(ns(t),r[1]),r[0]);if("fro"===n||"euclidean"===n)return Be(at(Me(t),r));throw new Error("Error in norm: invalid ord value: "+n)}throw new Error("Error in norm: invalid axis: "+r)}(e=Re(e,"x","norm"),t,n);let s=o.shape;if(r){const t=A(n,e.shape);s=tt(o.shape,t)}return o.reshape(s)}});const Vi=ke({movingAverage_:function(e,t,n,r,o=!0){const s=Re(e,"v","movingAverage"),a=Re(t,"x","movingAverage"),i=Re(n,"decay","movingAverage");var u,l;l=a,b((u=s).dtype===l.dtype,()=>`The dtypes of the first(${u.dtype}) and second(${l.dtype}) input must match`),b(R(s.shape,a.shape),()=>"Shape mismatch in v and x");const c=Oe(1),h=Pe(c,i);let d=Se(Pe(a,s),h);if(o){b(null!=r,()=>"When using zeroDebias: true, step is required.");const e=Re(r,"step","movingAverage");d=De(d,Pe(c,er(i,e)))}return je(s,d)}});const Ui=ke({scatterND_:function(e,t,n){const r=Re(e,"indices","scatterND","int32"),o=Re(t,"updates","scatterND");Xo(o,r,n);const s={indices:r,updates:o},a={shape:n};return ve.runKernelFunc(e=>e.scatterND(r,o,n),s,null,"ScatterNd",a)}});const Gi=ke({sparseToDense_:function(e,t,n,r=0){const o=Re(e,"sparseIndices","sparseToDense","int32"),s=Re(t,"sparseValues","sparseToDense"),a=Re(r,"defaultValue","sparseToDense",s.dtype);!function(e,t,n,r){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const o=e.rank>0?e.shape[0]:1,s=e.rank>1?e.shape[1]:1;if(n.length!==s)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${s}.`);const a=t.size;if(0!==t.rank&&(1!==t.rank||a!==o))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${o}]`);if(t.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(o,s,n,a);const i={sparseIndices:o,sparseValues:s,defaultValue:a},u={outputShape:n};return ve.runKernelFunc(e=>e.sparseToDense(o,s,n,a),i,null,"SparseToDense",u)}});const zi=ke({gatherND_:function(e,t){const n=Re(t,"indices","gatherND","int32"),r=Re(e,"x","gatherND"),o={params:r,indices:n};return ve.runKernelFunc(e=>e.gatherND(r,n),o,null,"GatherNd")}});const Hi=ke({dropout_:function(e,t,n,r){const o=Re(e,"x","dropout");if(b("float32"===o.dtype,()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${o.dtype} tensor instead.`),b(t>=0&&t<1,()=>`rate must be a float in the range [0, 1), but got ${t}.`),0===t)return e instanceof oe?o.clone():o;const s=function(e,t){if(null==t)return e.shape.slice();if(R(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let r=0;r<e.shape.length;r++)null==t[r]&&null!=e.shape[r]?n.push(e.shape[r]):n.push(t[r]);return n}return t}(o,n),a=1-t,i=Ka(s,0,1,"float32",r).add(a).floor().div(a);return o.mul(i)}});function Ki(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function qi(e,t,n){const r=1-e%2,o=new Float32Array(e);for(let s=0;s<e;++s){const a=2*Math.PI*s/(e+r-1);o[s]=t-n*Math.cos(a)}return qa(o,"float32")}const Xi=async function(e,t,n=1){const r=Re(e,"predictions","inTopK"),o=Re(t,"targets","inTopK");b(r.rank>1,()=>"inTopK() expects the predictions to be of rank 2 or higher, but got "+r.rank),b(r.rank-1===o.rank,()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${r.rank} and targets rank ${o.rank}`),y(r.shape.slice(0,r.shape.length-1),o.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const s=r.shape[r.shape.length-1];b(n>0&&n<=s,()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${s}), but got ${n}`);const a=await r.data(),i=await o.data(),[u,l]=[a.length/s,s],c=T("bool",u);for(let e=0;e<u;e++){const t=e*l,r=a.subarray(t,t+l),o=[];for(let e=0;e<r.length;e++)o.push({value:r[e],index:e});o.sort((e,t)=>t.value-e.value),c[e]=0;for(let t=0;t<n;t++)if(o[t].index===i[e]){c[e]=1;break}}return e!==r&&r.dispose(),t!==o&&o.dispose(),Wr(c,o.shape,"bool")};function ji(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return e.mul(t.step());throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function Yi(e,t){let n=t;const r=Ve(e.shape,t.shape);return r.length>0&&(n=n.sum(r)),n.reshape(e.shape)}function Qi(e,t,n){if("linear"===t)return e;if("relu"===t)return Ya(e);if("elu"===t)return Us(e);if("relu6"===t)return Qa(e);if("prelu"===t)return Aa(e,n);throw new Error(`Unknown fused activation ${t}.`)}const Ji=(e,t)=>!(e>0)||"linear"===t;const Zi=ke({fusedConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:o="NHWC",dilations:s=[1,1],dimRoundingMode:a,bias:i,activation:u="linear",preluActivationWeights:l}){if(u=u||"linear",!1===Ji(ve.state.gradientDepth,u)){let c=zt(e,t,n,r,o,s,a);return null!=i&&(c=je(c,i)),Qi(c,u,l)}const c=Re(e,"x","conv2d"),h=Re(t,"filter","conv2d");let d=c,p=!1;3===c.rank&&(p=!0,d=c.as4D(1,c.shape[0],c.shape[1],c.shape[2])),b(4===d.rank,()=>"Error in fused conv2d: input must be rank 4, but got rank "+d.rank+"."),b(4===h.rank,()=>"Error in fused conv2d: filter must be rank 4, but got rank "+h.rank+"."),null!=a&&b(E(r),()=>`Error in fused conv2d: pad must be an integer when using, dimRoundingMode ${a} but got pad ${r}.`),b(d.shape[3]===h.shape[2],()=>`Error in conv2d: depth of input (${d.shape[3]}) must match input depth for filter ${h.shape[2]}.`),b(yt(n,s),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`),b("NHWC"===o,()=>`Error in conv2d: got dataFormat of ${o} but only NHWC is currently supported.`);const f=dt(d.shape,h.shape,n,s,r,a);let g,m;null!=i&&(g=Re(i,"bias","fused conv2d"),[g]=fe(g,c),Ue(f.outShape,g.shape)),null!=l&&(m=Re(l,"prelu weights","fused conv2d"));const x=(e,t)=>{const[o,a,i,l]=t,c=ji(e,i,u);b(bt(s),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`);const h=[Ut(a.shape,c,o,n,r),Vt(a,c,o.shape,n,r)];if(null!=l){const e=Yi(l,c);h.push(e)}return h},v=e=>e.fusedConv2d({input:d,filter:h,convInfo:f,bias:g,activation:u,preluActivationWeights:m}),y={x:d,filter:h,bias:g,preluActivationWeights:m},w={strides:n,pad:r,dataFormat:o,dilations:s,dimRoundingMode:a,activation:u};if(null==i){return oa((e,t,n)=>{let r=ve.runKernelFunc(v,y,null,"FusedConv2D",w);return n([t,e,r]),p&&(r=r.as3D(r.shape[1],r.shape[2],r.shape[3])),{value:r,gradFunc:x}})(d,h)}return oa((e,t,n,r)=>{let o=ve.runKernelFunc(v,y,null,"FusedConv2D",w);return r([t,e,o,n]),p&&(o=o.as3D(o.shape[1],o.shape[2],o.shape[3])),{value:o,gradFunc:x}})(d,h,g)}});const eu=ke({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:o="NHWC",dilations:s=[1,1],dimRoundingMode:a,bias:i,activation:u="linear",preluActivationWeights:l}){if(!1===Ji(ve.state.gradientDepth,u)){let c=Ms(e,t,n,r,o,s,a);return null!=i&&(c=je(c,i)),Qi(c,u,l)}const c=Re(e,"x","depthwiseConv2d"),h=Re(t,"filter","depthwiseConv2d");let d=c,p=!1;3===c.rank&&(p=!0,d=c.as4D(1,c.shape[0],c.shape[1],c.shape[2])),b(4===d.rank,()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${d.rank}.`),b(4===h.rank,()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${h.rank}.`),b(d.shape[3]===h.shape[2],()=>`Error in fused depthwiseConv2d: number of input channels (${d.shape[3]}) must match the inChannels dimension in filter ${h.shape[2]}.`),null==s&&(s=[1,1]),b(yt(n,s),()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`),null!=a&&b(E(r),()=>`Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode ${a} but got pad ${r}.`);const f=dt(d.shape,h.shape,n,s,r,a,!0);let g,m;null!=i&&(g=Re(i,"bias","fused conv2d"),[g]=fe(g,c),Ue(f.outShape,g.shape)),null!=l&&(m=Re(l,"prelu weights","fused depthwiseConv2d"));const x=(e,t)=>{b(bt(s),()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${s}'`);const[n,r,o,a]=t,i=ji(e,o,u),l=rn(r.shape,i,n,f),c=nn(r,i,n.shape,f);if(null!=a){return[l,c,Yi(g,i)]}return[l,c]},v=e=>e.fusedDepthwiseConv2D({input:d,filter:h,convInfo:f,bias:g,activation:u,preluActivationWeights:m}),y={x:d,filter:h,bias:g,preluActivationWeights:m},w={strides:n,pad:r,dataFormat:o,dilations:s,dimRoundingMode:a,activation:u};if(null==i){return oa((e,t,n)=>{let r=ve.runKernelFunc(v,y,null,"FusedDepthwiseConv2D",w);return n([t,e,r]),p&&(r=r.as3D(r.shape[1],r.shape[2],r.shape[3])),{value:r,gradFunc:x}})(d,h)}return oa((e,t,n,r)=>{let o=ve.runKernelFunc(v,y,null,"FusedDepthwiseConv2D",w);return r([t,e,o,n]),p&&(o=o.as3D(o.shape[1],o.shape[2],o.shape[3])),{value:o,gradFunc:x}})(d,h,g)}});const tu=ke({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:r=!1,bias:o,activation:s="linear",preluActivationWeights:a}){if(!1===Ji(ve.state.gradientDepth,s)){let i=kt(e,t,n,r);return null!=o&&(i=je(i,o)),Qi(i,s,a)}let i=Re(e,"a","fused matMul"),u=Re(t,"b","fused matMul");[i,u]=fe(i,u);const l=n?i.shape[i.rank-2]:i.shape[i.rank-1],c=r?u.shape[u.rank-1]:u.shape[u.rank-2],h=n?i.shape[i.rank-1]:i.shape[i.rank-2],d=r?u.shape[u.rank-2]:u.shape[u.rank-1],p=i.shape.slice(0,-2),f=u.shape.slice(0,-2),g=$(p),m=$(f);b(i.rank>=2&&u.rank>=2&&i.rank===u.rank,()=>`Error in fused matMul: inputs must have the same rank of at least 2, got ranks ${i.rank} and ${u.rank}.`),b(R(p,f),()=>`Error in fused matMul: outer dimensions (${p}) and (${f}) of Tensors with shapes ${i.shape} and `+u.shape+" must match."),b(l===c,()=>`Error in fused matMul: inner shapes (${l}) and (${c}) of Tensors with shapes ${i.shape} and ${u.shape} and transposeA=${n} and transposeB=${r} must match.`);const x=i.shape.slice(0,-2).concat([h,d]),v=n?i.as3D(g,l,h):i.as3D(g,h,l),y=r?u.as3D(m,d,c):u.as3D(m,c,d);let w,C;null!=o&&(w=Re(o,"bias","fused matMul"),[w]=fe(w,i),Ue(x,w.shape)),null!=a&&(C=Re(a,"prelu weights","fused matMul"));const E=(e,t)=>{const[a,i,u,l]=t,c=ji(Qe(e,u.shape),u,s);let h,d;if(n||r?!n&&r?(h=kt(c,i,!1,!1),d=kt(c,a,!0,!1)):n&&!r?(h=kt(i,c,!1,!0),d=kt(a,c,!1,!1)):(h=kt(i,c,!0,!0),d=kt(c,a,!0,!0)):(h=kt(c,i,!1,!0),d=kt(a,c,!0,!1)),null!=o){return[h,d,Yi(l,c)]}return[h,d]},k=e=>e.fusedBatchMatMul({a:v,b:y,transposeA:n,transposeB:r,bias:w,activation:s,preluActivationWeights:C}),I={a:v,b:y,bias:w,preluActivationWeights:C},S={transposeA:n,transposeB:r,activation:s};if(null==o){return oa((e,t,n)=>{const r=ve.runKernelFunc(k,I,null,"_FusedMatMul",S);return n([e,t,r]),{value:Qe(r,x),gradFunc:E}})(v,y)}return oa((e,t,n,r)=>{const o=ve.runKernelFunc(k,I,null,"_FusedMatMul",S);return r([e,t,o,n]),{value:Qe(o,x),gradFunc:E}})(v,y,w)}});var nu=Object.freeze({__proto__:null,conv2d:Zi,depthwiseConv2d:eu,matMul:tu});const ru=ke({hammingWindow_:function(e){return qi(e,.54,.46)}});const ou=ke({hannWindow_:function(e){return qi(e,.5,.5)}});const su=ke({frame_:function(e,t,n,r=!1,o=0){let s=0;const a=[];for(;s+t<=e.size;)a.push(Jr(e,s,t)),s+=n;if(r)for(;s<e.size;){const r=s+t-e.size,i=Vr([Jr(e,s,t-r),qs([r],o)]);a.push(i),s+=n}return 0===a.length?vi([],[0,t]):Qe(Vr(a),[a.length,t])}});const au=ke({stft_:function(e,t,n,r,o=ou){null==r&&(r=Ki(t));const s=su(e,t,n),a=Se(s,o(t)),i=[];for(let e=0;e<s.shape[0];e++)i.push(ni(Jr(a,[e,0],[1,t]),r));return Vr(i)}});const iu=ke({cropAndResize_:function(e,t,n,r,o,s){const a=Re(e,"image","cropAndResize"),i=Re(t,"boxes","cropAndResize","float32"),u=Re(n,"boxInd","cropAndResize","int32");o=o||"bilinear",s=s||0;const l=i.shape[0];b(4===a.rank,()=>`Error in cropAndResize: image must be rank 4,but got rank ${a.rank}.`),b(2===i.rank&&4===i.shape[1],()=>`Error in cropAndResize: boxes must be have size [${l},4] but had shape ${i.shape}.`),b(1===u.rank&&u.shape[0]===l,()=>`Error in cropAndResize: boxInd must be have size [${l}] but had shape ${i.shape}.`),b(2===r.length,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`),b(r[0]>=1&&r[1]>=1,()=>"cropSize must be atleast [1,1], but was "+r),b("bilinear"===o||"nearest"===o,()=>"method must be bilinear or nearest, but was "+o);const c={image:a,boxes:i,boxInd:u},h={method:o,extrapolationValue:s,cropSize:r};return ve.runKernelFunc(e=>e.cropAndResize(a,i,u,r,o,s),c,null,"CropAndResize",h)}});const uu=ke({rotateWithOffset_:function(e,t,n=0,r=.5){const o=Re(e,"image","rotateWithOffset","float32");b(4===o.rank,()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${o.rank}.`);const s={image:o},a={radians:t,fillValue:n,center:r};return ve.runKernel("RotateWithOffset",s,a)}});function lu(e,t,n,r,o,s){null==r&&(r=.5),null==o&&(o=Number.NEGATIVE_INFINITY),null==s&&(s=0);const a=e.shape[0];return n=Math.min(n,a),b(0<=r&&r<=1,()=>`iouThreshold must be in [0, 1], but was '${r}'`),b(2===e.rank,()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`),b(4===e.shape[1],()=>"boxes must have 4 columns, but 2nd dimension was "+e.shape[1]),b(1===t.rank,()=>"scores must be a 1D tensor"),b(t.shape[0]===a,()=>`scores has incompatible shape with boxes. Expected ${a}, but was `+t.shape[0]),b(0<=s&&s<=1,()=>`softNmsSigma must be in [0, 1], but was '${s}'`),{maxOutputSize:n,iouThreshold:r,scoreThreshold:o,softNmsSigma:s}}const cu=ke({nonMaxSuppression_:function(e,t,n,r=.5,o=Number.NEGATIVE_INFINITY){const s=Re(e,"boxes","nonMaxSuppression"),a=Re(t,"scores","nonMaxSuppression"),i=lu(s,a,n,r,o);n=i.maxOutputSize,r=i.iouThreshold,o=i.scoreThreshold;const u={maxOutputSize:n,iouThreshold:r,scoreThreshold:o};return ve.runKernelFunc(e=>e.nonMaxSuppression(s,a,n,r,o),{boxes:s,scores:a},null,"NonMaxSuppressionV3",u)}});function hu(e,t,n){const r=function(e,t,n){return function(e,t,n){let r=0,o=e.length,s=0,a=!1;for(;r<o;){s=r+(o-r>>>1);const i=n(t,e[s]);i>0?r=s+1:(o=s,a=!i)}return a?r:-r-1}(e,t,n||du)}(e,t,n),o=r<0?-(r+1):r;e.splice(o,0,t)}function du(e,t){return e>t?1:e<t?-1:0}function pu(e,t,n,r,o){return mu(e,t,n,r,o,0).selectedIndices}function fu(e,t,n,r,o,s){return mu(e,t,n,r,o,0,!1,s,!0)}function gu(e,t,n,r,o,s){return mu(e,t,n,r,o,s,!0)}function mu(e,t,n,r,o,s,a=!1,i=!1,u=!1){const l=[];for(let e=0;e<t.length;e++)t[e]>o&&l.push({score:t[e],boxIndex:e,suppressBeginIndex:0});l.sort(bu);const c=s>0?-.5/s:0,h=[],d=[];for(;h.length<n&&l.length>0;){const t=l.pop(),{score:n,boxIndex:s,suppressBeginIndex:a}=t;if(n<o)break;let i=!1;for(let n=h.length-1;n>=a;--n){const a=xu(e,s,h[n]);if(a>=r){i=!0;break}if(t.score=t.score*vu(r,c,a),t.score<=o)break}t.suppressBeginIndex=h.length,i||(t.score===n?(h.push(s),d.push(t.score)):t.score>o&&hu(l,t,bu))}const p=h.length,f=n-p;i&&f>0&&(h.push(...new Array(f).fill(0)),d.push(...new Array(f).fill(0)));const g={selectedIndices:qa(h,"int32")};return a&&(g.selectedScores=qa(d,"float32")),u&&(g.validOutputs=Oe(p,"int32")),g}function xu(e,t,n){const r=e.subarray(4*t,4*t+4),o=e.subarray(4*n,4*n+4),s=Math.min(r[0],r[2]),a=Math.min(r[1],r[3]),i=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),l=Math.min(o[0],o[2]),c=Math.min(o[1],o[3]),h=Math.max(o[0],o[2]),d=Math.max(o[1],o[3]),p=(i-s)*(u-a),f=(h-l)*(d-c);if(p<=0||f<=0)return 0;const g=Math.max(s,l),m=Math.max(a,c),x=Math.min(i,h),v=Math.min(u,d),b=Math.max(x-g,0)*Math.max(v-m,0);return b/(p+f-b)}function vu(e,t,n){const r=Math.exp(t*n*n);return n<=e?r:0}function bu(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}const yu=async function(e,t,n,r=.5,o=Number.NEGATIVE_INFINITY){const s=Re(e,"boxes","nonMaxSuppressionAsync"),a=Re(t,"scores","nonMaxSuppressionAsync"),i=lu(s,a,n,r,o);n=i.maxOutputSize,r=i.iouThreshold,o=i.scoreThreshold;const u=await Promise.all([s.data(),a.data()]),l=pu(u[0],u[1],n,r,o);return s!==e&&s.dispose(),a!==t&&a.dispose(),l};const wu=ke({nonMaxSuppressionWithScore_:function(e,t,n,r=.5,o=Number.NEGATIVE_INFINITY,s=0){const a=Re(e,"boxes","nonMaxSuppression"),i=Re(t,"scores","nonMaxSuppression"),u=lu(a,i,n,r,o,s),l={boxes:a,scores:i},c={maxOutputSize:n=u.maxOutputSize,iouThreshold:r=u.iouThreshold,scoreThreshold:o=u.scoreThreshold,softNmsSigma:s=u.softNmsSigma},h=ve.runKernel("NonMaxSuppressionV5",l,c);return{selectedIndices:h[0],selectedScores:h[1]}}});const Cu=async function(e,t,n,r=.5,o=Number.NEGATIVE_INFINITY,s=0){const a=Re(e,"boxes","nonMaxSuppressionAsync"),i=Re(t,"scores","nonMaxSuppressionAsync"),u=lu(a,i,n,r,o,s);n=u.maxOutputSize,r=u.iouThreshold,o=u.scoreThreshold,s=u.softNmsSigma;const l=await Promise.all([a.data(),i.data()]),c=gu(l[0],l[1],n,r,o,s);return a!==e&&a.dispose(),i!==t&&i.dispose(),c};const $u=ke({nonMaxSuppressionPadded_:function(e,t,n,r=.5,o=Number.NEGATIVE_INFINITY,s=!1){const a=Re(e,"boxes","nonMaxSuppression"),i=Re(t,"scores","nonMaxSuppression"),u=lu(a,i,n,r,o,null),l={boxes:a,scores:i},c={maxOutputSize:u.maxOutputSize,iouThreshold:u.iouThreshold,scoreThreshold:u.scoreThreshold,padToMaxOutputSize:s},h=ve.runKernel("NonMaxSuppressionV4",l,c);return{selectedIndices:h[0],validOutputs:h[1]}}});const Ru=async function(e,t,n,r=.5,o=Number.NEGATIVE_INFINITY,s=!1){const a=Re(e,"boxes","nonMaxSuppressionAsync"),i=Re(t,"scores","nonMaxSuppressionAsync"),u=lu(a,i,n,r,o,null),l=u.maxOutputSize,c=u.iouThreshold,h=u.scoreThreshold,[d,p]=await Promise.all([a.data(),i.data()]),f=fu(d,p,l,c,h,s);return a!==e&&a.dispose(),i!==t&&i.dispose(),f};const Eu=ke({resizeBilinear_:function(e,t,n=!1){const r=Re(e,"images","resizeBilinear");b(3===r.rank||4===r.rank,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`),b(2===t.length,()=>"Error in resizeBilinear: new shape must 2D, but got shape "+t+".");let o=r,s=!1;3===r.rank&&(s=!0,o=r.as4D(1,r.shape[0],r.shape[1],r.shape[2]));const[a,i]=t,u={images:o},l={alignCorners:n,size:t},c=ve.runKernelFunc((e,t)=>(t([o]),e.resizeBilinear(o,a,i,n)),u,null,"ResizeBilinear",l);return s?c.as3D(c.shape[1],c.shape[2],c.shape[3]):c}});const ku=ke({resizeNearestNeighbor_:function(e,t,n=!1){const r=Re(e,"images","resizeNearestNeighbor");b(3===r.rank||4===r.rank,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`),b(2===t.length,()=>"Error in resizeNearestNeighbor: new shape must 2D, but got shape "+t+"."),b("float32"===r.dtype||"int32"===r.dtype,()=>"`images` must have `int32` or `float32` as dtype");let o=r,s=!1;3===r.rank&&(s=!0,o=r.as4D(1,r.shape[0],r.shape[1],r.shape[2]));const[a,i]=t,u={images:o},l={alignCorners:n,size:t},c=ve.runKernelFunc((e,t)=>(t([o]),e.resizeNearestNeighbor(o,a,i,n)),u,null,"ResizeNearestNeighbor",l);return s?c.as3D(c.shape[1],c.shape[2],c.shape[3]):c}});const Iu=ke({bandPart_:function(e,t,n){b(t%1==0,()=>`bandPart(): numLower must be an integer, got ${t}.`),b(n%1==0,()=>`bandPart(): numUpper must be an integer, got ${n}.`);const r=Re(e,"a","bandPart");b(r.rank>=2,()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`);const o=r.shape,[s,a]=r.shape.slice(-2);if(!(t<=s))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${s}).`);if(!(n<=a))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${a}).`);t<0&&(t=s),n<0&&(n=a);const i=Qe(Xa(0,s,1,"int32"),[-1,1]),u=Xa(0,a,1,"int32"),l=Pe(i,u),c=Ot(_t(l,Oe(+t,"int32")),Ft(l,Oe(-n,"int32"))),h=jn([s,a],r.dtype);return Qe(no(wi(Qe(r,[-1,s,a])).map(e=>Bt(c,e,h))),o)}});const Su=ke({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,b(null!=e&&e.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");const n=e[0].shape[0];for(let t=1;t<e.length;++t)b(e[t].shape[0]===n,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`)}else t=!0,e=Lt(e,e.shape[0],0).map(e=>gi(e,[0]));b(e.length<=e[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`);const n=[],r=e;for(let t=0;t<e.length;++t)n.push(ve.tidy(()=>{let e=r[t];if(t>0)for(let r=0;r<t;++r){const t=Se(at(Se(n[r],e)),n[r]);e=Pe(e,t)}return De(e,Wi(e,"euclidean"))}));return t?no(n,0):n}});function Au(e,t=!1){return ve.tidy(()=>{b(2===e.shape.length,()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`);const n=e.shape[0],r=e.shape[1];let o=Hs(n),s=lr(e);const a=vi([[1]],[1,1]);let i=lr(a);const u=n>=r?r:n;for(let e=0;e<u;++e){const t=s,u=i,l=o;[i,s,o]=ve.tidy(()=>{const t=Jr(s,[e,e],[n-e,1]),u=Wi(t),l=Jr(s,[e,e],[1,1]),c=Bt(Un(l,0),vi([[-1]]),vi([[1]])),h=Pe(l,Se(c,u)),d=De(t,h);i=1===d.shape[0]?lr(a):Vr([a,Jr(d,[1,0],[d.shape[0]-1,d.shape[1]])],0);const p=Fe(De(kt(c,h),u)),f=Jr(s,[e,0],[n-e,r]),g=Se(p,i),m=Zt(i);if(0===e)s=Pe(f,kt(g,kt(m,f)));else{const t=Pe(f,kt(g,kt(m,f)));s=Vr([Jr(s,[0,0],[e,r]),t],0)}const x=Zt(g),v=Jr(o,[0,e],[n,o.shape[1]-e]);if(0===e)o=Pe(v,kt(kt(v,i),x));else{const t=Pe(v,kt(kt(v,i),x));o=Vr([Jr(o,[0,0],[n,e]),t],1)}return[i,s,o]}),ts([t,u,l])}return!t&&n>r&&(o=Jr(o,[0,0],[n,r]),s=Jr(s,[0,0],[r,r])),[o,s]})}const Nu=ke({qr_:function(e,t=!1){if(b(e.rank>=2,()=>"qr() requires input tensor to have a rank >= 2, but got rank "+e.rank),2===e.rank)return Au(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce((e,t)=>e*t),r=wi(Qe(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),o=[],s=[];r.forEach(e=>{const[n,r]=Au(e,t);o.push(n),s.push(r)});return[Qe(no(o,0),e.shape),Qe(no(s,0),e.shape)]}}});var Tu;!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(Tu||(Tu={}));const Du=ke({computeWeightedLoss_:function(e,t,n=Tu.SUM_BY_NONZERO_WEIGHTS){const r=Re(e,"losses","computeWeightedLoss");let o=null;null!=t&&(o=Re(t,"weights","computeWeightedLoss"));const s=null==o?r:Se(r,o);if(n===Tu.NONE)return s;if(n===Tu.SUM)return at(s);if(n===Tu.MEAN){if(null==o)return fa(s);{const e=r.size/o.size,t=De(at(s),at(o));return e>1?De(t,Oe(e)):t}}if(n===Tu.SUM_BY_NONZERO_WEIGHTS){if(null==o)return De(at(s),Oe(r.size));{const e=Se(o,Xr(r.shape)),t=Ie(at(wa(e,Oe(0))),"float32");return De(at(s),t)}}throw Error("Unknown reduction: "+n)}});const Fu=ke({absoluteDifference_:function(e,t,n,r=Tu.SUM_BY_NONZERO_WEIGHTS){const o=Re(e,"labels","absoluteDifference"),s=Re(t,"predictions","absoluteDifference");let a=null;null!=n&&(a=Re(n,"weights","absoluteDifference")),y(o.shape,s.shape,"Error in absoluteDifference: ");const i=ns(Pe(o,s));return Du(i,a,r)}});const _u=ke({cosineDistance_:function(e,t,n,r,o=Tu.SUM_BY_NONZERO_WEIGHTS){const s=Re(e,"labels","cosineDistance"),a=Re(t,"predictions","cosineDistance");let i=null;null!=r&&(i=Re(r,"weights","cosineDistance")),y(s.shape,a.shape,"Error in cosineDistance: ");const u=Oe(1),l=Pe(u,at(Se(s,a),n,!0));return Du(l,i,o)}});const Ou=ke({hingeLoss_:function(e,t,n,r=Tu.SUM_BY_NONZERO_WEIGHTS){let o=Re(e,"labels","hingeLoss");const s=Re(t,"predictions","hingeLoss");let a=null;null!=n&&(a=Re(n,"weights","hingeLoss")),y(o.shape,s.shape,"Error in hingeLoss: ");const i=Oe(1);o=Pe(Se(Oe(2),o),i);const u=Ya(Pe(i,Se(o,s)));return Du(u,a,r)}});const Bu=ke({huberLoss_:function(e,t,n,r=1,o=Tu.SUM_BY_NONZERO_WEIGHTS){const s=Re(e,"labels","huberLoss"),a=Re(t,"predictions","huberLoss");let i=null;null!=n&&(i=Re(n,"weights","huberLoss")),y(s.shape,a.shape,"Error in huberLoss: ");const u=Oe(r),l=ns(Pe(a,s)),c=ma(l,u),h=Pe(l,c),d=je(Se(Oe(.5),Me(c)),Se(u,h));return Du(d,i,o)}});const Mu=ke({logLoss_:function(e,t,n,r=1e-7,o=Tu.SUM_BY_NONZERO_WEIGHTS){const s=Re(e,"labels","logLoss"),a=Re(t,"predictions","logLoss");let i=null;null!=n&&(i=Re(n,"weights","logLoss")),y(s.shape,a.shape,"Error in logLoss: ");const u=Oe(1),l=Oe(r),c=Fe(Se(s,Zn(je(a,l)))),h=Se(Pe(u,s),Zn(je(Pe(u,a),l))),d=Pe(c,h);return Du(d,i,o)}});const Pu=ke({meanSquaredError_:function(e,t,n,r=Tu.SUM_BY_NONZERO_WEIGHTS){const o=Re(e,"labels","meanSquaredError"),s=Re(t,"predictions","meanSquaredError");let a=null;null!=n&&(a=Re(n,"weights","meanSquaredError")),y(o.shape,s.shape,"Error in meanSquaredError: ");const i=fi(o,s);return Du(i,a,r)}});const Lu=ke({sigmoidCrossEntropy_:function(e,t,n,r=0,o=Tu.SUM_BY_NONZERO_WEIGHTS){let s=Re(e,"multiClassLabels","sigmoidCrossEntropy");const a=Re(t,"logits","sigmoidCrossEntropy");let i=null;if(null!=n&&(i=Re(n,"weights","sigmoidCrossEntropy")),y(s.shape,a.shape,"Error in sigmoidCrossEntropy: "),r>0){const e=Oe(r),t=Oe(1),n=Oe(.5);s=je(Se(s,Pe(t,e)),Se(n,e))}const u=function(e,t){const n=Re(e,"labels","sigmoidCrossEntropyWithLogits"),r=Re(t,"logits","sigmoidCrossEntropyWithLogits");y(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const o=Ya(r),s=Se(r,n),a=ra(ln(Fe(ns(r))));return je(Pe(o,s),a)}(s,a);return Du(u,i,o)}});const Wu=ke({softmaxCrossEntropy_:function(e,t,n,r=0,o=Tu.SUM_BY_NONZERO_WEIGHTS){let s=Re(e,"onehotLabels","softmaxCrossEntropy");const a=Re(t,"logits","softmaxCrossEntropy");let i=null;if(null!=n&&(i=Re(n,"weights","softmaxCrossEntropy")),y(s.shape,a.shape,"Error in softmaxCrossEntropy: "),r>0){const e=Oe(r),t=Oe(1),n=Oe(s.shape[1]);s=je(Se(s,Pe(t,e)),De(e,n))}const u=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was `+n);return oa((e,t,r)=>{const o=ua(t,[n],!0),s=Pe(Ie(t,"float32"),o);r([e,s]);const a=Fe(Se(s,e));return{value:at(a,[n]),gradFunc:(e,t)=>{const[r,o]=t,s=tt(e.shape,[n]);return[Se(Qe(e,s),Pe(Ie(r,"float32"),ln(o))),Se(Qe(e,s),Pe(ln(o),Ie(r,"float32")))]}}})(e,t)}(s,a);return Du(u,i,o)}}),Vu={fft:Ks,ifft:Xs,rfft:ni,irfft:Qs},Uu={hammingWindow:ru,hannWindow:ou,frame:su,stft:au},Gu={resizeNearestNeighbor:ku,resizeBilinear:Eu,rotateWithOffset:uu,cropAndResize:iu,nonMaxSuppression:cu,nonMaxSuppressionAsync:yu,nonMaxSuppressionWithScore:wu,nonMaxSuppressionWithScoreAsync:Cu,nonMaxSuppressionPadded:$u,nonMaxSuppressionPaddedAsync:Ru},zu={bandPart:Iu,gramSchmidt:Su,qr:Nu},Hu={absoluteDifference:Fu,computeWeightedLoss:Du,cosineDistance:_u,hingeLoss:Ou,huberLoss:Bu,logLoss:Mu,meanSquaredError:Pu,sigmoidCrossEntropy:Lu,softmaxCrossEntropy:Wu};var Ku=Object.freeze({__proto__:null,image:Gu,linalg:zu,losses:Hu,spectral:Vu,fused:nu,signal:Uu,abs:ns,acos:rs,acosh:os,add:je,addN:ss,all:as,any:is,argMax:us,argMin:ls,asin:cs,asinh:hs,atan:ds,atan2:ps,atanh:fs,avgPool:gs,avgPool3d:ms,basicLSTMCell:vs,batchToSpaceND:Br,batchNorm:ys,batchNorm2d:ws,batchNorm3d:Cs,batchNorm4d:$s,broadcastTo:Rs,buffer:Es,cast:Ie,ceil:ks,clipByValue:Is,clone:lr,complex:Xn,concat:Vr,concat1d:Ss,concat2d:As,concat3d:Ns,concat4d:Ts,conv1d:Ds,conv2d:zt,conv2dTranspose:Fs,conv3d:_s,conv3dTranspose:Os,cos:br,cosh:wr,cumsum:en,depthToSpace:Bs,depthwiseConv2d:Ms,diag:Ps,dilation2d:Ls,div:De,divNoNan:Ws,dot:Vs,elu:Us,equal:Dn,erf:Gs,exp:ln,expandDims:to,expm1:zs,eye:Hs,fft:Ks,fill:qs,floor:zn,floorDiv:Te,gather:io,greater:Un,greaterEqual:Ft,ifft:Xs,imag:js,irfft:Qs,isFinite:Js,isInf:Zs,isNaN:ea,leakyRelu:ta,less:On,lessEqual:_t,linspace:function(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const r={start:e,stop:t,num:n};return ve.runKernelFunc(r=>r.linspace(e,t,n),{},null,"LinSpace",r)},localResponseNormalization:na,log:Zn,log1p:ra,logSigmoid:sa,logSoftmax:ia,logSumExp:ua,logicalAnd:Ot,logicalNot:fr,logicalOr:la,logicalXor:ca,matMul:kt,max:aa,maxPool:ha,maxPool3d:da,maxPoolWithArgmax:pa,maximum:uo,mean:fa,min:ga,minimum:ma,mod:xa,moments:va,mul:Se,multiRNNCell:ba,multinomial:ya,neg:Fe,notEqual:wa,oneHot:Go,ones:Xr,onesLike:Ca,outerProduct:$a,pad:$r,pad1d:Ra,pad2d:Ea,pad3d:ka,pad4d:Ia,pool:Sa,pow:er,prelu:Aa,print:function(e,t=!1){console.log(e.toString(t))},prod:Na,rand:Ta,randomGamma:za,randomNormal:Ha,randomUniform:Ka,range:Xa,real:Ys,reciprocal:ja,relu:Ya,relu6:Qa,reshape:Qe,reverse:cr,reverse1d:Ja,reverse2d:Za,reverse3d:ei,reverse4d:ti,rfft:ni,round:ri,rsqrt:gn,scalar:Oe,selu:oi,separableConv2d:si,setdiff1dAsync:ai,sigmoid:_r,sign:ii,sin:jt,sinh:Qt,slice:Jr,slice1d:ui,slice2d:li,slice3d:ci,slice4d:hi,softmax:di,softplus:pi,spaceToBatchND:St,split:Lt,sqrt:Be,square:Me,squaredDifference:fi,squeeze:gi,stack:no,step:Ae,stridedSlice:mi,sub:Pe,sum:at,tan:xi,tanh:xs,tensor:Wr,tensor1d:qa,tensor2d:vi,tensor3d:zo,tensor4d:function(e,t,n){if(w(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const r=Ce(e,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return _e(e,t,r,n)},tensor5d:function(e,t,n){if(w(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const r=Ce(e,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return _e(e,t,r,n)},tensor6d:function(e,t,n){if(w(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const r=Ce(e,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return _e(e,t=t||r,r,n)},tile:mn,topk:bi,truncatedNormal:yi,unsortedSegmentSum:vn,unstack:wi,variable:function(e,t=!0,n,r){return ve.makeVariable(e,t,n,r)},where:Bt,whereAsync:$i,zeros:jn,zerosLike:He,op:ke,booleanMaskAsync:Ri,equalStrict:Ei,greaterEqualStrict:ki,greaterStrict:Ii,lessEqualStrict:Si,lessStrict:Ai,notEqualStrict:Ni,addStrict:Ti,divStrict:Di,maximumStrict:Fi,minimumStrict:_i,modStrict:Oi,mulStrict:Bi,powStrict:Mi,squaredDifferenceStrict:Pi,subStrict:Li,transpose:Zt,norm:Wi,movingAverage:Vi,scatterND:Ui,sparseToDense:Gi,gatherND:zi,dropout:Hi,enclosingPowerOfTwo:Ki,cosineWindow:qi,inTopKAsync:Xi});class qu extends class{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}{minimize(e,t=!1,n){const{value:r,grads:o}=this.computeGradients(e,n);if(null!=n){const e=n.map(e=>({name:e.name,tensor:o[e.name]}));this.applyGradients(e)}else this.applyGradients(o);return ts(o),t?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return function(e,t){b(M(e),()=>"The f passed in variableGrads(f) must be a function"),b(null==t||Array.isArray(t)&&t.every(e=>e instanceof se),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");const n=null!=t;if(!n){t=[];for(const e in ve.registeredVariables)t.push(ve.registeredVariables[e])}const r=n?t.filter(e=>!e.trainable):null,o=t.length;b((t=t.filter(e=>e.trainable)).length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${o} variables is trainable.`);const{value:s,grads:a}=ve.gradients(e,t,null,!0);b(a.some(e=>null!=e),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),b(0===s.rank,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${s.rank} tensor`);const i={};return t.forEach((e,t)=>{null!=a[t]&&(i[e.name]=a[t])}),null!=r&&r.forEach(e=>i[e.name]=null),{value:s,grads:i}}(e,t)}dispose(){null!=this.iterations_&&ts(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:Oe(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for this optimizer class "+this.getClassName())}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(qu,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class Xu extends qu{constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=ve.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const r=ve.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:t+"/accum_grad",variable:es(()=>He(r).variable(!1))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:t+"/accum_var",variable:es(()=>He(r).variable(!1))});const o=Array.isArray(e)?e[n].tensor:e[t];if(null==o)return;const s=this.accumulatedGrads[n].variable,a=this.accumulatedUpdates[n].variable;es(()=>{const e=s.mul(this.rho).add(o.square().mul(1-this.rho)),t=a.add(this.epsilon).sqrt().div(s.add(this.epsilon).sqrt()).mul(o),n=a.mul(this.rho).add(t.square().mul(1-this.rho));s.assign(e),a.assign(n);const i=t.mul(-this.learningRate).add(r);r.assign(i)})}),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(ts(this.accumulatedGrads.map(e=>e.variable)),ts(this.accumulatedUpdates.map(e=>e.variable)))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.accumulatedUpdates=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}Xu.className="Adadelta",Qo(Xu);class ju extends qu{constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const r=ve.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:t+"/accumulator",variable:es(()=>qs(r.shape,this.initialAccumulatorValue).variable(e))}}const o=Array.isArray(e)?e[n].tensor:e[t];if(null==o)return;const s=this.accumulatedGrads[n].variable;es(()=>{const e=s.add(o.square());s.assign(e);const t=o.div(e.add(ve.backend.epsilon()).sqrt()).mul(-this.learningRate).add(r);r.assign(t)})}),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&ts(this.accumulatedGrads.map(e=>e.variable))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e);this.accumulatedGrads=e.map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}ju.className="Adagrad",Qo(ju);class Yu extends qu{constructor(e,t,n,r=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],es(()=>{this.accBeta1=Oe(t).variable(),this.accBeta2=Oe(n).variable()}),null==r&&(this.epsilon=ve.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);es(()=>{const n=Pe(1,this.accBeta1),r=Pe(1,this.accBeta2);t.forEach((t,o)=>{const s=ve.registeredVariables[t];null==this.accumulatedFirstMoment[o]&&(this.accumulatedFirstMoment[o]={originalName:t+"/m",variable:es(()=>He(s).variable(!1))}),null==this.accumulatedSecondMoment[o]&&(this.accumulatedSecondMoment[o]={originalName:t+"/v",variable:es(()=>He(s).variable(!1))});const a=Array.isArray(e)?e[o].tensor:e[t];if(null==a)return;const i=this.accumulatedFirstMoment[o].variable,u=this.accumulatedSecondMoment[o].variable,l=i.mul(this.beta1).add(a.mul(1-this.beta1)),c=u.mul(this.beta2).add(a.square().mul(1-this.beta2)),h=l.div(n),d=c.div(r);i.assign(l),u.assign(c);const p=h.div(d.sqrt().add(this.epsilon)).mul(-this.learningRate).add(s);s.assign(p)}),this.accBeta1.assign(this.accBeta1.mul(this.beta1)),this.accBeta2.assign(this.accBeta2.mul(this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&ts(this.accumulatedFirstMoment.map(e=>e.variable)),null!=this.accumulatedSecondMoment&&ts(this.accumulatedSecondMoment.map(e=>e.variable))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e),es(()=>{this.accBeta1.assign(er(this.beta1,this.iterations_+1)),this.accBeta2.assign(er(this.beta2,this.iterations_+1))});const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.accumulatedSecondMoment=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}Yu.className="Adam",Qo(Yu);class Qu extends qu{constructor(e,t,n,r=null,o=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.decay=o,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],es(()=>{this.iteration=Oe(0).variable(),this.accBeta1=Oe(t).variable()}),null==r&&(this.epsilon=ve.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);es(()=>{const n=Pe(1,this.accBeta1),r=De(-this.learningRate,this.iteration.mul(this.decay).add(1));t.forEach((t,o)=>{const s=ve.registeredVariables[t];null==this.accumulatedFirstMoment[o]&&(this.accumulatedFirstMoment[o]={originalName:t+"/m",variable:He(s).variable(!1)}),null==this.accumulatedWeightedInfNorm[o]&&(this.accumulatedWeightedInfNorm[o]={originalName:t+"/v",variable:He(s).variable(!1)});const a=Array.isArray(e)?e[o].tensor:e[t];if(null==a)return;const i=this.accumulatedFirstMoment[o].variable,u=this.accumulatedWeightedInfNorm[o].variable,l=i.mul(this.beta1).add(a.mul(1-this.beta1)),c=u.mul(this.beta2),h=a.abs(),d=c.maximum(h);i.assign(l),u.assign(d);const p=r.div(n).mul(l.div(d.add(this.epsilon))).add(s);s.assign(p)}),this.iteration.assign(this.iteration.add(1)),this.accBeta1.assign(this.accBeta1.mul(this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&ts(this.accumulatedFirstMoment.map(e=>e.variable)),null!=this.accumulatedWeightedInfNorm&&ts(this.accumulatedWeightedInfNorm.map(e=>e.variable))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}Qu.className="Adamax",Qo(Qu);class Ju extends qu{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const o=ve.registeredVariables[t];es(()=>{const e=this.c.mul(r).add(o);o.assign(e)})}),this.incrementIterations()}setLearningRate(e){var t;this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=(t=Oe(-e),ve.keep(t))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}Ju.className="SGD",Qo(Ju);class Zu extends Ju{constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=Oe(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const r=ve.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:t+"/momentum",variable:es(()=>He(r).variable(e))}}const o=this.accumulations[n].variable,s=Array.isArray(e)?e[n].tensor:e[t];null!=s&&es(()=>{let e;const t=this.m.mul(o).add(s);e=this.useNesterov?this.c.mul(s.add(t.mul(this.m))).add(r):this.c.mul(t).add(r),o.assign(t),r.assign(e)})}),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&ts(this.accumulations.map(e=>e.variable))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e);this.accumulations=e.map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}Zu.className="Momentum",Qo(Zu);class el extends qu{constructor(e,t=.9,n=0,r=null,o=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=o,null==r&&(this.epsilon=ve.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const r=ve.registeredVariables[t];null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:t+"/rms",variable:es(()=>He(r).variable(!1))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:t+"/momentum",variable:es(()=>He(r).variable(!1))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:t+"/mg",variable:es(()=>He(r).variable(!1))});const o=Array.isArray(e)?e[n].tensor:e[t];if(null==o)return;const s=this.accumulatedMeanSquares[n].variable,a=this.accumulatedMoments[n].variable;es(()=>{const e=s.mul(this.decay).add(o.square().mul(1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,i=t.mul(this.decay).add(o.mul(1-this.decay)),u=a.mul(this.momentum).add(o.mul(this.learningRate).div(e.sub(i.square().add(this.epsilon)).sqrt()));s.assign(e),t.assign(i),a.assign(u);const l=r.sub(u);r.assign(l)}else{const e=s.mul(this.decay).add(o.square().mul(1-this.decay)),t=a.mul(this.momentum).add(o.mul(this.learningRate).div(e.add(this.epsilon).sqrt()));s.assign(e),a.assign(t);const n=r.sub(t);r.assign(n)}})}),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&ts(this.accumulatedMeanSquares.map(e=>e.variable)),null!=this.accumulatedMeanGrads&&this.centered&&ts(this.accumulatedMeanGrads.map(e=>e.variable)),null!=this.accumulatedMoments&&ts(this.accumulatedMoments.map(e=>e.variable))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2;this.accumulatedMeanSquares=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.accumulatedMoments=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}el.className="RMSProp",Qo(el);"undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate&&setImmediate;function tl(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}function nl(e,t,n,r=!0){let o=[];if(r)o=o.concat(t.slice(0)),o.push(e[0]/n),o=o.concat(e.slice(1));else{o=o.concat(e[0]);const n=t.length;for(let r=0;r<n;++r)o=o.concat([e[r+1]/t[r],t[r]]);o=o.concat(e.slice(n+1))}return o}function rl(e,t,n=!0){const r=[];if(n){r.push(t);for(let n=t+1;n<e;++n)n<=2*t?(r.push(n),r.push(n-(t+1))):r.push(n)}else{const n=[],o=[];for(let r=1;r<e;++r)r>=2*t+1||r%2==1?o.push(r):n.push(r);r.push(...n),r.push(0),r.push(...o)}return r}function ol(e,t,n,r=!0){const o=[];r?o.push(e[0]/n):o.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?r?o.push(t[n-1]*e[n]):o.push(e[n]/t[n-1]):o.push(e[n]);return o}function sl(e,t){const n=[0];for(let r=0;r<t;++r)n.push(e[r][0]);return n}function al(e,t,n){const r=e.slice(0,1);for(let o=0;o<n;++o)r.push(e[o+1]-t[o][0]-t[o][1]);return r}function il(...e){o().getBool("IS_TEST")||console.warn(...e)}function ul(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let r=0;r<n.length;r+=2)n[r]=e[r/2],n[r+1]=t[r/2];return n}function ll(e,t,n){if("complex64"===t){if("complex64"===e.dtype)return e.clone();const t=jn(e.shape),r=e.toFloat(),o=n.complex(r,t);return t.dispose(),r.dispose(),o}if(r=e.dtype,"complex64"===(o=t)||"float32"===o&&"complex64"!==r||"int32"===o&&"float32"!==r&&"complex64"!==r||"bool"===o&&"bool"===r)return ve.makeTensorFromDataId(e.dataId,e.shape,t);var r,o;if("complex64"===e.dtype){const r=n.real(e),o=r.cast(t);return r.dispose(),o}if("int32"===t)return n.int(e);if("bool"===t){const t=Oe(0,e.dtype),r=n.notEqual(e,t);return t.dispose(),r}throw new Error(`Error in Cast: failed to cast ${e.dtype} to ${t}`)}function cl(e,t){return ve.makeTensorFromDataId(e.dataId,t,e.dtype)}function hl(e,t,n){const r=(t-e)/(n-1),o=G(n,"float32");o[0]=e;for(let e=1;e<o.length;e++)o[e]=o[e-1]+r;return qa(o,"float32")}var dl=Object.freeze({__proto__:null,segment_util:ao,castTensor:ll,reshapeTensor:cl,linspaceImpl:hl,upcastType:de,axesAreInnerMostDims:Je,combineLocations:Ze,computeOutAndReduceShapes:et,expandShapeToKeepDim:tt,assertAxesAreInnerMostDims:nt,getAxesPermutation:rt,getUndoAxesPermutation:ot,getInnerMostAxes:st,getBroadcastDims:function(e,t){const n=e.length,r=[];for(let o=0;o<n;o++){const s=n-1-o,a=e[s]||1;(t[t.length-1-o]||1)>1&&1===a&&r.unshift(s)}return r},getReductionAxes:Ve,assertAndGetBroadcastShape:Ue,assertParamsConsistent:Pr,computeOutShape:Lr,computeDilation2DInfo:function(e,t,n,r,o="NHWC",s){return dt(e,[...t,e[3]],n,s,r,null,null,wt(o))},computePool2DInfo:ct,computePool3DInfo:ht,computeConv2DInfo:dt,computeConv3DInfo:pt,computeDefaultPad:ft,tupleValuesAreOne:bt,eitherStridesOrDilationsAreOne:yt,convertConv2DDataFormat:wt,getFusedDyActivation:ji,getFusedBiasGradient:Yi,applyActivation:Qi,shouldFuse:Ji,PARALLELIZE_THRESHOLD:30,computeOptimalWindowSize:oo,getImageCenter:tl,getReshaped:nl,getPermuted:rl,getReshapedPermuted:ol,getSliceBeginCoords:sl,getSliceSize:al,prepareAndValidate:Ko,validateUpdateShape:qo,validateInput:Xo,calculateShapes:jo,SELU_SCALEALPHA:1.7580993408473768,SELU_SCALE:1.0507009873554805,ERF_P:.3275911,ERF_A1:.254829592,ERF_A2:-.284496736,ERF_A3:1.421413741,ERF_A4:-1.453152027,ERF_A5:1.061405429,warn:il,log:function(...e){o().getBool("IS_TEST")||console.log(...e)},mergeRealAndImagArrays:ul,splitRealAndImagArrays:function(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let r=0;r<e.length;r+=2)t[r/2]=e[r],n[r/2]=e[r+1];return{real:t,imag:n}},complexWithEvenIndex:function(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}},complexWithOddIndex:function(e){const t=Math.floor(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}},getComplexWithIndex:function(e,t){return{real:e[2*t],imag:e[2*t+1]}},assignToTypedArray:function(e,t,n,r){e[2*r]=t,e[2*r+1]=n},exponents:function(e,t){const n=new Float32Array(e/2),r=new Float32Array(e/2);for(let o=0;o<Math.ceil(e/2);o++){const s=(t?2:-2)*Math.PI*(o/e);n[o]=Math.cos(s),r[o]=Math.sin(s)}return{real:n,imag:r}},exponent:function(e,t,n){const r=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(r),imag:Math.sin(r)}},prepareSplitSize:Pt});class pl{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}function fl(e){throw new Error(`'${e}' not yet implemented or not found in the registry. Did you forget to import the kernel?`)}oe.prototype.abs=function(){return this.throwIfDisposed(),ns(this)},oe.prototype.acos=function(){return this.throwIfDisposed(),rs(this)},oe.prototype.acosh=function(){return this.throwIfDisposed(),os(this)},oe.prototype.addStrict=function(e){return this.throwIfDisposed(),Ti(this,e)},oe.prototype.add=function(e){return this.throwIfDisposed(),je(this,e)},oe.prototype.all=function(e,t){return this.throwIfDisposed(),as(this,e,t)},oe.prototype.any=function(e,t){return this.throwIfDisposed(),is(this,e,t)},oe.prototype.argMax=function(e){return this.throwIfDisposed(),us(this,e)},oe.prototype.argMin=function(e){return this.throwIfDisposed(),ls(this,e)},oe.prototype.asScalar=function(){return this.throwIfDisposed(),b(1===this.size,()=>"The array must have only 1 element."),Qe(this,[])},oe.prototype.asType=function(e){return this.throwIfDisposed(),Ie(this,e)},oe.prototype.as1D=function(){return this.throwIfDisposed(),Qe(this,[this.size])},oe.prototype.as2D=function(e,t){return this.throwIfDisposed(),Qe(this,[e,t])},oe.prototype.as3D=function(e,t,n){return this.throwIfDisposed(),Qe(this,[e,t,n])},oe.prototype.as4D=function(e,t,n,r){return this.throwIfDisposed(),Qe(this,[e,t,n,r])},oe.prototype.as5D=function(e,t,n,r,o){return this.throwIfDisposed(),Qe(this,[e,t,n,r,o])},oe.prototype.asin=function(){return this.throwIfDisposed(),cs(this)},oe.prototype.asinh=function(){return this.throwIfDisposed(),hs(this)},oe.prototype.atan=function(){return this.throwIfDisposed(),ds(this)},oe.prototype.atan2=function(e){return this.throwIfDisposed(),ps(this,e)},oe.prototype.atanh=function(){return this.throwIfDisposed(),fs(this)},oe.prototype.avgPool=function(e,t,n,r){return this.throwIfDisposed(),gs(this,e,t,n,r)},oe.prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),Br(this,e,t)},oe.prototype.batchNorm=function(e,t,n,r,o){return this.throwIfDisposed(),ys(this,e,t,n,r,o)},oe.prototype.broadcastTo=function(e){return this.throwIfDisposed(),Rs(this,e)},oe.prototype.cast=function(e){return this.throwIfDisposed(),Ie(this,e)},oe.prototype.ceil=function(){return this.throwIfDisposed(),ks(this)},oe.prototype.clipByValue=function(e,t){return this.throwIfDisposed(),Is(this,e,t)},oe.prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof oe&&(e=[e]),Vr([this,...e],t)},oe.prototype.conv1d=function(e,t,n,r,o,s){return this.throwIfDisposed(),Ds(this,e,t,n,r,o,s)},oe.prototype.conv2dTranspose=function(e,t,n,r,o){return this.throwIfDisposed(),Fs(this,e,t,n,r,o)},oe.prototype.conv2d=function(e,t,n,r,o,s){return this.throwIfDisposed(),zt(this,e,t,n,r,o,s)},oe.prototype.cos=function(){return this.throwIfDisposed(),br(this)},oe.prototype.cosh=function(){return this.throwIfDisposed(),wr(this)},oe.prototype.cumsum=function(e,t,n){return this.throwIfDisposed(),en(this,e,t,n)},oe.prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),Bs(this,e,t)},oe.prototype.depthwiseConv2D=function(e,t,n,r,o,s){return Jo("depthwiseConv2D is deprecated, use depthwiseConv2d instead"),this.throwIfDisposed(),Ms(this,e,t,n,r,o,s)},oe.prototype.depthwiseConv2d=function(e,t,n,r,o,s){return this.throwIfDisposed(),Ms(this,e,t,n,r,o,s)},oe.prototype.dilation2d=function(e,t,n,r,o){return this.throwIfDisposed(),Ls(this,e,t,n,r,o)},oe.prototype.divNoNan=function(e){return this.throwIfDisposed(),Ws(this,e)},oe.prototype.divStrict=function(e){return this.throwIfDisposed(),Di(this,e)},oe.prototype.div=function(e){return this.throwIfDisposed(),De(this,e)},oe.prototype.dot=function(e){return this.throwIfDisposed(),Vs(this,e)},oe.prototype.elu=function(){return this.throwIfDisposed(),Us(this)},oe.prototype.equalStrict=function(e){return this.throwIfDisposed(),Ei(this,e)},oe.prototype.equal=function(e){return this.throwIfDisposed(),Dn(this,e)},oe.prototype.erf=function(){return this.throwIfDisposed(),Gs(this)},oe.prototype.exp=function(){return this.throwIfDisposed(),ln(this)},oe.prototype.expandDims=function(e){return this.throwIfDisposed(),to(this,e)},oe.prototype.expm1=function(){return this.throwIfDisposed(),zs(this)},oe.prototype.fft=function(){return this.throwIfDisposed(),Ks(this)},oe.prototype.flatten=function(){return this.throwIfDisposed(),Qe(this,[this.size])},oe.prototype.floor=function(){return this.throwIfDisposed(),zn(this)},oe.prototype.floorDiv=function(e){return this.throwIfDisposed(),Te(this,e)},oe.prototype.gather=function(e,t){return this.throwIfDisposed(),io(this,e,t)},oe.prototype.greaterEqualStrict=function(e){return this.throwIfDisposed(),ki(this,e)},oe.prototype.greaterEqual=function(e){return this.throwIfDisposed(),Ft(this,e)},oe.prototype.greaterStrict=function(e){return this.throwIfDisposed(),Ii(this,e)},oe.prototype.greater=function(e){return this.throwIfDisposed(),Un(this,e)},oe.prototype.ifft=function(){return this.throwIfDisposed(),Xs(this)},oe.prototype.irfft=function(){return this.throwIfDisposed(),Qs(this)},oe.prototype.isFinite=function(){return this.throwIfDisposed(),Js(this)},oe.prototype.isInf=function(){return this.throwIfDisposed(),Zs(this)},oe.prototype.isNaN=function(){return this.throwIfDisposed(),ea(this)},oe.prototype.leakyRelu=function(e){return this.throwIfDisposed(),ta(this,e)},oe.prototype.lessEqualStrict=function(e){return this.throwIfDisposed(),Si(this,e)},oe.prototype.lessEqual=function(e){return this.throwIfDisposed(),_t(this,e)},oe.prototype.lessStrict=function(e){return this.throwIfDisposed(),Ai(this,e)},oe.prototype.less=function(e){return this.throwIfDisposed(),On(this,e)},oe.prototype.localResponseNormalization=function(e,t,n,r){return this.throwIfDisposed(),na(this,e,t,n,r)},oe.prototype.logSigmoid=function(){return this.throwIfDisposed(),sa(this)},oe.prototype.logSoftmax=function(e){return this.throwIfDisposed(),ia(this,e)},oe.prototype.logSumExp=function(e,t){return this.throwIfDisposed(),ua(this,e,t)},oe.prototype.log=function(){return this.throwIfDisposed(),Zn(this)},oe.prototype.log1p=function(){return this.throwIfDisposed(),ra(this)},oe.prototype.logicalAnd=function(e){return this.throwIfDisposed(),Ot(this,e)},oe.prototype.logicalNot=function(){return this.throwIfDisposed(),fr(this)},oe.prototype.logicalOr=function(e){return this.throwIfDisposed(),la(this,e)},oe.prototype.logicalXor=function(e){return this.throwIfDisposed(),ca(this,e)},oe.prototype.matMul=function(e,t,n){return this.throwIfDisposed(),kt(this,e,t,n)},oe.prototype.maxPool=function(e,t,n,r){return this.throwIfDisposed(),ha(this,e,t,n,r)},oe.prototype.max=function(e,t){return this.throwIfDisposed(),aa(this,e,t)},oe.prototype.maximumStrict=function(e){return this.throwIfDisposed(),Fi(this,e)},oe.prototype.maximum=function(e){return this.throwIfDisposed(),uo(this,e)},oe.prototype.mean=function(e,t){return this.throwIfDisposed(),fa(this,e,t)},oe.prototype.min=function(e,t){return this.throwIfDisposed(),ga(this,e,t)},oe.prototype.minimumStrict=function(e){return this.throwIfDisposed(),_i(this,e)},oe.prototype.minimum=function(e){return this.throwIfDisposed(),ma(this,e)},oe.prototype.modStrict=function(e){return this.throwIfDisposed(),Oi(this,e)},oe.prototype.mod=function(e){return this.throwIfDisposed(),xa(this,e)},oe.prototype.mulStrict=function(e){return this.throwIfDisposed(),Bi(this,e)},oe.prototype.mul=function(e){return this.throwIfDisposed(),Se(this,e)},oe.prototype.neg=function(){return this.throwIfDisposed(),Fe(this)},oe.prototype.norm=function(e,t,n){return this.throwIfDisposed(),Wi(this,e,t,n)},oe.prototype.notEqualStrict=function(e){return this.throwIfDisposed(),Ni(this,e)},oe.prototype.notEqual=function(e){return this.throwIfDisposed(),wa(this,e)},oe.prototype.oneHot=function(e,t=1,n=0){return this.throwIfDisposed(),Go(this,e,t,n)},oe.prototype.onesLike=function(){return this.throwIfDisposed(),Ca(this)},oe.prototype.pad=function(e,t){return this.throwIfDisposed(),$r(this,e,t)},oe.prototype.pool=function(e,t,n,r,o){return this.throwIfDisposed(),Sa(this,e,t,n,r,o)},oe.prototype.powStrict=function(e){return this.throwIfDisposed(),Mi(this,e)},oe.prototype.pow=function(e){return this.throwIfDisposed(),er(this,e)},oe.prototype.prelu=function(e){return this.throwIfDisposed(),Aa(this,e)},oe.prototype.prod=function(e,t){return this.throwIfDisposed(),Na(this,e,t)},oe.prototype.reciprocal=function(){return this.throwIfDisposed(),ja(this)},oe.prototype.relu=function(){return this.throwIfDisposed(),Ya(this)},oe.prototype.relu6=function(){return this.throwIfDisposed(),Qa(this)},oe.prototype.reshapeAs=function(e){return this.throwIfDisposed(),Qe(this,e.shape)},oe.prototype.reshape=function(e){return this.throwIfDisposed(),Qe(this,e)},oe.prototype.resizeBilinear=function(e,t){return this.throwIfDisposed(),Eu(this,e,t)},oe.prototype.resizeNearestNeighbor=function(e,t){return this.throwIfDisposed(),ku(this,e,t)},oe.prototype.reverse=function(e){return this.throwIfDisposed(),cr(this,e)},oe.prototype.rfft=function(){return this.throwIfDisposed(),ni(this)},oe.prototype.round=function(){return this.throwIfDisposed(),ri(this)},oe.prototype.rsqrt=function(){return this.throwIfDisposed(),gn(this)},oe.prototype.selu=function(){return this.throwIfDisposed(),oi(this)},oe.prototype.separableConv2d=function(e,t,n,r,o,s){return this.throwIfDisposed(),si(this,e,t,n,r,o,s)},oe.prototype.sigmoid=function(){return this.throwIfDisposed(),_r(this)},oe.prototype.sign=function(){return this.throwIfDisposed(),ii(this)},oe.prototype.sin=function(){return this.throwIfDisposed(),jt(this)},oe.prototype.sinh=function(){return this.throwIfDisposed(),Qt(this)},oe.prototype.slice=function(e,t){return this.throwIfDisposed(),Jr(this,e,t)},oe.prototype.softmax=function(e){return this.throwIfDisposed(),di(this,e)},oe.prototype.softplus=function(){return this.throwIfDisposed(),pi(this)},oe.prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),St(this,e,t)},oe.prototype.split=function(e,t){return this.throwIfDisposed(),Lt(this,e,t)},oe.prototype.sqrt=function(){return this.throwIfDisposed(),Be(this)},oe.prototype.square=function(){return this.throwIfDisposed(),Me(this)},oe.prototype.squaredDifference=function(e){return this.throwIfDisposed(),fi(this,e)},oe.prototype.squaredDifferenceStrict=function(e){return this.throwIfDisposed(),Pi(this,e)},oe.prototype.squeeze=function(e){return this.throwIfDisposed(),gi(this,e)},oe.prototype.stack=function(e,t){this.throwIfDisposed();const n=e instanceof oe?[this,e]:[this,...e];return no(n,t)},oe.prototype.step=function(e){return this.throwIfDisposed(),Ae(this,e)},oe.prototype.stridedSlice=function(e,t,n,r,o,s,a,i){return this.throwIfDisposed(),mi(this,e,t,n,r,o,s,a,i)},oe.prototype.subStrict=function(e){return this.throwIfDisposed(),Li(this,e)},oe.prototype.sub=function(e){return this.throwIfDisposed(),Pe(this,e)},oe.prototype.sum=function(e,t){return this.throwIfDisposed(),at(this,e,t)},oe.prototype.tan=function(){return this.throwIfDisposed(),xi(this)},oe.prototype.tanh=function(){return this.throwIfDisposed(),xs(this)},oe.prototype.tile=function(e){return this.throwIfDisposed(),mn(this,e)},oe.prototype.toBool=function(){return this.throwIfDisposed(),Ie(this,"bool")},oe.prototype.toFloat=function(){return this.throwIfDisposed(),Ie(this,"float32")},oe.prototype.toInt=function(){return this.throwIfDisposed(),Ie(this,"int32")},oe.prototype.topk=function(e,t){return this.throwIfDisposed(),bi(this,e,t)},oe.prototype.transpose=function(e){return this.throwIfDisposed(),Zt(this,e)},oe.prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),vn(this,e,t)},oe.prototype.unstack=function(e){return this.throwIfDisposed(),wi(this,e)},oe.prototype.where=function(e,t){return this.throwIfDisposed(),Bt(e,this,t)},oe.prototype.zerosLike=function(){return this.throwIfDisposed(),He(this)},re=Ku;const gl={},ml={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function xl(e){e in gl||(gl[e]=function(e){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const t=function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e);if(t.addEventListener("webglcontextlost",t=>{t.preventDefault(),delete gl[e]},!1),1===e)return t.getContext("webgl",ml)||t.getContext("experimental-webgl",ml);return t.getContext("webgl2",ml)}(e));const t=gl[e];return t.isContextLost()?(delete gl[e],xl(e)):(t.disable(t.DEPTH_TEST),t.disable(t.STENCIL_TEST),t.disable(t.BLEND),t.disable(t.DITHER),t.disable(t.POLYGON_OFFSET_FILL),t.disable(t.SAMPLE_COVERAGE),t.enable(t.SCISSOR_TEST),t.enable(t.CULL_FACE),t.cullFace(t.BACK),gl[e])}var vl,bl,yl;function wl(e,t){return[t,e]}function Cl(e){const t=$(e);return k(Math.ceil(t/4))}function $l(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function Rl(e,t){const n=e;let r,s,a,i,u,l,c,h,d,p;return 2===o().getNumber("WEBGL_VERSION")?(r=n.R32F,s=n.R16F,a=n.RGBA16F,i=n.RGBA32F,u=n.RED,c=4,h=1,d=n.HALF_FLOAT,p=n.FLOAT):(r=e.RGBA,s=e.RGBA,a=e.RGBA,i=n.RGBA,u=e.RGBA,c=4,h=4,d=null!=t?t.HALF_FLOAT_OES:null,p=e.FLOAT),l=e.RGBA,{internalFormatFloat:r,internalFormatHalfFloat:s,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:i,textureFormatFloat:u,downloadTextureFormat:l,downloadUnpackNumChannels:c,defaultNumChannels:h,textureTypeHalfFloat:d,textureTypeFloat:p}}function El(e,t){const n=t();return o().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return"Unknown error code "+t}}(e,t))}(e),n}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(vl||(vl={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(bl||(bl={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(yl||(yl={}));function kl(e){return!!(o().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function Il(e,t){return Bl(e,()=>e.getExtension(t),'Extension "'+t+'" not supported on this browser.')}function Sl(e,t){const n=Bl(e,()=>e.createShader(e.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(El(e,()=>e.shaderSource(n,t)),El(e,()=>e.compileShader(n)),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw function(e,t){const n=Al.exec(t);if(null==n)return console.log("Couldn't parse line number in error: "+t),void console.log(e);const r=+n[1],o=e.split("\n"),s=o.length.toString().length+2,a=o.map((e,t)=>I((t+1).toString(),s)+e);let i=0;for(let e=0;e<a.length;e++)i=Math.max(a[e].length,i);const u=a.slice(0,r-1),l=a.slice(r-1,r),c=a.slice(r);console.log(u.join("\n")),console.log(t.split("\n")[0]),console.log("%c "+I(l[0],i),"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}const Al=/ERROR: [0-9]+:([0-9]+):/g;function Nl(e,t){if(El(e,()=>e.validateProgram(t)),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function Tl(e,t,n,r,o,s,a){const i=e.getAttribLocation(t,n);return-1!==i&&(El(e,()=>e.bindBuffer(e.ARRAY_BUFFER,r)),El(e,()=>e.vertexAttribPointer(i,o,e.FLOAT,!1,s,a)),El(e,()=>e.enableVertexAttribArray(i)),!0)}function Dl(e,t,n){!function(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=t+e.TEXTURE0;if(r<e.TEXTURE0||r>n){throw new Error(`textureUnit must be in ${`[gl.TEXTURE0, gl.TEXTURE${n}]`}.`)}}(e,n),El(e,()=>e.activeTexture(e.TEXTURE0+n)),El(e,()=>e.bindTexture(e.TEXTURE_2D,t))}function Fl(e,t,n){El(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,n)),El(e,()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0))}function _l(e,t){El(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,t)),El(e,()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0))}function Ol(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return"unknown error "+t}}(e,t))}function Bl(e,t,n){const r=El(e,()=>t());if(null==r)throw new Error(n);return r}function Ml(e,t=2){return $(e.slice(0,e.length-t))}function Pl(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function Ll(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[Ml(e),...Pl(e)]),t}function Wl(e){return e%2==0}function Vl(e,t){if(R(e=e.slice(-2),t=t.slice(-2)))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e.slice(-1)[0],r=t.slice(-1)[0];if(n===r)return!0;if(Wl(n)&&Wl(r)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&Wl(e[0])&&Wl(t[0])}let Ul,Gl;function zl(e,t){return null!=e.getExtension(t)}function Hl(e){try{if(null!=xl(e))return!0}catch(e){return!1}return!1}function Kl(e){if(0===e)return!1;const t=xl(e);if(1!==e){if(zl(t,"EXT_color_buffer_float"))return ql(t);const e="EXT_color_buffer_half_float";if(zl(t,e)){const n=t.getExtension(e);return function(e,t){const n=Rl(e,t),r=e.createTexture();e.bindTexture(e.TEXTURE_2D,r);e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const o=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,o),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,r,0);const s=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(r),e.deleteFramebuffer(o),s}(t,n)}return!1}if(!zl(t,"OES_texture_float"))return!1;if(!zl(t,"WEBGL_color_buffer_float"))return!1;return ql(t)}function ql(e){const t=Rl(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n);e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const r=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,r),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const o=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(r),o}const Xl=o();Xl.registerFlag("HAS_WEBGL",()=>Xl.getNumber("WEBGL_VERSION")>0),Xl.registerFlag("WEBGL_VERSION",()=>Hl(2)?2:Hl(1)?1:0),Xl.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1),Xl.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>2===Xl.get("WEBGL_VERSION")),Xl.registerFlag("WEBGL_CPU_FORWARD",()=>!0),Xl.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1),Xl.registerFlag("WEBGL_PACK",()=>Xl.getBool("HAS_WEBGL")),Xl.registerFlag("WEBGL_PACK_NORMALIZATION",()=>Xl.getBool("WEBGL_PACK")),Xl.registerFlag("WEBGL_PACK_CLIP",()=>Xl.getBool("WEBGL_PACK")),Xl.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>!1),Xl.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>Xl.getBool("WEBGL_PACK")),Xl.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>Xl.getBool("WEBGL_PACK")),Xl.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>Xl.getBool("WEBGL_PACK")),Xl.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>Xl.getBool("WEBGL_PACK")),Xl.registerFlag("WEBGL_PACK_REDUCE",()=>Xl.getBool("WEBGL_PACK")),Xl.registerFlag("WEBGL_LAZILY_UNPACK",()=>Xl.getBool("WEBGL_PACK")),Xl.registerFlag("WEBGL_CONV_IM2COL",()=>Xl.getBool("WEBGL_PACK")),Xl.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>function(e){if(null==Ul){const t=xl(e);Ul=t.getParameter(t.MAX_TEXTURE_SIZE)}return Ul}(Xl.getNumber("WEBGL_VERSION"))),Xl.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>function(e){if(null==Gl){const t=xl(e);Gl=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,Gl)}(Xl.getNumber("WEBGL_VERSION"))),Xl.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{const e=Xl.getNumber("WEBGL_VERSION");return 0===e?0:function(e){if(0===e)return 0;let t;const n=xl(e);return t=zl(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:zl(n,"EXT_disjoint_timer_query")?1:0,t}(e)}),Xl.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>Xl.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!be()),Xl.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>function(e){if(0===e)return!1;const t=xl(e);if(1===e){if(!zl(t,"OES_texture_float"))return!1}else if(!zl(t,"EXT_color_buffer_float"))return!1;return ql(t)}(Xl.getNumber("WEBGL_VERSION"))),Xl.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>!Xl.getBool("WEBGL_FORCE_F16_TEXTURES")&&Xl.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")),Xl.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>Kl(Xl.getNumber("WEBGL_VERSION"))),Xl.registerFlag("WEBGL_FENCE_API_ENABLED",()=>{return 2===(e=Xl.getNumber("WEBGL_VERSION"))&&null!=xl(e).fenceSync;var e}),Xl.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>Xl.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0),Xl.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)});class jl{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map((e,t)=>"T"+t);const n=[];this.variableNames.forEach(e=>{n.push(`float v${e} = get${e}AtOutCoords();`)});const r=this.variableNames.map(e=>"v"+e).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `}}class Yl{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map((e,t)=>"T"+t);const n=[];this.variableNames.forEach(e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)});const r=this.variableNames.map(e=>"v"+e).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `}}class Ql{constructor(e,t,n){this.variableNames=["A"];const r=e.windowSize,o=e.batchSize,s=e.inSize,a=Math.ceil(s/r);n||this.variableNames.push("bestIndicesA"),this.outputShape=[o,a];const i="max"===t?">":"<",u=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${u};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${i} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}function Jl(e,t){return["x","y","z","w","u","v"].slice(0,t).map(t=>`${e}.${t}`)}function Zl(e,t){return 1===t?[e]:Jl(e,t)}function ec(){let e,t,n,r,s,a,i,u,l,c;return 2===o().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",r="in",s="texture",a="outputColor",i="out vec4 outputColor;",u="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",l="",c="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",r="varying",s="texture2D",a="gl_FragColor",i="",u="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",c="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:r,texture2D:s,output:a,defineOutput:i,defineSpecialNaN:u,defineSpecialInf:l,defineRound:c}}function tc(e,t,n="index"){const r=L(t);return r.map((t,o)=>`${`int ${e[o]} = ${n} / ${t}`}; ${o===r.length-1?`int ${e[o+1]} = ${n} - ${e[o]} * ${t}`:`index -= ${e[o]} * ${t}`};`).join("")}function nc(e){const t=L(e).map(e=>e.toString());return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}const rc="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:oc}=dl;function sc(e,t,n,r){const o=[];e.forEach(e=>{const t=$(e.shapeInfo.logicalShape);e.shapeInfo.isUniform?o.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(o.push(`uniform sampler2D ${e.name};`),o.push(`uniform int offset${e.name};`))});const s=o.join("\n"),a=e.map(e=>function(e,t,n=!1){let r="";r+=n?ic(e):ac(e);const o=e.shapeInfo.logicalShape,s=t.logicalShape;o.length<=s.length&&(r+=n?function(e,t){const n=e.name,r=n.charAt(0).toUpperCase()+n.slice(1),o="get"+r+"AtOutCoords",s=e.shapeInfo.logicalShape.length,a=t.logicalShape.length,i=oc(e.shapeInfo.logicalShape,t.logicalShape),u=gc(a),l=a-s;let c;const h=["x","y","z","w","u","v"];c=0===s?"":a<2&&i.length>=1?"coords = 0;":i.map(e=>`coords.${h[e+l]} = 0;`).join("\n");let d="";d=a<2&&s>0?"coords":e.shapeInfo.logicalShape.map((e,t)=>"coords."+h[t+l]).join(", ");let p="return outputValue;";const f=1===$(e.shapeInfo.logicalShape),g=1===$(t.logicalShape);if(1!==s||f||g){if(f&&!g)p=1===a?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(i.length){const e=s-2,t=s-1;i.indexOf(e)>-1&&i.indexOf(t)>-1?p="return vec4(outputValue.x);":i.indexOf(e)>-1?p="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":i.indexOf(t)>-1&&(p="return vec4(outputValue.xx, outputValue.zz);")}}else p="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${o}() {\n      ${u} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${r}(${d});\n      ${p}\n    }\n  `}(e,t):function(e,t){const n=e.name,r=n.charAt(0).toUpperCase()+n.slice(1),o="get"+r+"AtOutCoords",s=t.texShape,a=e.shapeInfo.texShape,i=e.shapeInfo.logicalShape.length,u=t.logicalShape.length;if(!e.shapeInfo.isUniform&&i===u&&null==e.shapeInfo.flatOffset&&R(a,s))return`\n      float ${o}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const l=gc(u),c=oc(e.shapeInfo.logicalShape,t.logicalShape),h=u-i;let d;const p=["x","y","z","w","u","v"];d=0===i?"":u<2&&c.length>=1?"coords = 0;":c.map(e=>`coords.${p[e+h]} = 0;`).join("\n");let f="";f=u<2&&i>0?"coords":e.shapeInfo.logicalShape.map((e,t)=>"coords."+p[t+h]).join(", ");return`\n    float ${o}() {\n      ${l} coords = getOutputCoords();\n      ${d}\n      return get${r}(${f});\n    }\n  `}(e,t));return r}(e,t,r)).join("\n"),i=t.texShape,u=ec(),l=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(u);let c,h,d=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${uc}\n    ${lc}\n    ${cc}\n  `}(u);t.isPacked?(c=function(e,t){switch(e.length){case 0:return dc();case 1:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(1===n[0])return`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${n[1]}.0);\n      }\n    `;if(1===n[1])return`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${n[0]}.0);\n      }\n    `;return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return 2 * (resTexRC.x * ${n[1]} + resTexRC.y);\n    }\n  `}(0,t);case 2:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(R(e,t))return`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${n[0]}, ${n[1]}));\n      }\n    `;const r=Math.ceil(e[1]/2);return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t);case 3:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(e[2]/2),o=r*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      int b = index / ${o};\n      index -= b * ${o};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t);default:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(e[e.length-1]/2),o=r*Math.ceil(e[e.length-2]/2);let s=o,a="",i="b, r, c";for(let t=2;t<e.length-1;t++)s*=e[e.length-t-1],a=`\n      int b${t} = index / ${s};\n      index -= b${t} * ${s};\n    `+a,i=`b${t}, `+i;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      ${a}\n\n      int b = index / ${o};\n      index -= b * ${o};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec${e.length}(${i});\n    }\n  `}(e,t)}}(t.logicalShape,i),h=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(u)):(c=function(e,t){switch(e.length){case 0:return dc();case 1:return function(e,t){if(1===t[0])return`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `;if(1===t[1])return`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `;return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t);case 2:return function(e,t){if(R(e,t))return`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `;if(1===e[1])return`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;if(1===e[0])return`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t);case 3:return function(e,t){const n=tc(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${n}\n      return ivec3(r, c, d);\n    }\n  `}(e,t);case 4:return function(e,t){const n=tc(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${n}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t);case 5:return function(e,t){const n=tc(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=tc(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(e.length+"-D output sampling is not yet supported")}}(t.logicalShape,i),h=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(u)),r&&(d+=hc);return[d,l,h,s,c,a,n].join("\n")}function ac(e){const t=e.shapeInfo.logicalShape;switch(t.length){case 0:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1);if(e.shapeInfo.isUniform)return`float ${n}() {return ${t};}`;const[r,o]=e.shapeInfo.texShape;if(1===r&&1===o)return`\n      float ${n}() {\n        return sampleTexture(${t}, halfCR);\n      }\n    `;const[s,a]=e.shapeInfo.texShape,i=pc(t);return`\n    float ${n}() {\n      vec2 uv = uvFromFlat(${s}, ${a}, ${i});\n      return sampleTexture(${t}, uv);\n    }\n  `}(e);case 1:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${n}(int index) {\n        ${fc(e)}\n      }\n    `;const r=e.shapeInfo.texShape,o=r[0],s=r[1];if(1===s&&1===o)return`\n      float ${n}(int index) {\n        return sampleTexture(${t}, halfCR);\n      }\n    `;const a=pc(t);if(1===s)return`\n      float ${n}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${a}) + 0.5) / ${o}.0);\n        return sampleTexture(${t}, uv);\n      }\n    `;if(1===o)return`\n      float ${n}(int index) {\n        vec2 uv = vec2((float(index + ${a}) + 0.5) / ${s}.0, 0.5);\n        return sampleTexture(${t}, uv);\n      }\n    `;return`\n    float ${n}(int index) {\n      vec2 uv = uvFromFlat(${o}, ${s}, index + ${a});\n      return sampleTexture(${t}, uv);\n    }\n  `}(e);case 2:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),o=e.shapeInfo.texShape;if(null!=o&&R(t,o)){const e=o[0],t=o[1];return`\n    float ${r}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${t}.0, ${e}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `}const{newShape:s,keptDims:a}=N(t),i=s;if(i.length<t.length){const t=mc(e,i),n=["row","col"];return`\n      ${ac(t)}\n      float ${r}(int row, int col) {\n        return ${r}(${xc(n,a)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${t[1]}, 1)));\n        ${fc(e)}\n      }\n    `;const u=o[0],l=o[1],c=pc(n);if(1===l)return`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${t[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;if(1===u)return`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${t[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${l}.0, 0.5);\n      return sampleTexture(${n}, uv);\n    }\n  `;return`\n  float ${r}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${t[1]} + col + ${c};\n    vec2 uv = uvFromFlat(${u}, ${l}, index);\n    return sampleTexture(${n}, uv);\n  }\n`}(e);case 3:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),o=t[1]*t[2],s=t[2],{newShape:a,keptDims:i}=N(t),u=a;if(u.length<t.length){const t=mc(e,u),n=["row","col","depth"];return`\n        ${ac(t)}\n        float ${r}(int row, int col, int depth) {\n          return ${r}(${xc(n,i)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${o}, ${s}, 1)));\n        ${fc(e)}\n      }\n    `;const l=e.shapeInfo.texShape,c=l[0],h=l[1],d=e.shapeInfo.flatOffset;if(h===o&&null==d)return`\n        float ${r}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${s}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${h}.0, ${c}.0);\n          return sampleTexture(${n}, uv);\n        }\n      `;if(h===s&&null==d)return`\n    float ${r}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${t[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}.0, ${c}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;const p=pc(n);return`\n      float ${r}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${o} + col * ${s} + depth + ${p};\n        vec2 uv = uvFromFlat(${c}, ${h}, index);\n        return sampleTexture(${n}, uv);\n      }\n  `}(e);case 4:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),o=t[3],s=t[2]*o,a=t[1]*s,{newShape:i,keptDims:u}=N(t);if(i.length<t.length){const t=mc(e,i),n=["row","col","depth","depth2"];return`\n      ${ac(t)}\n      float ${r}(int row, int col, int depth, int depth2) {\n        return ${r}(${xc(n,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${a}, ${s}, ${o}, 1)));\n        ${fc(e)}\n      }\n    `;const l=e.shapeInfo.flatOffset,c=e.shapeInfo.texShape,h=c[0],d=c[1];if(d===a&&null==l)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${s}, ${o}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(d===o&&null==l)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${t[1]*t[2]}, ${t[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const p=pc(n);return`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${a} + col * ${s} +\n          depth * ${o} + depth2;\n      vec2 uv = uvFromFlat(${h}, ${d}, index + ${p});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),o=t[4],s=t[3]*o,a=t[2]*s,i=t[1]*a,{newShape:u,keptDims:l}=N(t);if(u.length<t.length){const t=mc(e,u),n=["row","col","depth","depth2","depth3"];return`\n      ${ac(t)}\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        return ${r}(${xc(n,l)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${i}, ${a}, ${s}, ${o})) +\n          depth3;\n        ${fc(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,d=h[0],p=h[1];if(p===i&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${a}, ${s}, ${o}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(p===o&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const f=pc(n);return`\n    float ${r}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${a} + depth * ${s} +\n          depth2 * ${o} + depth3 + ${f};\n      vec2 uv = uvFromFlat(${d}, ${p}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:o,keptDims:s}=N(t);if(o.length<t.length){const t=mc(e,o),n=["row","col","depth","depth2","depth3","depth4"];return`\n      ${ac(t)}\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${r}(${xc(n,s)});\n      }\n    `}const a=t[5],i=t[4]*a,u=t[3]*i,l=t[2]*u,c=t[1]*l;if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${l}, ${u}, ${i})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${a}, 1)));\n        ${fc(e)}\n      }\n    `;const h=e.shapeInfo.flatOffset,d=e.shapeInfo.texShape,p=d[0],f=d[1];if(f===c&&null==h)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${l}, ${u}, ${i}, ${a})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===a&&null==h)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const g=pc(n);return`\n    float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${l} + depth * ${u} +\n          depth2 * ${i} + depth3 * ${a} + depth4 + ${g};\n      vec2 uv = uvFromFlat(${p}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(t.length+"-D input sampling is not yet supported")}}function ic(e){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),r=ec();return`\n    vec4 ${n}() {\n      return ${r.texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),r=e.shapeInfo.texShape,o=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],s=ec();return`\n    vec4 ${n}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${o[0]}, ${o[1]}, index);\n      return ${s.texture2D}(${t}, uv);\n    }\n  `}(e);case 2:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),o=e.shapeInfo.texShape,s=o[0],a=o[1],i=ec();if(null!=o&&R(t,o))return`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${a}.0, ${s}.0);\n\n        return ${i.texture2D}(${n}, uv);\n      }\n    `;const u=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)],l=Math.ceil(t[1]/2);return`\n    vec4 ${r}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${l}, ${u[0]}, ${u[1]}, row, col);\n      return ${i.texture2D}(${n}, uv);\n    }\n  `}(e);case 3:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),o=e.shapeInfo.texShape,s=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)];if(1===t[0]){const n=t.slice(1),o=[1,2],s=mc(e,n),a=["b","row","col"];return`\n        ${ic(s)}\n        vec4 ${r}(int b, int row, int col) {\n          return ${r}(${xc(a,o)});\n        }\n      `}const a=s[0],i=s[1],u=Math.ceil(t[2]/2),l=u*Math.ceil(t[1]/2),c=ec();return`\n    vec4 ${r}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${a}, ${i}, ${l}, ${u}, b, row, col);\n      return ${c.texture2D}(${n}, uv);\n    }\n  `}(e);default:return function(e){const t=e.shapeInfo.logicalShape,n=t.length,r=e.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),s=e.shapeInfo.texShape,a=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)],i=a[0],u=a[1],l=Math.ceil(t[n-1]/2);let c=l*Math.ceil(t[n-2]/2),h="int b, int row, int col",d=`b * ${c} + (row / 2) * ${l} + (col / 2)`;for(let e=2;e<n-1;e++)h=`int b${e}, `+h,c*=t[n-e-1],d=`b${e} * ${c} + `+d;const p=ec();return`\n    vec4 ${o}(${h}) {\n      int index = ${d};\n      int texR = index / ${u};\n      int texC = index - texR * ${u};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${u}, ${i});\n      return ${p.texture2D}(${r}, uv);\n    }\n  `}(e)}}const uc="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",lc="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",cc="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",hc="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function dc(){return"\n    int getOutputCoords() {\n      return 0;\n    }\n  "}function pc(e){return"offset"+e}function fc(e){const t=e.name,n=$(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function gc(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function mc(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function xc(e,t){return t.map(t=>e[t]).join(", ")}class vc{constructor(e,t,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,b(e.length>2,()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`);const o=e[e.length-1],s=Math.ceil(o/t);this.outputShape=e.slice(0,-1),s>1&&this.outputShape.push(s),r||this.variableNames.push("bestIndicesA");const a=this.outputShape,i=a.length,u=gc(i),l=Zl("coords",i);let c,h;if(1===s){h=i+1;const e=gc(h);c=`\n        ${e} sourceLocR = ${e}(${l.join()}, 0);\n        ++${l[i-1]};\n        ${e} sourceLocG = ${e}(${l.join()}, 0);\n        ++${l[i-2]};\n        ${e} sourceLocA = ${e}(${l.join()}, 0);\n        --${l[i-1]};\n        ${e} sourceLocB = ${e}(${l.join()}, 0);\n        --${l[i-2]};`}else h=i,c=`\n        ${u} sourceLocR = coords;\n        ++${l[i-1]};\n        ${u} sourceLocG = coords;\n        ++${l[i-2]};\n        ${u} sourceLocA = coords;\n        --${l[i-1]};\n        ${u} sourceLocB = coords;\n        --${l[i-2]};`;const d=["x","y","z","w","u","v"].slice(0,h),p="."+d[h-1],f=d.map(e=>"int "+e),g=Zl("sourceLocR",h-1).concat("inIdx.r"),m=Zl("sourceLocG",h-1).concat("inIdx.g"),x=Zl("sourceLocB",h-1).concat("inIdx.b"),v=Zl("sourceLocA",h-1).concat("inIdx.a"),y="max"===n?"greaterThan":"lessThan",w=r?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${x.join()}),\n                             getBestIndicesAChannel(${v.join()})));`,C=`vec4(\n            getAChannel(${g.join()}),\n            hasNextCol ? getAChannel(${m.join()}) : 0.,\n            hasNextRow ? getAChannel(${x.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${v.join()}) : 0.)`,$=r?"":`\n      float getBestIndicesAChannel(${f.join()}) {\n        return getChannel(getBestIndicesA(${d.join()}),\n                                          vec2(${d.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${f.join()}) {\n        return getChannel(getA(${d.join()}),\n                               vec2(${d.slice(-2).join()}));\n      }\n      ${$}\n      void main() {\n        ${u} coords = getOutputCoords();\n        bool hasNextCol = ${l[i-1]} < ${a[i-1]-1};\n        bool hasNextRow = ${l[i-2]} < ${a[i-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${p}, sourceLocG${p},\n          sourceLocB${p}, sourceLocA${p}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${C};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${w}\n          vec4 candidate = ${C};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${y}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}class bc{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,o=e.strideWidth,s=e.dilationHeight,a=e.dilationWidth,i=e.effectiveFilterHeight,u=e.effectiveFilterWidth,l=i-1-e.padInfo.top,c=u-1-e.padInfo.left,h=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${l}, ${c});\n      const float avgMultiplier = float(${h});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${i};\n            wR += ${s}) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${u};\n            wC+= ${a}) {\n            float dyC = float(dyCCorner + wC) / ${o}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class yc{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,o=e.strideDepth,s=e.strideHeight,a=e.strideWidth,i=e.dilationDepth,u=e.dilationHeight,l=e.dilationWidth,c=e.effectiveFilterDepth,h=e.effectiveFilterHeight,d=e.effectiveFilterWidth,p=c-1-e.padInfo.front,f=h-1-e.padInfo.top,g=d-1-e.padInfo.left,m=1/(t*n*r);this.userCode=`\n      const ivec3 pads = ivec3(${p}, ${f}, ${g});\n      const float avgMultiplier = float(${m});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${i}) {\n          float dyD = float(dyDCorner + wD) / ${o}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${u}) {\n            float dyR = float(dyRCorner + wR) / ${s}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${d};\n                wC += ${l}) {\n              float dyC = float(dyCCorner + wC) / ${a}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class wc{constructor(e,t,n,r,o,s){this.outputShape=[],this.variableNames=["x","mean","variance"],Ue(e,t),Ue(e,n);let a="0.0";null!=r&&(Ue(e,r),this.variableNames.push("offset"),a="getOffsetAtOutCoords()");let i="1.0";null!=o&&(Ue(e,o),this.variableNames.push("scale"),i="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${a};\n        float scale = ${i};\n        float inv = scale * inversesqrt(variance + float(${s}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class Cc{constructor(e,t,n,r,o,s){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],Ue(e,t),Ue(e,n);let a="vec4(0.0)";null!=r&&(Ue(e,r),this.variableNames.push("offset"),a="getOffsetAtOutCoords()");let i="vec4(1.0)";null!=o&&(Ue(e,o),this.variableNames.push("scale"),i="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${a};\n        vec4 scale = ${i};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${s}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const $c="return areal * breal - aimag * bimag;",Rc="return areal * bimag + aimag * breal;";class Ec{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=Ue(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const kc="return a + b;",Ic="return a - b;",Sc="return a * b;",Ac="return (a < 0.) ? b * a : a;";class Nc{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=Ue(t,n),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}const Tc="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";class Dc{constructor(e,t,n,r=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=Ue(t,n);const o=this.outputShape.length;let s="";if(r)if(0===o||1===$(this.outputShape))s="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else{if(s=`\n          ${gc(o)} coords = getOutputCoords();\n        `,1===o)s+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=Zl("coords",o);s+=`\n            bool nextRowOutOfBounds =\n              (${e[o-2]} + 1) >= ${this.outputShape[o-2]};\n            bool nextColOutOfBounds =\n              (${e[o-1]} + 1) >= ${this.outputShape[o-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${s}\n\n        setOutput(result);\n      }\n    `}}class Fc{constructor(e){this.variableNames=["A"],this.outputShape=e,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}getCustomSetupFunc(e,t){return(n,r)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(r,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(r,"maxVal")),n.gl.uniform1f(this.minLoc,e),n.gl.uniform1f(this.maxLoc,t)}}}class _c{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}getCustomSetupFunc(e,t){return(n,r)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(r,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(r,"maxVal")),n.gl.uniform1f(this.minLoc,e),n.gl.uniform1f(this.maxLoc,t)}}}class Oc{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}class Bc{constructor(e){this.outputShape=[],this.outputShape=Lr(e,1),this.variableNames=e.map((e,t)=>"T"+t);const t=new Array(e.length-1);t[0]=e[0][1];for(let n=1;n<t.length;n++)t[n]=t[n-1]+e[n][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++){const r=t[e-1];n.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${r}));`)}const r=t.length,o=t[t.length-1];n.push(`else setOutput(getT${r}(yR, yC-${o}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class Mc{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=Lr(e,t);const n=this.outputShape,r=n.length,o=gc(r),s=Zl("coords",r),a=["x","y","z","w","u","v"].slice(0,r);this.variableNames=e.map((e,t)=>"T"+t);const i=new Array(e.length-1);i[0]=e[0][t];for(let n=1;n<i.length;n++)i[n]=i[n-1]+e[n][t];const u=a[t],l=a.slice(-2),c=a.join();let h=`if (${u} < ${i[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${l.join()}));\n        }`;for(let e=1;e<i.length;e++){const t=i[e-1];h+=`\n        if (${u} < ${i[e]}  && ${u} >= ${i[e-1]}) {\n          return getChannel(\n            getT${e}(${Pc(a,u,t)}),\n            vec2(${Pc(l,u,t)}));\n        }`}const d=i.length,p=i[i.length-1];h+=`\n        return getChannel(\n          getT${d}(${Pc(a,u,p)}),\n          vec2(${Pc(l,u,p)}));`,this.userCode=`\n      float getValue(${a.map(e=>"int "+e)}) {\n        ${h}\n      }\n\n      void main() {\n        ${o} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${s}), 0., 0., 0.);\n\n        ${s[r-1]} = ${s[r-1]} + 1;\n        if (${s[r-1]} < ${n[r-1]}) {\n          result.g = getValue(${s});\n        }\n\n        ${s[r-2]} = ${s[r-2]} + 1;\n        if (${s[r-2]} < ${n[r-2]}) {\n          result.a = getValue(${s});\n        }\n\n        ${s[r-1]} = ${s[r-1]} - 1;\n        if (${s[r-2]} < ${n[r-2]} &&\n            ${s[r-1]} < ${n[r-1]}) {\n          result.b = getValue(${s});\n        }\n        setOutput(result);\n      }\n    `}}function Pc(e,t,n){const r=e.indexOf(t);return e.map((e,t)=>t===r?`${e} - ${n}`:e).join()}class Lc{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,o=e.padInfo.left,s="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${r};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${o};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              if (${s}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Wc{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,o=e.strideWidth,s="channelsLast"===e.dataFormat,a=t-1-e.padInfo.top,i=n-1-e.padInfo.left,u=s?1:2,l=s?2:3,c=s?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${u}], coords[${l}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${o}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${s}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Vc{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,o=e.padInfo.front,s=e.padInfo.top,a=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${o};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${s};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${r} - ${a};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Uc{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,o=e.strideDepth,s=e.strideHeight,a=e.strideWidth,i=t-1-e.padInfo.front,u=n-1-e.padInfo.top,l=r-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${i}, ${u}, ${l});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${o}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${s}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${a}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Gc{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,o=e.padInfo.left,s=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${s} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${r};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${o};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class zc{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,o=e.strideWidth,s=t-1-e.padInfo.top,a=n-1-e.padInfo.left,i=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${s}, ${a});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${o}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${i}; dm++) {\n              int d2 = d1 * ${i} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Hc{constructor(e,t=!1,n=null,r=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const o=e.padInfo.top,s=e.padInfo.left,a=e.strideHeight,i=e.strideWidth,u=e.dilationHeight,l=e.dilationWidth,c=e.filterHeight,h=e.filterWidth,d=4*Math.floor(e.inChannels/4),p=e.inChannels%4,f="channelsLast"===e.dataFormat,g=f?1:2,m=f?2:3,x=f?3:1;let v="",b="";n&&(v=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,b="result = activation(result);");const y=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${v}\n\n      const ivec2 strides = ivec2(${a}, ${i});\n      const ivec2 pads = ivec2(${o}, ${s});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${x}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${m}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${c}; wR++) {\n          int xR = xRCorner + wR * ${u};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${h}; wC++) {\n            int xC = xCCorner + wC * ${l};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${d}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${f}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===p}) {\n\n              if (${f}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${d}) *\n                    getW(wR, wC, ${d}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${d}, xR, xC) *\n                    getW(wR, wC, ${d}, d2);\n              }\n\n            } else if (${2===p}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2)\n              );\n\n              if (${f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===p}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2),\n                getW(wR, wC, ${d} + 2, d2)\n              );\n\n              if (${f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1),\n                  getX(batch, xR, xC, ${d} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC),\n                  getX(batch, ${d} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${y}\n        ${b}\n        setOutput(result);\n      }\n    `}}class Kc{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,r=e.padInfo.left,o=e.strideDepth,s=e.strideHeight,a=e.strideWidth,i=e.dilationDepth,u=e.dilationHeight,l=e.dilationWidth,c=e.filterDepth,h=e.filterHeight,d=e.filterWidth,p=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${o}, ${s}, ${a});\n      const ivec3 pads = ivec3(${t}, ${n}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${i};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${u};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${d}; wC++) {\n              int xC = xCCorner + wC * ${l};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${p}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${p}) *\n                  getW(wF, wR, wC, ${p}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${p}),\n                  getX(batch, xF, xR, xC, ${p} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${p}, d2),\n                  getW(wF, wR, wC, ${p} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${p}),\n                  getX(batch, xF, xR, xC, ${p} + 1),\n                  getX(batch, xF, xR, xC, ${p} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${p}, d2),\n                  getW(wF, wR, wC, ${p} + 1, d2),\n                  getW(wF, wR, wC, ${p} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class qc{constructor(e,t=!1,n=null,r=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const o=e.inHeight,s=e.inWidth,a=e.padInfo.top,i=e.padInfo.left,u=e.strideHeight,l=e.strideWidth,c=e.dilationHeight,h=e.dilationWidth,d=e.filterHeight,p=e.filterWidth,f=e.outChannels/e.inChannels;let g="",m="";n&&(g=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,m="result = activation(result);");const x=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${g}\n\n      const ivec2 strides = ivec2(${u}, ${l});\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${f};\n        int q = d2 - d1 * ${f};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${d}; wR++) {\n          int xR = xRCorner + wR * ${c};\n\n          if (xR < 0 || xR >= ${o}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${h};\n\n            if (xC < 0 || xC >= ${s}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${x}\n        ${m}\n        setOutput(result);\n      }\n    `}}class Xc{constructor(e,t=!1,n=null,r=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.outShape;const o=e.inHeight,s=e.inWidth,a=e.padInfo.top,i=e.padInfo.left,u=e.strideHeight,l=e.strideWidth,c=e.dilationHeight,h=e.dilationWidth,d=e.filterHeight,p=e.filterWidth,f=p;let g="int xR; int xC; int xCOffset;";for(let e=0;e<d;e++)for(let t=0;t<p;t++)g+=`\n          vec4 xTexelR${e}C${2*t} = vec4(0.);\n          vec4 wR${e}C${t} = vec4(0.);\n          vec4 xR${e}C${t} = vec4(0.);`;for(let e=0;e<d;e++)for(let t=0;t<f;t++){const n=2*t;if(g+=`\n          xR = xRCorner + ${e*c};\n          xC = xCCorner + ${n*h};\n        `,1===l){if(n<p&&(g+=i%2==1?`\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < ${o} && xCOffset >= 0 && xCOffset < ${s}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${s}) {\n                    xTexelR${e}C${n}.zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < ${o} && xCOffset >= 0 && xCOffset < ${s}) {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${s}) {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR${e}C${n} = vec4(previous.zw, xTexelR${e}C${n}.xy);\n                } else {\n                  xR${e}C${n} = vec4(0, 0, xTexelR${e}C${n}.xy);\n                }\n              `:`\n                if(xR >= 0 && xR < ${o} && xC >= 0 && xC < ${s}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                xR${e}C${n} = xTexelR${e}C${n};\n              `,n+1<p)){const t=i%2==0?v(h):h;h%2==0&&i%2==1||h%2!=0&&i%2!=1?(g+=`\n                  xCOffset = xC + ${i%2} + ${t};\n\n                  if(xR >= 0 && xR < ${o} &&\n                    xCOffset >= 0 && xCOffset < ${s}) {\n                    xTexelR${e}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n                `,h>1&&(g+=`\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < ${o} &&\n                      xCOffset >= 0 && xCOffset < ${s}) {\n                      xTexelR${e}C${n} = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR${e}C${n} = vec4(0.);\n                    }\n                  `),g+=`\n                  xR${e}C${n+1} = vec4(\n                    xTexelR${e}C${n}.zw, xTexelR${e}C${n+2}.xy);\n                `):g+=`\n                  xCOffset = xC + ${t};\n\n                  if(xR >= 0 && xR < ${o} &&\n                    xCOffset >= 0 && xCOffset < ${s}) {\n                    xTexelR${e}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR${e}C${n+1} = xTexelR${e}C${n+2};\n                `}}else n<p&&(g+=`\n              if(xR >= 0 && xR < ${o}) {\n            `,i%2==1?(g+=`\n                xCOffset = xC + 1 - ${l};\n                if(xCOffset >= 0 && xCOffset < ${s}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${s}) {\n                  xTexelR${e}C${n+2} = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR${e}C${n+2} = vec4(0.);\n                }\n\n                xR${e}C${n} = vec4(\n                  xTexelR${e}C${n}.zw, xTexelR${e}C${n+2}.zw);\n              `,n+1<p&&(g+=`\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + ${l};\n                  if(xCOffset >= 0 && xCOffset < ${s}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR${e}C${n+1} = vec4(xTexelR${e}C${n+2}.xy, final.xy);\n                `)):(g+=`\n                if(xC >= 0 && xC < ${s}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + ${l};\n                if(xCOffset >= 0 && xCOffset < ${s}) {\n                  xTexelR${e}C${n+2} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${e}C${n+2} = vec4(0.);\n                }\n\n                xR${e}C${n} = vec4(\n                  xTexelR${e}C${n}.xy, xTexelR${e}C${n+2}.xy);\n              `,n+1<p&&(g+=`\n                  xR${e}C${n+1} = vec4(\n                    xTexelR${e}C${n}.zw, xTexelR${e}C${n+2}.zw);\n                `)),g+="}");n<p&&(g+=`\n            vec4 wTexelR${e}C${n} = getW(${e}, ${n}, d1, q);\n            wR${e}C${n} = vec4(wTexelR${e}C${n}.xz, wTexelR${e}C${n}.xz);\n          `,n+1<p&&(g+=`\n              vec4 wTexelR${e}C${n+1} = getW(${e}, ${n+1}, d1, q);\n              wR${e}C${n+1} =\n                vec4(wTexelR${e}C${n+1}.xz, wTexelR${e}C${n+1}.xz);`))}for(let e=0;e<d;e++)for(let t=0;t<p;t++)g+=`dotProd += xR${e}C${t} * wR${e}C${t};`;let m="",x="";n&&(m=r?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,x="result = activation(result);");const b=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${m}\n\n      const ivec2 strides = ivec2(${u}, ${l});\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        ${g}\n\n        vec4 result = dotProd;\n        ${b}\n        ${x}\n        setOutput(result);\n      }\n    `}}class jc{constructor(e,t,n,r,o){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[s,a,i,u]=e,[l]=t,[c,h]=n;this.outputShape=[l,c,h,u];const d="bilinear"===r?1:0,[p,f]=[a-1+".0",i-1+".0"],[g,m,x]=c>1?[""+(a-1)/(c-1),"(y2-y1) * height_ratio",`y1*${p} + float(y)*(height_scale)`]:["0.0","0.0","0.5 * (y1+y2) * "+p],[v,b,y]=h>1?[""+(i-1)/(h-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0","0.5 * (x1+x2) * "+f];this.userCode=`\n      const float height_ratio = float(${g});\n      const float width_ratio = float(${v});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${s}) {\n          return;\n        }\n\n        float height_scale = ${m};\n        float width_scale = ${b};\n\n        float in_y = ${x};\n        if( in_y < 0.0 || in_y > ${p} ) {\n          setOutput(float(${o}));\n          return;\n        }\n        float in_x = ${y};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${o}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${d} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}class Yc{constructor(e,t,n){this.variableNames=["x"],this.outputShape=e;const r=e.length,o=t?"0.0":`getX(${Qc(r,"coords")})`,s=e[e.length-1];let a="",i="";t?(a=n?"end != "+(s-1):"end != 0",i=n?"end + 1":"end - 1"):(a=n?"end + pow2 < "+s:"end >= pow2",i=n?"end + pow2":"end - pow2"),this.userCode=`\n      uniform float index;\n      void main() {\n        ${gc(r)} coords = getOutputCoords();\n        int end = ${Jc(r,"coords")};\n        float val = ${o};\n        int pow2 = int(pow(2.0, index));\n        if (${a}) {\n          int idx = ${i};\n          ${Jc(r,"coords")} = idx;\n          val += getX(${Qc(r,"coords")});\n        }\n        setOutput(val);\n      }\n    `}getCustomSetupFunc(e){return(t,n)=>{null==this.index&&(this.index=t.getUniformLocation(n,"index")),t.gl.uniform1f(this.index,e)}}}function Qc(e,t){if(1===e)return""+t;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}function Jc(e,t){if(1===e)return""+t;if(2===e)return t+".y";if(3===e)return t+".z";if(4===e)return t+".w";throw Error(`Cumulative sum for rank ${e} is not yet supported`)}class Zc{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=vl.DENSE;const t=Cl(e),n=ec();this.outputShape=e,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${tc(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${t[0]}, ${t[1]}));\n        int index = 4 * (resTexRC.x * ${t[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${n.output} = result;\n      }\n    `}}class eh{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=vl.DENSE;const t=Cl(e),n=ec();this.outputShape=e,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${tc(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${t[0]}, ${t[1]}));\n        int index = 4 * (resTexRC.x * ${t[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${n.output} = result;\n      }\n    `}}class th{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}class nh{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}class rh{constructor(e){this.variableNames=["A"],this.outTexUsage=bl.DOWNLOAD;const t=ec();this.outputShape=e,this.userCode=`\n      ${rc}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class oh{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=bl.DOWNLOAD;const t=ec();this.outputShape=e,this.userCode=`\n      ${rc}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}class sh{constructor(e,t,n=!1){this.variableNames=["A"];const r=ec(),[o,s]=t;this.outputShape=e;let a="result";n&&(a="floor(result * 255. + 0.5)"),this.userCode=`\n      ${nc(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / ${s};\n        int c = imod(flatIndex, ${s});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${s}.0, ${o}.0);\n        vec4 values = ${r.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${r.output} = vec4(${a}, 0., 0., 0.);\n      }\n    `}}class ah{constructor(e,t,n=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const r=ec(),[o,s]=t;this.outputShape=e;let a="",i="result";n&&(i="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let n=0;n<=1;n++){const i=2*t+n;a+=`\n          localCoords = coords;\n          if(localCoords[2] + ${n} < ${e[2]}) {\n            localCoords[2] += ${n};\n            if(localCoords[1] + ${t} < ${e[1]}) {\n              localCoords[1] += ${t};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${s};\n              c = imod(flatIndex, ${s});\n              uv = (vec2(c, r) + halfCR) / vec2(${s}.0, ${o}.0);\n              values = ${r.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${i}] = values[0];\n              } else if(offset == 1) {\n                result[${i}] = values[1];\n              } else if(offset == 2) {\n                result[${i}] = values[2];\n              } else {\n                result[${i}] = values[3];\n              }\n            }\n          }\n        `}this.userCode=`\n      ${nc(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${a}\n\n        ${r.output} = ${i};\n      }\n    `}}const ih="return real * expR - imag * expI;",uh="return real * expI + imag * expR;";class lh{constructor(e,t,n){this.variableNames=["real","imag"];const r=t[1];this.outputShape=t;const o=n?"2.0 * "+Math.PI:"-2.0 * "+Math.PI,s=n?r+".0":"1.0";this.userCode=`\n      const float exponentMultiplier = ${o};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${e}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${r});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${r}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${s};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}class ch{constructor(e,t){this.outputShape=[],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}getCustomSetupFunc(e){return(t,n)=>{null==this.valueLoc&&(this.valueLoc=t.getUniformLocationNoThrow(n,"value")),t.gl.uniform1f(this.valueLoc,e)}}}class hh{constructor(e,t,n){this.variableNames=["A","indices"];const r=e.slice();r[n]=t,this.outputShape=r,this.rank=r.length;const o=gc(this.rank),s=function(e,t){const n=e.length;if(n>4)throw Error(`Gather for rank ${n} is not yet supported`);if(1===n)return"int(getIndices(resRC))";const r=["resRC.x","resRC.y","resRC.z","resRC.w"],o=[];for(let n=0;n<e.length;n++)n===t?o.push(`int(getIndices(${r[n]}))`):o.push(""+r[n]);return o.join()}(e,n);this.userCode=`\n      void main() {\n        ${o} resRC = getOutputCoords();\n        setOutput(getA(${s}));\n      }\n    `}}class dh{constructor(e,t,n){this.sliceDim=e,this.strides=t,this.variableNames=["x","indices"],this.outputShape=n;const r=gc(t.length),o=gc(n.length),s=this.sliceDim>1?"strides[j]":"strides";this.userCode=`\n        ${r} strides = ${r}(${this.strides});\n         void main() {\n          ${o} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${s};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}function ph(e){const t=ec();return function(e,t){const n=Bl(e,()=>e.createShader(e.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(El(e,()=>e.shaderSource(n,t)),El(e,()=>e.compileShader(n)),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function fh(e){return function(e,t){const n=Bl(e,()=>e.createBuffer(),"Unable to create WebGLBuffer");return El(e,()=>e.bindBuffer(e.ARRAY_BUFFER,n)),El(e,()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW)),n}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function gh(e){return function(e,t){const n=Bl(e,()=>e.createBuffer(),"Unable to create WebGLBuffer");return El(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n)),El(e,()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW)),n}(e,new Uint16Array([0,1,2,2,1,3]))}function mh(e,t,n,r,s,a){!function(e,t){const n=o().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0){throw new Error("Requested texture size "+`[${e}x${t}]`+" is invalid.")}if(e>n||t>n){throw new Error("Requested texture size "+`[${e}x${t}]`+" greater than WebGL maximum on this browser / GPU "+`[${n}x${n}]`+".")}}(t,n);const i=function(e){return Bl(e,()=>e.createTexture(),"Unable to create WebGLTexture.")}(e),u=e.TEXTURE_2D;return El(e,()=>e.bindTexture(u,i)),El(e,()=>e.texParameteri(u,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE)),El(e,()=>e.texParameteri(u,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE)),El(e,()=>e.texParameteri(u,e.TEXTURE_MIN_FILTER,e.NEAREST)),El(e,()=>e.texParameteri(u,e.TEXTURE_MAG_FILTER,e.NEAREST)),El(e,()=>e.texImage2D(u,0,r,t,n,0,s,a,null)),El(e,()=>e.bindTexture(e.TEXTURE_2D,null)),i}function xh(e){return e.internalFormatFloat}function vh(e){return e.internalFormatHalfFloat}function bh(e){return e.downloadTextureFormat}function yh(e){return e.internalFormatPackedFloat}function wh(e){return e.internalFormatPackedHalfFloat}function Ch(e,t,n,r,o,s,a,i){const u=e,l=new Float32Array(function(e,t){const[n,r]=$l(e,t);return n*r*4}(s,a));return u.bindBuffer(u.PIXEL_PACK_BUFFER,t),u.getBufferSubData(u.PIXEL_PACK_BUFFER,0,l),u.bindBuffer(u.PIXEL_PACK_BUFFER,null),l}class $h{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const t=o().getNumber("WEBGL_VERSION");null!=e?(this.gl=e,function(e,t){gl[e]=t}(t,e)):this.gl=xl(t);let n="WEBGL_color_buffer_float";if(1===o().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=Il(this.gl,e),zl(this.gl,t))this.textureHalfFloatExtension=Il(this.gl,t);else if(o().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),zl(this.gl,"EXT_color_buffer_half_float"))this.colorBufferHalfFloatExtension=Il(this.gl,"EXT_color_buffer_half_float");else if(o().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",zl(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!zl(this.gl,"EXT_color_buffer_half_float"))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension("EXT_color_buffer_half_float")}this.vertexBuffer=fh(this.gl),this.indexBuffer=gh(this.gl),this.framebuffer=function(e){return Bl(e,()=>e.createFramebuffer(),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=Rl(this.gl,this.textureHalfFloatExtension)}get debug(){return o().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;El(e,()=>e.finish()),El(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,null)),El(e,()=>e.deleteFramebuffer(this.framebuffer)),El(e,()=>e.bindBuffer(e.ARRAY_BUFFER,null)),El(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)),El(e,()=>e.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[o,s]=wl(t,n);return mh(e,o,s,xh(r),r.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[o,s]=wl(t,n);return mh(e,o,s,vh(r),r.textureFormatFloat,r.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[o,s]=wl(t,n);return mh(e,o,s,bh(r),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),function(e,t,n){El(e,()=>e.bindTexture(e.TEXTURE_2D,t)),n.data instanceof Uint8Array?El(e,()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data)):El(e,()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n)),El(e,()=>e.bindTexture(e.TEXTURE_2D,null))}(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,r){this.throwIfDisposed(),function(e,t,n,r,o,s){let a,i,u;El(e,()=>e.bindTexture(e.TEXTURE_2D,t)),o instanceof Uint8Array?(a=new Uint8Array(n*r*4),i=e.UNSIGNED_BYTE,u=e.RGBA):(a=new Float32Array(n*r*4),i=e.FLOAT,u=s.internalFormatPackedFloat),a.set(o),El(e,()=>e.texImage2D(e.TEXTURE_2D,0,u,n,r,0,e.RGBA,i,a)),El(e,()=>e.bindTexture(e.TEXTURE_2D,null))}(this.gl,e,t,n,r,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[o,s]=$l(t,n);return mh(e,o,s,wh(r),e.RGBA,r.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[o,s]=$l(t,n);return mh(e,o,s,yh(r),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(_l(this.gl,this.framebuffer),this.outputTexture=null),El(this.gl,()=>this.gl.deleteTexture(e))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,()=>function(e,t,n,r){const[o,s]=wl(t,n),a=new Uint8Array(t*n*4);return El(e,()=>e.readPixels(0,0,o,s,r.downloadTextureFormat,e.UNSIGNED_BYTE,a)),new Float32Array(a.buffer)}(this.gl,t,n,this.textureConfig))}downloadPackedMatrixFromBuffer(e,t,n,r,o,s){return Ch(this.gl,e,0,0,0,o,s,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return function(e,t,n){const r=e,o=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,t),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,o),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),o}(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const r=function(e,t,n,r){const o=e.createBuffer();El(e,()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,o));const s=16*t*n;return El(e,()=>e.bufferData(e.PIXEL_PACK_BUFFER,s,e.STREAM_READ)),El(e,()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0)),El(e,()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null)),o}(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if(o().getBool("WEBGL_FENCE_API_ENABLED")){const r=e,o=r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=r.clientWaitSync(o,0,0);return e===r.ALREADY_SIGNALED||e===r.CONDITION_SATISFIED},t=o}else o().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,o().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,()=>function(e,t,n){const r=new Float32Array(t*n*4);return El(e,()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,r)),r}(this.gl,t,n))}createProgram(e){this.throwIfDisposed();const t=this.gl,n=Sl(t,e),r=ph(t),o=function(e){return Bl(e,()=>e.createProgram(),"Unable to create WebGLProgram.")}(t);return El(t,()=>t.attachShader(o,r)),El(t,()=>t.attachShader(o,n)),function(e,t){if(El(e,()=>e.linkProgram(t)),!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(t,o),this.debug&&Nl(t,o),this.vertexAttrsAreBound||(this.setProgram(o),this.vertexAttrsAreBound=function(e,t,n){return El(e,()=>e.bindBuffer(e.ARRAY_BUFFER,n)),Tl(e,t,"clipSpacePos",n,3,20,0)&&Tl(e,t,"uv",n,2,20,12)}(t,this.program,this.vertexBuffer)),o}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&El(this.gl,()=>this.gl.deleteProgram(e))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&Nl(this.gl,this.program),El(this.gl,()=>this.gl.useProgram(e))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?function(e,t,n){return Bl(e,()=>e.getUniformLocation(t,n),'uniform "'+n+'" not present in program.')}(this.gl,e,t):function(e,t,n){return e.getUniformLocation(t,n)}(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),El(this.gl,()=>this.gl.getAttribLocation(e,t))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),function(e,t,n,r){El(e,()=>Dl(e,t,r)),El(e,()=>e.uniform1i(n,r))}(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[r,o]=$l(t,n);this.setOutputMatrixTextureDriver(e,r,o)}setOutputMatrixWriteRegion(e,t,n,r){this.setOutputMatrixWriteRegionDriver(n,e,r,t)}setOutputPackedMatrixWriteRegion(e,t,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&Nl(this.gl,this.program),Ol(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;this.debug&&this.debugValidate(),El(e,()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),El(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=Il(this.gl,2===o().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===o().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===o().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await S(()=>this.disposed||this.isQueryAvailable(e,o().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),this.getQueryTime(e,o().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),r=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),r&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise(t=>{this.addItemToPoll(()=>e.isFencePassed(),()=>t())})}pollItems(){const e=function(e){let t=0;for(;t<e.length;++t){if(!e[t]())break}return t-1}(this.itemsToPoll.map(e=>e.isDoneFn));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1||S(()=>(this.pollItems(),0===this.itemsToPoll.length))}bindTextureToFrameBuffer(e){this.throwIfDisposed(),Fl(this.gl,e,this.framebuffer),this.debug&&Ol(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(Fl(this.gl,this.outputTexture,this.framebuffer),this.debug&&Ol(this.gl)):_l(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const r=this.gl;Fl(r,e,this.framebuffer),this.debug&&Ol(r),this.outputTexture=e,El(r,()=>r.viewport(0,0,t,n)),El(r,()=>r.scissor(0,0,t,n))}setOutputMatrixWriteRegionDriver(e,t,n,r){this.throwIfDisposed(),El(this.gl,()=>this.gl.scissor(e,t,n,r))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}function Rh(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach((e,n)=>{const r=e.logicalShape,o=t[n],s=o.shape;if(!R(r,s))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${s} must match`);if(e.isUniform&&o.isUniform)return;const a=e.texShape,i=o.isUniform?null:o.texData.texShape;if(!R(a,i))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${a} and ${i} must match`)})}class Eh{constructor(e,t,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;const{filterWidth:r,inChannels:o,strideWidth:s,strideHeight:a,padInfo:i,outWidth:u,dilationWidth:l,dilationHeight:c,dataFormat:h}=n,{left:d,top:p}=i,f=o*r,g=ec(),m="channelsLast"===h,x=m?0:1,v=m?1:2;let b="";for(let n=0;n<=1;n++)for(let r=0;r<=1;r++)b+=`\n          blockIndex = rc.y + ${r};\n          pos = rc.x + ${n};\n\n          if(blockIndex < ${e[1]} && pos < ${e[0]}) {\n            offsetY = int(blockIndex / (${u})) * ${a} - ${p};\n            d0 = offsetY + ${c} * (pos / ${f});\n\n            if(d0 < ${t[x]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${u}.) * ${s}. - ${d}.);\n              d1 = offsetX + ${l} * (int(mod(float(pos), ${f}.) / ${o}.));\n\n              if(d1 < ${t[v]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${o}.));\n\n                if (${m}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*n+r}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*n+r}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${b}\n\n        ${g.output} = result;\n      }\n    `}}class kh{constructor(e,t,n,r,o){this.variableNames=["x"],this.outputShape=[];const s=t,a=e[3]-1;let i;this.outputShape=e;const u=`float(${n}) + float(${r}) * sum`;i=.5===o?`inversesqrt(${u})`:1===o?`1.0/(${u})`:`exp(log(${u}) * float(-${o}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${s}; j <= ${s}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${a}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${i};\n        setOutput(val);\n      }\n    `}}class Ih{constructor(e,t,n,r,o){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=r,this.beta=o,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${o})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${o});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}class Sh{constructor(e,t,n,r,o){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const s=t,a=e[3]-1;let i;this.outputShape=e;const u=`float(${n}) + float(${r}) * sum`;i=.5===o?`inversesqrt(${u})`:1===o?`1.0/(${u})`:`exp(log(${u}) * float(-${o}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${s};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${s}; j <= ${s}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${a}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${i};\n        setOutput(result);\n      }\n    `}}class Ah{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,r=e.dilationHeight,o=e.effectiveFilterHeight,s=e.effectiveFilterWidth,a=o-1-e.padInfo.top,i=s-1-e.padInfo.left,u=o*s-1;this.userCode=`\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n          wR += ${r}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${s}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${u} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${s} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Nh{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,o=e.dilationDepth,s=e.dilationHeight,a=e.dilationWidth,i=e.effectiveFilterDepth,u=e.effectiveFilterHeight,l=e.effectiveFilterWidth,c=i-1-e.padInfo.front,h=u-1-e.padInfo.top,d=l-1-e.padInfo.left,p=i*u*l-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${h}, ${d});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${i};\n           wD += ${o}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${u};\n              wR += ${s}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${l};\n                wC += ${a}) {\n              float dyC = float(dyCCorner + wC) / ${r}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${p} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${u} * ${l} +\n                  wR * ${l} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Th{constructor(e,t,n=!1,r=!1,o=!1,s=null,a=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;const i=n?e[1]:e[2],u=Math.ceil(i/2),l=n?"i * 2, rc.y":"rc.y, i * 2",c=r?"rc.z, i * 2":"i * 2, rc.z",h=n?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],d=r?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let p="",f="";s&&(p=a?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${s}\n        }`:`vec4 activation(vec4 x) {\n          ${s}\n        }`,f="result = activation(result);");const g=o?"result += getBiasAtOutCoords();":"";o&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${p}\n\n      const float sharedDimension = ${u}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${u}; i++) {\n          vec4 a = getMatrixA(rc.x, ${l});\n          vec4 b = getMatrixB(rc.x, ${c});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${h[0]} * ${d[0]});\n          result += (${h[1]} * ${d[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${g}\n\n        ${f}\n\n        setOutput(result);\n      }\n    `}}class Dh{constructor(e,t,n){this.variableNames=["probs"],this.outputShape=[e,n],this.userCode=`\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}getCustomSetupFunc(e){return(t,n)=>{null==this.seedLoc&&(this.seedLoc=t.getUniformLocation(n,"seed")),t.gl.uniform1f(this.seedLoc,e)}}}class Fh{constructor(e,t,n,r){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}class _h{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e;const t=e.length;if(0===t)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const n=Zl("rc",t),r=gc(t),o=function(e,t,n){if(1===e)return"rc > "+t[0];let r="";for(let o=e-2;o<e;o++)r+=`${n[o]} >= ${t[o]}`,o<e-1&&(r+="||");return r}(t,e,n),s=function(e,t,n,r){if(1===e)return"";const o=r.slice(-2);return`\n    int r = ${o[0]};\n    int c = ${o[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${t};\n    bool rEdge = rp1 >= ${n};\n  `}(t,e[e.length-1],e[e.length-2],n),a=function(e,t){const n=e.length,r=function(e,t){const n=[];for(let r=0;r<=1;r++)for(let o=0;o<=1;o++){let s=`${0===r?"r":"rp1"}, ${0===o?"c":"cp1"}`;for(let n=2;n<e;n++)s=t[t.length-1-n]+","+s;n.push(s)}return n}(n,t);if(1===n)return`getA(rc),\n            rc + 1 >= ${e[0]} ? 0. : getA(rc + 1),\n            0, 0`;return`getA(${r[0]}),\n          cEdge ? 0. : getA(${r[1]}),\n          rEdge ? 0. : getA(${r[2]}),\n          rEdge || cEdge ? 0. : getA(${r[3]})`}(e,n);this.userCode=`\n        void main() {\n          ${r} rc = getOutputCoords();\n\n          if(${o}) {\n            setOutput(vec4(0));\n          } else {\n            ${s}\n\n            setOutput(vec4(${a}));\n          }\n        }\n      `}}}class Oh{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);const r=e.length,o=gc(r),s=t.map(e=>e[0]).join(","),a=t.map((t,n)=>t[0]+e[n]).join(","),i=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${o} start = ${o}(${s});\n      ${o} end = ${o}(${a});\n\n      void main() {\n        ${o} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(${n}));\n        } else {\n          ${o} coords = outC - start;\n          setOutput(getX(${i}));\n        }\n      }\n    `:`\n        int start = ${s};\n        int end = ${a};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(${n}));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class Bh{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);const r=e.length,o=gc(r),s=t.map(e=>e[0]).join(","),a=t.map((t,n)=>t[0]+e[n]).join(","),i=Zl("rc",r),u=Zl("source",r),l=`${i[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${u.slice(-2).join()})`,h=[o+" rc = outputLoc;",`${i[r-1]} += 1;\n       if(${l}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${i[r-2]} += 1;\n       if(${i[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${i[r-1]} += 1;\n         if(${l}) {`],d=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let p="";for(let e=0,t=1===r?2:4;e<t;e++)p+=`\n        ${h[e]}\n        if (${d}) {\n          result[${e}] = float(${n});\n        } else {\n          ${o} source = rc - start;\n          result[${e}] = getChannel(getX(${u.join()}), ${c});\n        }\n      `;p+=1===r?"} ":"}}",this.userCode=`\n      const ${o} start = ${o}(${s});\n      const ${o} end = ${o}(${a});\n\n      void main() {\n        ${o} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}class Mh{constructor(e,t,n,r=!1,o=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const s=e.filterWidth,a=e.strideHeight,i=e.strideWidth,u=e.dilationHeight,l=e.dilationWidth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,d=e.padInfo.top,p=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t,g=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,m=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let x="0.0";if(f||(x="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${a}, ${i});\n        const ivec2 pads = ivec2(${d}, ${p});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${u}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${l}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?o?g:m:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let v=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(v="avgValue / count");const b=4*Math.floor(s/4),y=s%4,w=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${a}, ${i});\n      const ivec2 pads = ivec2(${d}, ${p});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${u}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${b}; wC += 4) {\n            int xC = xCCorner + wC * ${l};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              getValue(batch, xR, xC + 3 * ${l}, d)\n            );\n\n            ${w}\n          }\n\n          int xC = xCCorner + ${b};\n          if (${1===y}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${w}\n          } else if (${2===y}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${w}\n          } else if (${3===y}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              initializationValue\n            );\n\n            ${w}\n          }\n        }\n        setOutput(${v});\n      }\n    `}}class Ph{constructor(e,t,n,r=!1,o=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const s=e.filterWidth,a=e.strideDepth,i=e.strideHeight,u=e.strideWidth,l=e.dilationDepth,c=e.dilationHeight,h=e.dilationWidth,d=e.effectiveFilterDepth,p=e.effectiveFilterHeight,f=e.effectiveFilterWidth,g=e.padInfo.front,m=e.padInfo.top,x=e.padInfo.left;this.outputShape=e.outShape;const v="avg"===t;let b="0.0";if(v||(b="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${a}, ${i}, ${u});\n        const ivec3 pads = ivec3(${g}, ${m}, ${x});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${d};\n              wD += ${l}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${p};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r?o?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${p} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let y=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(y="avgValue / count");const w=4*Math.floor(s/4),C=s%4,$=`\n      if (${v}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${a}, ${i}, ${u});\n      const ivec3 pads = ivec3(${g}, ${m}, ${x});\n      const float initializationValue = ${b};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${b});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${d};\n            wD += ${l}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${p};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${w}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${$}\n            }\n\n            int xC = xCCorner + ${w};\n            if (${1===C}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${$}\n            } else if (${2===C}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${$}\n            } else if (${3===C}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${$}\n            }\n          }\n          setOutput(${y});\n        }\n      }\n    `}}class Lh{constructor(e,t){this.variableNames=["x"];const n=e.windowSize,r=e.batchSize,o=e.inSize,s=Math.ceil(o/n);this.outputShape=[r,s];let a="0.0",i="";"prod"===t?a="1.0":"min"===t?(a="1.0 / 1e-20",i="min"):"max"===t&&(a="-1.0 / 1e-20",i="max");let u=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?u="sumValue":"prod"===t?u="prodValue":"all"===t?u="allValue":"any"===t&&(u="anyValue");const l=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${i}(values, minMaxValue);\n      }\n    `,d="vec4";"all"===t?(a="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",d="bvec4"):"any"===t&&(a="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",d="bvec4");let p="";o%n>0&&(p=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${a};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${p}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${a});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${l}; i += 4) {\n          int inIdx = inOffset + i;\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${l};\n        if (${1===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${u});\n      }\n    `}}class Wh{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;let n="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),n+=`\n        ${t}\n        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${e}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${e>0?"}":""}\n      `}var r;this.userCode=`\n      ${r=t,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${tc(["r","c","d"],r)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${nc(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${e[1]};\n        int cols = ${e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class Vh{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t.shape;const[,r,o]=t.shape,[,s,a]=e.shape,i=[n&&s>1?r-1:r,n&&a>1?o-1:o],u=[n&&s>1?s-1:s,n&&a>1?a-1:a],l=i[0]/u[0],c=i[1]/u[1],h=1/l,d=1/c,p=2*Math.ceil(h)+2,f=2*Math.ceil(d)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${d});\n\n        const int winHeight = int(${p});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${s}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${a}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${o-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}class Uh{constructor(e,t,n,r){this.variableNames=["A"],this.outputShape=[];const[o,s,a,i]=e;this.outputShape=[o,t,n,i];const u=[r&&t>1?s-1:s,r&&n>1?a-1:a],l=[r&&t>1?t-1:t,r&&n>1?n-1:n];this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/l[0]},\n          ${u[1]/l[1]});\n      const vec2 inputShapeRC = vec2(${s}.0, ${a}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class Gh{constructor(e,t,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[o,s,a,i]=e;this.outputShape=[o,t,n,i];const u=[r&&t>1?s-1:s,r&&n>1?a-1:a],l=[r&&t>1?t-1:t,r&&n>1?n-1:n];this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/l[0]},\n          ${u[1]/l[1]},\n          ${u[1]/l[1]});\n      const vec3 inputShapeRC = vec3(${s}.0, ${a}.0,\n                                     ${a}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${i-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}class zh{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t.shape;const[,r,o]=t.shape,[,s,a]=e.shape,i=[n&&s>1?r-1:r,n&&a>1?o-1:o],u=[n&&s>1?s-1:s,n&&a>1?a-1:a],l=i[0]/u[0],c=i[1]/u[1],h=1/l,d=1/c,p=2*Math.ceil(h)+2,f=2*Math.ceil(d)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${d});\n\n        const int winHeight = int(${p});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${s}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${a}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${i[0]}) *\n                (float(dyR) / float(${u[0]}));\n\n            float sourceFracCol =\n                float(${i[1]}) *\n                  (float(dyC) / float(${u[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${o}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}class Hh{constructor(e,t,n,r){this.variableNames=["A"],this.outputShape=[];const[o,s,a,i]=e;this.outputShape=[o,t,n,i];const u=[r&&t>1?s-1:s,r&&n>1?a-1:a],l=[r&&t>1?t-1:t,r&&n>1?n-1:n],c=r?"0.5":"0.0";this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/l[0]},\n          ${u[1]/l[1]});\n      const vec2 inputShapeRC = vec2(${s}.0, ${a}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${c})));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class Kh{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const r=e.map((n,r)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(r)).join(","),o=gc(n);this.userCode=`\n      void main() {\n        ${o} coords = getOutputCoords();\n        setOutput(getX(${r}));\n      }\n    `}}class qh{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const r=Zl("rc",n),o=`${r[n-1]} + 1 < ${this.outputShape[n-1]}`,s=`${r[n-2]} + 1 < ${this.outputShape[n-2]}`,a=gc(n);function i(n){const r=e.map((r,o)=>function(n,r){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${r[n]} - 1`:""+r[n]}(o,n));return`getChannel(getX(${r.join(",")}), vec2(${r.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${o}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${a} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(e){return i(e)}(r.slice())};\n          if(${o}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",i(e)}(r.slice())};\n          }\n          if(${s}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",i(e)}(r.slice())};\n            if(${o}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",i(e)}(r.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}class Xh{constructor(e,t,n,r,o,s,a=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=s;const i=gc(o.length),u=gc(s.length);let l="";1===n?l="i":2===n&&(l="i, j");const c=`getIndices(${l})`;let h="";1===r?h="i":2===r&&(h="i, coords[1]");const d=`getUpdates(${h})`,p=t>1?"strides[j]":"strides";this.userCode=`\n        ${i} strides = ${i}(${o});\n\n        void main() {\n          ${u} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${p};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${d};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}class jh{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,r=e.batchSize,o=e.inSize,s=e.numSegments,a=s*Math.ceil(o/n);this.outputShape=[r,a];const i=4*Math.floor(n/4),u=n%4,l="\n        sumValue += dot(values, segFilter);\n    ";let c="";o%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return initializationValue;\n        }\n      `);let h="";o%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${s})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${s})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${l}\n        } else if (${2===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${l}\n        } else if (${3===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}class Yh{constructor(e,t,n){let r,o;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)o="resRC",r="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[],a=[];for(let r=0;r<t.length;r++)a.push(""+n[r]),r<e&&s.push(""+n[r]);r=s.join(),o=a.join()}const s=gc(n);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${o}));\n        } else {\n          setOutput(getB(${o}));\n        }\n      }\n    `}}class Qh{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=gc(this.rank),n=`uniform int start[${this.rank}];`,r=function(e){if(1===e)return"sourceLoc";if(e<=6)return Jh.slice(0,e).map(e=>"sourceLoc."+e).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let o;o=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map((e,t)=>`sourceLoc.${Jh[t]} = start[${t}] + coords.${Jh[t]};`).join("\n")}\n      `,this.userCode=`\n      ${n}\n      void main() {\n        ${o}\n        setOutput(getSource(${r}));\n      }\n    `}getCustomSetupFunc(e){if(e.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${e.length})`);return(t,n)=>{null==this.startLoc&&(this.startLoc=t.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||t.gl.uniform1iv(this.startLoc,e)}}}const Jh=["x","y","z","w","u","v"];class Zh{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length;const t=gc(this.rank),n=Zl("coords",this.rank),r=Zl("sourceLoc",this.rank),o=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,s=`getChannel(getSource(${r.join()}), ${o})`,a=`\n      result.x = ${s};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${s};\n        --${r[this.rank-1]};\n      }\n    `,i=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${s};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${s};\n        }\n      }\n    `,u=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map((e,t)=>`start[${t}]`).join()});`:e.map((e,t)=>`${r[t]} = ${n[t]} + start[${t}];`).join("\n");this.userCode=`\n      uniform int start[${this.rank}];\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${u}\n        vec4 result = vec4(0.);\n        ${a}\n        ${i}\n        setOutput(result);\n      }\n    `}getCustomSetupFunc(e){if(e.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${e.length})`);return(t,n)=>{null==this.startLoc&&(this.startLoc=t.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||t.gl.uniform1iv(this.startLoc,e)}}}class ed{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const r=n.length,o=gc(n.length),s=gc(n.length);let a="";if(1===r)a="coords * strides + begin";else{let e=0;a=n.map((t,r)=>(e++,1===n.length?`coords * strides[${r}] + begin[${r}]`:`coords[${e-1}] * strides[${r}] + begin[${r}]`)).join(",")}this.userCode=`\n      ${o} begin = ${o}(${e});\n      ${o} strides = ${o}(${t});\n\n      void main() {\n        ${s} coords = getOutputCoords();\n        setOutput(getX(${a}));\n      }\n    `}}class td{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,n){const r=rd(t,n),o=od(e,r,n);o in this.freeTextures||(this.freeTextures[o]=[]),o in this.usedTextures||(this.usedTextures[o]=[]);const s=nd(e,r,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[o].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=s,this.log();const e=this.freeTextures[o].shift();return this.usedTextures[o].push(e),e}let a;return r===yl.PACKED_2X2_FLOAT32?a=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):r===yl.PACKED_2X2_FLOAT16?a=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):r===yl.UNPACKED_FLOAT32?a=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):r===yl.UNPACKED_FLOAT16?a=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):r===yl.PACKED_4X1_UNSIGNED_BYTE&&(a=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[o].push(a),this.numUsedTextures++,this._numBytesAllocated+=s,this.log(),a}releaseTexture(e,t,n,r){if(null==this.freeTextures)return;const s=rd(n,r),a=od(t,s,r);a in this.freeTextures||(this.freeTextures[a]=[]);const i=nd(t,s,this.gpgpu.gl,this.gpgpu.textureConfig,r),u=o().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==u&&this._numBytesAllocated>u?(this.gpgpu.deleteMatrixTexture(e),this._numBytesAllocated-=i):(this.freeTextures[a].push(e),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const l=this.usedTextures[a],c=l.indexOf(e);if(c<0)throw new Error("Cannot release a texture that was never provided by this texture manager");l.splice(c,1),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log("Bytes allocated: "+this._numBytesAllocated),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach(e=>{this.gpgpu.deleteMatrixTexture(e)});for(const e in this.usedTextures)this.usedTextures[e].forEach(e=>{this.gpgpu.deleteMatrixTexture(e)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function nd(e,t,n,r,o){const s=function(e,t){switch(e){case yl.PACKED_2X2_FLOAT32:return yh(t);case yl.PACKED_2X2_FLOAT16:return wh(t);case yl.UNPACKED_FLOAT32:return xh(t);case yl.UNPACKED_FLOAT16:return vh(t);case yl.PACKED_4X1_UNSIGNED_BYTE:return bh(t);default:throw new Error("Unknown physical texture type "+e)}}(t,r);let a;if(o){const[t,n]=$l(e[0],e[1]);a=t*n}else{const[t,n]=wl(e[0],e[1]);a=t*n}return a*function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;throw new Error("Unknown internal format "+t)}(n,s)}function rd(e,t){if(e===bl.UPLOAD)return yl.PACKED_2X2_FLOAT32;if(e===bl.RENDER||null==e)return function(e){return o().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?yl.PACKED_2X2_FLOAT32:yl.UNPACKED_FLOAT32:e?yl.PACKED_2X2_FLOAT16:yl.UNPACKED_FLOAT16}(t);if(e===bl.DOWNLOAD||e===bl.PIXELS)return yl.PACKED_4X1_UNSIGNED_BYTE;throw new Error("Unknown logical texture type "+e)}function od(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class sd{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[r]*t[r];this.outputShape=n,this.rank=n.length;const r=gc(this.rank),o=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[];for(let t=0;t<e.length;t++)r.push(`imod(${n[t]}, ${e[t]})`);return r.join()}(e);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${o}));\n      }\n    `}}class ad{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const id="if (isnan(x)) return x;",ud="return abs(x);",ld=id+"\n  return (x < 0.0) ? 0.0 : x;\n",cd=id+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",hd="return (x >= 0.0) ? x : (exp(x) - 1.0);";const dd="return -x;",pd="return ceil(x);",fd="return floor(x);",gd="return exp(x);",md="return exp(x) - 1.0;",xd="return x;",vd="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",bd="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",yd="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n";class wd{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class Cd{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e;const t=e.length,n=Zl("rc",t),r=gc(t),o=function(e,t){if(1===e)return"rc";let n="";for(let r=0;r<e;r++)n+=t[r],r<e-1&&(n+=",");return n}(t,n),s=n.slice(-2),a=t<=1?"rc":`vec2(${s.join(",")})`;this.userCode=`\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${o});\n\n        setOutput(getChannel(packedInput, ${a}));\n      }\n    `}}const{segment_util:$d}=dl,Rd=function(e,t,n){const r=new Array(e.rank).fill(0),o=e.shape.slice();return t.map(t=>{const s=[...o];s[n]=t;const a=e.slice(r,s);return r[n]+=t,a})},Ed=function(e,t){const n=new Array(e.rank);for(let r=0;r<n.length;r++)n[r]=e.shape[r]*t[r];const r=Es(n,e.dtype);for(let t=0;t<r.values.length;++t){const n=r.indexToLoc(t),o=new Array(e.rank);for(let t=0;t<o.length;t++)o[t]=n[t]%e.shape[t];const s=e.locToIndex(o);r.values[t]=e.values[s]}return r.toTensor()},kd=function(e,t,n,r,o){const s=t[t.length-1],[a,i]=[e.length/s,s],u=T(n,a*r),l=T("int32",a*r);for(let t=0;t<a;t++){const n=t*i,o=e.subarray(n,n+i),s=[];for(let e=0;e<o.length;e++)s.push({value:o[e],index:e});s.sort((e,t)=>t.value-e.value);const a=t*r,c=u.subarray(a,a+r),h=l.subarray(a,a+r);for(let e=0;e<r;e++)c[e]=s[e].value,h[e]=s[e].index}const c=t.slice();return c[c.length-1]=r,[Wr(u,c,n),Wr(l,c,"int32")]},Id=Ci,Sd={};function Ad(e,t=!1){if("linear"===e)return"return x;";if("relu"===e)return t?vd:ld;if("elu"===e)return t?yd:hd;if("relu6"===e)return t?bd:cd;if("prelu"===e)return t?Tc:Ac;throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class Nd extends class{time(e){return fl("time")}read(e){return fl("read")}readSync(e){return fl("readSync")}numDataIds(){return fl("numDataIds")}disposeData(e){return fl("disposeData")}write(e,t,n){return fl("write")}move(e,t,n,r){return fl("move")}memory(){return fl("memory")}floatPrecision(){return fl("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}batchMatMul(e,t,n,r){return fl("batchMatMul")}fusedBatchMatMul({a:e,b:t,transposeA:n,transposeB:r,bias:o,activation:s,preluActivationWeights:a}){return fl("fusedBatchMatMul")}slice(e,t,n){return fl("slice")}stridedSlice(e,t,n,r){return fl("stridedSlice")}unstack(e,t){return fl("unstack")}reverse(e,t){return fl("reverse")}concat(e,t){return fl("concat")}neg(e){return fl("neg")}add(e,t){return fl("add")}addN(e){return fl("addN")}subtract(e,t){return fl("subtract")}multiply(e,t){return fl("multiply")}realDivide(e,t){return fl("realDivide")}floorDiv(e,t){return fl("floorDiv")}sum(e,t){return fl("sum")}prod(e,t){return fl("prod")}unsortedSegmentSum(e,t,n){return fl("unsortedSegmentSum")}argMin(e,t){return fl("argMin")}argMax(e,t){return fl("argMax")}equal(e,t){return fl("equal")}notEqual(e,t){return fl("notEqual")}less(e,t){return fl("less")}lessEqual(e,t){return fl("lessEqual")}greater(e,t){return fl("greater")}greaterEqual(e,t){return fl("greaterEqual")}logicalNot(e){return fl("logicalNot")}logicalAnd(e,t){return fl("logicalAnd")}logicalOr(e,t){return fl("logicalOr")}where(e){return fl("where")}select(e,t,n){return fl("select")}topk(e,t,n){return fl("topk")}min(e,t){return fl("min")}minimum(e,t){return fl("minimum")}mod(e,t){return fl("mod")}max(e,t){return fl("max")}maximum(e,t){return fl("maximum")}all(e,t){return fl("all")}any(e,t){return fl("any")}squaredDifference(e,t){return fl("squaredDifference")}ceil(e){return fl("ceil")}floor(e){return fl("floor")}round(e){return fl("round")}sign(e){return fl("sign")}isNaN(e){return fl("isNaN")}isInf(e){return fl("isInf")}isFinite(e){return fl("isFinite")}pow(e,t){return fl("pow")}exp(e){return fl("exp")}expm1(e){return fl("expm1")}softmax(e,t){return fl("softmax")}log(e){return fl("log")}log1p(e){return fl("log1p")}sqrt(e){return fl("sqrt")}rsqrt(e){return fl("rsqrt")}square(e){return fl("square")}reciprocal(e){return fl("reciprocal")}relu(e){return fl("relu")}relu6(e){return fl("relu6")}prelu(e,t){return fl("prelu")}elu(e){return fl("elu")}eluDer(e,t){return fl("eluDer")}selu(e){return fl("selu")}int(e){return fl("int")}clip(e,t,n){return fl("clip")}abs(e){return fl("abs")}complexAbs(e){return fl("complexAbs")}sigmoid(e){return fl("sigmoid")}softplus(e){return fl("softplus")}sin(e){return fl("sin")}cos(e){return fl("cos")}tan(e){return fl("tan")}asin(e){return fl("asin")}acos(e){return fl("acos")}atan(e){return fl("atan")}atan2(e,t){return fl("atan2")}sinh(e){return fl("sinh")}cosh(e){return fl("cosh")}tanh(e){return fl("tanh")}asinh(e){return fl("asinh")}acosh(e){return fl("acosh")}atanh(e){return fl("atanh")}erf(e){return fl("erf")}step(e,t){return fl("step")}fusedConv2d({input:e,filter:t,convInfo:n,bias:r,activation:o,preluActivationWeights:s}){return fl("fusedConv2d")}conv2d(e,t,n){return fl("conv2d")}conv2dDerInput(e,t,n){return fl("conv2dDerInput")}conv2dDerFilter(e,t,n){return fl("conv2dDerFilter")}fusedDepthwiseConv2D({input:e,filter:t,convInfo:n,bias:r,activation:o,preluActivationWeights:s}){return fl("fusedDepthwiseConv2D")}depthwiseConv2D(e,t,n){return fl("depthwiseConv2D")}depthwiseConv2DDerInput(e,t,n){return fl("depthwiseConv2DDerInput")}depthwiseConv2DDerFilter(e,t,n){return fl("depthwiseConv2DDerFilter")}conv3d(e,t,n){return fl("conv3d")}conv3dDerInput(e,t,n){return fl("conv3dDerInput")}conv3dDerFilter(e,t,n){return fl("conv3dDerFilter")}maxPool(e,t){return fl("maxPool")}maxPoolBackprop(e,t,n,r){return fl("maxPoolBackprop")}avgPool(e,t){return fl("avgPool")}avgPoolBackprop(e,t,n){return fl("avgPoolBackprop")}avgPool3d(e,t){return fl("avgPool3d")}avgPool3dBackprop(e,t,n){return fl("avgPool3dBackprop")}maxPool3d(e,t){return fl("maxPool3d")}maxPool3dBackprop(e,t,n,r){return fl("maxPool3dBackprop")}reshape(e,t){return fl("reshape")}cast(e,t){return fl("cast")}tile(e,t){return fl("tile")}pad(e,t,n){return fl("pad")}transpose(e,t){return fl("transpose")}gather(e,t,n){return fl("gather")}gatherND(e,t){return fl("gatherND")}scatterND(e,t,n){return fl("scatterND")}batchToSpaceND(e,t,n){return fl("batchToSpaceND")}spaceToBatchND(e,t,n){return fl("spaceToBatchND")}resizeBilinear(e,t,n,r){return fl("resizeBilinear")}resizeBilinearBackprop(e,t,n){return fl("resizeBilinearBackprop")}resizeNearestNeighbor(e,t,n,r){return fl("resizeNearestNeighbor")}resizeNearestNeighborBackprop(e,t,n){return fl("resizeNearestNeighborBackprop")}batchNorm(e,t,n,r,o,s){return fl("batchNorm")}localResponseNormalization4D(e,t,n,r,o){return fl("localResponseNormalization4D")}LRNGrad(e,t,n,r,o,s,a){return fl("LRNGrad")}multinomial(e,t,n,r){return fl("multinomial")}oneHot(e,t,n,r){return fl("oneHot")}cumsum(e,t,n,r){return fl("cumsum")}nonMaxSuppression(e,t,n,r,o){return fl("nonMaxSuppression")}fft(e){return fl("fft")}ifft(e){return fl("ifft")}complex(e,t){return fl("complex")}real(e){return fl("real")}imag(e){return fl("imag")}cropAndResize(e,t,n,r,o,s){return fl("cropAndResize")}depthToSpace(e,t,n){return fl("depthToSpace")}split(e,t,n){return fl("split")}sparseToDense(e,t,n,r){return fl("sparseToDense")}diag(e){return fl("diag")}fill(e,t,n){return fl("fill")}onesLike(e){return fl("onesLike")}zerosLike(e){return fl("zerosLike")}linspace(e,t,n){return fl("linspace")}dispose(){return fl("dispose")}}{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.warnedAboutMemory=!1,this.warnedAboutCPUBackend=!1,this.pendingDeletes=0,this.disposed=!1,!o().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==e){const e=xl(o().getNumber("WEBGL_VERSION"));this.binaryCache=((t=o().getNumber("WEBGL_VERSION"))in Sd||(Sd[t]={}),Sd[t]),this.gpgpu=new $h(e),this.canvas=e.canvas,this.gpgpuCreatedLocally=!0}else this.gpgpu=e,this.binaryCache={},this.gpgpuCreatedLocally=!1,this.canvas=e.gl.canvas;var t;this.textureManager=new td(this.gpgpu),this.numMBBeforeWarning=null==o().global.screen?1024:o().global.screen.height*o().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new pl(this,Zo())}numDataIds(){return this.texData.numDataIds()+(this.cpuBackend?this.cpuBackend.numDataIds():0)-this.pendingDeletes}write(e,t,n){if((o().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||o().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const r={};return this.texData.set(r,{shape:t,dtype:n,values:e,usage:bl.UPLOAD}),r}move(e,t,n,r){if(o().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===r)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:r,values:t,usage:bl.UPLOAD})}readSync(e){const t=this.texData.get(e),{values:n,dtype:r,complexTensors:o,slice:s,shape:a,isPacked:i}=t;if(null!=s){let t;t=i?new wd(a,xd):new ad(a,xd);const n=this.runWebGLProgram(t,[{dataId:e,shape:a,dtype:r}],r),o=this.readSync(n.dataId);return this.disposeData(n.dataId),o}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===r)return n;const u=null!=this.activeTimers;let l,c;if(u&&(l=z()),"complex64"===r){c=ul(o.real.dataSync(),o.imag.dataSync())}else c=this.getValuesFromTexture(e);return u&&(this.downloadWaitMs+=z()-l),this.convertAndCacheOnCPU(e,c)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise(e=>t.push(e))}const t=this.texData.get(e),{values:n,shape:r,slice:s,dtype:a,complexTensors:i,isPacked:u}=t;if(null!=s){let t;t=u?new wd(r,xd):new ad(r,xd);const n=this.runWebGLProgram(t,[{dataId:e,shape:r,dtype:a}],a),o=this.read(n.dataId);return this.disposeData(n.dataId),o}if(null!=n)return this.convertAndCacheOnCPU(e);if(!o().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===o().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let l,c,h=null;if("complex64"!==a&&o().get("WEBGL_BUFFER_SUPPORTED")){l=this.decode(e);const t=this.texData.get(l.dataId);h=this.gpgpu.createBufferFromTexture(t.texture,...Cl(r))}if(this.pendingRead.set(e,[]),"complex64"!==a&&await this.gpgpu.createAndWaitForFence(),"complex64"===a){const e=await Promise.all([i.real.data(),i.imag.data()]);c=ul(e[0],e[1])}else if(null==h)c=this.getValuesFromTexture(e);else{const e=$(r);c=this.gpgpu.downloadFloat32MatrixFromBuffer(h,e)}null!=l&&this.disposeData(l.dataId);const d=this.convertAndCacheOnCPU(e,c),p=this.pendingRead.get(e);return this.pendingRead.delete(e),p.forEach(e=>e(d)),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e),this.pendingDeletes--),d}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!kl(n)){if(o().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:r}=this.texData.get(e),s=$(t);if(o().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),r=this.texData.get(n.dataId),o=this.gpgpu.downloadMatrixFromPackedTexture(r.texture,...Cl(t)).subarray(0,s);return this.disposeData(n.dataId),o}const a=o().getBool("WEBGL_PACK")&&!0===r,i=a?Ll(t):t,u=a?new oh(i):new rh(i),l=this.runWebGLProgram(u,[{shape:i,dtype:n,dataId:e}],"float32"),c=this.texData.get(l.dataId),h=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(c.texture,c.texShape[0],c.texShape[1]).subarray(0,s);return this.disposeData(l.dataId),h}async time(e){const t=this.activeTimers,n=[];let r=!1;null==this.programTimersStack?(this.programTimersStack=n,r=!0):this.activeTimers.push(n),this.activeTimers=n,e();const s=C(this.activeTimers.map(e=>e.query)).filter(e=>null!=e),a=C(this.activeTimers.map(e=>e.name)).filter(e=>null!=e);this.activeTimers=t,r&&(this.programTimersStack=null);const i={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};if(o().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(s);i.kernelMs=function(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}(e),i.getExtraProfileInfo=()=>e.map((e,t)=>({name:a[t],ms:e})).map(e=>`${e.name}: ${e.ms}`).join(", ")}else i.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,i}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return o().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:z(),endMs:null}}endTimer(e){return o().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=z(),e)}async getQueryTime(e){if(o().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e){if(this.pendingDisposal.has(e))return;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),void this.pendingDeletes++;if(!this.texData.has(e))return;this.releaseGPUData(e);const{complexTensors:t}=this.texData.get(e);null!=t&&(t.real.dispose(),t.imag.dispose()),this.texData.delete(e)}releaseGPUData(e){const{texture:t,dtype:n,texShape:r,usage:o,isPacked:s,slice:a}=this.texData.get(e),i=a&&a.origDataId||e,u=this.dataRefCount.get(i);u>1?this.dataRefCount.set(i,u-1):(this.dataRefCount.delete(i),null!=t&&(this.numBytesInGPU-=this.computeBytes(r,n),this.textureManager.releaseTexture(t,r,o,s)));const l=this.texData.get(e);l.texture=null,l.texShape=null,l.isPacked=!1,l.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture}getDataInfo(e){return this.texData.get(e)}getCPUBackend(){return o().getBool("WEBGL_CPU_FORWARD")?(null==this.cpuBackend&&(this.cpuBackend=Zo().findBackend("cpu")),this.cpuBackend):null}shouldExecuteOnCPU(e,t=128){const n=this.getCPUBackend();return this.warnedAboutCPUBackend||null!=n||o().getBool("IS_TEST")||(console.warn("Your application contains ops that are small enough to be executed on the CPU backend, however the CPU backend cannot be found. Consider importing the CPU backend (@tensorflow/tfjs-backend-cpu) for better performance."),this.warnedAboutCPUBackend=!0),null!=n&&e.every(e=>null==this.texData.get(e.dataId).texture&&$(e.shape)<t)}getGPGPUContext(){return this.gpgpu}complex(e,t){const n=this.makeOutput(e.shape,"complex64");return this.texData.get(n.dataId).complexTensors={real:Zo().keep(e.clone()),imag:Zo().keep(t.clone())},n}real(e){return this.texData.get(e.dataId).complexTensors.real.clone()}imag(e){return this.texData.get(e.dataId).complexTensors.imag.clone()}slice(e,t,n){if(this.shouldExecuteOnCPU([e]))return this.cpuBackend.slice(e,t,n);if(0===$(n))return Wr([],n,e.dtype);const{isPacked:r}=this.texData.get(e.dataId),s=function(e,t,n){let r=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){r=e;break}for(let o=r+1;o<n.length;o++)if(t[o]>0||n[o]!==e[o])return!1;return!0}(e.shape,t,n);if(r||!s){const r=o().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Zh(n):new Qh(n),s=r.getCustomSetupFunc(t);return this.compileAndRun(r,[e],null,s)}return this.uploadToGPU(e.dataId),this.shallowSlice(e,t,n)}shallowSlice(e,t,n){const r=this.texData.get(e.dataId),o=this.makeOutput(n,e.dtype),s=this.texData.get(o.dataId);Object.assign(s,r),s.shape=n,s.dtype=e.dtype;let a=function(e,t){let n=e.length>0?e[e.length-1]:1;for(let r=0;r<e.length-1;r++)n+=e[r]*t[r];return n}(t,e.strides);r.slice&&(a+=r.slice.flatOffset),s.slice={flatOffset:a,origDataId:r.slice&&r.slice.origDataId||e.dataId};const i=this.dataRefCount.get(s.slice.origDataId)||1;return this.dataRefCount.set(s.slice.origDataId,i+1),o}stridedSlice(e,t,n,r){if(this.shouldExecuteOnCPU([e]))return this.cpuBackend.stridedSlice(e,t,n,r);const o=Er(t,n,r);if(o.some(e=>0===e))return Wr([],o);const s=new ed(t,r,o);return this.compileAndRun(s,[e])}reverse(e,t){const n=o().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new qh(e.shape,t):new Kh(e.shape,t);return this.compileAndRun(n,[e])}concat(e,t){if("complex64"===e[0].dtype){const n=e.map(e=>Ys(e)),r=e.map(e=>js(e));return Xn(this.concat(n,t),this.concat(r,t))}if(this.shouldExecuteOnCPU(e))return this.cpuBackend.concat(e,t);if(1===e.length)return e[0];if(e.length>o().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const n=Math.floor(e.length/2),r=this.concat(e.slice(0,n),t),o=this.concat(e.slice(n),t);return this.concat([r,o],t)}if(o().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&e[0].rank>1){const n=new Mc(e.map(e=>e.shape),t);return this.compileAndRun(n,e)}const n=Lr(e.map(e=>e.shape),t),r=e.map(e=>e.as2D(-1,$(e.shape.slice(t)))),s=new Bc(r.map(e=>e.shape));return this.compileAndRun(s,r).reshape(n)}neg(e){if(this.shouldExecuteOnCPU([e]))return this.cpuBackend.neg(e);if(o().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,dd,e.dtype);const t=new ad(e.shape,dd);return this.compileAndRun(t,[e])}batchMatMul(e,t,n,r){const o=n?e.shape[2]:e.shape[1],s=r?t.shape[1]:t.shape[2],a=n?e.shape[1]:e.shape[2],[i,,]=e.shape;if((1===o||1===s)&&a>1e3){n&&(e=Zt(e,[0,2,1])),r&&(t=Zt(t,[0,2,1]));const o=1===s?e:e.as3D(i,a,1),u=1===s?2:1,l=1===s?t.as3D(i,1,a):t;return this.multiply(o,l).sum(u,!0)}const u=de(e.dtype,t.dtype),l=new Th(e.shape,[i,o,s],n,r);return this.compileAndRun(l,[e,t],u)}fusedBatchMatMul({a:e,b:t,transposeA:n,transposeB:r,bias:o,activation:s,preluActivationWeights:a}){const i=n?e.shape[2]:e.shape[1],u=r?t.shape[1]:t.shape[2],[l,,]=e.shape,c=de(e.dtype,t.dtype),h=null!=o,d=null!=a,p=s?Ad(s,!0):null,f=new Th(e.shape,[l,i,u],n,r,h,p,d),g=[e,t];return o&&g.push(o),a&&g.push(a),this.compileAndRun(f,g,c)}multiply(e,t){if("complex64"===e.dtype){const n=this.texData.get(e.dataId),r=this.texData.get(t.dataId),o=new Ec($c,e.shape,t.shape),s=new Ec(Rc,e.shape,t.shape),a=[this.makeComplexComponentTensorInfo(e,n.complexTensors.real),this.makeComplexComponentTensorInfo(e,n.complexTensors.imag),this.makeComplexComponentTensorInfo(t,r.complexTensors.real),this.makeComplexComponentTensorInfo(t,r.complexTensors.imag)],i=this.compileAndRun(o,a),u=this.compileAndRun(s,a),l=this.complex(i,u);return i.dispose(),u.dispose(),l}if(this.shouldExecuteOnCPU([e,t]))return this.cpuBackend.multiply(e,t);if(o().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,Sc,e.dtype);const n=new Nc(Sc,e.shape,t.shape);return this.compileAndRun(n,[e,t],e.dtype)}batchNorm(e,t,n,r,s,a){const i=[e,t,n];let u=null;null!=r&&(u=r.shape,i.push(r));let l=null;if(null!=s&&(l=s.shape,i.push(s)),o().getBool("WEBGL_PACK_NORMALIZATION")){const r=new Cc(e.shape,t.shape,n.shape,u,l,a);return this.compileAndRun(r,i)}const c=new wc(e.shape,t.shape,n.shape,u,l,a);return this.compileAndRun(c,i)}localResponseNormalization4D(e,t,n,r,s){const a=o().getBool("WEBGL_PACK_NORMALIZATION")?new Sh(e.shape,t,n,r,s):new kh(e.shape,t,n,r,s);return this.compileAndRun(a,[e])}LRNGrad(e,t,n,r,o,s,a){const i=new Ih(t.shape,r,o,s,a);return this.compileAndRun(i,[t,n,e])}tile(e,t){if("string"===e.dtype){const n=this.readSync(e.dataId).map(e=>K(e)),r=Es(e.shape,e.dtype,n);return Ed(r,t)}const n=new sd(e.shape,t);return this.compileAndRun(n,[e])}pad(e,t,n){const r=o().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Bh(e.shape,t,n):new Oh(e.shape,t,n);return this.compileAndRun(r,[e])}gather(e,t,n){if(this.shouldExecuteOnCPU([e,t]))return this.cpuBackend.gather(e,t,n);const r=new hh(e.shape,t.size,n);return this.compileAndRun(r,[e,t])}batchToSpaceND(e,t,n){b(e.rank<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");const r=t.reduce((e,t)=>e*t),o=nl(e.shape,t,r),s=rl(o.length,t.length),a=ol(e.shape,t,r),i=sl(n,t.length),u=al(a,n,t.length);return Zt(e.reshape(o),s).reshape(a).slice(i,u)}spaceToBatchND(e,t,n){b(e.rank<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");const r=t.reduce((e,t)=>e*t),o=[[0,0]];o.push(...n);for(let n=1+t.length;n<e.shape.length;++n)o.push([0,0]);const s=e.pad(o),a=nl(s.shape,t,r,!1),i=rl(a.length,t.length,!1),u=ol(s.shape,t,r,!1),l=Zt(s.reshape(a),i);return Qe(l,u)}reduce(e,t,n){const r=e.shape[0],o=e.shape[1],s=oo(o),a=new Lh({windowSize:s,inSize:o,batchSize:r},t),i=this.compileAndRun(a,[e],n);return 1===i.shape[1]?i:this.reduce(i,t,n)}argReduce(e,t,n=null){let r=e.shape[0],o=e.shape[1];null!=n&&(r=n.shape[0],o=n.shape[1]);const s=oo(o),a=new Ql({windowSize:s,inSize:o,batchSize:r},t,null==n),i=[e];null!=n&&i.push(n);const u=this.compileAndRun(a,i,"int32");return 1===u.shape[1]?u:this.argReduce(e,t,u)}argReducePacked(e,t,n=null){const r=null!=n?n.shape:e.shape,o=oo(r[r.length-1]),s=new vc(r,o,t,null==n),a=null==n?[e]:[e,n],i=this.compileAndRun(s,a,"int32");return i.rank===e.rank?this.argReducePacked(e,t,i):i}sum(e,t){nt("sum",t,e.rank);const[n,r]=et(e.shape,t),o=$(r),s=e.as2D(-1,o),a=pe(e.dtype);return this.reduce(s,"sum",a).reshape(n)}prod(e,t){if(this.shouldExecuteOnCPU([e]))return this.cpuBackend.prod(e,t);const[n,r]=et(e.shape,t),o=$(r),s=e.as2D(-1,o),a=pe(e.dtype);return this.reduce(s,"prod",a).reshape(n)}unsortedSegmentSum(e,t,n){let r=0;const o=rt([r],e.rank);let s=e;null!=o&&(s=Zt(e,o),r=st(1,e.rank)[0]);const a=$d.computeOutShape(s.shape,r,n),i=$([s.shape[r]]),u=s.as2D(-1,i),l=pe(e.dtype);let c=this.segOpCompute(u,"unsortedSegmentSum",t,l,n).reshape(a);return null!=o&&(c=Zt(c,ot(o))),c}segOpCompute(e,t,n,r,o){const s=e.shape[0],a=e.shape[1],i=$d.segOpComputeOptimalWindowSize(a,o),u=new jh({windowSize:i,inSize:a,batchSize:s,numSegments:o},t),l=this.compileAndRun(u,[e,n],r);return l.shape[1]===o?l:(n=Xa(0,o).tile([a/i]),this.segOpCompute(l,t,n,r,o))}argMinMaxReduce(e,t,n){const r=[t];if(nt("arg"+n.charAt(0).toUpperCase()+n.slice(1),r,e.rank),!o().getBool("WEBGL_PACK_REDUCE")||e.rank<=2){const[t,o]=et(e.shape,r),s=$(o),a=e.as2D(-1,s);return this.argReduce(a,n).reshape(t)}return this.argReducePacked(e,n)}argMin(e,t){return this.argMinMaxReduce(e,t,"min")}argMax(e,t){return this.argMinMaxReduce(e,t,"max")}cumsum(e,t,n,r){if(t!==e.rank-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${e.rank-1} but got axis=`+t);const o=e.shape[t];let s=e;for(let t=0;t<=Math.ceil(Math.log2(o))-1;t++){const n=new Yc(e.shape,!1,r),o=n.getCustomSetupFunc(t),a=s;s=this.compileAndRun(n,[s],s.dtype,o),a.dispose()}if(n){const t=new Yc(e.shape,n,r),o=s;s=this.compileAndRun(t,[s]),o.dispose()}return s}equal(e,t){if(o().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,"\n  return vec4(equal(a, b));\n","bool");const n=new Nc("return float(a == b);",e.shape,t.shape);return this.compileAndRun(n,[e,t],"bool")}notEqual(e,t){if(o().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,"\n  return vec4(notEqual(a, b));\n","bool");const n=new Nc("return float(a != b);",e.shape,t.shape);return this.compileAndRun(n,[e,t],"bool")}less(e,t){if(this.shouldExecuteOnCPU([e,t]))return this.cpuBackend.less(e,t);if(o().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,"\n  return vec4(lessThan(a, b));\n","bool");const n=new Nc("return float(a < b);",e.shape,t.shape);return this.compileAndRun(n,[e,t],"bool")}lessEqual(e,t){if(o().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,"\n  return vec4(lessThanEqual(a, b));\n","bool");const n=new Nc("return float(a <= b);",e.shape,t.shape);return this.compileAndRun(n,[e,t],"bool")}greater(e,t){if(this.shouldExecuteOnCPU([e,t]))return this.cpuBackend.greater(e,t);if(o().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,"\n  return vec4(greaterThan(a, b));\n","bool");const n=new Nc("return float(a > b);",e.shape,t.shape);return this.compileAndRun(n,[e,t],"bool")}greaterEqual(e,t){if(o().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,"\n  return vec4(greaterThanEqual(a, b));\n","bool");const n=new Nc("return float(a >= b);",e.shape,t.shape);return this.compileAndRun(n,[e,t],"bool")}logicalNot(e){const t=new ad(e.shape,"return float(!(x >= 1.0));");return this.compileAndRun(t,[e])}logicalAnd(e,t){if(o().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n","bool");const n=new Nc("return float(a >= 1.0 && b >= 1.0);",e.shape,t.shape);return this.compileAndRun(n,[e,t],"bool")}logicalOr(e,t){if(o().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n","bool");const n=new Nc("return float(a >= 1.0 || b >= 1.0);",e.shape,t.shape);return this.compileAndRun(n,[e,t],"bool")}select(e,t,n){const r=new Yh(e.rank,t.shape,t.rank);return this.compileAndRun(r,[e,t,n],de(t.dtype,n.dtype))}where(e){il("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return Id(e.shape,t)}topk(e,t,n){const r=e.dataSync();return kd(r,e.shape,e.dtype,t)}min(e,t){nt("min",t,e.rank);const[n,r]=et(e.shape,t),o=$(r),s=e.as2D(-1,o);return this.reduce(s,"min",s.dtype).reshape(n)}minimum(e,t){if(this.shouldExecuteOnCPU([e,t]))return this.cpuBackend.minimum(e,t);const n=o().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Dc("\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",e.shape,t.shape):new Nc("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",e.shape,t.shape);return this.compileAndRun(n,[e,t])}mod(e,t){const n=o().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Dc("\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",e.shape,t.shape):new Nc("if (b == 0.0) return NAN;\n  return mod(a, b);",e.shape,t.shape);return this.compileAndRun(n,[e,t])}maximum(e,t){if(this.shouldExecuteOnCPU([e,t]))return this.cpuBackend.maximum(e,t);const n=o().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Dc("\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",e.shape,t.shape):new Nc("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",e.shape,t.shape);return this.compileAndRun(n,[e,t])}all(e,t){nt("all",t,e.rank);const[n,r]=et(e.shape,t),o=$(r),s=e.as2D(-1,o);return this.reduce(s,"all",s.dtype).reshape(n)}any(e,t){nt("any",t,e.rank);const[n,r]=et(e.shape,t),o=$(r),s=e.as2D(-1,o);return this.reduce(s,"any",s.dtype).reshape(n)}floorDiv(e,t){if(o().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n","int32");const n=new Nc("\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",e.shape,t.shape);return this.compileAndRun(n,[e,t],"int32")}add(e,t){if("complex64"===e.dtype&&"complex64"===t.dtype)return this.complexSeparableBinaryOp(e,t,kc);if(this.shouldExecuteOnCPU([e,t]))return this.cpuBackend.add(e,t);const n=de(e.dtype,t.dtype);if(o().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,kc,n);const r=new Nc(kc,e.shape,t.shape);return this.compileAndRun(r,[e,t],n)}packedUnaryOp(e,t,n){const r=new wd(e.shape,t);return this.compileAndRun(r,[e],n)}packedBinaryOp(e,t,n,r,o=!1){const s=new Dc(n,e.shape,t.shape,o);return this.compileAndRun(s,[e,t],r)}complexSeparableBinaryOp(e,t,n){const r=this.texData.get(e.dataId),o=this.texData.get(t.dataId),[s,a]=[[r.complexTensors.real,o.complexTensors.real],[r.complexTensors.imag,o.complexTensors.imag]].map(r=>{const[o,s]=r,a=this.makeComplexComponentTensorInfo(e,o),i=this.makeComplexComponentTensorInfo(t,s),u=new Nc(n,e.shape,t.shape);return this.compileAndRun(u,[a,i],de(o.dtype,s.dtype))}),i=this.complex(s,a);return s.dispose(),a.dispose(),i}makeComplexComponentTensorInfo(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}addN(e){if(1===e.length)return e[0];if(e.length>o().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(e.length/2),n=this.addN(e.slice(0,t)),r=this.addN(e.slice(t));return this.addN([n,r])}const t=e.map(e=>e.dtype).reduce((e,t)=>de(e,t)),n=e.map(e=>e.shape),r=o().getBool("WEBGL_PACK")?new Yl(e[0].shape,n):new jl(e[0].shape,n);return this.compileAndRun(r,e,t)}subtract(e,t){if("complex64"===e.dtype&&"complex64"===t.dtype)return this.complexSeparableBinaryOp(e,t,Ic);if(this.shouldExecuteOnCPU([e,t]))return this.cpuBackend.subtract(e,t);const n=de(e.dtype,t.dtype);if(o().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(e,t,Ic,e.dtype);const r=new Nc(Ic,e.shape,t.shape);return this.compileAndRun(r,[e,t],n)}pow(e,t){const n=o().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Dc("\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",e.shape,t.shape):new Nc("\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nif (b == 0.0) {\n  return 1.0;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",e.shape,t.shape),r=de(e.dtype,t.dtype);return this.compileAndRun(n,[e,t],r)}ceil(e){if(this.shouldExecuteOnCPU([e]))return this.cpuBackend.ceil(e);if(o().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,pd,e.dtype);const t=new ad(e.shape,pd);return this.compileAndRun(t,[e])}floor(e){if(this.shouldExecuteOnCPU([e]))return this.cpuBackend.floor(e);if(o().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,fd,e.dtype);const t=new ad(e.shape,fd);return this.compileAndRun(t,[e])}sign(e){const t=new ad(e.shape,"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n");return this.compileAndRun(t,[e])}isNaN(e){const t=new ad(e.shape,"return float(isnan(x));");return this.compileAndRun(t,[e],"bool")}isInf(e){const t=new ad(e.shape,"return float(isinf(x));");return this.compileAndRun(t,[e],"bool")}isFinite(e){const t=new ad(e.shape,"return float(!isnan(x) && !isinf(x));");return this.compileAndRun(t,[e],"bool")}round(e){const t=new ad(e.shape,"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n");return this.compileAndRun(t,[e])}exp(e){if(this.shouldExecuteOnCPU([e]))return this.cpuBackend.exp(e);if(o().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,gd,e.dtype);const t=new ad(e.shape,gd);return this.compileAndRun(t,[e])}expm1(e){if(this.shouldExecuteOnCPU([e]))return this.cpuBackend.expm1(e);if(o().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,md,e.dtype);const t=new ad(e.shape,md);return this.compileAndRun(t,[e])}softmax(e,t){const n=A([t],e.shape),r=aa(e,n),o=tt(r.shape,n),s=this.subtract(e,r.reshape(o)),a=this.exp(s),i=this.sum(a,n).reshape(o);return De(a,i)}log(e){if(this.shouldExecuteOnCPU([e]))return this.cpuBackend.log(e);if(o().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",e.dtype);const t=new ad(e.shape,"if (x < 0.0) return NAN;\n  return log(x);");return this.compileAndRun(t,[e])}log1p(e){const t=new ad(e.shape,"return log(1.0 + x);");return this.compileAndRun(t,[e])}sqrt(e){const t=new ad(e.shape,"return sqrt(x);");return this.compileAndRun(t,[e])}rsqrt(e){if(this.shouldExecuteOnCPU([e]))return this.cpuBackend.rsqrt(e);const t=new ad(e.shape,"return inversesqrt(x);");return this.compileAndRun(t,[e])}reciprocal(e){const t=new ad(e.shape,"return 1.0 / x;");return this.compileAndRun(t,[e])}relu(e){let t;return t=o().getBool("WEBGL_PACK")?new wd(e.shape,vd):new ad(e.shape,ld),this.compileAndRun(t,[e])}relu6(e){let t;return t=o().getBool("WEBGL_PACK")?new wd(e.shape,bd):new ad(e.shape,cd),this.compileAndRun(t,[e])}prelu(e,t){const n=o().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Dc(Tc,e.shape,t.shape):new Nc(Ac,e.shape,t.shape);return this.compileAndRun(n,[e,t])}elu(e){if(o().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,yd,e.dtype);const t=new ad(e.shape,hd);return this.compileAndRun(t,[e])}eluDer(e,t){const n=o().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Dc("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",e.shape,t.shape):new Nc("return (b >= 1.0) ? a : a * (b + 1.0);",e.shape,t.shape);return this.compileAndRun(n,[e,t])}selu(e){const t=new ad(e.shape,"\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = 1.7580993408473768;\n  float scale = 1.0507009873554805;\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n");return this.compileAndRun(t,[e])}int(e){const t=new ad(e.shape,"return float(int(x));");return this.compileAndRun(t,[e],"int32")}clip(e,t,n){let r;r=o().getBool("WEBGL_PACK_CLIP")?new _c(e.shape):new Fc(e.shape);const s=r.getCustomSetupFunc(t,n);return this.compileAndRun(r,[e],null,s)}abs(e){if(this.shouldExecuteOnCPU([e]))return this.cpuBackend.abs(e);if(o().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,ud,e.dtype);const t=new ad(e.shape,ud);return this.compileAndRun(t,[e])}complexAbs(e){const t=this.texData.get(e.dataId),n=new Oc(e.shape),r=[this.makeComplexComponentTensorInfo(e,t.complexTensors.real),this.makeComplexComponentTensorInfo(e,t.complexTensors.imag)];return this.compileAndRun(n,r)}sigmoid(e){const t=new ad(e.shape,"return 1.0 / (1.0 + exp(-1.0 * x));");return this.compileAndRun(t,[e])}softplus(e){const t=new ad(e.shape,"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n");return this.compileAndRun(t,[e])}sin(e){const t=new ad(e.shape,"if (isnan(x)) return x;\n  return sin(x);\n");return this.compileAndRun(t,[e])}cos(e){const t=new ad(e.shape,"if (isnan(x)) return x;\n  return cos(x);\n");return this.compileAndRun(t,[e])}tan(e){const t=new ad(e.shape,"return tan(x);");return this.compileAndRun(t,[e])}asin(e){const t=new ad(e.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n");return this.compileAndRun(t,[e])}acos(e){const t=new ad(e.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n");return this.compileAndRun(t,[e])}atan(e){const t=new ad(e.shape,"if (isnan(x)) return x;\n  return atan(x);\n");return this.compileAndRun(t,[e])}atan2(e,t){const n=o().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Dc("\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",e.shape,t.shape):new Nc("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",e.shape,t.shape);return this.compileAndRun(n,[e,t])}sinh(e){const t=new ad(e.shape,"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n");return this.compileAndRun(t,[e])}cosh(e){const t=new ad(e.shape,"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n");return this.compileAndRun(t,[e])}tanh(e){const t=new ad(e.shape,"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n");return this.compileAndRun(t,[e])}asinh(e){const t=new ad(e.shape,"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));");return this.compileAndRun(t,[e])}acosh(e){const t=new ad(e.shape,"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\n  return log(x + sqrt(x * x - 1.0));");return this.compileAndRun(t,[e])}atanh(e){const t=new ad(e.shape,"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;");return this.compileAndRun(t,[e])}erf(e){const t=new ad(e.shape,'\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = 0.3275911;\n  float a1 = 0.254829592;\n  float a2 = -0.284496736;\n  float a3 = 1.421413741;\n  float a4 = -1.453152027;\n  float a5 = 1.061405429;\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n');return this.compileAndRun(t,[e])}step(e,t){const n=new ad(e.shape,function(e=0){return`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${e});\n  `}(t));return this.compileAndRun(n,[e])}conv2dByMatMul(e,t,n,r,s,a){const i=e.shape,u=this.texData.get(e.dataId),l=n.inChannels,c=i[0]*i[1]*i[2],h=n.outChannels,d="channelsLast"===n.dataFormat,p=(1===c||1===h)&&l>1e3,f=i[2]%2!=0&&!!u.isPacked;if(p||!o().getBool("WEBGL_LAZILY_UNPACK")||!o().getBool("WEBGL_PACK_BINARY_OPERATIONS")||!f){const o=d?i[0]*i[1]*i[2]:i[0]*i[2]*i[3],u=this.reshape(e,[1,o,n.inChannels]),l=this.reshape(t,[1,n.inChannels,n.outChannels]);return this.reshape(this.fusedBatchMatMul({a:u,b:l,transposeA:!1,transposeB:!1,bias:r,activation:s,preluActivationWeights:a}),n.outShape)}const g=d?i[0]*i[1]*(i[2]+1):i[0]*i[2]*(i[3]+1),m={dataId:e.dataId,shape:[1,g,n.inChannels],dtype:e.dtype},x=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,b(Vl(u.shape,m.shape),()=>`packed reshape ${u.shape} to ${m.shape} isn't free`);const v=this.reshape(t,[1,n.inChannels,n.outChannels]),y=this.fusedBatchMatMul({a:m,b:v,transposeA:!1,transposeB:!1,bias:r,activation:s,preluActivationWeights:a}),w=this.texData.get(y.dataId);return b(w.isPacked,()=>"batchMatMul result is expected to be packed"),u.shape=x,w.shape=n.outShape,Zo().makeTensorFromDataId(y.dataId,n.outShape,y.dtype)}conv2dWithIm2Row(e,t,n,r,o,s){const{filterWidth:a,filterHeight:i,inChannels:u,outWidth:l,outHeight:c,dataFormat:h}=n,d="channelsLast"===h,p=a*i*u,f=c*l,g=[p,f],m=e.squeeze([0]),x=t.reshape([1,p,-1]),v=new Eh(g,m.shape,n),b=this.compileAndRun(v,[m]).reshape([1,g[0],g[1]]),y=null!=r,w=null!=s,C=o?Ad(o,!0):null,$=new Th(b.shape,[1,f,n.outChannels],!0,!1,y,C,w),R=[b,x];r&&R.push(r),w&&R.push(s);const E=this.compileAndRun($,R);return d?E.reshape([1,c,l,n.outChannels]):E.reshape([1,n.outChannels,c,l])}fusedConv2d({input:e,filter:t,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){if(1===n.filterHeight&&1===n.filterWidth&&1===n.dilationHeight&&1===n.dilationWidth&&1===n.strideHeight&&1===n.strideWidth&&("SAME"===n.padInfo.type||"VALID"===n.padInfo.type))return this.conv2dByMatMul(e,t,n,r,s,a);if(o().getBool("WEBGL_CONV_IM2COL")&&1===e.shape[0])return this.conv2dWithIm2Row(e,t,n,r,s,a);const i=null!=r,u=null!=a,l=s?Ad(s,!1):null,c=new Hc(n,i,l,u),h=[e,t];return r&&h.push(r),a&&h.push(a),this.compileAndRun(c,h)}conv2d(e,t,n){if(1===n.filterHeight&&1===n.filterWidth&&1===n.dilationHeight&&1===n.dilationWidth&&1===n.strideHeight&&1===n.strideWidth&&("SAME"===n.padInfo.type||"VALID"===n.padInfo.type))return this.conv2dByMatMul(e,t,n);if(o().getBool("WEBGL_CONV_IM2COL")&&1===e.shape[0])return this.conv2dWithIm2Row(e,t,n);const r=new Hc(n);return this.compileAndRun(r,[e,t])}conv2dDerInput(e,t,n){const r=new Wc(n);return this.compileAndRun(r,[e,t])}conv2dDerFilter(e,t,n){const r=new Lc(n);return this.compileAndRun(r,[e,t])}fusedDepthwiseConv2D({input:e,filter:t,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){const i=o().getBool("WEBGL_PACK_DEPTHWISECONV")&&n.strideWidth<=2&&n.outChannels/n.inChannels==1,u=s?Ad(s,i):null,l=[e,t],c=null!=r,h=null!=a;let d;return c&&l.push(r),h&&l.push(a),i?(d=new Xc(n,c,u,h),this.compileAndRun(d,l)):(d=new qc(n,c,u,h),this.compileAndRun(d,l))}depthwiseConv2D(e,t,n){let r;return o().getBool("WEBGL_PACK_DEPTHWISECONV")&&n.strideWidth<=2&&n.outChannels/n.inChannels==1?(r=new Xc(n),this.compileAndRun(r,[e,t])):(r=new qc(n),this.compileAndRun(r,[e,t]))}depthwiseConv2DDerInput(e,t,n){const r=new zc(n);return this.compileAndRun(r,[e,t])}depthwiseConv2DDerFilter(e,t,n){const r=new Gc(n);return this.compileAndRun(r,[e,t])}conv3d(e,t,n){const r=new Kc(n);return this.compileAndRun(r,[e,t])}conv3dDerInput(e,t,n){const r=new Uc(n);return this.compileAndRun(r,[e,t])}conv3dDerFilter(e,t,n){const r=new Vc(n);return this.compileAndRun(r,[e,t])}maxPool(e,t){const n=new Mh(t,"max",!1);return this.compileAndRun(n,[e])}avgPool(e,t){const n=new Mh(t,"avg",!1);return this.compileAndRun(n,[e],"float32")}maxPoolBackprop(e,t,n,r){const o=new Mh(r,"max",!0),s=this.compileAndRun(o,[t]),a=new Ah(r),i=this.compileAndRun(a,[e,s],t.dtype);return s.dispose(),i}avgPoolBackprop(e,t,n){const r=new bc(n);return this.compileAndRun(r,[e],t.dtype)}cast(e,t){return ll(e,t,this)}unstack(e,t){const n=e.shape[t],r=new Array(e.rank-1);let o=0;for(let n=0;n<e.rank;n++)n!==t&&(r[o++]=e.shape[n]);const s=new Array(e.rank).fill(0),a=e.shape.slice();a[t]=1;const i=new Array(n);for(let n=0;n<i.length;n++)s[t]=n,i[n]=this.slice(e,s,a).reshape(r);return i}avgPool3d(e,t){const n=new Ph(t,"avg",!1);return this.compileAndRun(n,[e],"float32")}avgPool3dBackprop(e,t,n){const r=new yc(n);return this.compileAndRun(r,[e],t.dtype)}maxPool3d(e,t){const n=new Ph(t,"max",!1);return this.compileAndRun(n,[e],"float32")}maxPool3dBackprop(e,t,n,r){const o=new Ph(r,"max",!0),s=this.compileAndRun(o,[t]),a=new Nh(r),i=this.compileAndRun(a,[e,s],t.dtype);return s.dispose(),i}reshape(e,t){const n=this.texData.get(e.dataId);if(n.isPacked&&!Vl(e.shape,t)&&(null===n.texture||!Vl(n.shape,t))){const n=this.packedReshape(e,t);return Zo().makeTensorFromDataId(n.dataId,n.shape,n.dtype)}return cl(e,t)}resizeBilinear(e,t,n,r){const s=o().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new Gh(e.shape,t,n,r):new Uh(e.shape,t,n,r);return this.compileAndRun(s,[e],"float32")}resizeBilinearBackprop(e,t,n){const r=new Vh(e,t,n);return this.compileAndRun(r,[e])}resizeNearestNeighbor(e,t,n,r){const o=new Hh(e.shape,t,n,r);return this.compileAndRun(o,[e])}resizeNearestNeighborBackprop(e,t,n){const r=new zh(e,t,n);return this.compileAndRun(r,[e])}multinomial(e,t,n,r){const o=t?e:di(e),s=o.shape[0],a=o.shape[1],i=new Dh(s,a,n),u=i.getCustomSetupFunc(r);return this.compileAndRun(i,[o],"int32",u)}oneHot(e,t,n,r){const o=new Fh(e.size,t,n,r);return this.compileAndRun(o,[e])}diag(e){const t=new nh(e.size);return this.compileAndRun(t,[e])}cropAndResize(e,t,n,r,o,s){const a=new jc(e.shape,t.shape,r,o,s);return this.compileAndRun(a,[e,t,n],"float32")}depthToSpace(e,t,n){b(t>1,()=>"blockSize should be > 1 for depthToSpace, but was: "+t);const r=e.shape[0],o="NHWC"===n?e.shape[1]:e.shape[2],s="NHWC"===n?e.shape[2]:e.shape[3],a="NHWC"===n?e.shape[3]:e.shape[1],i=o*t,u=s*t,l=a/(t*t),c=new th("NHWC"===n?[r,i,u,l]:[r,l,i,u],t,n);return this.compileAndRun(c,[e])}split(e,t,n){return Rd(e,t,n)}scatterND(e,t,n){const{sliceRank:r,numUpdates:o,sliceSize:s,strides:a,outputSize:i}=jo(0,e,n),u=[i/s,s],l=e.reshape([o,r]),c=t.reshape([o,s]);if(0===i)return cl(Wr([]),n);const h=Oe(0),d=new Xh(o,r,l.rank,c.rank,a,u);return this.compileAndRun(d,[c,l,h]).reshape(n)}sparseToDense(e,t,n,r){const{sliceRank:o,numUpdates:s,strides:a,outputSize:i}=jo(0,e,n),u=new Xh(s,o,e.rank,t.rank,a,[i,1],!1);return this.compileAndRun(u,[t,e,r]).reshape(n)}fft(e){return this.fftImpl(e,!1)}ifft(e){return this.fftImpl(e,!0)}fftImpl(e,t){const n=this.texData.get(e.dataId),r=new lh(ih,e.shape,t),o=new lh(uh,e.shape,t),s=[this.makeComplexComponentTensorInfo(e,n.complexTensors.real),this.makeComplexComponentTensorInfo(e,n.complexTensors.imag)],a=this.compileAndRun(r,s),i=this.compileAndRun(o,s),u=this.complex(a,i).as2D(e.shape[0],e.shape[1]);return a.dispose(),i.dispose(),u}gatherND(e,t){const n=t.shape,r=n[n.length-1],[o,s,a,i]=Ko(e,t),u=t.reshape([s,r]),l=e.reshape([e.size/a,a]),c=new dh(r,i,[s,a]);return this.compileAndRun(c,[l,u]).reshape(o)}fill(e,t,n){if("string"===(n=n||B(t))){const r=D(n,$(e));return r.fill(t),Zo().makeTensor(r,e,n,this)}{const r=new ch(e,t),o=r.getCustomSetupFunc(t);return this.compileAndRun(r,[],n,o)}}onesLike(e){if("string"===e.dtype)throw new Error("onesLike is not supported under string dtype");return this.fill(e.shape,1,e.dtype)}zerosLike(e){return this.fill(e.shape,"string"===e.dtype?"":0,e.dtype)}linspace(e,t,n){return hl(e,t,n)}makeTensorInfo(e,t){const n=this.write(null,e,t);return this.texData.get(n).usage=null,{dataId:n,shape:e,dtype:t}}makeOutput(e,t){const{dataId:n}=this.makeTensorInfo(e,t);return Zo().makeTensorFromDataId(n,e,t,this)}unpackTensor(e){const t=new Cd(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new _h(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[Ml(e.shape),...Pl(e.shape)],r={dtype:e.dtype,shape:n,dataId:e.dataId},o=[Ml(t),...Pl(t)],s=new Wh(o,n),a=this.runWebGLProgram(s,[r],e.dtype,null,!0);return{dataId:a.dataId,shape:t,dtype:a.dtype}}decode(e){const t=this.texData.get(e),{isPacked:n,shape:r,dtype:o}=t,s=Ll(r);let a;a=n?new eh(s):new Zc(s);return{dtype:o,shape:r,dataId:this.runWebGLProgram(a,[{shape:s,dtype:o,dataId:e}],o,null,!0).dataId}}runWebGLProgram(e,t,n,r,s=!1){const a=this.makeTensorInfo(e.outputShape,n),i=this.texData.get(a.dataId);if(e.packedOutput&&(i.isPacked=!0),e.outPackingScheme===vl.DENSE){const t=Cl(e.outputShape);i.texShape=t.map(e=>2*e)}if(null!=e.outTexUsage&&(i.usage=e.outTexUsage),0===$(a.shape))return i.values=T(a.dtype,0),a;const u=[],l=t.map(t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&$(t.shape)<=o().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}else if(!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),u.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!Vl(n.shape,t.shape)){const e=t,r=t.shape;t.shape=n.shape,t=this.packedReshape(t,r),u.push(t),n=this.texData.get(t.dataId),e.shape=r}return this.uploadToGPU(t.dataId),{shape:t.shape,texData:n,isUniform:!1}});this.uploadToGPU(a.dataId);const c={shape:a.shape,texData:i,isUniform:!1},h=function(e,t,n){let r="";t.concat(n).forEach(e=>{const t=null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0,n=e.isUniform?"uniform":e.texData.texShape;r+=`${e.shape}_${n}_${t}`});const o=e.userCode;let s=e.constructor.name;return s+="_"+r+"_"+o,s}(e,l,c),d=this.getAndSaveBinary(h,()=>function(e,t,n,r){const s=t.userCode,a=n.map((e,n)=>{const r={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(r.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:r}}),i=a.map(e=>e.shapeInfo),u={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},l=sc(a,u,s,t.packedInputs),c=e.createProgram(l);let h=null;const d=e.getUniformLocation(c,"NAN",!1);1===o().getNumber("WEBGL_VERSION")&&(h=e.getUniformLocation(c,"INFINITY",!1));const p={};for(let n=0;n<t.variableNames.length;n++){const r=t.variableNames[n],o=!1;p[r]=e.getUniformLocation(c,r,o),p["offset"+r]=e.getUniformLocation(c,"offset"+r,o)}return{program:t,source:l,webGLProgram:c,uniformLocations:p,inShapeInfos:i,outShapeInfo:u,infLoc:h,nanLoc:d}}(this.gpgpu,e,l,c)),p=null!=this.activeTimers;let f;if(p&&(f=this.startTimer()),function(e,t,n,r,s){Rh(t.inShapeInfos,n),Rh([t.outShapeInfo],[r]);const a=r.texData.texture,i=r.texData.texShape;r.texData.isPacked?e.setOutputPackedMatrixTexture(a,i[0],i[1]):e.setOutputMatrixTexture(a,i[0],i[1]),e.setProgram(t.webGLProgram),1===o().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN),n.forEach((n,r)=>{const o=t.program.variableNames[r],s=t.uniformLocations[o],a=t.uniformLocations["offset"+o];if(null!=s)if(n.isUniform)if($(n.shape)<2)e.gl.uniform1f(s,n.uniformValues[0]);else{let t=n.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(s,t)}else null!=n.texData.slice&&null!=a&&e.gl.uniform1i(a,n.texData.slice.flatOffset),e.setInputMatrixTexture(n.texData.texture,s,r)}),null!=s&&s(e,t.webGLProgram),e.executeProgram()}(this.gpgpu,d,l,c,r),u.forEach(e=>this.disposeData(e.dataId)),p&&(f=this.endTimer(f),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(f)})),!o().getBool("WEBGL_LAZILY_UNPACK")&&i.isPacked&&!1===s){const e=this.unpackTensor(a);return this.disposeData(a.dataId),e}return a}compileAndRun(e,t,n,r,o=!1){n=n||t[0].dtype;const s=this.runWebGLProgram(e,t,n,r,o);return Zo().makeTensorFromDataId(s.dataId,s.shape,s.dtype)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){if(!this.disposed){if(!o().getBool("IS_TEST")){Object.keys(this.binaryCache).forEach(e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]})}this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=es(()=>{if(!o().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=o().getBool("DEBUG");o().set("DEBUG",!1);const t=this.abs(Oe(1e-8)).dataSync()[0];if(o().set("DEBUG",e),t>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:r,values:s,texture:a,usage:i,isPacked:u}=t;if(null!=a)return;const l=null!=this.activeTimers;let c;l&&(c=z());let h=t.texShape;if(null==h&&(h=function(e,t=!1){let n=o().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t&&(n*=2,1===(e=e.map((t,n)=>n>=e.length-2?v(e[n]):e[n])).length&&(e=[2,e[0]])),2!==e.length){const t=N(e);e=t.newShape}let r=$(e);if(e.length<=1&&r<=n)return[1,r];if(2===e.length&&e[0]<=n&&e[1]<=n)return e;if(3===e.length&&e[0]*e[1]<=n&&e[2]<=n)return[e[0]*e[1],e[2]];if(3===e.length&&e[0]<=n&&e[1]*e[2]<=n)return[e[0],e[1]*e[2]];if(4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n)return[e[0]*e[1]*e[2],e[3]];if(4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n)return[e[0],e[1]*e[2]*e[3]];if(t){const t=Ml(e);let n=2,o=2;return e.length&&([n,o]=Pl(e)),r=t*(n/2)*(o/2),k(r).map(e=>2*e)}return k(r)}(n,u),t.texShape=h),null!=s){const e=Ll(n);let o,a=h[1],i=h[0];const d=s instanceof Uint8Array;u?([a,i]=$l(h[0],h[1]),o=new ah(e,[i,a],d)):o=new sh(e,[i,a],d);const p=this.makeTensorInfo([i,a],r);this.texData.get(p.dataId).usage=d?bl.PIXELS:bl.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(p.dataId),a,i,s);const f=!0,g=this.runWebGLProgram(o,[p],r,null,f),m=this.texData.get(g.dataId);t.texture=m.texture,t.texShape=m.texShape,t.isPacked=m.isPacked,t.usage=m.usage,this.disposeData(p.dataId),this.texData.delete(g.dataId),t.values=null,l&&(this.uploadWaitMs+=z()-c)}else{const e=this.acquireTexture(h,i,r,u);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:r}=n;return this.releaseGPUData(e),null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error("Unknown dtype "+t)}(t,r)),n.values}acquireTexture(e,t,n,r){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,r)}computeBytes(e,t){return e[0]*e[1]*_(t)}}const Td={kernelName:"Div",backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{a:n,b:r}=e;return function(e,t,n){let r=new Nc("\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",e.shape,t.shape);return o().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&(r=new Dc("\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",e.shape,t.shape,!0)),n.runWebGLProgram(r,[e,t],"float32")}(n,r,t)}};class Dd{constructor(e){this.variableNames=["A"];const t=ec(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class Fd{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=ec(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const _d={kernelName:"FromPixels",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e;let{pixels:s}=t;const{numChannels:a}=r,i="undefined"!=typeof HTMLVideoElement&&s instanceof HTMLVideoElement,u="undefined"!=typeof HTMLImageElement&&s instanceof HTMLImageElement,[l,c]=i?[s.videoWidth,s.videoHeight]:[s.width,s.height],h=[c,l],d=[c,l,a];(u||i)&&(null==Od&&(Od=document.createElement("canvas").getContext("2d")),Od.canvas.width=l,Od.canvas.height=c,Od.drawImage(s,0,0,l,c),s=Od.canvas);const p=n.makeTensorInfo(h,"int32");n.texData.get(p.dataId).usage=bl.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(p.dataId),s);const f=o().getBool("WEBGL_PACK")?new Fd(d):new Dd(d),g=n.runWebGLProgram(f,[p],"int32");return n.disposeData(p.dataId),g}};let Od;var Bd=Object.freeze({__proto__:null,maxImpl:function(e,t,n,r){const o=T(r,$(n));for(let n=0;n<o.length;++n){const r=n*t;let s=e[r];for(let n=0;n<t;++n){const t=e[r+n];t>s&&(s=t)}o[n]=s}return o},transposeImpl:function(e,t,n,r,o){const s=t.length,a=$(t),i=L(t),u=L(o),l=T(n,$(o));for(let t=0;t<a;++t){const n=X(t,s,i),o=new Array(n.length);for(let e=0;e<o.length;e++)o[e]=n[r[e]];l[q(o,s,u)]=e[t]}return l}});const{maxImpl:Md,transposeImpl:Pd}=Bd;function Ld(e,t,n){const r=n.texData.get(e.dataId);return!r.isPacked||Vl(e.shape,t)||null!==r.texture&&Vl(r.shape,t)?{dataId:e.dataId,shape:t,dtype:e.dtype}:function(e,t,n){const r=[Ml(e.shape),...Pl(e.shape)],o={dtype:e.dtype,shape:r,dataId:e.dataId},s=[Ml(t),...Pl(t)],a=new Wh(s,r),i=n.runWebGLProgram(a,[o],e.dtype,null,!0);return{dataId:i.dataId,shape:t,dtype:i.dtype}}(e,t,n)}function Wd(e,t,n,r){const o=$(t),s=Ld(e,[$(e.shape)/o,o],r),a=function e(t,n,r,o){const[s,a]=t.shape,i=oo(a),u=new Lh({windowSize:i,inSize:a,batchSize:s},r),l=o.runWebGLProgram(u,[t],n);return 1===l.shape[1]?l:e(l,n,r,o)}(s,e.dtype,"max",r);return s.dataId!==e.dataId&&r.disposeData(s.dataId),Ld(a,n,r)}class Vd{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];this.outputShape=n,this.rank=n.length;const r=gc(this.rank),o=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(t);for(let t=0;t<e.length;t++)r[e[t]]=n[t];return r.join()}(t);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${o}));\n    }\n    `}}class Ud{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=gc(this.rank),o=Jl("rc",this.rank),s=new Array(this.rank);for(let e=0;e<t.length;e++)s[t[e]]=o[e];const a=`vec2(${s.slice(-2).join()})`,i=`++${o[this.rank-1]} < ${n[this.rank-1]}`,u=`getChannel(getA(${s.join()}), ${a})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${u};\n      if(${i}) {\n        result[1] = ${u};\n      }\n      --${o[this.rank-1]};\n      if(++${o[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${u};\n        if(${i}) {\n          result[3] = ${u};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function Gd(e,t,n){const r=o().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Ud(e.shape,t):new Vd(e.shape,t);return n.runWebGLProgram(r,[e],e.dtype)}const zd={kernelName:"Max",backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{reductionIndices:o,keepDims:s}=t,a=n,i=r.shape.length,u=A(o,r.shape);let l=u;const c=rt(l,i),h=null!=c,d=a.shouldExecuteOnCPU([r]);let p=r;if(h){if(d){const e=a.texData.get(p.dataId).values,t=new Array(i);for(let e=0;e<t.length;e++)t[e]=r.shape[c[e]];const n=Pd(e,r.shape,r.dtype,c,t);p=a.makeTensorInfo(t,r.dtype);a.texData.get(p.dataId).values=n}else p=Gd(r,c,a);l=st(l.length,i)}nt("max",l,i);const[f,g]=et(p.shape,l);let m,x=f;if(s&&(x=tt(f,u)),d){const e=a.texData.get(p.dataId).values,t=Md(e,$(g),x,r.dtype);m=a.makeTensorInfo(x,r.dtype);a.texData.get(m.dataId).values=t}else m=Wd(p,g,x,a);return h&&a.disposeData(p.dataId),m}};const Hd={kernelName:"MaxPoolWithArgmax",backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{filterSize:o,strides:s,pad:a,includeBatchInIndex:i}=t,u=n;b(4===r.shape.length,()=>`Error in maxPool: input must be rank 4 but got rank ${r.shape.length}.`);const l=[1,1];b(yt(s,l),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${s} and dilations '${l}'`);const c=ct(r.shape,o,s,l,a),[h,d]=function(e,t,n,r){let o=new Mh(n,"max",!1);const s=r.runWebGLProgram(o,[e],"float32");return o=new Mh(n,"max",!0,!0,t),[s,r.runWebGLProgram(o,[e],"float32")]}(r,i,c,u);return[h,d]}},Kd={kernelName:"NonMaxSuppressionV3",backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{il("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{boxes:r,scores:o}=e,{maxOutputSize:s,iouThreshold:a,scoreThreshold:i}=n,u=t;return pu(u.readSync(r.dataId),u.readSync(o.dataId),s,a,i)}},qd=fu,Xd={kernelName:"NonMaxSuppressionV4",backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{il("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{boxes:r,scores:o}=e,{maxOutputSize:s,iouThreshold:a,scoreThreshold:i,padToMaxOutputSize:u}=n,l=t,c=l.readSync(r.dataId),h=l.readSync(o.dataId),{selectedIndices:d,validOutputs:p}=qd(c,h,s,a,i,u);return[d,p]}},jd=gu,Yd={kernelName:"NonMaxSuppressionV5",backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{il("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{boxes:r,scores:o}=e,{maxOutputSize:s,iouThreshold:a,scoreThreshold:i,softNmsSigma:u}=n,l=t,c=l.readSync(r.dataId),h=l.readSync(o.dataId),d=s,p=a,f=i,g=u,{selectedIndices:m,selectedScores:x}=jd(c,h,d,p,f,g);return[m,x]}};class Qd{constructor(e,t,n,r){this.variableNames=["Image"],this.outputShape=[];const o=e[1],s=e[2],a=Math.sin(t).toFixed(3),i=Math.cos(t).toFixed(3);this.outputShape=e;const[u,l]=tl(r,o,s),c=u.toFixed(3),h=l.toFixed(3);let d="";d="number"==typeof n?`float outputValue = ${n.toFixed(2)};`:`\n        vec3 fill = vec3(${n.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - ${c}) * ${i} - (float(y) - ${h}) * ${a};\n          float coordYFloat = (float(x) - ${c}) * ${a} + (float(y) - ${h}) * ${i};\n          int coordX = int(round(coordXFloat + ${c}));\n          int coordY = int(round(coordYFloat + ${h}));\n          ${d}\n          if(coordX >= 0 && coordX < ${s} && coordY >= 0 && coordY < ${o}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const Jd=[zd,_d,Td,Hd,Kd,Xd,Yd,{kernelName:"RotateWithOffset",backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,{radians:o,fillValue:s,center:a}=t,i=n,u=new Qd(r.shape,o,s,a);return i.runWebGLProgram(u,[r],r.dtype)}},{kernelName:"Square",backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,r=t,o=new ad(n.shape,"return x * x;");return r.runWebGLProgram(o,[n],n.dtype)}},{kernelName:"SquaredDifference",backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{a:n,b:r}=e,s=t,a=o().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Dc("return (a - b) * (a - b);",n.shape,r.shape):new Nc("return (a - b) * (a - b);",n.shape,r.shape);return s.compileAndRun(a,[n,r])}},{kernelName:"Transpose",backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{perm:o}=t,s=n,a=r.shape.length,i=new Array(a);for(let e=0;e<i.length;e++)i[e]=r.shape[o[e]];let u;if(s.shouldExecuteOnCPU([r])){const e=s.texData.get(r.dataId).values,t=Pd(e,r.shape,r.dtype,o,i);u=s.makeTensorInfo(i,r.dtype);s.texData.get(u.dataId).values=t}else u=Gd(r,o,s);return u}}];for(const e of Jd)f(e);ye()&&function(e,t,n=1){ve.registerBackend(e,t,n)}("webgl",()=>new Nd,2);const Zd=aa([1,2,3,4]);console.log(Zd.dataSync())}));
//# sourceMappingURL=core_webgl.js.map
