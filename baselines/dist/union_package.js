!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(require("crypto"),require("path"),require("fs")):"function"==typeof define&&define.amd?define(["crypto","path","fs"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self).crypto,t.Cn,t.Rn)}(this,(function(t,e,n){"use strict";function r(t){return t&&"object"==typeof t&&"default"in t?t:{default:t}}var s=r(t),a=r(e),i=r(n);class o{constructor(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.populateURLFlags()}setPlatform(t,e){null!=this.platform&&console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`),this.platformName=t,this.platform=e}registerFlag(t,e,n){if(this.flagRegistry[t]={evaluationFn:e,setHook:n},null!=this.urlFlags[t]){const e=this.urlFlags[t];console.warn(`Setting feature override from URL ${t}: ${e}.`),this.set(t,e)}}async getAsync(t){return t in this.flags||(this.flags[t]=await this.evaluateFlag(t)),this.flags[t]}get(t){if(t in this.flags)return this.flags[t];const e=this.evaluateFlag(t);if(e instanceof Promise)throw new Error(`Flag ${t} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[t]=e,this.flags[t]}getNumber(t){return this.get(t)}getBool(t){return this.get(t)}getFlags(){return this.flags}get features(){return this.flags}set(t,e){if(null==this.flagRegistry[t])throw new Error(`Cannot set flag ${t} as it has not been registered.`);this.flags[t]=e,null!=this.flagRegistry[t].setHook&&this.flagRegistry[t].setHook(e)}evaluateFlag(t){if(null==this.flagRegistry[t])throw new Error(`Cannot evaluate flag '${t}': no evaluation function found.`);return this.flagRegistry[t].evaluationFn()}setFlags(t){this.flags=Object.assign({},t)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const t=function(t){const e={};return t.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(t,...n)=>(function(t,e,n){t[decodeURIComponent(e)]=decodeURIComponent(n||"")}(e,n[0],n[1]),n.join("="))),e}(this.global.location.search);if("tfjsflags"in t){t.tfjsflags.split(",").forEach(t=>{const[e,n]=t.split(":");this.urlFlags[e]=function(t,e){if("true"===(e=e.toLowerCase())||"false"===e)return"true"===e;if(""+ +e===e)return+e;throw new Error(`Could not parse value flag value ${e} for flag ${t}.`)}(e,n)})}}}function u(){return c}let l,c=null;function h(){if(null==l){let t;if("undefined"!=typeof window)t=window;else if("undefined"!=typeof global)t=global;else if("undefined"!=typeof process)t=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");t=self}l=t}return l}function p(t,e){const n=function(){const t=h();return null==t._tfGlobals&&(t._tfGlobals=new Map),t._tfGlobals}();if(n.has(t))return n.get(t);{const r=e();return n.set(t,r),n.get(t)}}const d=p("kernelRegistry",()=>new Map),f=p("gradRegistry",()=>new Map);function m(t,e){const n=w(t,e);return d.get(n)}function g(t){return f.get(t)}function y(t){const e=d.entries(),n=[];for(;;){const{done:r,value:s}=e.next();if(r)break;const[a,i]=s,[o]=a.split("_");o===t&&n.push(i)}return n}function b(t){const{kernelName:e,backendName:n}=t,r=w(e,n);d.has(r)&&console.warn(`The kernel '${e}' for backend '${n}' is already registered`),d.set(r,t)}function x(t){const{kernelName:e}=t;f.has(e)&&u().getBool("DEBUG")&&console.warn(`Overriding the gradient for '${e}'`),f.set(e,t)}function w(t,e){return`${e}_${t}`}function v(t){let e=t.length,n=0,r=0;for(;e>0;)r=Math.random()*e|0,e--,n=t[e],t[e]=t[r],t[r]=n}function k(t,e,n){return Math.max(t,Math.min(e,n))}function N(t){return t%2==0?t:t+1}function I(t){let e=0;for(let n=0;n<t.length;n++)e+=t[n];return e}function S(t,e){if(!t)throw new Error("string"==typeof e?e:e())}function C(t,e,n=""){S(R(t,e),()=>n+` Shapes ${t} and ${e} must match`)}function A(t){S(null!=t,()=>"The input to the tensor constructor must be a non-null value.")}function E(t,e=[],n=!1){if(null==e&&(e=[]),Array.isArray(t)||G(t)&&!n)for(let r=0;r<t.length;++r)E(t[r],e,n);else e.push(t);return e}function T(t){if(0===t.length)return 1;let e=t[0];for(let n=1;n<t.length;n++)e*=t[n];return e}function R(t,e){if(t===e)return!0;if(null==t||null==e)return!1;if(t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(t[n]!==e[n])return!1;return!0}function $(t){return t%1==0}function _(t){if(null!=Math.tanh)return Math.tanh(t);if(t===1/0)return 1;if(t===-1/0)return-1;{const e=Math.exp(2*t);return(e-1)/(e+1)}}function D(t){const e=Math.ceil(Math.sqrt(t));return[e,Math.ceil(t/e)]}function F(t,e){return e<=t.length?t:t+" ".repeat(e-t.length)}function O(t,e=(t=>0),n){return new Promise((r,s)=>{let a=0;const i=()=>{if(t())return void r();a++;const o=e(a);null!=n&&a>=n?s():setTimeout(i,o)};i()})}function M(t,e){let n=1,r=-1;for(let e=0;e<t.length;++e)if(t[e]>=0)n*=t[e];else if(-1===t[e]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${e}`);r=e}else if(t[e]<0)throw Error(`Shapes can not be < 0. Found ${t[e]} at dim ${e}`);if(-1===r){if(e>0&&e!==n)throw Error(`Size(${e}) must match the product of shape ${t}`);return t}if(0===n)throw Error(`Cannot infer the missing size in [${t}] when there are 0 elements`);if(e%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${e} / ${n}`);const s=t.slice();return s[r]=e/n,s}function L(t,e){const n=e.length;return S((t=null==t?e.map((t,e)=>e):[].concat(t)).every(t=>t>=-n&&t<n),()=>`All values in axis param must be in range [-${n}, ${n}) but got axis `+t),S(t.every(t=>$(t)),()=>"All values in axis param must be integers but got axis "+t),t.map(t=>t<0?n+t:t)}function z(t,e){const n=[],r=[],s=null!=e&&Array.isArray(e)&&0===e.length,a=null==e||s?null:L(e,t).sort();let i=0;for(let e=0;e<t.length;++e){if(null!=a){if(a[i]===e&&1!==t[e])throw new Error(`Can't squeeze axis ${e} since its dim '${t[e]}' is not 1`);(null==a[i]||a[i]>e)&&1===t[e]&&(n.push(t[e]),r.push(e)),a[i]<=e&&i++}1!==t[e]&&(n.push(t[e]),r.push(e))}return{newShape:n,keptDims:r}}function B(t,e){let n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else{if("bool"!==t)throw new Error("Unknown data type "+t);n=new Uint8Array(e)}return n}function P(t,e){let n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else if("bool"===t)n=new Uint8Array(e);else{if("string"!==t)throw new Error("Unknown data type "+t);n=new Array(e)}return n}function W(t,e){for(let n=0;n<t.length;n++){const r=t[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${e} being uploaded contains ${r}.`)}}function V(t){return"bool"===t||"complex64"===t||"float32"===t||"int32"===t||"string"===t}function U(t,e){return"complex64"!==e&&(("float32"!==e||"complex64"===t)&&(("int32"!==e||"float32"===t||"complex64"===t)&&("bool"!==e||"bool"!==t)))}function G(t){return t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array}function H(t){if("float32"===t||"int32"===t)return 4;if("complex64"===t)return 8;if("bool"===t)return 1;throw new Error("Unknown dtype "+t)}function q(t){if(null==t)return 0;let e=0;return t.forEach(t=>e+=t.length),e}function j(t){return"string"==typeof t||t instanceof String}function K(t){return"boolean"==typeof t}function X(t){return"number"==typeof t}function Y(t){return Array.isArray(t)?Y(t[0]):t instanceof Float32Array?"float32":t instanceof Int32Array||t instanceof Uint8Array?"int32":X(t)?"float32":j(t)?"string":K(t)?"bool":"float32"}function J(t){return!!(t&&t.constructor&&t.call&&t.apply)}function Z(t,e){for(let n=e;n<t;++n)if(t%n==0)return n;return t}function Q(t){const e=t.length;if(e<2)return[];const n=new Array(e-1);n[e-2]=t[e-1];for(let r=e-3;r>=0;--r)n[r]=n[r+1]*t[r+1];return n}function tt(t,e){if("string"===e)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(t)&&(t=E(t)),u().getBool("DEBUG")&&W(t,e),function(t,e){return t instanceof Float32Array&&"float32"===e||t instanceof Int32Array&&"int32"===e||t instanceof Uint8Array&&"bool"===e}(t,e))return t;if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e){const e=new Uint8Array(t.length);for(let n=0;n<e.length;++n)0!==Math.round(t[n])&&(e[n]=1);return e}throw new Error("Unknown data type "+e)}function et(t,e){if(0===t.length)return e[0];const n=t.reduce((t,e)=>t*e);if(0===n)return[];if(n!==e.length)throw new Error(`[${t}] does not match the input size ${e.length}.`);return function t(e,n,r){const s=new Array;if(1===n.length){const t=n[0];for(let n=0;n<t;n++)s[n]=r[e+n]}else{const a=n[0],i=n.slice(1),o=i.reduce((t,e)=>t*e);for(let n=0;n<a;n++)s[n]=t(e+n*o,i,r)}return s}(0,t,e)}function nt(t,e){const n=rt(t,e);for(let t=0;t<n.length;t++)n[t]=1;return n}function rt(t,e){if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e)return new Uint8Array(t);throw new Error("Unknown data type "+e)}function st(t,e){const n=t.reduce((t,e)=>t*e,1);if(null==e||"float32"===e)return et(t,new Float32Array(n));if("int32"===e)return et(t,new Int32Array(n));if("bool"===e)return et(t,new Uint8Array(n));throw new Error("Unknown data type "+e)}function at(){return u().platform.now()}function it(t){t.forEach(e=>{S(Number.isInteger(e)&&e>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${t}].`)})}function ot(t,e="utf-8"){return e=e||"utf-8",u().platform.encode(t,e)}function ut(t,e="utf-8"){return e=e||"utf-8",u().platform.decode(t,e)}function lt(t,e,n){if(0===e)return 0;if(1===e)return t[0];let r=t[t.length-1];for(let e=0;e<t.length-1;++e)r+=n[e]*t[e];return r}function ct(t,e,n){if(0===e)return[];if(1===e)return[t];const r=new Array(e);for(let e=0;e<r.length-1;++e)r[e]=Math.floor(t/n[e]),t-=r[e]*n[e];return r[r.length-1]=t,r}var ht=Object.freeze({__proto__:null,shuffle:v,clamp:k,nearestLargerEven:N,sum:I,randUniform:function(t,e){const n=Math.random();return e*n+(1-n)*t},distSquared:function(t,e){let n=0;for(let r=0;r<t.length;r++){const s=Number(t[r])-Number(e[r]);n+=s*s}return n},assert:S,assertShapesMatch:C,assertNonNull:A,flatten:E,sizeFromShape:T,isScalarShape:function(t){return 0===t.length},arraysEqual:R,isInt:$,tanh:_,sizeToSquarishShape:D,createShuffledIndices:function(t){const e=new Uint32Array(t);for(let n=0;n<t;++n)e[n]=n;return v(e),e},rightPad:F,repeatedTry:O,inferFromImplicitShape:M,parseAxisParam:L,squeezeShape:z,getTypedArrayFromDType:B,getArrayFromDType:P,checkConversionForErrors:W,isValidDtype:V,hasEncodingLoss:U,isTypedArray:G,bytesPerElement:H,bytesFromStringArray:q,isString:j,isBoolean:K,isNumber:X,inferDtype:Y,isFunction:J,nearestDivisor:Z,computeStrides:Q,toTypedArray:tt,toNestedArray:et,makeOnesTypedArray:nt,makeZerosTypedArray:rt,makeZerosNestedTypedArray:st,now:at,assertNonNegativeIntegerDimensions:it,fetch:function(t,e){return u().platform.fetch(t,e)},encodeString:ot,decodeString:ut,locToIndex:lt,indexToLoc:ct});class pt{constructor(t,e){this.backendTimer=t,this.logger=e,null==e&&(this.logger=new dt)}profileKernel(t,e,n){let r;const s=this.backendTimer.time(()=>{r=n()});r.map(e=>{e.data().then(n=>{!function(t,e,n){if("float32"!==e)return!1;for(let e=0;e<t.length;e++){const r=t[e];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${n}'`),!0}}(n,e.dtype,t)})});return{kernelName:t,outputs:r,inputs:e,timeMs:s.then(t=>t.kernelMs),extraInfo:s.then(t=>null!=t.getExtraProfileInfo?t.getExtraProfileInfo():"")}}logKernelProfile(t){const{kernelName:e,outputs:n,timeMs:r,inputs:s,extraInfo:a}=t;n.forEach(t=>{Promise.all([t.data(),r,a]).then(n=>{this.logger.logKernelProfile(e,t,n[0],n[1],s,n[2])})})}}class dt{logKernelProfile(t,e,n,r,s,a){const i="number"==typeof r?F(r+"ms",9):r.error,o=F(t,25),u=e.rank,l=e.size,c=F(e.shape.toString(),14);let h="";for(const t in s){const n=s[t].shape||e.shape,r=n.length;h+=`${t}: ${r}D ${r>0?n:""} `}console.log(`%c${o}\t%c${i}\t%c${u}D ${c}\t%c${l}\t%c${h}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function ft(t,e,n,r){const s=Q(e),a=function(t,e,n,r){const s=T(e),a=r[r.length-1],i=new Array(a).fill(0),o=e.length,u="complex64"===n?yt(t):t;if(o>1)for(let t=0;t<s/a;t++){const e=t*a;for(let t=0;t<a;t++)i[t]=Math.max(i[t],mt(u[e+t],0,n).length)}return i}(t,e,n,s),i=e.length,o=function t(e,n,r,s,a,i=!0){const o="complex64"===r?2:1,u=n[0],l=n.length;if(0===l){if("complex64"===r){return[mt(yt(e)[0],0,r)]}return"bool"===r?[gt(e[0])]:[e[0].toString()]}if(1===l){if(u>20){const t=3*o;let n=Array.from(e.slice(0,t)),s=Array.from(e.slice((u-3)*o,u*o));return"complex64"===r&&(n=yt(n),s=yt(s)),["["+n.map((t,e)=>mt(t,a[e],r)).join(", ")+", ..., "+s.map((t,e)=>mt(t,a[u-3+e],r)).join(", ")+"]"]}return["["+("complex64"===r?yt(e):Array.from(e)).map((t,e)=>mt(t,a[e],r)).join(", ")+"]"]}const c=n.slice(1),h=s.slice(1),p=s[0]*o,d=[];if(u>20){for(let n=0;n<3;n++){const s=n*p,i=s+p;d.push(...t(e.slice(s,i),c,r,h,a,!1))}d.push("...");for(let n=u-3;n<u;n++){const s=n*p,i=s+p;d.push(...t(e.slice(s,i),c,r,h,a,n===u-1))}}else for(let n=0;n<u;n++){const s=n*p,i=s+p;d.push(...t(e.slice(s,i),c,r,h,a,n===u-1))}const f=2===l?",":"";d[0]="["+d[0]+f;for(let t=1;t<d.length-1;t++)d[t]=" "+d[t]+f;let m=",\n";for(let t=2;t<l;t++)m+="\n";return d[d.length-1]=" "+d[d.length-1]+"]"+(i?"":m),d}(t,e,n,s,a),u=["Tensor"];return r&&(u.push("  dtype: "+n),u.push("  rank: "+i),u.push(`  shape: [${e}]`),u.push("  values:")),u.push(o.map(t=>"    "+t).join("\n")),u.join("\n")}function mt(t,e,n){let r;return r=Array.isArray(t)?parseFloat(t[0].toFixed(7))+" + "+parseFloat(t[1].toFixed(7))+"j":j(t)?`'${t}'`:"bool"===n?gt(t):parseFloat(t.toFixed(7)).toString(),F(r,e)}function gt(t){return 0===t?"false":"true"}function yt(t){const e=[];for(let n=0;n<t.length;n+=2)e.push([t[n],t[n+1]]);return e}class bt{constructor(t,e,n){if(this.dtype=e,this.shape=t.slice(),this.size=T(t),null!=n){const t=n.length;S(t===this.size,()=>`Length of values '${t}' does not match the size inferred by the shape '${this.size}'.`)}if("complex64"===e)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||P(e,this.size),this.strides=Q(t)}set(t,...e){0===e.length&&(e=[0]),S(e.length===this.rank,()=>`The number of provided coordinates (${e.length}) must match the rank (${this.rank})`);const n=this.locToIndex(e);this.values[n]=t}get(...t){0===t.length&&(t=[0]);let e=0;for(const n of t){if(n<0||n>=this.shape[e]){const e=`Requested out of range element at ${t}.   Buffer shape=`+this.shape;throw new Error(e)}e++}let n=t[t.length-1];for(let e=0;e<t.length-1;++e)n+=this.strides[e]*t[e];return this.values[n]}locToIndex(t){if(0===this.rank)return 0;if(1===this.rank)return t[0];let e=t[t.length-1];for(let n=0;n<t.length-1;++n)e+=this.strides[n]*t[n];return e}indexToLoc(t){if(0===this.rank)return[];if(1===this.rank)return[t];const e=new Array(this.shape.length);for(let n=0;n<e.length-1;++n)e[n]=Math.floor(t/this.strides[n]),t-=e[n]*this.strides[n];return e[e.length-1]=t,e}get rank(){return this.shape.length}toTensor(){return xt().makeTensor(this.values,this.shape,this.dtype)}}let xt=null,wt=null;class vt{constructor(t,e,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||"float32",this.size=T(t),this.strides=Q(t),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const t=await this.data();return wt.buffer(this.shape,this.dtype,t)}bufferSync(){return wt.buffer(this.shape,this.dtype,this.dataSync())}async array(){const t=await this.data();return et(this.shape,t)}arraySync(){return et(this.shape,this.dataSync())}async data(){this.throwIfDisposed();const t=xt().read(this.dataId);if("string"===this.dtype){const e=await t;try{return e.map(t=>ut(t))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return t}dataSync(){this.throwIfDisposed();const t=xt().readSync(this.dataId);if("string"===this.dtype)try{return t.map(t=>ut(t))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return t}async bytes(){this.throwIfDisposed();const t=await xt().read(this.dataId);return"string"===this.dtype?t:new Uint8Array(t.buffer)}dispose(){this.isDisposed||(xt().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(t=!1){return wt.print(this,t)}clone(){return this.throwIfDisposed(),wt.clone(this)}toString(t=!1){return ft(this.dataSync(),this.shape,this.dtype,t)}cast(t){return this.throwIfDisposed(),wt.cast(this,t)}variable(t=!0,e,n){return this.throwIfDisposed(),xt().makeVariable(this,t,e,n)}}Object.defineProperty(vt,Symbol.hasInstance,{value:t=>!!t&&null!=t.dataId&&null!=t.shape&&null!=t.dtype});class kt extends vt{constructor(t,e,n,r){super(t.shape,t.dtype,t.dataId,r),this.trainable=e,this.name=n}assign(t){if(t.dtype!==this.dtype)throw new Error(`dtype of the new value (${t.dtype}) and previous value (${this.dtype}) must match`);if(!R(t.shape,this.shape))throw new Error(`shape of the new value (${t.shape}) and previous value (${this.shape}) must match`);xt().disposeTensor(this),this.dataId=t.dataId,xt().incRef(this,null)}dispose(){xt().disposeVariable(this),this.isDisposedInternal=!0}}var Nt,It,St,Ct,At;Object.defineProperty(kt,Symbol.hasInstance,{value:t=>t instanceof vt&&null!=t.assign&&t.assign instanceof Function}),function(t){t.R0="R0",t.R1="R1",t.R2="R2",t.R3="R3",t.R4="R4",t.R5="R5",t.R6="R6"}(Nt||(Nt={})),function(t){t.float32="float32",t.int32="int32",t.bool="int32",t.complex64="complex64"}(It||(It={})),function(t){t.float32="float32",t.int32="int32",t.bool="bool",t.complex64="complex64"}(St||(St={})),function(t){t.float32="float32",t.int32="float32",t.bool="float32",t.complex64="complex64"}(Ct||(Ct={})),function(t){t.float32="complex64",t.int32="complex64",t.bool="complex64",t.complex64="complex64"}(At||(At={}));const Et={float32:Ct,int32:It,bool:St,complex64:At};function Tt(t,e){if("string"===t||"string"===e){if("string"===t&&"string"===e)return"string";throw new Error(`Can not upcast ${t} with ${e}`)}return Et[t][e]}function Rt(t){return Tt(t,"int32")}function $t(t,e){if(t.dtype===e.dtype)return[t,e];const n=Tt(t.dtype,e.dtype);return[t.cast(n),e.cast(n)]}function _t(t,e){S(t.dtype===e.dtype,()=>`The dtypes of the first(${t.dtype}) and second(${e.dtype}) input must match`)}function Dt(t){const e=[];return function t(e,n,r){if(null==e)return;if(e instanceof vt)return void n.push(e);if(s=e,!Array.isArray(s)&&"object"!=typeof s)return;var s;const a=e;for(const e in a){const s=a[e];r.has(s)||(r.add(s),t(s,n,r))}}(t,e,new Set),e}var Ft=Object.freeze({__proto__:null,makeTypesMatch:$t,assertTypesMatch:_t,isTensorInList:function(t,e){return e.some(e=>e.id===t.id)},getTensorsInContainer:Dt});class Ot{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null}}dispose(){for(const t in this.registeredVariables)this.registeredVariables[t].dispose()}}class Mt{constructor(t){this.ENV=t,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Ot}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then(()=>{});if(null!=this.backendInstance)return;const t=this.getSortedBackends();for(let e=0;e<t.length;e++){const n=t[e];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:t,asyncInit:e}=this.initializeBackendsAndReturnBest();if(e)throw new Error(`The highest priority backend '${t}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(t)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(t){if(!(t in this.registry)){if(!(t in this.registryFactory))return null;{const{asyncInit:e}=this.initializeBackend(t);if(e)return null}}return this.registry[t]}findBackendFactory(t){return t in this.registryFactory?this.registryFactory[t].factory:null}registerBackend(t,e,n=1){return t in this.registryFactory?(console.warn(t+" backend was already registered. Reusing existing backend factory."),!1):(this.registryFactory[t]={factory:e,priority:n},!0)}async setBackend(t){if(null==this.registryFactory[t])throw new Error(`Backend name '${t}' not found in registry`);if(this.backendName=t,null==this.registry[t]){this.backendInstance=null;const{success:e,asyncInit:n}=this.initializeBackend(t);if(!(n?await e:e))return!1}return this.backendInstance=this.registry[t],this.setupRegisteredKernels(),this.profiler=new pt(this.backendInstance),!0}setupRegisteredKernels(){y(this.backendName).forEach(t=>{null!=t.setupFunc&&t.setupFunc(this.backendInstance)})}disposeRegisteredKernels(t){y(t).forEach(e=>{null!=e.disposeFunc&&e.disposeFunc(this.registry[t])})}initializeBackend(t){const e=this.registryFactory[t];if(null==e)throw new Error(`Cannot initialize backend ${t}, no registration found.`);try{const n=e.factory();if(Promise.resolve(n)===n){const e=++this.pendingBackendInitId,r=n.then(n=>!(e<this.pendingBackendInitId)&&(this.registry[t]=n,this.pendingBackendInit=null,!0)).catch(n=>(e<this.pendingBackendInitId||(this.pendingBackendInit=null,console.warn(`Initialization of backend ${t} failed`),console.warn(n.stack||n.message)),!1));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}return this.registry[t]=n,{success:!0,asyncInit:!1}}catch(e){return console.warn(`Initialization of backend ${t} failed`),console.warn(e.stack||e.message),{success:!1,asyncInit:!1}}}removeBackend(t){if(!(t in this.registryFactory))throw new Error(t+" backend not found in registry");this.backendName===t&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,t in this.registry&&(this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t]),delete this.registryFactory[t],this.backendName===t&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((t,e)=>this.registryFactory[e].priority-this.registryFactory[t].priority)}initializeBackendsAndReturnBest(){const t=this.getSortedBackends();for(let e=0;e<t.length;e++){const n=t[e],{success:r,asyncInit:s}=this.initializeBackend(n);if(s||r)return{name:n,asyncInit:s}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(t,e){const n=this.state.tensorInfo.get(e),r=n.backend,s=this.readSync(e);r.disposeData(e),n.backend=t,t.move(e,s,n.shape,n.dtype),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(t,e){let n,r=null;if(null==e){if("function"!=typeof t)throw new Error("Please provide a function to tidy()");e=t}else{if("string"!=typeof t&&!(t instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof e)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=t}return this.scopedRun(()=>this.startScope(r),()=>this.endScope(n),()=>(n=e(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n))}scopedRun(t,e,n){t();try{const t=n();return e(),t}catch(t){throw e(),t}}nextTensorId(){return Mt.nextTensorId++}nextVariableId(){return Mt.nextVariableId++}clone(t){const e=this.makeTensorFromDataId(t.dataId,t.shape,t.dtype),n={x:t};return this.addTapeNode(this.state.activeScope.name,n,[e],t=>({x:()=>t.toFloat()}),[],{}),e}runKernel(t,e,n,r,s){return this.runKernelFunc(null,e,null,t,n,r,s)}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(t,e,n){const r=this.backend.numDataIds();let s=0;n.forEach(t=>{s+="complex64"===t.dtype?3:1});const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],i=r-e-s-a;if(i>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${t}'`)}runKernelFunc(t,e,n,r,s,a,i){let o,u=[];const l=this.isTapeOn();null==r&&(r=null!=this.state.activeScope?this.state.activeScope.name:"");const c=this.state.numBytes,h=this.state.numTensors;let p;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);const d=m(r,this.backendName);let f;if(null!=d)p=()=>{const t=this.backend.numDataIds();f=d.kernelFunc({inputs:e,attrs:s,backend:this.backend});const n=Array.isArray(f)?f:[f];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(r,t,n);const o=n.map(({dataId:t,shape:e,dtype:n})=>this.makeTensorFromDataId(t,e,n));if(l){let t=this.getTensorsForGradient(r,e,o);if(null==t){null==i&&(i=[]);const e=o.filter((t,e)=>i[e]);t=(a||[]).slice().concat(e)}u=this.saveTensorsForBackwardMode(t)}return o};else{const e=t=>{l&&(u=t.map(t=>this.keep(this.clone(t))))};p=()=>{const n=this.backend.numDataIds();f=this.tidy(()=>t(this.backend,e));const s=Array.isArray(f)?f:[f];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(r,n,s),s}}return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{if(this.ENV.getBool("DEBUG")){let t;t=this.profiler.profileKernel(r,e,()=>p()),this.profiler.logKernelProfile(t),o=t.outputs}else o=p()}),l&&this.addTapeNode(r,e,o,n,u,s),this.state.profiling&&this.state.activeProfile.kernels.push({name:r,bytesAdded:this.state.numBytes-c,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-h,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(e).map(t=>null!=e[t]?e[t].shape:null),outputShapes:o.map(t=>t.shape)}),Array.isArray(f)?o:o[0]}saveTensorsForBackwardMode(t){return t.map(t=>this.keep(this.clone(t)))}getTensorsForGradient(t,e,n){const r=g(t);if(null!=r){const t=r.inputsToSave||[],s=r.outputsToSave||[];let a;r.saveAllInputs?(S(Array.isArray(e),()=>"saveAllInputs is true, expected inputs to be an array."),a=Object.keys(e).map(t=>e[t])):a=t.map(t=>e[t]);const i=n.filter((t,e)=>s[e]);return a.concat(i)}return null}makeTensor(t,e,n,r){if(null==t)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let s=t;"string"===n&&j(t[0])&&(s=t.map(t=>ot(t)));const a=r.write(s,e,n),i=new vt(e,n,a,this.nextTensorId());if(this.incRef(i,r),"string"===n){const t=this.state.tensorInfo.get(a),e=q(s);this.state.numBytes+=e-t.bytes,t.bytes=e}return i}makeTensorFromDataId(t,e,n,r){const s=new vt(e,n=n||"float32",t,this.nextTensorId());return this.incRef(s,r),s}makeVariable(t,e=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==t.dtype&&(t=t.cast(r));const s=new kt(t,e,n,this.nextTensorId());if(null!=this.state.registeredVariables[s.name])throw new Error(`Variable with name ${s.name} was already registered`);return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}incRef(t,e){const n=this.state.tensorInfo.has(t.dataId)?this.state.tensorInfo.get(t.dataId).refCount:0;if(this.state.numTensors++,"string"===t.dtype&&this.state.numStringTensors++,0===n){this.state.numDataBuffers++;let n=0;"complex64"!==t.dtype&&"string"!==t.dtype&&(n=t.size*H(t.dtype)),this.state.tensorInfo.set(t.dataId,{backend:e||this.backend,dtype:t.dtype,shape:t.shape,bytes:n,refCount:0}),this.state.numBytes+=n}this.state.tensorInfo.get(t.dataId).refCount++,t instanceof kt||this.track(t)}disposeTensor(t){if(!this.state.tensorInfo.has(t.dataId))return;this.state.numTensors--,"string"===t.dtype&&this.state.numStringTensors--;const e=this.state.tensorInfo.get(t.dataId);e.refCount<=1?("complex64"!==t.dtype&&(this.state.numBytes-=e.bytes),this.state.numDataBuffers--,e.backend.disposeData(t.dataId),this.state.tensorInfo.delete(t.dataId)):this.state.tensorInfo.get(t.dataId).refCount--}disposeVariables(){for(const t in this.state.registeredVariables){const e=this.state.registeredVariables[t];this.disposeVariable(e)}}disposeVariable(t){this.disposeTensor(t),null!=this.state.registeredVariables[t.name]&&delete this.state.registeredVariables[t.name]}memory(){const t=this.backend.memory();return t.numTensors=this.state.numTensors,t.numDataBuffers=this.state.numDataBuffers,t.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(t.unreliable=!0,null==t.reasons&&(t.reasons=[]),t.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),t}async profile(t){this.state.profiling=!0;const e=this.state.numBytes,n=this.state.numTensors;return this.state.activeProfile.kernels=[],this.state.activeProfile.result=await t(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map(t=>t.totalBytesSnapshot)),this.state.activeProfile.newBytes=this.state.numBytes-e,this.state.activeProfile.newTensors=this.state.numTensors-n,this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(t,e,n,r,s,a){const i={id:this.state.nextTapeNodeId++,kernelName:t,inputs:e,outputs:n,saved:s},o=g(t);null!=o&&(r=o.gradFunc),null!=r&&(i.gradient=t=>(t=t.map((t,e)=>{if(null==t){const t=n[e],r=rt(t.size,t.dtype);return this.makeTensor(r,t.shape,t.dtype)}return t}),r(t.length>1?t:t[0],s,a))),this.state.activeTape.push(i)}keep(t){return t.kept=!0,t}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(t){const e={track:[],name:"unnamed scope",id:this.state.nextScopeId++};t&&(e.name=t),this.state.scopeStack.push(e),this.state.activeScope=e}endScope(t){const e=Dt(t),n=new Set(e.map(t=>t.id));for(let t=0;t<this.state.activeScope.track.length;t++){const e=this.state.activeScope.track[t];e.kept||n.has(e.id)||e.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],e.forEach(t=>{t.kept||t.scopeId!==r.id||this.track(t)})}gradients(t,e,n,r=!1){if(S(e.length>0,()=>"gradients() received an empty list of xs."),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const s=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",t));S(s instanceof vt,()=>"The result y returned by f() must be a tensor.");const a=function(t,e,n){const r={},s={};for(let t=0;t<e.length;t++)r[e[t].id]=!0;for(let n=0;n<t.length;n++){const a=t[n],i=a.inputs;for(const t in i){const n=i[t];let o=!1;for(let t=0;t<e.length;t++)if(r[n.id]){a.outputs.forEach(t=>r[t.id]=!0),o=!0,s[a.id]=!0;break}if(o)break}}const a={};a[n.id]=!0;const i={};for(let e=t.length-1;e>=0;e--){const n=t[e],r=n.inputs;for(let t=0;t<n.outputs.length;t++)if(a[n.outputs[t].id]){for(const t in r)a[r[t].id]=!0,i[n.id]=!0;break}}const o=[];for(let e=0;e<t.length;e++){const n=t[e];if(s[n.id]&&i[n.id]){const t={};for(const e in n.inputs){const s=n.inputs[e];r[s.id]&&(t[e]=s)}const e=Object.assign({},n);e.inputs=t,e.outputs=n.outputs,o.push(e)}}return o}(this.state.activeTape,e,s);if(!r&&0===a.length&&e.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{const t={};t[s.id]=null==n?function(t){const e=nt(T(t),"float32");return Lt.makeTensor(e,t,"float32")}(s.shape):n,function(t,e,n){for(let r=e.length-1;r>=0;r--){const s=e[r],a=[];if(s.outputs.forEach(e=>{const n=t[e.id];null!=n?a.push(n):a.push(null)}),null==s.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${s.kernelName}.`);const i=s.gradient(a);for(const e in s.inputs){if(!(e in i))throw new Error(`Cannot backprop through input ${e}. Available gradients found: ${Object.keys(i)}.`);const r=n(()=>i[e]());if("float32"!==r.dtype)throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input ${e} must have 'float32' dtype, but has '${r.dtype}'`);const a=s.inputs[e];if(!R(r.shape,a.shape))throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input '${e}' has shape '${r.shape}', which does not match the shape of the input '${a.shape}'`);if(null==t[a.id])t[a.id]=r;else{const e=t[a.id];t[a.id]=e.add(r),e.dispose()}}}}(t,a,t=>this.tidy(t));const r=e.map(e=>t[e.id]);return 0===this.state.gradientDepth&&(this.state.activeTape.forEach(t=>{for(const e of t.saved)e.dispose()}),this.state.activeTape=null),{value:s,grads:r}})}customGrad(t){return S(J(t),()=>"The f passed in customGrad(f) must be a function."),(...e)=>{let n;S(e.every(t=>t instanceof vt),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");const r={};return e.forEach((t,e)=>{r[e]=t}),this.runKernelFunc((r,s)=>(n=t(...e,s),S(n.value instanceof vt,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),S(J(n.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),n.value),r,(t,r)=>{const s=n.gradFunc(t,r),a=Array.isArray(s)?s:[s];S(a.length===e.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),S(a.every(t=>t instanceof vt),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");const i={};return a.forEach((t,e)=>{i[e]=()=>t}),i})}}readSync(t){return this.state.tensorInfo.get(t).backend.readSync(t)}read(t){return this.state.tensorInfo.get(t).backend.read(t)}async time(t){const e=at(),n=await this.backend.time(t);return n.wallMs=at()-e,n}track(t){return null!=this.state.activeScope&&(t.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(t)),t}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Ot;for(const t in this.registry)this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}Mt.nextTensorId=0,Mt.nextVariableId=0;const Lt=function(){const t=h();if(null==t._tfengine){const e=new o(t);t._tfengine=new Mt(e)}var e;return e=t._tfengine.ENV,c=e,xt=()=>t._tfengine,t._tfengine}();function zt(){if("undefined"!=typeof navigator&&null!=navigator){const t=navigator.userAgent||navigator.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function Bt(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}var Pt=Object.freeze({__proto__:null,isMobile:zt,isBrowser:Bt});const Wt=u();Wt.registerFlag("DEBUG",()=>!1,t=>{t&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}),Wt.registerFlag("IS_BROWSER",()=>Bt()),Wt.registerFlag("IS_NODE",()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node),Wt.registerFlag("IS_CHROME",()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),Wt.registerFlag("PROD",()=>!1),Wt.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>Wt.getBool("DEBUG")),Wt.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),Wt.registerFlag("IS_TEST",()=>!1);const Vt="Div",Ut="Max";function Gt(t,e){let n=t;if(G(t))return"string"===e?[]:[t.length];if(!Array.isArray(t))return[];const r=[];for(;Array.isArray(n)||G(n)&&"string"!==e;)r.push(n.length),n=n[0];return Array.isArray(t)&&u().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&function t(e,n,r){if(r=r||[],!Array.isArray(e)&&!G(e))return void S(0===n.length,()=>`Element arr[${r.join("][")}] is a primitive, but should be an array/TypedArray of ${n[0]} elements`);S(n.length>0,()=>`Element arr[${r.join("][")}] should be a primitive, but is an array of ${e.length} elements`),S(e.length===n[0],()=>`Element arr[${r.join("][")}] should have ${n[0]} elements, but has ${e.length} elements`);const s=n.slice(1);for(let n=0;n<e.length;++n)t(e[n],s,r.concat(n))}(t,r,[]),r}function Ht(t,e,n,r){if(null!=t&&("numeric"!==t&&t!==e||"numeric"===t&&"string"===e))throw new Error(`Argument '${n}' passed to '${r}' must be ${t} tensor, but got ${e} tensor`)}function qt(t,e,n,r="numeric"){if(t instanceof vt)return Ht(r,t.dtype,e,n),t;let s=Y(t);if("string"!==s&&["bool","int32","float32"].indexOf(r)>=0&&(s=r),Ht(r,s,e,n),null==t||!G(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t){const r=null==t?"null":t.constructor.name;throw new Error(`Argument '${e}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const a=Gt(t,s);G(t)||Array.isArray(t)||(t=[t]);const i="string"!==s?tt(t,s):E(t,[],!0);return Lt.makeTensor(i,a,s)}function jt(t,e,n,r="numeric"){if(!Array.isArray(t))throw new Error(`Argument ${e} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return t.map((t,r)=>qt(t,`${e}[${r}]`,n),r)}function Kt(t){const e=Object.keys(t);if(1!==e.length)throw new Error("Please provide an object with a single key (operation name) mapping to a function. Got an object with "+e.length+" keys.");let n=e[0];const r=t[n];n.endsWith("_")&&(n=n.substring(0,n.length-1));const s=(...t)=>{Lt.startScope(n);try{const e=r(...t);return e instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),Lt.endScope(e),e}catch(t){throw Lt.endScope(null),t}};return Object.defineProperty(s,"name",{value:n,configurable:!0}),s}const Xt=Kt({cast_:function(t,e){const n=qt(t,"x","cast");if(!V(e))throw new Error("Failed to cast to unknown dtype "+e);if("string"===e&&"string"!==n.dtype||"string"!==e&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const r={x:n},s={dtype:e};return Lt.runKernelFunc(t=>t.cast(n,e),r,null,"Cast",s)}});const Yt=Kt({mul_:function(t,e){let n=qt(t,"a","mul"),r=qt(e,"b","mul");[n,r]=$t(n,r);const s={a:n,b:r};return Lt.runKernelFunc((t,e)=>{const s=t.multiply(n,r);return e([n,r]),s},s,null,"Multiply")}});const Jt=Kt({step_:function(t,e=0){const n=qt(t,"x","step"),r={x:n},s={alpha:e};return Lt.runKernelFunc(t=>t.step(n,e),r,null,"Step",s)}}),Zt={kernelName:"Abs",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Yt(t,Jt(Xt(n,"float32"),-1))}}};const Qt=Kt({floorDiv_:function(t,e){let n=qt(t,"a","floorDiv"),r=qt(e,"b","floorDiv");[n,r]=$t(n,r);const s={a:n,b:r};return Lt.runKernelFunc((t,e)=>{const s=t.floorDiv(n,r);return e([n,r]),s},s,null,"FloorDiv")}});const te=Kt({div_:function(t,e){let n=qt(t,"a","div"),r=qt(e,"b","div");if([n,r]=$t(n,r),"int32"===n.dtype&&"int32"===r.dtype)return Qt(n,r);const s={a:n,b:r};return Lt.runKernelFunc((t,e)=>{const s=t.realDivide(n,r);return e([n,r]),s},s,null,Vt,{})}});const ee=Kt({neg_:function(t){const e=qt(t,"x","neg"),n={x:e};return Lt.runKernelFunc(t=>t.neg(e),n,null,"Negate")}});function ne(t,e,n,r){if(null==r&&(r=Y(t)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!G(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=e){it(e);const t=T(e),r=T(n);S(t===r,()=>`Based on the provided shape, [${e}], the tensor should have ${t} values but has ${r}`);for(let t=0;t<n.length;++t){const r=n[t],s=t!==n.length-1||r!==T(e.slice(t));S(n[t]===e[t]||!s,()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${e}). `)}}return G(t)||Array.isArray(t)||(t=[t]),e=e||n,t="string"!==r?tt(t,r):E(t,[],!0),Lt.makeTensor(t,e,r)}function re(t,e){if((G(t)&&"string"!==e||Array.isArray(t))&&"complex64"!==e)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===e&&G(t)&&!(t instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return ne(t,[],[],e)}const se=Kt({sqrt_:function(t){const e=qt(t,"x","sqrt"),n={x:e};return Lt.runKernelFunc((t,n)=>{const r=t.sqrt(e);return n([e]),r},n,null,"Sqrt")}});const ae=Kt({square_:function(t){const e=qt(t,"x","square"),n=[e];return Lt.runKernelFunc((t,n)=>(n([e]),t.square(e)),{x:e},null,"Square",{},n,[])}});const ie=Kt({sub_:function(t,e){let n=qt(t,"a","sub"),r=qt(e,"b","sub");[n,r]=$t(n,r);const s={a:n,b:r};return Lt.runKernelFunc((t,e)=>{const s=t.subtract(n,r);return e([n,r]),s},s,null,"Sub")}}),oe={kernelName:"Acos",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=ae(Xt(n,"float32")),r=se(ie(re(1),e));return ee(te(t,r))}}}},ue={kernelName:"Acosh",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=se(ie(ae(Xt(n,"float32")),1));return te(t,e)}}}};function le(t,e){const n=t.length,r=[];for(let s=0;s<n;s++){const a=n-1-s,i=t[a]||1;(e[e.length-1-s]||1)>1&&1===i&&r.unshift(a)}return r}function ce(t,e){const n=[];for(let r=0;r<e.length;r++){const s=t[t.length-r-1],a=e.length-r-1,i=e[a];(null==s||1===s&&i>1)&&n.unshift(a)}return n}function he(t,e){const n=[],r=Math.max(t.length,e.length);for(let s=0;s<r;s++){let r=t[t.length-s-1];null==r&&(r=1);let a=e[e.length-s-1];if(null==a&&(a=1),1===r)n.unshift(a);else if(1===a)n.unshift(r);else{if(r!==a){throw Error(`Operands could not be broadcast together with shapes ${t} and ${e}.`)}n.unshift(r)}}return n}const pe={kernelName:"Add",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=he(n.shape,r.shape);return{a:()=>{let e=t;const r=ce(n.shape,s);return r.length>0&&(e=e.sum(r)),e.reshape(n.shape)},b:()=>{let e=t;const n=ce(r.shape,s);return n.length>0&&(e=e.sum(n)),e.reshape(r.shape)}}}},de={kernelName:"AddN",saveAllInputs:!0,gradFunc:(t,e)=>{const n={};return e.forEach((e,r)=>{n[r]=()=>t.clone()}),n}};const fe=Kt({zerosLike_:function(t){const e=qt(t,"x","zerosLike"),n={x:e};return Lt.runKernelFunc(t=>t.zerosLike(e),n,null,"ZerosLike")}}),me={kernelName:"ArgMax",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>fe(n)}}},ge={kernelName:"ArgMin",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>fe(n)}}},ye={kernelName:"Asin",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>te(t,se(ie(re(1),ae(Xt(n,"float32")))))}}};const be=Kt({add_:function(t,e){let n=qt(t,"a","add"),r=qt(e,"b","add");[n,r]=$t(n,r);const s={a:n,b:r};return Lt.runKernelFunc((t,e)=>{const s=t.add(n,r);return e([n,r]),s},s,null,"Add")}}),xe={kernelName:"Asinh",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=se(be(re(1),ae(Xt(n,"float32"))));return te(t,e)}}}};const we=Kt({reshape_:function(t,e){const n=qt(t,"x","reshape",null);e=M(e,n.size),S(n.size===T(e),()=>"new shape and old shape must have the same number of elements.");const r={x:n},s={shape:e};return Lt.runKernelFunc((t,r)=>(r([n]),t.reshape(n,e)),r,null,"Reshape",s)}});function ve(t,e){for(let n=0;n<t.length;++n)if(t[t.length-n-1]!==e-1-n)return!1;return!0}function ke(t,e,n){const r=t.length+e.length,s=[];let a=0,i=0;for(let o=0;o<r;o++)-1===n.indexOf(o)?s.push(t[a++]):s.push(e[i++]);return s}function Ne(t,e){const n=[],r=t.length;for(let s=0;s<r;s++)-1===e.indexOf(s)&&n.push(t[s]);return[n,e.map(e=>t[e])]}function Ie(t,e){return ke(t,e.map(t=>1),e)}function Se(t,e,n){S(ve(e,n),()=>t+" supports only inner-most axes for now. "+`Got axes ${e} and rank-${n} input.`)}function Ce(t,e){if(ve(t,e))return null;const n=[];for(let r=0;r<e;++r)-1===t.indexOf(r)&&n.push(r);return t.forEach(t=>n.push(t)),n}function Ae(t){return t.map((t,e)=>[e,t]).sort((t,e)=>t[1]-e[1]).map(t=>t[0])}function Ee(t,e){const n=[];for(let r=e-t;r<e;++r)n.push(r);return n}const Te=Kt({sum_:function(t,e=null,n=!1){let r=qt(t,"x","sum");"bool"===r.dtype&&(r=r.toInt());const s={x:r},a={axis:e,keepDims:n};return Lt.runKernelFunc((t,s)=>{s([r]);const a=L(e,r.shape),i=Ce(a,r.rank);let o=a,u=r;null!=i&&(u=r.transpose(i),o=Ee(o.length,r.rank));let l=t.sum(u,o);if(n){const t=Ie(l.shape,a);l=l.reshape(t)}return l},s,null,"Sum",a)}}),Re={kernelName:"Atan2",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=he(n.shape,r.shape);return{a:()=>{const e=be(ae(n),ae(r));let a=Yt(t,te(r,e));const i=ce(n.shape,s);return i.length>0&&(a=Te(a,i)),we(a,n.shape)},b:()=>{const e=be(ae(n),ae(r));let a=ee(Yt(t,te(n,e)));const i=ce(r.shape,s);return i.length>0&&(a=Te(a,i)),we(a,r.shape)}}}},$e={kernelName:"Atan",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>te(t,be(ae(Xt(n,"float32")),1))}}},_e={kernelName:"Atanh",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>te(t,ie(re(1),ae(Xt(n,"float32"))))}}};function De(t,e,n,r,s="NHWC",a){return Me(t,[...e,t[3]],n,a,r,null,null,He(s))}function Fe(t,e,n,r,s,a,i="channelsLast"){const[o,u]=Be(e);let l;if("channelsLast"===i)l=[o,u,t[3],t[3]];else{if("channelsFirst"!==i)throw new Error("Unknown dataFormat "+i);l=[o,u,t[1],t[1]]}return Me(t,l,n,r,s,a,!1,i)}function Oe(t,e,n,r,s,a,i="NDHWC"){const[o,u,l]=Pe(e);let c,h;if("NDHWC"===i)h="channelsLast",c=[o,u,l,t[4],t[4]];else{if("NCDHW"!==i)throw new Error("Unknown dataFormat "+i);h="channelsFirst",c=[o,u,l,t[1],t[1]]}return Le(t,c,n,r,s,!1,h,a)}function Me(t,e,n,r,s,a,i=!1,o="channelsLast"){let[u,l,c,h]=[-1,-1,-1,-1];if("channelsLast"===o)[u,l,c,h]=t;else{if("channelsFirst"!==o)throw new Error("Unknown dataFormat "+o);[u,h,l,c]=t}const[p,d,,f]=e,[m,g]=Be(n),[y,b]=Be(r),x=We(p,y),w=We(d,b),{padInfo:v,outHeight:k,outWidth:N}=function(t,e,n,r,s,a,i,o,u){let l,c,h;if("number"==typeof t){l={top:t,bottom:t,left:t,right:t,type:0===t?"VALID":"NUMBER"};const s=function(t,e,n,r,s){null==r&&(r=ze(t,e,n));const a=t[0],i=t[1],o=Ve((a-e+2*r)/n+1,s);S($(o),()=>`The output # of rows (${o}) must be an integer. Change the stride and/or zero pad parameters`);const u=Ve((i-e+2*r)/n+1,s);return S($(u),()=>`The output # of columns (${u}) must be an integer. Change the stride and/or zero pad parameters`),[o,u]}([e,n],a,r,t,o);c=s[0],h=s[1]}else if("same"===t){c=Math.ceil(e/r),h=Math.ceil(n/s);const t=Math.max(0,(c-1)*r+a-e),o=Math.max(0,(h-1)*s+i-n),u=Math.floor(t/2),p=t-u,d=Math.floor(o/2);l={top:u,bottom:p,left:d,right:o-d,type:"SAME"}}else if("valid"===t)l={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((e-a+1)/r),h=Math.ceil((n-i+1)/s);else{if("object"!=typeof t)throw Error("Unknown padding parameter: "+t);{const p="channelsLast"===u?t[1][0]:t[2][0],d="channelsLast"===u?t[1][1]:t[2][1],f="channelsLast"===u?t[2][0]:t[3][0],m="channelsLast"===u?t[2][1]:t[3][1];l={top:p,bottom:d,left:f,right:m,type:0===p&&0===d&&0===f&&0===m?"VALID":"EXPLICIT"},c=Ve((e-a+p+d)/r+1,o),h=Ve((n-i+f+m)/s+1,o)}}return{padInfo:l,outHeight:c,outWidth:h}}(s,l,c,m,g,x,w,a,o),I=i?f*h:f;let C;return"channelsFirst"===o?C=[u,I,k,N]:"channelsLast"===o&&(C=[u,k,N,I]),{batchSize:u,dataFormat:o,inHeight:l,inWidth:c,inChannels:h,outHeight:k,outWidth:N,outChannels:I,padInfo:v,strideHeight:m,strideWidth:g,filterHeight:p,filterWidth:d,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:b,inShape:t,outShape:C,filterShape:e}}function Le(t,e,n,r,s,a=!1,i="channelsLast",o){let[u,l,c,h,p]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[u,l,c,h,p]=t;else{if("channelsFirst"!==i)throw new Error("Unknown dataFormat "+i);[u,p,l,c,h]=t}const[d,f,m,,g]=e,[y,b,x]=Pe(n),[w,v,k]=Pe(r),N=We(d,w),I=We(f,v),C=We(m,k),{padInfo:A,outDepth:E,outHeight:T,outWidth:R}=function(t,e,n,r,s,a,i,o,u,l,c){let h,p,d,f;if("number"==typeof t){h={top:t,bottom:t,left:t,right:t,front:t,back:t,type:0===t?"VALID":"NUMBER"};const a=function(t,e,n,r,s,a){null==s&&(s=ze(t,e,r));const i=t[0],o=t[1],u=t[2],l=Ve((i-e+2*s)/r+1,a);S($(l),()=>`The output # of depths (${l}) must be an integer. Change the stride and/or zero pad parameters`);const c=Ve((o-e+2*s)/r+1,a);S($(c),()=>`The output # of rows (${c}) must be an integer. Change the stride and/or zero pad parameters`);const h=Ve((u-e+2*s)/r+1,a);return S($(h),()=>`The output # of columns (${h}) must be an integer. Change the stride and/or zero pad parameters`),[l,c,h,n]}([e,n,r,1],o,1,s,t,c);p=a[0],d=a[1],f=a[2]}else if("same"===t){p=Math.ceil(e/s),d=Math.ceil(n/a),f=Math.ceil(r/i);const t=(p-1)*s+o-e,c=(d-1)*a+u-n,m=(f-1)*i+l-r,g=Math.floor(t/2),y=t-g,b=Math.floor(c/2),x=c-b,w=Math.floor(m/2);h={top:b,bottom:x,left:w,right:m-w,front:g,back:y,type:"SAME"}}else{if("valid"!==t)throw Error("Unknown padding parameter: "+t);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},p=Math.ceil((e-o+1)/s),d=Math.ceil((n-u+1)/a),f=Math.ceil((r-l+1)/i)}return{padInfo:h,outDepth:p,outHeight:d,outWidth:f}}(s,l,c,h,y,b,x,N,I,C,o),_=a?g*p:g;let D;return"channelsFirst"===i?D=[u,_,E,T,R]:"channelsLast"===i&&(D=[u,E,T,R,_]),{batchSize:u,dataFormat:i,inDepth:l,inHeight:c,inWidth:h,inChannels:p,outDepth:E,outHeight:T,outWidth:R,outChannels:_,padInfo:A,strideDepth:y,strideHeight:b,strideWidth:x,filterDepth:d,filterHeight:f,filterWidth:m,effectiveFilterDepth:N,effectiveFilterHeight:I,effectiveFilterWidth:C,dilationDepth:w,dilationHeight:v,dilationWidth:k,inShape:t,outShape:D,filterShape:e}}function ze(t,e,n,r=1){const s=We(e,r);return Math.floor((t[0]*(n-1)-n+s)/2)}function Be(t){return"number"==typeof t?[t,t,t]:2===t.length?[t[0],t[1],1]:t}function Pe(t){return"number"==typeof t?[t,t,t]:t}function We(t,e){return e<=1?t:t+(t-1)*(e-1)}function Ve(t,e){if(!e)return t;switch(e){case"round":return Math.round(t);case"ceil":return Math.ceil(t);case"floor":return Math.floor(t);default:throw new Error("Unknown roundingMode "+e)}}function Ue(t){const[e,n,r]=Be(t);return 1===e&&1===n&&1===r}function Ge(t,e){return Ue(t)||Ue(e)}function He(t){if("NHWC"===t)return"channelsLast";if("NCHW"===t)return"channelsFirst";throw new Error("Unknown dataFormat "+t)}const qe=Kt({avgPool3dBackprop_:function(t,e,n,r,s=[1,1,1],a,i){const o=qt(t,"dy","avgPool3dBackprop"),u=qt(e,"input","avgPool3dBackprop");let l=o,c=u,h=!1;4===u.rank&&(h=!0,l=we(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),c=we(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),S(5===l.rank,()=>"Error in avgPool3dBackprop: dy must be rank 5 but got rank "+l.rank+"."),S(5===c.rank,()=>"Error in avgPool3dBackprop: input must be rank 5 but got rank "+c.rank+"."),S(Ge(r,s),()=>`Error in avgPool3dBackprop: Either strides or dilations must be 1. Got strides ${r} and dilations '${s}'`),null!=i&&S($(a),()=>`Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`);const p={dy:l,input:c},d={filterSize:n,strides:r,dilations:s,pad:a,dimRoundingMode:i},f=Lt.runKernelFunc(t=>{const e=Oe(c.shape,n,r,s,a,i);return t.avgPool3dBackprop(l,c,e)},p,null,"AvgPool3DBackprop",d);return h?we(f,[f.shape[1],f.shape[2],f.shape[3],f.shape[4]]):f}}),je={kernelName:"AvgPool3D",inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{filterSize:s,strides:a,dilations:i,pad:o,dimRoundingMode:u}=n,l=null==i?[1,1,1]:i;return{x:()=>qe(t,r,s,a,l,o,u)}}};const Ke=Kt({avgPoolBackprop_:function(t,e,n,r,s){const a=qt(t,"dy","avgPoolBackprop"),i=qt(e,"input","avgPoolBackprop");S(i.rank===a.rank,()=>`Rank of input (${i.rank}) does not match rank of dy (${a.rank})`);let o=i,u=a,l=!1;3===i.rank&&(l=!0,o=we(i,[1,i.shape[0],i.shape[1],i.shape[2]]),u=we(a,[1,a.shape[0],a.shape[1],a.shape[2]])),S(4===u.rank,()=>"Error in avgPoolBackprop: dy must be rank 4 but got rank "+u.rank+"."),S(4===o.rank,()=>"Error in avgPoolBackprop: input must be rank 4 but got rank "+o.rank+".");const c={dy:u,input:o},h={filterSize:n,strides:r,pad:s},p=Lt.runKernelFunc(t=>{const e=Fe(o.shape,n,r,1,s);return t.avgPoolBackprop(u,o,e)},c,null,"AvgPoolBackprop",h);return l?we(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),Xe={kernelName:"AvgPool",inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{filterSize:s,strides:a,pad:i}=n;return{x:()=>Ke(t,r,s,a,i)}}};const Ye=Kt({matMul_:function(t,e,n=!1,r=!1){let s=qt(t,"a","matMul"),a=qt(e,"b","matMul");[s,a]=$t(s,a),S(s.rank>=2&&a.rank>=2&&s.rank===a.rank,()=>`Error in matMul: inputs must have the same rank of at least 2, got ranks ${s.rank} and ${a.rank}.`);const i=n?s.shape[s.rank-2]:s.shape[s.rank-1],o=r?a.shape[a.rank-1]:a.shape[a.rank-2],u=n?s.shape[s.rank-1]:s.shape[s.rank-2],l=r?a.shape[a.rank-2]:a.shape[a.rank-1],c=s.shape.slice(0,-2),h=a.shape.slice(0,-2),p=T(c),d=T(h);S(R(c,h),()=>`Error in matMul: outer dimensions (${c}) and (${h}) of Tensors with shapes ${s.shape} and `+a.shape+" must match."),S(i===o,()=>`Error in matMul: inner shapes (${i}) and (${o}) of Tensors with shapes ${s.shape} and ${a.shape} and transposeA=${n} and transposeB=${r} must match.`);const f=s.shape.slice(0,-2).concat([u,l]),m=we(s,n?[p,i,u]:[p,u,i]),g=we(a,r?[d,l,o]:[d,o,l]),y={a:m,b:g},b={transposeA:n,transposeB:r},x=Lt.runKernelFunc((t,e)=>(e([m,g]),t.batchMatMul(m,g,n,r)),y,null,"BatchMatMul",b);return we(x,f)}}),Je={kernelName:"BatchMatMul",inputsToSave:["a","b"],gradFunc:(t,e,n)=>{const[r,s]=e,{transposeA:a,transposeB:i}=n;return a||i?!a&&i?{a:()=>Ye(t,s,!1,!1),b:()=>Ye(t,r,!0,!1)}:a&&!i?{a:()=>Ye(s,t,!1,!0),b:()=>Ye(r,t,!1,!1)}:{a:()=>Ye(s,t,!0,!0),b:()=>Ye(t,r,!0,!0)}:{a:()=>Ye(t,s,!1,!0),b:()=>Ye(r,t,!0,!1)}}};const Ze=Kt({spaceToBatchND_:function(t,e,n){const r=qt(t,"x","spaceToBatchND");S(r.rank>=1+e.length,()=>`input rank ${r.rank} should be > than [blockShape] ${e.length}`),S(n.length===e.length,()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${e.length}`),S(r.shape.reduce((t,r,s)=>s>0&&s<=e.length?t&&(r+n[s-1][0]+n[s-1][1])%e[s-1]==0:t,!0),()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${e.toString()}`);const s={x:r},a={blockShape:e,paddings:n};return Lt.runKernelFunc(t=>t.spaceToBatchND(r,e,n),s,null,"SpaceToBatchND",a)}}),Qe={kernelName:"BatchToSpaceND",gradFunc:(t,e,n)=>{const{blockShape:r,crops:s}=n;return{x:()=>Ze(t,r,s)}}},tn={kernelName:"BroadcastTo",gradFunc:(t,e,n)=>{const r=n,s=r.inputShape,a=r.shape,i=Array.from(a);for(let t=s.length-1;t>=0;t--)if(s[t]===a[t])i[t]=1;else if(1!==s[t])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${a}].`);const o=[];for(let t=0;t<i.length;t++)i[t]>1&&o.push(t);return{x:()=>Te(t,o,!0)}}},en={kernelName:"Cast",gradFunc:t=>({x:()=>t.clone()})},nn={kernelName:"Ceil",gradFunc:t=>({x:()=>fe(t)})};const rn=Kt({greaterEqual_:function(t,e){let n=qt(t,"a","greaterEqual"),r=qt(e,"b","greaterEqual");[n,r]=$t(n,r),he(n.shape,r.shape);const s={a:n,b:r};return Lt.runKernelFunc((t,e)=>{const s=t.greaterEqual(n,r);return e([n,r]),s},s,null,"GreaterEqual")}});const sn=Kt({lessEqual_:function(t,e){let n=qt(t,"a","lessEqual"),r=qt(e,"b","lessEqual");[n,r]=$t(n,r),he(n.shape,r.shape);const s={a:n,b:r};return Lt.runKernelFunc((t,e)=>{const s=t.lessEqual(n,r);return e([n,r]),s},s,null,"LessEqual")}});const an=Kt({logicalAnd_:function(t,e){const n=qt(t,"a","logicalAnd","bool"),r=qt(e,"b","logicalAnd","bool");he(n.shape,r.shape);const s={a:n,b:r};return Lt.runKernelFunc(t=>t.logicalAnd(n,r),s,null,"LogicalAnd")}});const on=Kt({where_:function(t,e,n){const r=qt(e,"a","where"),s=qt(n,"b","where"),a=qt(t,"condition","where","bool"),i=he(r.shape,s.shape),o=r.broadcastTo(i),u=s.broadcastTo(i);1===a.rank&&S(a.shape[0]===r.shape[0],()=>"The first dimension of `a` must match the size of `condition`."),1!==a.rank&&C(a.shape,u.shape,"Error in where: ");const l={condition:a,t:o,e:u};return Lt.runKernelFunc((t,e)=>{const n=t.select(a,o,u);return e([a]),n},l,null,"SelectV2")}}),un={kernelName:"ClipByValue",inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{clipValueMin:s,clipValueMax:a}=n;return{x:()=>on(an(rn(r,s),sn(r,a)),t,fe(t))}}};function ln(t,e,n=0){let r=[];if("number"==typeof e)S(t.shape[n]%e==0,()=>"Number of splits must evenly divide the axis."),r=new Array(e).fill(t.shape[n]/e);else{S(e.reduce((t,e)=>(-1===e&&(t+=1),t),0)<=1,()=>"There should be only one negative value in split array.");const s=e.indexOf(-1);if(-1!==s){const r=e.reduce((t,e)=>e>0?t+e:t);e[s]=t.shape[n]-r}S(t.shape[n]===e.reduce((t,e)=>t+e),()=>"The sum of sizes must match the size of the axis dimension."),r=e}return r}const cn=Kt({split_:function(t,e,n=0){const r=qt(t,"x","split"),s={x:r},a={numOrSizeSplits:e,axis:n};return Lt.runKernelFunc((t,s)=>{const a=L(n,r.shape)[0],i=ln(r,e,a);return t.split(r,i,a)},s,null,"SplitV",a)}}),hn={kernelName:"Concat",saveAllInputs:!0,gradFunc:(t,e,n)=>{const r=e.map(t=>t.shape),{axis:s}=n,a=L(s,e[0].shape)[0],i=r.map(t=>t[a]);return cn(t,i,a).map(t=>()=>t)}};const pn=Kt({conv2DBackpropFilter_:function(t,e,n,r,s,a="NHWC",i){let o=t;3===t.rank&&(o=we(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let u=e;3===u.rank&&(u=we(e,[1,e.shape[0],e.shape[1],e.shape[2]])),S(4===o.rank,()=>"Error in conv2dDerFilter: input must be rank 4, but got shape "+o.shape+"."),S(4===u.rank,()=>"Error in conv2dDerFilter: dy must be rank 4, but got shape "+u.shape+"."),S(4===n.length,()=>"Error in conv2dDerFilter: filterShape must be length 4, but got "+n+".");const l="NHWC"===a?o.shape[3]:o.shape[1],c="NHWC"===a?u.shape[3]:u.shape[1];S(l===n[2],()=>`Error in conv2dDerFilter: depth of input ${l}) must match input depth in filter (${n[2]}.`),S(c===n[3],()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`),null!=i&&S($(s),()=>`Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`);const h={x:o,dy:u},p={strides:r,pad:s,dataFormat:a,dimRoundingMode:i};return Lt.runKernelFunc(t=>{const e=He(a),l=Me(o.shape,n,r,1,s,i,!1,e);return t.conv2dDerFilter(o,u,l)},h,null,"Conv2DBackpropFilter",p)}});const dn=Kt({conv2DBackpropInput_:function(t,e,n,r,s,a="NHWC",i){S(t.length===e.rank,()=>`Length of inShape (${t.length}) and rank of dy (${e.rank}) must match`);let o=t,u=e,l=!1;3===e.rank&&(l=!0,u=we(e,[1,e.shape[0],e.shape[1],e.shape[2]]),o=[1,t[0],t[1],t[2]]),S(4===o.length,()=>"Error in conv2dDerInput: inShape must be length 4, but got length "+o.length+"."),S(4===u.rank,()=>"Error in conv2dDerInput: dy must be rank 4, but got rank "+u.rank),S(4===n.rank,()=>"Error in conv2dDerInput: filter must be rank 4, but got rank "+n.rank);const c="NHWC"===a?o[3]:o[1],h="NHWC"===a?u.shape[3]:u.shape[1];S(c===n.shape[2],()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`),S(h===n.shape[3],()=>`Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${n.shape[3]}.`),null!=i&&S($(s),()=>`Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`);const p={dy:u,filter:n},d={strides:r,pad:s,dataFormat:a,dimRoundingMode:i,inputShape:o},f=Lt.runKernelFunc((t,e)=>{const l=He(a),c=Me(o,n.shape,r,1,s,i,!1,l),h=t.conv2dDerInput(u,n,c);return e([u,n]),h},p,null,"Conv2DBackpropInput",d);return l?we(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),fn={kernelName:"Conv2D",inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const[r,s]=e,{dilations:a,strides:i,pad:o,dataFormat:u}=n;return S(Ue(a),()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`),{x:()=>dn(r.shape,t,s,i,o,u),filter:()=>pn(r,t,s.shape,i,o,u)}}};const mn=Kt({conv2d_:function(t,e,n,r,s="NHWC",a=[1,1],i){const o=qt(t,"x","conv2d"),u=qt(e,"filter","conv2d");let l=o,c=!1;3===o.rank&&(c=!0,l=we(o,[1,o.shape[0],o.shape[1],o.shape[2]])),S(4===l.rank,()=>`Error in conv2d: input must be rank 4, but got rank ${l.rank}.`),S(4===u.rank,()=>"Error in conv2d: filter must be rank 4, but got rank "+u.rank+"."),null!=i&&S($(r),()=>`Error in conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`);const h="NHWC"===s?l.shape[3]:l.shape[1];S(h===u.shape[2],()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${u.shape[2]}.`),S(Ge(n,a),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`);const p={x:l,filter:u},d={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i},f=Lt.runKernelFunc((t,e)=>{const o=He(s),c=Me(l.shape,u.shape,n,a,r,i,!1,o),h=t.conv2d(l,u,c);return e([l,u]),h},p,null,"Conv2D",d);return c?we(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),gn={kernelName:"Conv2DBackpropInput",inputsToSave:["dy","filter"],gradFunc:(t,e,n)=>{const[r,s]=e,{strides:a,pad:i,dataFormat:o,dimRoundingMode:u}=n;return{dy:()=>mn(t,s,a,i,o,1,u),filter:()=>pn(t,r,s.shape,a,i,o,u)}}};const yn=Kt({conv3DBackpropFilter_:function(t,e,n,r,s){let a=t;4===t.rank&&(a=we(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]));let i=e;4===i.rank&&(i=we(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]])),S(5===a.rank,()=>"Error in conv3dDerFilter: input must be rank 5, but got shape "+a.shape+"."),S(5===i.rank,()=>"Error in conv3dDerFilter: dy must be rank 5, but got shape "+i.shape+"."),S(5===n.length,()=>"Error in conv3dDerFilter: filterShape must be length 5, but got "+n+"."),S(a.shape[4]===n[3],()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${n[3]}.`),S(i.shape[4]===n[4],()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${n[4]}).`);const o={x:a,y:i},u={strides:r,pad:s};return Lt.runKernelFunc(t=>{const e=Le(a.shape,n,r,1,s);return t.conv3dDerFilter(a,i,e)},o,null,"Conv3DBackpropFilterV2",u)}});const bn=Kt({conv3DBackpropInput_:function(t,e,n,r,s){S(t.length===e.rank,()=>`Length of inShape (${t.length}) and rank of dy (${e.rank}) must match`);let a=t,i=e,o=!1;4===e.rank&&(o=!0,i=we(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]),a=[1,t[0],t[1],t[2],t[3]]);const u=a[4],l=i.shape[4];S(5===a.length,()=>"Error in conv3dDerInput: inShape must be length 5, but got length "+a.length+"."),S(5===i.rank,()=>"Error in conv3dDerInput: dy must be rank 5, but got rank "+i.rank),S(5===n.rank,()=>"Error in conv3dDerInput: filter must be rank 5, but got rank "+n.rank),S(u===n.shape[3],()=>`Error in conv3dDerInput: depth of input (${u}) must match input depth for filter ${n.shape[3]}.`),S(l===n.shape[4],()=>`Error in conv3dDerInput: depth of output (${l}) must match output depth for filter ${n.shape[4]}.`);const c={dy:i},h={pad:s},p=Lt.runKernelFunc(t=>{const e=Le(a,n.shape,r,1,s);return t.conv3dDerInput(i,n,e)},c,null,"Conv3DBackpropInputV2",h);return o?we(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),xn={kernelName:"Conv3D",inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const{dilations:r,strides:s,pad:a}=n;S(Ue(r),()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`);const[i,o]=e;return{x:()=>bn(i.shape,t,o,s,a),filter:()=>yn(i,t,o.shape,s,a)}}};const wn=Kt({sin_:function(t){const e=qt(t,"x","sin"),n={x:e};return Lt.runKernelFunc((t,n)=>{const r=t.sin(e);return n([e]),r},n,null,"Sin")}}),vn={kernelName:"Cos",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Yt(ee(wn(Xt(n,"float32"))),t)}}};const kn=Kt({sinh_:function(t){const e=qt(t,"x","sinh"),n={x:e};return Lt.runKernelFunc((t,n)=>{const r=t.sinh(e);return n([e]),r},n,null,"Sinh")}}),Nn={kernelName:"Cosh",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Yt(kn(Xt(n,"float32")),t)}}};const In=Kt({transpose_:function(t,e){const n=qt(t,"x","transpose");if(null==e&&(e=n.shape.map((t,e)=>e).reverse()),S(n.rank===e.length,()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${e}.`),e.forEach(t=>{S(t>=0&&t<n.rank,()=>"All entries in 'perm' must be between 0 and "+(n.rank-1)+" but got "+e)}),n.rank<=1)return n.clone();const r={x:n},s={perm:e};return Lt.runKernelFunc(t=>t.transpose(n,e),r,null,"Transpose",s)}});const Sn=Kt({cumsum_:function(t,e=0,n=!1,r=!1){const s=qt(t,"x","cumsum"),a={x:s},i={axis:e,exclusive:n,reverse:r};return Lt.runKernelFunc((t,a)=>{const i=Ce([e],s.rank);let o=s;null!=i&&(o=In(s,i));const u=Ee(1,s.rank)[0];let l=t.cumsum(o,u,n,r);if(a([s]),null!=i){const t=Ae(i);l=In(l,t)}return l},a,null,"Cumsum",i)}}),Cn={kernelName:"Cumsum",inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{axis:s,exclusive:a,reverse:i}=n;return{x:()=>{const e=Ce([s],r.rank);let n=Sn(t,s,a,!i);return null!=e&&(n=In(n,e)),n}}}};const An=Kt({depthwiseConv2dNativeBackpropFilter_:function(t,e,n,r){let s=t;3===t.rank&&(s=we(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let a=e;3===a.rank&&(a=we(e,[1,e.shape[0],e.shape[1],e.shape[2]]));const i={x:s,dy:a};return Lt.runKernelFunc(t=>t.depthwiseConv2DDerFilter(s,a,r),i,null,"DepthwiseConv2dNativeBackpropFilter")}});const En=Kt({depthwiseConv2dNativeBackpropInput_:function(t,e,n,r){let s=e,a=!1;3===e.rank&&(a=!0,s=we(e,[1,e.shape[0],e.shape[1],e.shape[2]]));const i={dy:s},o=Lt.runKernelFunc(t=>t.depthwiseConv2DDerInput(s,n,r),i,null,"DepthwiseConv2dNativeBackpropInput");return a?we(o,[o.shape[1],o.shape[2],o.shape[3]]):o}}),Tn={kernelName:"DepthwiseConv2dNative",inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const{dilations:r,strides:s,pad:a,dimRoundingMode:i}=n,o=null==r?[1,1]:r;S(Ue(o),()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`);const[u,l]=e;S(4===u.rank,()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${u.rank}.`),S(4===l.rank,()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${l.rank}.`),S(u.shape[3]===l.shape[2],()=>`Error in gradient of depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${l.shape[2]}.`),S(Ge(s,o),()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${s} and dilations '${o}'.`),null!=i&&S($(a),()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`);const c=Me(u.shape,l.shape,s,o,a,i,!0);return{x:()=>En(u.shape,t,l,c),filter:()=>An(u,t,l.shape,c)}}},Rn={kernelName:"Dilation2D",inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const[r,s]=e,a={x:r,filter:s,dy:t},i={x:r,filter:s,dy:t};return{x:()=>Lt.runKernel("Dilation2DBackpropInput",a,n),filter:()=>Lt.runKernel("Dilation2DBackpropFilter",i,n)}}},$n={kernelName:Vt,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=he(n.shape,r.shape);return{a:()=>{const e=te(t,r.toFloat()),a=ce(n.shape,s);return a.length>0?Te(e,a).reshape(n.shape):e},b:()=>{let e=Yt(t,n.toFloat());const a=ce(r.shape,s);a.length>0&&(e=we(Te(e,a),r.shape));const i=ae(r);return ee(te(e,i.toFloat()))}}}},_n={kernelName:"Elu",outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e,r=e=>e.eluDer(t,n),s={dy:t,y:n};return{x:()=>Lt.runKernelFunc(r,s,null,"EluGrad")}}};const Dn=Kt({exp_:function(t){const e=qt(t,"x","exp"),n={x:e};return Lt.runKernelFunc((t,n)=>{const r=t.exp(e);return n([r]),r},n,null,"Exp")}}),Fn={kernelName:"Erf",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e,r=Yt(Dn(ee(ae(n))),2/Math.sqrt(Math.PI));return{x:()=>Yt(t,r)}}},On={kernelName:"Exp",outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Yt(t,n)}}},Mn={kernelName:"Expm1",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Yt(t,Dn(n))}}},Ln={kernelName:"Floor",gradFunc:t=>({x:()=>fe(t)})},zn={kernelName:"FloorDiv",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=he(n.shape,r.shape);return{a:()=>{const e=t.div(r.toFloat()),a=ce(n.shape,s);return a.length>0?e.sum(a).reshape(n.shape):e},b:()=>{let e=t.mul(n.toFloat());const a=ce(r.shape,s);a.length>0&&(e=e.sum(a).reshape(r.shape));const i=r.square();return e.div(i.toFloat()).neg()}}}};const Bn=Kt({rsqrt_:function(t){const e=qt(t,"x","rsqrt"),n={x:e};return Lt.runKernelFunc((t,n)=>{const r=t.rsqrt(e);return n([e]),r},n,null,"Rsqrt")}});const Pn=Kt({tile_:function(t,e){const n=qt(t,"x","tile",null);S(n.rank===e.length,()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${e}.`);const r=[n],s={x:n},a={reps:e};return Lt.runKernelFunc((t,r)=>{const s=t.tile(n,e);return r([n]),s},s,null,"Tile",a,r)}}),Wn={kernelName:"FusedBatchNorm",inputsToSave:["x","mean","variance","scale"],gradFunc:(t,e,n)=>{const{varianceEpsilon:r}=n,[s,a,i,o]=e,u=null==o?re(1):o,l=ce(a.shape,s.shape),c=[];if(1===a.rank){for(let t=0;t<s.shape.length-1;++t)c.push(s.shape[t]);c.push(1)}const h=ie(s,a),p=Yt(t,u),d=Bn(be(i,re(r))),f=Yt(Yt(Yt(d,d),d),re(-.5));return{x:()=>1===a.rank?we(Yt(Yt(t,Pn(d.as4D(1,1,1,a.shape[0]),c)),u),s.shape):we(Yt(Yt(t,d),u),s.shape),mean:()=>{let t=Yt(Yt(d,re(-1)),p);return 1===a.rank&&(t=Te(t,l)),we(t,a.shape)},variance:()=>{let t=Yt(Yt(f,h),p);return 1===a.rank&&(t=Te(t,l)),we(t,a.shape)},scale:()=>{const e=Yt(h,d);let n=Yt(t,e);return 1===a.rank&&(n=Te(n,l)),we(n,a.shape)},offset:()=>{let e=t;return 1===a.rank&&(e=Te(e,l)),we(e,a.shape)}}}};const Vn=Kt({unsortedSegmentSum_:function(t,e,n){const r=qt(t,"x","unsortedSegmentSum"),s=qt(e,"segmentIds","unsortedSegmentSum","int32");S($(n),()=>"numSegments must be of dtype int");const a={x:r,segmentIds:s},i={numSegments:n};return Lt.runKernelFunc((t,e)=>{const a=t.unsortedSegmentSum(r,s,n);return e([s]),a},a,null,"UnsortedSegmentSum",i)}}),Un={kernelName:"GatherV2",inputsToSave:["x","indices"],gradFunc:(t,e,n)=>{const[r,s]=e,{axis:a}=n,i=L(a,r.shape)[0];return{x:()=>{const e=r.shape,n=s.size,o=e.slice(0,i),u=o.length,l=e.slice(a,e.length).slice(1),c=l.length,h=Gn(0,u),p=Gn(u+1,u+1+c),d=Hn([o,[n],l]),f=we(t,d),m=we(s,[n]),g=Hn([[u],h,p]),y=In(f,g);let b=Vn(y,m,r.shape[i]);const x=Ae(g);return b=In(b,x),b},indices:()=>s}}};function Gn(t,e){const n=[];for(let r=t;r<e;++r)n.push(r);return n}function Hn(t){const e=[];for(let n=0;n<t.length;++n)for(let r=0;r<t[n].length;++r)e.push(t[n][r]);return e}const qn={kernelName:"GreaterEqual",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e;return{a:()=>fe(n),b:()=>fe(r)}}},jn={kernelName:"Identity",gradFunc:t=>({x:()=>t.toFloat()})},Kn={kernelName:"IsFinite",gradFunc:t=>({x:()=>fe(t)})},Xn={kernelName:"IsInf",gradFunc:t=>({x:()=>fe(t)})},Yn={kernelName:"IsNan",gradFunc:t=>({x:()=>fe(t)})},Jn={kernelName:"Log1p",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>te(t,be(n,1))}}},Zn={kernelName:"Log",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>te(t,Xt(n,"float32"))}}},Qn={kernelName:"LogSoftmax",inputsToSave:[],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r]=e,{axis:s}=n;return{logits:()=>{const e=r.exp();return t.sub(t.sum(s,!0).mul(e))}}}};const tr=Kt({localResponseNormalizationBackprop_:function(t,e,n,r=5,s=1,a=1,i=.5){const o={x:t,y:e,dy:n},u={depthRadius:r,bias:s,alpha:a,beta:i};return Lt.runKernelFunc(o=>o.LRNGrad(n,t,e,r,s,a,i),o,null,"LRNBackprop",u)}}),er={kernelName:"LRN",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r,s]=e,{depthRadius:a,bias:i,alpha:o,beta:u}=n;return{x:()=>tr(r,s,t,a,i,o,u)}}};const nr=Kt({equal_:function(t,e){let n=qt(t,"a","equal"),r=qt(e,"b","equal");[n,r]=$t(n,r),he(n.shape,r.shape);const s={a:n,b:r};return Lt.runKernelFunc(t=>t.equal(n,r),s,null,"Equal")}});function rr(t,e,n,r,s){return e.rank<n.rank&&(e=we(e,Ie(e.shape,r))),t.rank<n.rank&&(t=we(t,Ie(t.shape,r))),{x:()=>{const r=Yt(t,Xt(nr(n,e),t.dtype));return null==s?r:In(r,s)}}}const sr={kernelName:Ut,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const r=n,{reductionIndices:s}=r,[a,i]=e,o=L(s,a.shape),u=Ce(o,a.rank),l=rr(t,i,a,o,u);return{x:()=>{let t=l.x();return null!=u&&(t=In(t)),t}}}};const ar=Kt({less_:function(t,e){let n=qt(t,"a","less"),r=qt(e,"b","less");[n,r]=$t(n,r),he(n.shape,r.shape);const s={a:n,b:r};return Lt.runKernelFunc(t=>t.less(n,r),s,null,"Less")}}),ir={kernelName:"Maximum",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e;return{a:()=>Yt(t,Xt(rn(n,r),"float32")),b:()=>Yt(t,Xt(ar(n,r),"float32"))}}};const or=Kt({maxPool3dBackprop_:function(t,e,n,r,s,a=[1,1,1],i,o){const u=qt(t,"dy","maxPool3dBackprop"),l=qt(e,"input","maxPool3dBackprop"),c=qt(n,"output","maxPool3dBackprop");let h=u,p=l,d=c,f=!1;4===l.rank&&(f=!0,h=we(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]]),p=we(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),d=we(c,[1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]])),S(5===h.rank,()=>"Error in maxPool3dBackprop: dy must be rank 5 but got rank "+h.rank+"."),S(5===p.rank,()=>"Error in maxPool3dBackprop: input must be rank 5 but got rank "+p.rank+"."),S(5===d.rank,()=>"Error in maxPool3dBackprop: output must be rank 5 but got rank "+d.rank+"."),S(Ge(s,a),()=>`Error in maxPool3dBackprop: Either strides or dilations must be 1. Got strides ${s} and dilations '${a}'`),null!=o&&S($(i),()=>`Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode ${o} but got pad ${i}.`);const m={dy:h,input:p,output:d},g={filterSize:r,strides:s,dilations:a,pad:i,dimRoundingMode:o},y=Lt.runKernelFunc(t=>{const e=Oe(p.shape,r,s,a,i,o);return t.maxPool3dBackprop(h,p,d,e)},m,null,"MaxPool3DBackprop",g);return f?we(y,[y.shape[1],y.shape[2],y.shape[3],y.shape[4]]):y}}),ur={kernelName:"MaxPool3D",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r,s]=e,{filterSize:a,strides:i,dilations:o,pad:u,dimRoundingMode:l}=n,c=null==o?[1,1,1]:o;return{x:()=>or(t,r,s,a,i,c,u,l)}}};const lr=Kt({maxPoolBackprop_:function(t,e,n,r,s,a,i){const o=qt(t,"dy","maxPoolBackprop"),u=qt(e,"input","maxPoolBackprop"),l=qt(n,"output","maxPoolBackprop");S(u.rank===o.rank,()=>`Rank of input (${u.rank}) does not match rank of dy (${o.rank})`),S(4===o.rank,()=>"Error in maxPoolBackprop: dy must be rank 4 but got rank "+o.rank+"."),S(4===u.rank,()=>"Error in maxPoolBackprop: input must be rank 4 but got rank "+u.rank+"."),null!=i&&S($(a),()=>`Error in maxPoolBackprop: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`);const c={dy:o,input:u,output:l},h={filterSize:r,strides:s,pad:a,dimRoundingMode:i};return Lt.runKernelFunc(t=>{const e=Fe(u.shape,r,s,1,a,i);return t.maxPoolBackprop(o,u,l,e)},c,null,"MaxPoolBackprop",h)}}),cr={kernelName:"MaxPool",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r,s]=e,{filterSize:a,strides:i,pad:o}=n;return{x:()=>lr(t,r,s,a,i,o)}}},hr={kernelName:"Min",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const r=n,{axis:s}=r,[a,i]=e,o=L(s,a.shape),u=Ce(o,a.rank),l=rr(t,i,a,o,u);return{x:()=>{let t=l.x();return null!=u&&(t=In(t)),t}}}};const pr=Kt({greater_:function(t,e){let n=qt(t,"a","greater"),r=qt(e,"b","greater");[n,r]=$t(n,r),he(n.shape,r.shape);const s={a:n,b:r};return Lt.runKernelFunc(t=>t.greater(n,r),s,null,"Greater")}}),dr={kernelName:"Minimum",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e;return{a:()=>Yt(t,Xt(sn(n,r),"float32")),b:()=>Yt(t,Xt(pr(n,r),"float32"))}}};const fr=Kt({floor_:function(t){const e=qt(t,"x","floor"),n={x:e};return Lt.runKernelFunc(t=>t.floor(e),n,null,"Floor")}}),mr={kernelName:"Mod",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=he(n.shape,r.shape);return{a:()=>{const e=ce(n.shape,s);return e.length>0?we(Te(t,e),n.shape):t},b:()=>{const e=Yt(t,ee(fr(te(n,r)))),a=ce(r.shape,s);return a.length>0?we(Te(e,a),r.shape):e}}}},gr={kernelName:"Multiply",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=he(n.shape,r.shape);return{a:()=>{const e=Yt(t,Xt(r,"float32")),a=ce(n.shape,s);return a.length>0?we(Te(e,a),n.shape):e},b:()=>{const e=Yt(t,Xt(n,"float32")),a=ce(r.shape,s);return a.length>0?we(Te(e,a),r.shape):e}}}},yr={kernelName:"Negate",gradFunc:t=>({x:()=>ee(t)})};const br=Kt({complex_:function(t,e){const n=qt(t,"real","complex"),r=qt(e,"imag","complex");C(n.shape,r.shape,`real and imag shapes, ${n.shape} and ${r.shape}, must match in call to tf.complex().`);const s={real:n,imag:r};return Lt.runKernelFunc(t=>t.complex(n,r),s,null,"Complex")}});function xr(t,e="float32"){if("complex64"===e){const e=xr(t,"float32"),n=xr(t,"float32");return br(e,n)}const n=rt(T(t),e);return Lt.makeTensor(n,t,e)}const wr={kernelName:"OneHot",inputsToSave:["indices"],gradFunc:(t,e)=>{const n=e[0];return{indices:()=>xr(n.shape,"float32")}}},vr={kernelName:"OnesLike",gradFunc:t=>({x:()=>fe(t)})},kr={kernelName:"PadV2",inputsToSave:["x"],gradFunc:(t,e,n)=>{const r=e[0],{paddings:s}=n,a=s.map(t=>t[0]);return{x:()=>t.slice(a,r.shape)}}};const Nr=Kt({log_:function(t){const e=qt(t,"x","log"),n={x:e};return Lt.runKernelFunc((t,n)=>{const r=t.log(e);return n([e]),r},n,null,"Log")}});const Ir=Kt({pow_:function(t,e){let n=qt(t,"base","pow"),r=qt(e,"exp","pow");[n,r]=$t(n,r);const s={a:n,b:r};return Lt.runKernelFunc((t,e)=>{const s=t.pow(n,r);return e([n,r,s]),s},s,null,"Pow")}}),Sr={kernelName:"Pow",inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(t,e)=>{const[n,r,s]=e,a=n,i=r,o=he(a.shape,i.shape);return{a:()=>{const e=Xt(i,"float32");let n=Yt(t,Yt(e,Ir(a,ie(e,re(1)))));const r=ce(a.shape,o);return r.length>0&&(n=Te(n,r)),we(n,a.shape)},b:()=>{const e=pr(a,0),n=on(e,Nr(a),fe(a));let r=Yt(t,Yt(s,n));const u=ce(i.shape,o);return u.length>0&&(r=Te(r,u)),we(r,i.shape)}}}},Cr={kernelName:"Prelu",inputsToSave:["x","alpha"],gradFunc:(t,e)=>{const[n,r]=e,s=pr(n,0);return{x:()=>on(s,t,Yt(t,r)),alpha:()=>{let e=on(s,fe(t),Yt(t,n));const a=ce(r.shape,t.shape);return a.length>0&&(e=Te(e,a)),we(e,r.shape)}}}},Ar={kernelName:"Reciprocal",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>te(t,ee(ae(n)))}}},Er={kernelName:"Relu6",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e,r=Yt(sn(n,6),Jt(n));return{x:()=>Yt(t,Xt(r,"float32"))}}},Tr={kernelName:"Relu",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Yt(t,Xt(Jt(n),"float32"))}}},Rr={kernelName:"Reshape",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>we(t,n.shape)}}},$r={kernelName:"ResizeBilinear",inputsToSave:["images"],gradFunc:(t,e,n)=>{const[r]=e,s=e=>{const{alignCorners:s}=n;return e.resizeBilinearBackprop(t,r,s)},a={images:r};return{images:()=>Lt.runKernelFunc(s,a,null,"ResizeBilinearGrad",n)}}},_r={kernelName:"ResizeNearestNeighbor",inputsToSave:["images"],gradFunc:(t,e,n)=>{const[r]=e,s=e=>{const{alignCorners:s}=n;return e.resizeNearestNeighborBackprop(t,r,s)},a={images:r};return{images:()=>Lt.runKernelFunc(s,a,null,"ResizeNearestNeighborGrad",n)}}};const Dr=Kt({clone_:function(t){const e=qt(t,"x","clone",null),n={x:e};return Lt.runKernelFunc(()=>Lt.makeTensorFromDataId(e.dataId,e.shape,e.dtype),n,null,"Identity")}});const Fr=Kt({reverse_:function(t,e){const n=qt(t,"x","reverse"),r={x:n},s={dims:e};return Lt.runKernelFunc(t=>{const r=L(e,n.shape);if(0===n.rank)return Dr(n);const s=t.reverse(n,r);return we(s,n.shape)},r,null,"Reverse",s)}}),Or={kernelName:"Reverse",gradFunc:(t,e,n)=>{const{dims:r}=n,s=L(r,t.shape);return{x:()=>Fr(t,s)}}},Mr={kernelName:"Round",gradFunc:t=>({x:()=>fe(t)})},Lr={kernelName:"Rsqrt",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ee(te(t,Yt(Ir(n,1.5),2)))}}};const zr=Kt({logicalNot_:function(t){const e=qt(t,"x","logicalNot","bool"),n={x:e};return Lt.runKernelFunc(t=>t.logicalNot(e),n,null,"LogicalNot")}}),Br={kernelName:"SelectV2",inputsToSave:["condition"],gradFunc:(t,e)=>{const[n]=e;return{condition:()=>Xt(fe(n),"float32"),t:()=>Yt(t,Xt(n,t.dtype)),e:()=>Yt(t,Xt(zr(n),t.dtype))}}},Pr=1.0507009873554805,Wr={kernelName:"Selu",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=pr(n,re(0)),r=re(1.7580993408473768),s=re(Pr),a=Yt(t,s),i=Yt(Yt(t,r),Dn(Xt(n,"float32")));return on(e,a,i)}}}},Vr={kernelName:"Sigmoid",outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Yt(t,Yt(n,ie(re(1),n)))}}},Ur={kernelName:"Sign",gradFunc:t=>({x:()=>fe(t)})};const Gr=Kt({cos_:function(t){const e=qt(t,"x","cos"),n={x:e};return Lt.runKernelFunc((t,n)=>{const r=t.cos(e);return n([e]),r},n,null,"Cos")}}),Hr={kernelName:"Sin",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Yt(Gr(Xt(n,"float32")),t)}}};const qr=Kt({cosh_:function(t){const e=qt(t,"x","cosh"),n={x:e};return Lt.runKernelFunc((t,n)=>{const r=t.cosh(e);return n([e]),r},n,null,"Cosh")}}),jr={kernelName:"Sinh",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Yt(qr(Xt(n,"float32")),t)}}};const Kr=Kt({pad_:function(t,e,n=0){const r=qt(t,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const s={paddings:e,constantValue:n},a={x:r};return Lt.runKernelFunc((t,s)=>(s([r]),t.pad(r,e,n)),a,null,"PadV2",s)}});function Xr(t,e,n){S(t.rank===e.length,()=>`Error in slice${t.rank}D: Length of begin ${e} must match the rank of the array (${t.rank}).`),S(t.rank===n.length,()=>`Error in slice${t.rank}D: Length of size ${n} must match the rank of the array (${t.rank}).`);for(let r=0;r<t.rank;++r)S(e[r]+n[r]<=t.shape[r],()=>`Error in slice${t.rank}D: begin[${r}] + size[${r}] (${e[r]+n[r]}) would overflow input.shape[${r}] (${t.shape[r]})`)}function Yr(t){const e=[];let n=0;for(;t>0;)1&t&&e.push(n),t/=2,n++;return e}function Jr(t,e,n){const r=[];for(let s=0;s<t.length;s++)r[s]=Math.ceil((e[s]-t[s])/n[s]);return r}function Zr(t,e,n,r){const s=[...t];for(let t=s.length;t<r.length;t++)s.push(1);for(let t=0;t<n;t++)0===t?s[e]=1:(s.splice(e,0,1),s.pop());return s}function Qr(t,e,n){return n<=t?n:n-(e-1)}function ts(t,e){const n=[];for(let r=0;r<t;r++)n.push(e+r);return n}function es(t,e,n,r,s){const a=[...s],i=ts(n,e);for(let s=0;s<a.length;s++)if(i.indexOf(s)>-1)a[s]=0;else{const i=Qr(e,n,s);let o=r[i];t&1<<i&&(o=0),a[s]=o}return a}function ns(t,e,n,r,s){const a=[...s],i=ts(n,e);for(let s=0;s<a.length;s++)if(i.indexOf(s)>-1)a[s]=Number.MAX_SAFE_INTEGER;else{const i=Qr(e,n,s);let o=r[i];t&1<<i&&(o=Number.MAX_SAFE_INTEGER),a[s]=o}for(let t=0;t<a.length;t++){const e=s[t];a[t]<0&&(a[t]+=e),a[t]=k(0,a[t],s[t])}return a}function rs(t,e,n){let r=t[e];return(n&1<<e||null==r)&&(r=1),r}function ss(t,e,n,r,s,a){let i=e[s];const o=n[s]||1;(t&1<<s||a&1<<s||null==i)&&(i=o>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const u=r[s];return i<0&&(i+=u),i=k(0,i,u-1),i}function as(t,e,n,r,s,a){let i=e[s];const o=n[s]||1;(t&1<<s||a&1<<s||null==i)&&(i=o>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const u=r[s];return i<0&&(i+=u),i=o>0?k(0,i,u):k(-1,i,u-1),i}function is(t,e,n){let r=n.length;for(let t=0;t<n.length;t++)if(n[t]>1){r=t;break}for(let s=r+1;s<n.length;s++)if(e[s]>0||n[s]!==t[s])return!1;return!0}function os(t,e){let n=t.length>0?t[t.length-1]:1;for(let r=0;r<t.length-1;r++)n+=t[r]*e[r];return n}function us(t,e,n){let r,s;return r="number"==typeof e?[e,...new Array(t.rank-1).fill(0)]:e.length<t.rank?e.concat(new Array(t.rank-e.length).fill(0)):e.slice(),r.forEach(t=>{S(-1!==t,()=>"slice() does not support negative begin indexing.")}),s=null==n?new Array(t.rank).fill(-1):"number"==typeof n?[n,...new Array(t.rank-1).fill(-1)]:n.length<t.rank?n.concat(new Array(t.rank-n.length).fill(-1)):n,s=s.map((e,n)=>e>=0?e:(S(-1===e,()=>`Negative size values should be exactly -1 but got ${e} for the slice() size at index ${n}.`),t.shape[n]-r[n])),[r,s]}var ls=Object.freeze({__proto__:null,assertParamsValid:Xr,maskToAxes:Yr,computeOutShape:Jr,stridesWithElidedDims:Zr,startIndicesWithElidedDims:es,stopIndicesWithElidedDims:ns,stridesForAxis:rs,startForAxis:ss,stopForAxis:as,isSliceContinous:is,computeFlatOffset:os,parseSliceParams:us});const cs={kernelName:"Slice",inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{begin:s,size:a}=n,i=r.shape,[o,u]=us(r,s,a),l=[];for(let e=0;e<t.rank;e++)l.push([o[e],i[e]-o[e]-u[e]]);return{x:()=>Kr(t,l)}}},hs={kernelName:"Softmax",outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r]=e,{dim:s}=n,a=Yt(t,r);return{logits:()=>ie(a,Yt(Te(a,[s],!0),r))}}};const ps=Kt({sigmoid_:function(t){const e=qt(t,"x","sigmoid"),n={x:e};return Lt.runKernelFunc((t,n)=>{const r=t.sigmoid(e);return n([r]),r},n,null,"Sigmoid")}}),ds={kernelName:"Softplus",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Yt(t,ps(n))}}};const fs=Kt({batchToSpaceND_:function(t,e,n){const r=qt(t,"x","batchToSpaceND"),s=e.reduce((t,e)=>t*e);S(r.rank>=1+e.length,()=>`input rank is ${r.rank} but should be > than blockShape.length ${e.length}`),S(n.length===e.length,()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${e.length}`),S(r.shape[0]%s==0,()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${e.join(" * ")} === ${s}`);const a={x:r},i={blockShape:e,crops:n};return Lt.runKernelFunc(t=>t.batchToSpaceND(r,e,n),a,null,"BatchToSpaceND",i)}}),ms={kernelName:"SpaceToBatchND",gradFunc:(t,e,n)=>{const{blockShape:r,paddings:s}=n;return{x:()=>fs(t,r,s)}}};function gs(t,e){const n=t[0].length;t.forEach((t,e)=>{S(t.length===n,()=>`Error in concat${n}D: rank of tensors[${e}] must be the same as the rank of the rest (${n})`)}),S(e>=0&&e<n,()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`);const r=t[0];t.forEach((t,s)=>{for(let a=0;a<n;a++)S(a===e||t[a]===r[a],()=>`Error in concat${n}D: Shape of tensors[${s}] (${t}) does not match the shape of the rest (${r}) along the non-concatenated axis ${s}.`)})}function ys(t,e){const n=t[0].slice();for(let r=1;r<t.length;r++)n[e]+=t[r][e];return n}function bs(t,e,n){return ne(t,e,Gt(t,n),n)}const xs=Kt({concat_:function(t,e=0){S(t.length>=1,()=>"Pass at least one tensor to concat");let n=jt(t,"tensors","concat");"complex64"===n[0].dtype&&n.forEach(t=>{if("complex64"!==t.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${t.dtype}. `)});const r=L(e,n[0].shape)[0],s=ys(n.map(t=>t.shape),r);if(0===T(s))return bs([],s);if(n=n.filter(t=>t.size>0),1===n.length)return n[0];gs(n.map(t=>t.shape),r);const a=n,i={axis:e};return Lt.runKernelFunc((t,e)=>{const s=t.concat(n,r);return e(n),s},a,null,"Concat",i)}}),ws={kernelName:"SplitV",gradFunc:(t,e,n)=>{const{axis:r}=n;return{x:()=>xs(t,r)}}},vs={kernelName:"Sqrt",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>te(t,Yt(se(Xt(n,"float32")),2))}}},ks={kernelName:"Square",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Yt(t,Yt(n.toFloat(),2))}}},Ns={kernelName:"SquaredDifference",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=re(2);return{a:()=>Yt(t,Yt(s,ie(n,r))),b:()=>Yt(t,Yt(s,ie(r,n)))}}},Is={kernelName:"Step",gradFunc:t=>({x:()=>fe(t)})},Ss={kernelName:"Sub",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=he(n.shape,r.shape);return{a:()=>{let e=t;const r=ce(n.shape,s);return r.length>0&&(e=Te(e,r)),we(e,n.shape)},b:()=>{let e=t;const n=ce(r.shape,s);return n.length>0&&(e=Te(e,n)),we(ee(e),r.shape)}}}};function Cs(t,e="float32"){if("complex64"===e){const e=Cs(t,"float32"),n=xr(t,"float32");return br(e,n)}const n=nt(T(t),e);return Lt.makeTensor(n,t,e)}const As={kernelName:"Sum",inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,s=r.shape.slice(),{axis:a}=n;L(a,r.shape).forEach(t=>{s[t]=1});const i=we(t,s),o=Yt(i,Cs(r.shape,"float32"));return{x:()=>o}}},Es={kernelName:"Tan",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>te(t,ae(Gr(n)))}}},Ts={kernelName:"Tanh",outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Yt(ie(re(1),ae(n)),t)}}};const Rs=Kt({slice_:function(t,e,n){const r=qt(t,"x","slice");if(0===r.rank)throw new Error("Slicing scalar is not possible");const[s,a]=us(r,e,n);Xr(r,s,a);const i={x:r},o={begin:e,size:n};return Lt.runKernelFunc((t,e)=>(e([r]),t.slice(r,s,a)),i,null,"Slice",o)}}),$s={kernelName:"Tile",inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{reps:s}=n;return{x:()=>{let e=fe(r);if(1===r.rank)for(let n=0;n<s[0];++n)e=be(e,Rs(t,[n*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)e=be(e,Rs(t,[n*r.shape[0],a*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let i=0;i<s[2];++i)e=be(e,Rs(t,[n*r.shape[0],a*r.shape[1],i*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else{if(4!==r.rank)throw new Error("Gradient for tile operation is not implemented for rank-"+r.rank+" tensors yet.");for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let i=0;i<s[2];++i)for(let o=0;o<s[3];++o)e=be(e,Rs(t,[n*r.shape[0],a*r.shape[1],i*r.shape[2],o*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]))}return e}}}},_s={kernelName:"Transpose",gradFunc:(t,e,n)=>{const r=n,{perm:s}=r,a=Ae(s);return{x:()=>In(t,a)}}};const Ds=Kt({expandDims_:function(t,e=0){const n=qt(t,"x","expandDims",null);S(e<=n.rank,()=>"Axis must be <= rank of the tensor");const r=n.shape.slice();return e<0&&(S(-(n.rank+1)<=e,()=>`Axis must be in the interval [${-(n.rank+1)}, ${n.rank}]`),e=n.rank+e+1),r.splice(e,0,1),we(n,r)}});const Fs=Kt({stack_:function(t,e=0){const n=jt(t,"tensors","stack");if(S(n.length>=1,()=>"Pass at least one tensor to tf.stack"),1===n.length)return Ds(n[0],e);const r=n[0].rank,s=n[0].shape,a=n[0].dtype;S(e<=r,()=>"Axis must be <= rank of the tensor"),n.forEach(t=>{C(s,t.shape,"All tensors passed to stack must have matching shapes"),S(a===t.dtype,()=>"All tensors passed to stack must have matching dtypes")});const i=n.map(t=>Ds(t,e));return xs(i,e)}}),Os={kernelName:"Unpack",gradFunc:(t,e,n)=>{const r=n,{axis:s}=r;return{value:()=>Fs(t,s)}}};function Ms(t){return t<=30?t:Z(t,Math.floor(Math.sqrt(t)))}function Ls(t,e,n){const r=t.shape[n],s=[];let a=1,i=1;for(let e=0;e<n;e++)s.push(t.shape[e]),a*=t.shape[e];for(let t=0;t<e.rank;t++)s.push(e.shape[t]);for(let e=n+1;e<t.rank;e++)s.push(t.shape[e]),i*=t.shape[e];return{batchSize:a,sliceSize:i,dimSize:r,outputShape:s}}var zs=Object.freeze({__proto__:null,segOpComputeOptimalWindowSize:function(t,e){let n,r=!1;for(t<=30?(n=t,r=!0):n=Z(t,Math.floor(Math.sqrt(t)));!r;)n>e||n===t?r=!0:n=Z(t,n+1);return n},computeOutShape:function(t,e,n){const r=[],s=t.length;for(let a=0;a<s;a++)a!==e?r.push(t[a]):r.push(n);return r},collectGatherOpShapeInfo:Ls});const Bs=Kt({gather_:function(t,e,n=0){const r=qt(t,"x","gather"),s=qt(e,"indices","gather","int32"),a={x:r,indices:s},i={axis:n};return Lt.runKernelFunc((t,e)=>{const a=L(n,r.shape)[0],i=Ls(r,s,a),o=t.gather(r,s.flatten(),a);return e([r,s]),o.reshape(i.outputShape)},a,null,"GatherV2",i)}});const Ps=Kt({maximum_:function(t,e){let n=qt(t,"a","maximum"),r=qt(e,"b","maximum");[n,r]=$t(n,r),"bool"===n.dtype&&(n=Xt(n,"int32"),r=Xt(r,"int32")),he(n.shape,r.shape);const s={a:n,b:r};return Lt.runKernelFunc((t,e)=>{const s=t.maximum(n,r);return e([n,r]),s},s,null,"Maximum")}});const Ws=[Zt,oe,ue,pe,de,me,ge,ye,xe,Re,$e,_e,je,Xe,Je,Qe,tn,en,nn,un,hn,gn,fn,xn,vn,Nn,Cn,Tn,Rn,$n,_n,Fn,On,Mn,zn,Ln,Wn,Un,qn,jn,Kn,Xn,Yn,Jn,Zn,Qn,er,sr,sr,ir,ur,cr,hr,dr,mr,gr,yr,wr,vr,kr,kr,Sr,Cr,Ar,Er,Tr,Rr,$r,_r,Or,Mr,Lr,Br,Wr,Vr,Ur,Hr,jr,cs,hs,ds,ms,ms,ws,ws,vs,Ns,ks,Is,Ss,As,Es,Ts,$s,_s,Os,{kernelName:"UnsortedSegmentSum",inputsToSave:["segmentIds"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>function(t,e){const n=Ps(e,fe(e)),r=Bs(t,n);let s=rn(e,re(0,"int32"));const a=r.rank-s.rank;for(let t=0;t<a;++t)s=Ds(s,t+1);s=an(s,Cs(r.shape,"bool"));const i=fe(r);return on(s,r,i)}(t,n)}}},{kernelName:"ZerosLike",gradFunc:t=>({x:()=>fe(t)})}];for(const t of Ws)x(t);class Vs{fetch(t,e){return fetch(t,e)}now(){return performance.now()}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error("Browser's encoder only supports utf-8, but got "+e);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(t)}decode(t,e){return new TextDecoder(e).decode(t)}}u().get("IS_BROWSER")&&u().setPlatform("browser",new Vs);const Us=()=>require("node-fetch");let Gs;class Hs{constructor(){this.util=require("util"),this.textEncoder=new this.util.TextEncoder}fetch(t,e){return null!=u().global.fetch?u().global.fetch(t,e):(null==Gs&&(Gs=Us()),Gs(t,e))}now(){const t=process.hrtime();return 1e3*t[0]+t[1]/1e6}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error("Node built-in encoder only supports utf-8, but got "+e);return this.textEncoder.encode(t)}decode(t,e){return 0===t.length?"":new this.util.TextDecoder(e).decode(t)}}u().get("IS_NODE")&&u().setPlatform("node",new Hs);const qs={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};async function js(t,e){const n=[],r=[],s=Array.isArray(t)?t.map(t=>t.name):Object.keys(t);for(let a=0;a<s.length;++a){const i=s[a],o=Array.isArray(t)?t[a].tensor:t[i];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype&&"complex64"!==o.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${o.dtype}`);const u={name:i,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){const t=new Promise(async t=>{const e=await o.bytes(),n=e.reduce((t,e)=>t+e.length,0)+4*e.length,r=new Uint8Array(n);let s=0;for(let t=0;t<e.length;t++){const n=e[t],a=new Uint8Array(new Uint32Array([n.length]).buffer);r.set(a,s),s+=4,r.set(n,s),s+=n.length}t(r)});r.push(t)}else r.push(o.data());null!=e&&(u.group=e),n.push(u)}return{data:Xs(await Promise.all(r)),specs:n}}function Ks(t,e){const n={};let r,s=0;for(const a of e){const e=a.name,i=a.dtype,o=a.shape,u=T(o);let l;if("quantization"in a){const n=a.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${a.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${a.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==i)throw new Error(`Weight ${a.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${i}.`)}const o=qs[n.dtype],c=t.slice(s,s+u*o),h="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===i)if("uint8"===n.dtype||"uint16"===n.dtype){l=new Float32Array(h.length);for(let t=0;t<h.length;t++){const e=h[t];l[t]=e*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===r&&(r=ea()),l=r(h)}else{if("int32"!==i)throw new Error(`Unsupported dtype in weight '${e}': ${i}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);l=new Int32Array(h.length);for(let t=0;t<h.length;t++){const e=h[t];l[t]=Math.round(e*n.scale+n.min)}}s+=u*o}else if("string"===i){const e=T(a.shape);l=[];for(let n=0;n<e;n++){const e=new Uint32Array(t.slice(s,s+4))[0];s+=4;const n=new Uint8Array(t.slice(s,s+e));l.push(n),s+=e}}else{const r=qs[i],a=t.slice(s,s+u*r);if("float32"===i)l=new Float32Array(a);else if("int32"===i)l=new Int32Array(a);else if("bool"===i)l=new Uint8Array(a);else{if("complex64"!==i)throw new Error(`Unsupported dtype in weight '${e}': ${i}`);{l=new Float32Array(a);const t=new Float32Array(l.length/2),r=new Float32Array(l.length/2);for(let e=0;e<t.length;e++)t[e]=l[2*e],r[e]=l[2*e+1];const s=bs(t,o,"float32"),i=bs(r,o,"float32");n[e]=br(s,i)}}s+=u*r}"complex64"!==i&&(n[e]=bs(l,o,i))}return n}function Xs(t){if(null===t)throw new Error("Invalid input value: "+JSON.stringify(t));let e=0;const n=[];t.forEach(t=>{if(e+=t.byteLength,n.push(t.byteLength===t.buffer.byteLength?t:new t.constructor(t)),!(t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array))throw new Error("Unsupported TypedArray subtype: "+t.constructor.name)});const r=new Uint8Array(e);let s=0;return n.forEach(t=>{r.set(new Uint8Array(t.buffer),s),s+=t.byteLength}),r.buffer}const Ys="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function Js(t){return Ys?Buffer.byteLength(t):new Blob([t]).size}function Zs(t){if(1===t.length)return t[0];let e=0;t.forEach(t=>{e+=t.byteLength});const n=new Uint8Array(e);let r=0;return t.forEach(t=>{n.set(new Uint8Array(t),r),r+=t.byteLength}),n.buffer}function Qs(t){for(t=t.trim();t.endsWith("/");)t=t.slice(0,t.length-1);const e=t.split("/");return e[e.length-1]}function ta(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==t.modelTopology?0:Js(JSON.stringify(t.modelTopology)),weightSpecsBytes:null==t.weightSpecs?0:Js(JSON.stringify(t.weightSpecs)),weightDataBytes:null==t.weightData?0:t.weightData.byteLength}}function ea(){const t=function(){const t=t=>{let e=t<<13,n=0;for(;0==(8388608&e);)n-=8388608,e<<=1;return e&=-8388609,n+=947912704,e|n},e=new Uint32Array(2048);e[0]=0;for(let n=1;n<1024;n++)e[n]=t(n);for(let t=1024;t<2048;t++)e[t]=939524096+(t-1024<<13);return e}(),e=function(){const t=new Uint32Array(64);t[0]=0,t[31]=1199570944,t[32]=2147483648,t[63]=3347054592;for(let e=1;e<31;e++)t[e]=e<<23;for(let e=33;e<63;e++)t[e]=2147483648+(e-32<<23);return t}(),n=function(){const t=new Uint32Array(64);for(let e=0;e<64;e++)t[e]=1024;return t[0]=t[32]=0,t}();return r=>{const s=new ArrayBuffer(4*r.length),a=new Uint32Array(s);for(let s=0;s<r.length;s++){const i=r[s],o=t[n[i>>10]+(1023&i)]+e[i>>10];a[s]=o}return new Float32Array(s)}}class na{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==na.instance&&(na.instance=new na),na.instance}static registerSaveRouter(t){na.getInstance().saveRouters.push(t)}static registerLoadRouter(t){na.getInstance().loadRouters.push(t)}static getSaveHandlers(t){return na.getHandlers(t,"save")}static getLoadHandlers(t,e){return na.getHandlers(t,"load",e)}static getHandlers(t,e,n){const r=[];return("load"===e?na.getInstance().loadRouters:na.getInstance().saveRouters).forEach(e=>{const s=e(t,n);null!==s&&r.push(s)}),r}}const ra=t=>na.getSaveHandlers(t);class sa{constructor(){this.managers={}}static getInstance(){return null==sa.instance&&(sa.instance=new sa),sa.instance}static registerManager(t,e){S(null!=t,()=>"scheme must not be undefined or null."),t.endsWith("://")&&(t=t.slice(0,t.indexOf("://"))),S(t.length>0,()=>"scheme must not be an empty string.");const n=sa.getInstance();S(null==n.managers[t],()=>`A model store manager is already registered for scheme '${t}'.`),n.managers[t]=e}static getManager(t){const e=this.getInstance().managers[t];if(null==e)throw new Error(`Cannot find model manager for scheme '${t}'`);return e}static getSchemes(){return Object.keys(this.getInstance().managers)}}function aa(t){if(-1===t.indexOf("://"))throw new Error("The url string provided does not contain a scheme. Supported schemes are: "+sa.getSchemes().join(","));return{scheme:t.split("://")[0],path:t.split("://")[1]}}async function ia(t,e,n=!1){S(t!==e,()=>`Old path and new path are the same: '${t}'`);const r=na.getLoadHandlers(t);S(r.length>0,()=>`Copying failed because no load handler is found for source URL ${t}.`),S(r.length<2,()=>`Copying failed because more than one (${r.length}) load handlers for source URL ${t}.`);const s=r[0],a=na.getSaveHandlers(e);S(a.length>0,()=>`Copying failed because no save handler is found for destination URL ${e}.`),S(a.length<2,()=>`Copying failed because more than one (${r.length}) save handlers for destination URL ${e}.`);const i=a[0],o=aa(t).scheme,u=aa(t).path,l=o===aa(t).scheme,c=await s.load();n&&l&&await sa.getManager(o).removeModel(u);const h=await i.save(c);return n&&!l&&await sa.getManager(o).removeModel(u),h.modelArtifactsInfo}function oa(){if(!u().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const t="undefined"==typeof window?self:window,e=t.indexedDB||t.mozIndexedDB||t.webkitIndexedDB||t.msIndexedDB||t.shimIndexedDB;if(null==e)throw new Error("The current browser does not appear to support IndexedDB.");return e}function ua(t){const e=t.result;e.createObjectStore("models_store",{keyPath:"modelPath"}),e.createObjectStore("model_info_store",{keyPath:"modelPath"})}class la{constructor(t){if(this.indexedDB=oa(),null==t||!t)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=t}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,t)}async load(){return this.databaseAction(this.modelPath)}databaseAction(t,e){return new Promise((t,n)=>{const r=this.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=()=>ua(r),r.onsuccess=()=>{const s=r.result;if(null==e){const e=s.transaction("models_store","readonly"),r=e.objectStore("models_store").get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return s.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));t(r.result.modelArtifacts)},r.onerror=t=>(s.close(),n(r.error)),e.oncomplete=()=>s.close()}else{const r=ta(e),a=s.transaction("model_info_store","readwrite");let i=a.objectStore("model_info_store");const o=i.put({modelPath:this.modelPath,modelArtifactsInfo:r});let u;o.onsuccess=()=>{u=s.transaction("models_store","readwrite");const o=u.objectStore("models_store").put({modelPath:this.modelPath,modelArtifacts:e,modelArtifactsInfo:r});o.onsuccess=()=>t({modelArtifactsInfo:r}),o.onerror=t=>{i=a.objectStore("model_info_store");const e=i.delete(this.modelPath);e.onsuccess=()=>(s.close(),n(o.error)),e.onerror=t=>(s.close(),n(o.error))}},o.onerror=t=>(s.close(),n(o.error)),a.oncomplete=()=>{null==u?s.close():u.oncomplete=()=>s.close()}}},r.onerror=t=>n(r.error)})}}la.URL_SCHEME="indexeddb://";const ca=t=>{return u().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(la.URL_SCHEME)?(e=t.slice(la.URL_SCHEME.length),new la(e)):null;var e};na.registerSaveRouter(ca),na.registerLoadRouter(ca);class ha{constructor(){this.indexedDB=oa()}async listModels(){return new Promise((t,e)=>{const n=this.indexedDB.open("tensorflowjs",1);n.onupgradeneeded=()=>ua(n),n.onsuccess=()=>{const r=n.result,s=r.transaction("model_info_store","readonly"),a=s.objectStore("model_info_store").getAll();a.onsuccess=()=>{const e={};for(const t of a.result)e[t.modelPath]=t.modelArtifactsInfo;t(e)},a.onerror=t=>(r.close(),e(a.error)),s.oncomplete=()=>r.close()},n.onerror=t=>e(n.error)})}async removeModel(t){var e;return t=(e=t).startsWith(la.URL_SCHEME)?e.slice(la.URL_SCHEME.length):e,new Promise((e,n)=>{const r=this.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=()=>ua(r),r.onsuccess=()=>{const s=r.result,a=s.transaction("model_info_store","readwrite"),i=a.objectStore("model_info_store"),o=i.get(t);let u;o.onsuccess=()=>{if(null==o.result)return s.close(),n(new Error(`Cannot find model with path '${t}' in IndexedDB.`));{const r=i.delete(t),a=()=>{u=s.transaction("models_store","readwrite");const r=u.objectStore("models_store").delete(t);r.onsuccess=()=>e(o.result.modelArtifactsInfo),r.onerror=t=>n(o.error)};r.onsuccess=a,r.onerror=t=>(a(),s.close(),n(o.error))}},o.onerror=t=>(s.close(),n(o.error)),a.oncomplete=()=>{null==u?s.close():u.oncomplete=()=>s.close()}},r.onerror=t=>n(r.error)})}}if(u().getBool("IS_BROWSER"))try{sa.registerManager(la.URL_SCHEME,new ha)}catch(t){}const pa="tensorflowjs_models",da="info",fa="model_topology",ma="weight_specs",ga="weight_data",ya="model_metadata";function ba(t){return{info:[pa,t,da].join("/"),topology:[pa,t,fa].join("/"),weightSpecs:[pa,t,ma].join("/"),weightData:[pa,t,ga].join("/"),modelMetadata:[pa,t,ya].join("/")}}function xa(t){const e=t.split("/");if(e.length<3)throw new Error("Invalid key format: "+t);return e.slice(1,e.length-1).join("/")}class wa{constructor(t){if(!u().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==t||!t)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=t,this.keys=ba(this.modelPath)}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const e=JSON.stringify(t.modelTopology),n=JSON.stringify(t.weightSpecs),r=ta(t);try{return this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,e),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(t){if(Ys)return Buffer.from(t).toString("base64");const e=new Uint8Array(t);let n="";for(let t=0,r=e.length;t<r;t++)n+=String.fromCharCode(e[t]);return btoa(n)}(t.weightData)),this.LS.setItem(this.keys.modelMetadata,JSON.stringify({format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata})),{modelArtifactsInfo:r}}catch(t){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const t=JSON.parse(this.LS.getItem(this.keys.info));if(null==t)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==t.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const e={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);e.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);e.weightSpecs=r;const s=this.LS.getItem(this.keys.modelMetadata);if(null!=s){const t=JSON.parse(s);e.format=t.format,e.generatedBy=t.generatedBy,e.convertedBy=t.convertedBy,e.userDefinedMetadata=t.userDefinedMetadata}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return e.weightData=function(t){if(Ys){const e=Buffer.from(t,"base64");return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}const e=atob(t),n=new Uint8Array(e.length);for(let t=0;t<e.length;++t)n.set([e.charCodeAt(t)],t);return n.buffer}(a),e}}wa.URL_SCHEME="localstorage://";const va=t=>{return u().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(wa.URL_SCHEME)?(e=t.slice(wa.URL_SCHEME.length),new wa(e)):null;var e};na.registerSaveRouter(va),na.registerLoadRouter(va);class ka{constructor(){S(u().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),S("undefined"==typeof window||void 0!==window.localStorage,()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}async listModels(){const t={},e=pa+"/",n="/"+da;for(let r=0;r<this.LS.length;++r){const s=this.LS.key(r);if(s.startsWith(e)&&s.endsWith(n)){t[xa(s)]=JSON.parse(this.LS.getItem(s))}}return t}async removeModel(t){var e;const n=ba(t=(e=t).startsWith(wa.URL_SCHEME)?e.slice(wa.URL_SCHEME.length):e);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${t}'`);const r=JSON.parse(this.LS.getItem(n.info));return this.LS.removeItem(n.info),this.LS.removeItem(n.topology),this.LS.removeItem(n.weightSpecs),this.LS.removeItem(n.weightData),r}}if(u().getBool("IS_BROWSER"))try{sa.registerManager(wa.URL_SCHEME,new ka)}catch(t){}function Na(t){return new Promise(t=>setTimeout(t)).then(t)}class Ia{constructor(t){if(!u().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");t.startsWith(Ia.URL_SCHEME)&&(t=t.slice(Ia.URL_SCHEME.length)),null!=t&&0!==t.length||(t="model"),this.modelTopologyFileName=t+".json",this.weightDataFileName=t+".weights.bin"}async save(t){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const e=window.URL.createObjectURL(new Blob([t.weightData],{type:"application/octet-stream"}));if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=[{paths:["./"+this.weightDataFileName],weights:t.weightSpecs}],r={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,weightsManifest:n},s=window.URL.createObjectURL(new Blob([JSON.stringify(r)],{type:"application/json"})),a=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor;if(a.download=this.modelTopologyFileName,a.href=s,await Na(()=>a.dispatchEvent(new MouseEvent("click"))),null!=t.weightData){const t=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;t.download=this.weightDataFileName,t.href=e,await Na(()=>t.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:ta(t)}}}}Ia.URL_SCHEME="downloads://";class Sa{constructor(t){if(null==t||t.length<1)throw new Error("When calling browserFiles, at least 1 file is required, but received "+t);this.files=t}async load(){const t=this.files[0],e=this.files.slice(1);return new Promise((n,r)=>{const s=new FileReader;s.onload=s=>{const a=JSON.parse(s.target.result),i=a.modelTopology;if(null==i)return void r(new Error("modelTopology field is missing from file "+t.name));0===e.length&&n({modelTopology:i});const o=a.weightsManifest;if(null==o)return void r(new Error("weightManifest field is missing from file "+t.name));let u;try{u=this.checkManifestAndWeightFiles(o,e)}catch(t){return void r(t)}const l=[],c=[],h=[];o.forEach(t=>{t.paths.forEach(t=>{c.push(t),h.push(null)}),l.push(...t.weights)}),o.forEach(t=>{t.paths.forEach(t=>{const e=new FileReader;e.onload=e=>{const r=e.target.result,s=c.indexOf(t);h[s]=r,-1===h.indexOf(null)&&n({modelTopology:i,weightSpecs:l,weightData:Zs(h),format:a.format,generatedBy:a.generatedBy,convertedBy:a.convertedBy,userDefinedMetadata:a.userDefinedMetadata})},e.onerror=e=>r(`Failed to weights data from file of path '${t}'.`),e.readAsArrayBuffer(u[t])})})},s.onerror=e=>r(`Failed to read model topology and weights manifest JSON from file '${t.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),s.readAsText(t)})}checkManifestAndWeightFiles(t,e){const n=[],r=e.map(t=>Qs(t.name)),s={};for(const a of t)a.paths.forEach(t=>{const a=Qs(t);if(-1!==n.indexOf(a))throw new Error(`Duplicate file basename found in weights manifest: '${a}'`);if(n.push(a),-1===r.indexOf(a))throw new Error(`Weight file with basename '${a}' is not provided.`);s[t]=e[r.indexOf(a)]});if(n.length!==e.length)throw new Error(`Mismatch in the number of files in weights manifest (${n.length}) and the number of weight files provided (${e.length}).`);return s}}function Ca(t,e,n,r){!function(t){S(null!=t&&Array.isArray(t)&&t.length>0,()=>"promises must be a none empty array")}(t),function(t,e){S(t>=0&&t<=1,()=>"Progress fraction must be in range [0, 1], but got startFraction "+t),S(e>=0&&e<=1,()=>"Progress fraction must be in range [0, 1], but got endFraction "+e),S(e>=t,()=>`startFraction must be no more than endFraction, but got startFraction ${t} and endFraction `+e)}(n=null==n?0:n,r=null==r?1:r);let s=0;return Promise.all(t.map(a=>(a.then(a=>{const i=n+ ++s/t.length*(r-n);return e(i),a}),a)))}async function Aa(t,e){null==e&&(e={});const n=null==e.fetchFunc?u().platform.fetch:e.fetchFunc,r=t.map(t=>n(t,e.requestInit,{isBinary:!0})),s=(null==e.onProgress?await Promise.all(r):await Ca(r,e.onProgress,0,.5)).map(t=>t.arrayBuffer());return null==e.onProgress?await Promise.all(s):await Ca(s,e.onProgress,.5,1)}function Ea(t){return async(e,n="",r)=>{const s=e.map(()=>!1),a={},i=null!=r?r.map(()=>!1):[],o=[];if(e.forEach((t,e)=>{let n=0;t.weights.forEach(t=>{const u="quantization"in t?t.quantization.dtype:t.dtype,l=qs[u]*T(t.shape),c=()=>{s[e]=!0,null==a[e]&&(a[e]=[]),a[e].push({manifestEntry:t,groupOffset:n,sizeBytes:l})};null!=r?r.forEach((e,n)=>{e===t.name&&(c(),i[n]=!0)}):c(),o.push(t.name),n+=l})}),!i.every(t=>t)){const t=r.filter((t,e)=>!i[e]);throw new Error("Could not find weights in manifest with names: "+t.join(", ")+". \nManifest JSON has weights with names: "+o.join(", ")+".")}const u=s.reduce((t,e,n)=>(e&&t.push(n),t),[]),l=[];u.forEach(t=>{e[t].paths.forEach(t=>{const e=n+(n.endsWith("/")?"":"/")+t;l.push(e)})});const c=await t(l),h={};let p=0;return u.forEach(t=>{const n=e[t].paths.length;let r=0;for(let t=0;t<n;t++)r+=c[p+t].byteLength;const s=new ArrayBuffer(r),i=new Uint8Array(s);let o=0;for(let t=0;t<n;t++){const e=new Uint8Array(c[p+t]);i.set(e,o),o+=e.byteLength}a[t].forEach(t=>{const e=Ks(s.slice(t.groupOffset,t.groupOffset+t.sizeBytes),[t.manifestEntry]);for(const t in e)h[t]=e[t]}),p+=n}),h}}na.registerSaveRouter(t=>u().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(Ia.URL_SCHEME)?function(t="model"){return new Ia(t)}(t.slice(Ia.URL_SCHEME.length)):null);class Ta{constructor(t,e){if(this.DEFAULT_METHOD="POST",null==e&&(e={}),this.weightPathPrefix=e.weightPathPrefix,this.onProgress=e.onProgress,null!=e.fetchFunc?(S("function"==typeof e.fetchFunc,()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=e.fetchFunc):this.fetch=u().platform.fetch,S(null!=t&&t.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(t)&&S(2===t.length,()=>`URL paths for http must have a length of 2, (actual length is ${t.length}).`),this.path=t,null!=e.requestInit&&null!=e.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=e.requestInit||{}}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const e=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);e.body=new FormData;const n=[{paths:["./model.weights.bin"],weights:t.weightSpecs}],r={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata,weightsManifest:n};e.body.append("model.json",new Blob([JSON.stringify(r)],{type:"application/json"}),"model.json"),null!=t.weightData&&e.body.append("model.weights.bin",new Blob([t.weightData],{type:"application/octet-stream"}),"model.weights.bin");const s=await this.fetch(this.path,e);if(s.ok)return{modelArtifactsInfo:ta(t),responses:[s]};throw new Error("BrowserHTTPRequest.save() failed due to HTTP response status "+s.status+".")}async load(){const t=await this.fetch(this.path,this.requestInit);if(!t.ok)throw new Error(`Request to ${this.path} failed with status code `+t.status+". Please verify this URL points to the model JSON of the model to load.");let e;try{e=await t.json()}catch(t){let e=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?e+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":e+=" Please make sure the server is serving valid JSON for this request.",new Error(e)}const n=e.modelTopology,r=e.weightsManifest,s=e.generatedBy,a=e.convertedBy,i=e.format,o=e.userDefinedMetadata;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);let u,l;if(null!=r){const t=await this.loadWeights(r);[u,l]=t}return{modelTopology:n,weightSpecs:u,weightData:l,userDefinedMetadata:o,generatedBy:s,convertedBy:a,format:i}}async loadWeights(t){const e=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(t){const e=t.lastIndexOf("/"),n=t.lastIndexOf("?"),r=t.substring(0,e),s=n>e?t.substring(n):"";return[r+"/",s]}(e),s=this.weightPathPrefix||n,a=[];for(const e of t)a.push(...e.weights);const i=[];t.forEach(t=>{t.paths.forEach(t=>{i.push(s+t+r)})});return[a,Zs(await Aa(i,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function Ra(t){return null!=t.match(Ta.URL_SCHEME_REGEX)}Ta.URL_SCHEME_REGEX=/^https?:\/\//;const $a=(t,e)=>{if("undefined"==typeof fetch&&(null==e||null==e.fetchFunc))return null;{let n=!0;if(n=Array.isArray(t)?t.every(t=>Ra(t)):Ra(t),n)return _a(t,e)}return null};function _a(t,e){return new Ta(t,e)}na.registerSaveRouter($a),na.registerLoadRouter($a);class Da{constructor(t){this.modelArtifacts=t}async load(){return this.modelArtifacts}}class Fa{constructor(t){this.saveHandler=t}async save(t){return this.saveHandler(t)}}var Oa=Object.freeze({__proto__:null,browserFiles:function(t){return new Sa(t)},browserHTTPRequest:function(t,e){return _a(t,e)},concatenateArrayBuffers:Zs,decodeWeights:Ks,encodeWeights:js,fromMemory:function(t,e,n,r){if(1===arguments.length){return null!=t.modelTopology||null!=t.weightSpecs?new Da(t):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Da({modelTopology:t}))}return console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Da({modelTopology:t,weightSpecs:e,weightData:n,trainingConfig:r})},getLoadHandlers:(t,e)=>na.getLoadHandlers(t,e),getModelArtifactsInfoForJSON:ta,getSaveHandlers:ra,http:_a,isHTTPScheme:Ra,loadWeights:async function(t,e="",n,r){return Ea(t=>Aa(t,{requestInit:r}))(t,e,n)},registerLoadRouter:t=>na.registerLoadRouter(t),registerSaveRouter:t=>na.registerSaveRouter(t),weightsLoaderFactory:Ea,withSaveHandler:function(t){return new Fa(t)},copyModel:async function(t,e){return ia(t,e,!1)},listModels:async function(){const t=sa.getSchemes(),e={};for(const n of t){const t=await sa.getManager(n).listModels();for(const r in t){e[n+"://"+r]=t[r]}}return e},moveModel:async function(t,e){return ia(t,e,!0)},removeModel:async function(t){const e=aa(t);return sa.getManager(e.scheme).removeModel(e.path)}});const Ma=Kt({oneHot_:function(t,e,n=1,r=0){if(e<2)throw new Error("Error in oneHot: depth must be >=2, but it is "+e);const s=qt(t,"indices","oneHot","int32"),a=[...s.shape,e],i={indices:s},o={depth:e,onValue:n,offValue:r};return Lt.runKernelFunc((t,i)=>(i([s]),we(t.oneHot(s.flatten(),e,n,r),a)),i,null,"OneHot",o)}});const La=Kt({confusionMatrix_:function(t,e,n){const r=qt(t,"labels","confusionMatrix"),s=qt(e,"predictions","confusionMatrix");S(null==n||n>0&&Number.isInteger(n),()=>"If provided, numClasses must be a positive integer, but got "+n),S(1===r.rank,()=>"Expected the rank of labels to be 1, but got "+r.rank),S(1===s.rank,()=>"Expected the rank of predictions to be 1, but got "+s.rank),S(r.shape[0]===s.shape[0],()=>`Mismatch in the number of examples: ${r.shape[0]} vs. ${s.shape[0]}. Labels and predictions should have the same number of elements.`),S(n>0&&Number.isInteger(n),()=>"numClasses is required to be a positive integer, but got "+n);const a=Ma(r.asType("int32"),n),i=Ma(s.asType("int32"),n);return a.transpose().matMul(i).asType("int32")}});var za=Object.freeze({__proto__:null,confusionMatrix:La});function Ba(t,e,n){if(A(t),null!=e&&3!==e.length)throw new Error("tensor3d() requires shape to have three numbers");const r=Gt(t,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return ne(t,e,r,n)}let Pa;const Wa=Kt({fromPixels_:function(t,e=3){if(e>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==t)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,r=!1,s=!1,a=!1,i=!1;if(t.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&t instanceof ImageData)r=!0;else if("undefined"!=typeof HTMLVideoElement&&t instanceof HTMLVideoElement)s=!0;else if("undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement)a=!0;else{if(null==t.getContext)throw new Error("pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was "+t.constructor.name);i=!0}if(s){const e=2;if(s&&t.readyState<e)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}if(null!=m("FromPixels",Lt.backendName)){const n={pixels:t},r={numChannels:e};return Lt.runKernel("FromPixels",n,r)}const[o,u]=s?[t.videoWidth,t.videoHeight]:[t.width,t.height];let l,c;if(i?l=t.getContext("2d").getImageData(0,0,o,u).data:r||n?l=t.data:(a||s)&&(null==Pa&&(Pa=document.createElement("canvas").getContext("2d")),Pa.canvas.width=o,Pa.canvas.height=u,Pa.drawImage(t,0,0,o,u),l=Pa.getImageData(0,0,o,u).data),4===e)c=new Int32Array(l);else{const t=o*u;c=new Int32Array(t*e);for(let n=0;n<t;n++)for(let t=0;t<e;++t)c[n*e+t]=l[4*n+t]}return Ba(c,[u,o,e],"int32")}});var Va=Object.freeze({__proto__:null,toPixels:async function(t,e){let n=qt(t,"img","toPixels");if(!(t instanceof vt)){const t=n;n=t.toInt(),t.dispose()}if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const[r,s]=n.shape.slice(0,2),a=2===n.rank?1:n.shape[2];if(a>4||2===a)throw new Error("toPixels only supports depth of size 1, 3 or 4 but got "+a);const i=await n.data(),o=n.min(),u=n.max(),l=await Promise.all([o.data(),u.data()]),c=l[0],h=l[1],p=c[0],d=h[0];if(o.dispose(),u.dispose(),"float32"===n.dtype){if(p<0||d>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but got range [${p} - ${d}].`)}else{if("int32"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);if(p<0||d>255)throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but got range [${p} - ${d}].`)}const f="float32"===n.dtype?255:1,m=new Uint8ClampedArray(s*r*4);for(let t=0;t<r*s;++t){let e,n,r,s;1===a?(e=i[t]*f,n=i[t]*f,r=i[t]*f,s=255):3===a?(e=i[3*t]*f,n=i[3*t+1]*f,r=i[3*t+2]*f,s=255):4===a&&(e=i[4*t]*f,n=i[4*t+1]*f,r=i[4*t+2]*f,s=i[4*t+3]*f);const o=4*t;m[o+0]=Math.round(e),m[o+1]=Math.round(n),m[o+2]=Math.round(r),m[o+3]=Math.round(s)}if(null!=e){e.width=s,e.height=r;const t=e.getContext("2d"),n=new ImageData(m,s,r);t.putImageData(n,0,0)}return n!==t&&n.dispose(),m},fromPixels:Wa});function Ua(t,e){if(t.rank<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==e.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.shape[e.rank-1]>t.rank)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${e.shape[e.rank-1]} vs. ${t.rank}`);if(0===t.size)throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${t.shape}.`);const n=e.shape,r=n[n.length-1];let s=1;for(let t=0;t<n.length-1;++t)s*=n[t];const a=t.shape,i=n.slice();i.pop();let o=1;for(let e=r;e<t.rank;++e)o*=a[e],i.push(a[e]);const u=[...Q(t.shape).map(t=>t/o),1].slice(0,r);return[i,s,o,u]}var Ga=Object.freeze({__proto__:null,prepareAndValidate:Ua});function Ha(t,e,n){const r=e.rank>1?e.shape[e.rank-1]:1,s=e.rank>1?e.rank-1:1,a="Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: "+n.shape+`, indices.shape: ${e.shape}, shape: ${t}`+`, sliceDim: ${r}, and batchDim: ${s}.`;if(n.rank<s)throw new Error(a+` update.rank < ${s}. `);if(t.length<r+(n.rank-s))throw new Error(a+" Output shape length < "+(r+(n.rank-s)));if(n.rank!==s+t.length-r)throw new Error(a+" update.rank != "+(s+t.length-r));for(let t=0;t<s;++t)if(n.shape[t]!==e.shape[t])throw new Error(a+` updates.shape[${t}] (${n.shape[t]}) != indices.shape[${t}] (${e.shape[t]}).`);for(let e=0;e<n.rank-s;++e)if(n.shape[e+s]!==t[e+r])throw new Error(a+` updates.shape[${e+s}] (${n.shape[e+s]}) != shape[${e+s}] (${t[e+s]})`)}function qa(t,e,n){if(e.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`);if(t.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${t.rank}.`);if("int32"!==e.dtype)throw new Error("The dtype of 'indices' should be int32, but got dtype: "+e.dtype);if(n.length<1)throw new Error("Output rank must be greater or equal to 1, but got shape: "+n);if(0===n.length){if(0===e.size)throw new Error("Indices specified for empty output. indices shape: "+e.shape);if(0===t.size)throw new Error("Updates specified for empty output. updates shape: "+t.shape)}Ha(n,e,t)}function ja(t,e,n){const r=e.shape.length,s=r>1?e.shape[r-1]:1,a=n.length;let i=1;for(let t=s;t<a;++t)i*=n[t];const o=s<1?1:s;return{sliceRank:s,numUpdates:T(e.shape)/o,sliceSize:i,strides:[...Q(n.slice(0,s)),1],outputSize:T(n)}}var Ka=Object.freeze({__proto__:null,validateUpdateShape:Ha,validateInput:qa,calculateShapes:ja});class Xa{getClassName(){return this.constructor.className}static fromConfig(t,e){return new t(e)}}class Ya{constructor(){this.classNameMap={}}static getMap(){return null==Ya.instance&&(Ya.instance=new Ya),Ya.instance}static register(t){Ya.getMap().classNameMap[t.className]=[t,t.fromConfig]}}function Ja(t){S(null!=t.className,()=>"Class being registered does not have the static className property defined."),S("string"==typeof t.className,()=>"className is required to be a string, but got type "+typeof t.className),S(t.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),Ya.register(t)}var Za=Object.freeze({__proto__:null,Serializable:Xa,SerializationMap:Ya,registerClass:Ja});function Qa(){return 32===Lt.backend.floatPrecision()?.001:.1}function ti(t,e,n){let r=!0;if((G(t)||G(e))&&(r=!1),G(t)&&G(e)&&(r=!0),r){const n=t.constructor.name,r=e.constructor.name;if(n!==r)throw new Error(`Arrays are of different type. Actual: ${n}. Expected: `+r)}if(Array.isArray(t)&&Array.isArray(e)){const n=Gt(t),r=Gt(e);if(!R(n,r))throw new Error(`Arrays have different shapes. Actual: [${n}]. Expected: [${r}]`)}const s=G(t)?t:E(t),a=G(e)?e:E(e);if(s.length!==a.length)throw new Error(`Arrays have different lengths actual: ${s.length} vs expected: ${a.length}.\nActual:   ${s}.\nExpected: ${a}.`);for(let t=0;t<a.length;++t){const e=s[t],r=a[t];if(!n(e,r))throw new Error(`Arrays differ: actual[${t}] = ${e}, expected[${t}] = ${r}.\nActual:   ${s}.\nExpected: ${a}.`)}}function ei(t,e,n){return!isFinite(t)&&!isFinite(e)||!(isNaN(t)||isNaN(e)||Math.abs(t-e)>n)}var ni=Object.freeze({__proto__:null,TEST_EPSILON_FLOAT16:.1,expectArraysClose:function(t,e,n){return null==n&&(n=Qa()),ti(t,e,(t,e)=>ei(t,e,n))},testEpsilon:Qa,expectPromiseToFail:function(t,e){t().then(()=>e.fail(),()=>e())},expectArraysEqual:function(t,e){const n="string"==typeof e||"number"==typeof e||"boolean"==typeof e?[e]:e;return j(t)||j(t[0])||j(e)||j(e[0])?ti(t,n,(t,e)=>t==e):ti(t,e,(t,e)=>ei(t,e,0))},expectNumbersClose:function(t,e,n){if(null==n&&(n=Qa()),!ei(t,e,n))throw new Error(`Numbers differ: actual === ${t}, expected === ${e}`)},expectValuesInRange:function(t,e,n){for(let r=0;r<t.length;r++)if(t[r]<e||t[r]>n)throw new Error(`Value out of range:${t[r]} low: ${e}, high: ${n}`)},expectArrayBuffersEqual:function(t,e){expect(new Float32Array(t)).toEqual(new Float32Array(e))}});function ri(t){u().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(t+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function si(){return Lt}function ai(){return Lt.memory()}function ii(t,e){return Lt.tidy(t,e)}function oi(t){Dt(t).forEach(t=>t.dispose())}function ui(t){return Lt.keep(t)}function li(t,e,n=1){return Lt.registerBackend(t,e,n)}function ci(){return Lt.backend}const hi=Kt({abs_:function(t){const e=qt(t,"x","abs"),n={x:e};return Lt.runKernelFunc((t,n)=>(n([e]),"complex64"===e.dtype?t.complexAbs(e):t.abs(e)),n,null,"Abs")}});const pi=Kt({acos_:function(t){const e=qt(t,"x","acos"),n={x:e};return Lt.runKernelFunc((t,n)=>{const r=t.acos(e);return n([e]),r},n,null,"Acos")}});const di=Kt({acosh_:function(t){const e=qt(t,"x","acosh"),n={x:e};return Lt.runKernelFunc((t,n)=>{const r=t.acosh(e);return n([e]),r},n,null,"Acosh")}});const fi=Kt({addN_:function(t){S(Array.isArray(t),()=>"The argument passed to tf.addN() must be a list of tensors"),S(t.length>=1,()=>"Must pass at least one tensor to tf.addN(), but got "+t.length);const e=t.map((t,e)=>qt(t,"tensors"+e,"addN")),n=e[0];e.forEach(t=>{if(t.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")}),e.forEach(t=>{if(!R(t.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")});const r=e;return Lt.runKernelFunc((t,n)=>{const r=t.addN(e);return n(e),r},r,null,"AddN")}});const mi=Kt({all_:function(t,e=null,n=!1){let r=qt(t,"x","all","bool");const s={x:r},a={axis:e,keepDims:n};return Lt.runKernelFunc(t=>{const s=L(e,r.shape);let a=s;const i=Ce(a,r.rank);null!=i&&(r=r.transpose(i),a=Ee(a.length,r.rank));const o=t.all(r,a);if(n){const t=Ie(o.shape,s);return o.reshape(t)}return o},s,null,"All",a)}});const gi=Kt({any_:function(t,e=null,n=!1){let r=qt(t,"x","any","bool");const s={x:r},a={axis:e,keepDims:n};return Lt.runKernelFunc(t=>{const s=L(e,r.shape);let a=s;const i=Ce(a,r.rank);null!=i&&(r=r.transpose(i),a=Ee(a.length,r.rank));const o=t.any(r,a);if(n){const t=Ie(o.shape,s);return o.reshape(t)}return o},s,null,"Any",a)}});const yi=Kt({argMax_:function(t,e=0){let n=qt(t,"x","argMax");const r={x:n},s={axis:e};return Lt.runKernelFunc((t,r)=>{r([n]);let s=L(e,n.shape);const a=Ce(s,n.rank);return null!=a&&(n=n.transpose(a),s=Ee(s.length,n.rank)),t.argMax(n,s[0])},r,null,"ArgMax",s)}});const bi=Kt({argMin_:function(t,e=0){let n=qt(t,"x","argMin");const r={x:n},s={axis:e};return Lt.runKernelFunc((t,r)=>{r([n]),null==e&&(e=0);let s=L(e,n.shape);const a=Ce(s,n.rank);return null!=a&&(n=n.transpose(a),s=Ee(s.length,n.rank)),t.argMin(n,s[0])},r,null,"ArgMin",s)}});const xi=Kt({asin_:function(t){const e=qt(t,"x","asin"),n={x:e};return Lt.runKernelFunc((t,n)=>{const r=t.asin(e);return n([e]),r},n,null,"Asin")}});const wi=Kt({asinh_:function(t){const e=qt(t,"x","asinh"),n={x:e};return Lt.runKernelFunc((t,n)=>{const r=t.asinh(e);return n([e]),r},n,null,"Asinh")}});const vi=Kt({atan_:function(t){const e=qt(t,"x","atan"),n={x:e};return Lt.runKernelFunc((t,n)=>{const r=t.atan(e);return n([e]),r},n,null,"Atan")}});const ki=Kt({atan2_:function(t,e){let n=qt(t,"a","atan2"),r=qt(e,"b","atan2");[n,r]=$t(n,r);const s={a:n,b:r};return Lt.runKernelFunc((t,e)=>{const s=t.atan2(n,r);return e([n,r]),s},s,null,"Atan2")}});const Ni=Kt({atanh_:function(t){const e=qt(t,"x","atanh"),n={x:e};return Lt.runKernelFunc((t,n)=>{const r=t.atanh(e);return n([e]),r},n,null,"Atanh")}});const Ii=Kt({avgPool_:function(t,e,n,r,s){const a=qt(t,"x","avgPool","float32");S(Ge(n,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`);let i=a,o=!1;3===a.rank&&(o=!0,i=we(a,[1,a.shape[0],a.shape[1],a.shape[2]])),S(4===i.rank,()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`),null!=s&&S($(r),()=>`Error in avgPool: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`);const u={x:i},l={filterSize:e,strides:n,pad:r,dimRoundingMode:s};let c=Lt.runKernelFunc((t,a)=>{const o=Fe(i.shape,e,n,1,r,s);return a([i]),1===o.filterWidth&&1===o.filterHeight&&R(o.inShape,o.outShape)?i.clone():t.avgPool(i,o)},u,null,"AvgPool",l);return c=Xt(c,a.dtype),o?c.as3D(c.shape[1],c.shape[2],c.shape[3]):c}});const Si=Kt({avgPool3d_:function(t,e,n,r,s,a="NDHWC",i){null==i?i=[1,1,1]:ri("dilations is deprecated, this field will be gone in v3.0.0.");const o=qt(t,"x","avgPool3d","float32");let u=o,l=!1;4===o.rank&&(l=!0,u=we(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),S(5===u.rank,()=>`Error in avgPool3d: x must be rank 5 but got rank ${u.rank}.`),S("NDHWC"===a,()=>"Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of "+a),S(Ge(n,i),()=>`Error in avgPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`),null!=s&&S($(r),()=>`Error in avgPool3d: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`);const c={x:u},h={filterSize:e,strides:n,pad:r,dimRoundingMode:s,dataFormat:a,dilations:i};let p=Lt.runKernelFunc((t,o)=>{null==i&&(i=[1,1,1]);const l=Oe(u.shape,e,n,i,r,s,a);return o([u]),t.avgPool3d(u,l)},c,null,"AvgPool3D",h);return p=Xt(p,u.dtype),l?p.as4D(p.shape[1],p.shape[2],p.shape[3],p.shape[4]):p}});const Ci=Kt({tanh_:function(t){const e=qt(t,"x","tanh"),n={x:e};return Lt.runKernelFunc((t,n)=>{const r=t.tanh(e);return n([r]),r},n,null,"Tanh")}});const Ai=Kt({basicLSTMCell_:function(t,e,n,r,s,a){const i=qt(t,"forgetBias","basicLSTMCell"),o=qt(e,"lstmKernel","basicLSTMCell"),u=qt(n,"lstmBias","basicLSTMCell"),l=qt(r,"data","basicLSTMCell"),c=qt(s,"c","basicLSTMCell"),h=qt(a,"h","basicLSTMCell"),p=xs([l,h],1),d=Ye(p,o),f=be(d,u),m=f.shape[0],g=f.shape[1]/4,y=[m,g],b=Rs(f,[0,0],y),x=Rs(f,[0,g],y),w=Rs(f,[0,2*g],y),v=Rs(f,[0,3*g],y),k=be(Yt(ps(b),Ci(x)),Yt(c,ps(be(i,w))));return[k,Yt(Ci(k),ps(v))]}});function Ei(t){return null==t?null:0===t.rank?t.as1D():1===t.rank?t:2===t.rank?t.as4D(1,1,t.shape[0],t.shape[1]):3===t.rank?t.as4D(1,t.shape[0],t.shape[1],t.shape[2]):t}const Ti=Kt({batchNorm_:function(t,e,n,r,s,a){null==a&&(a=.001);const i=qt(t,"x","batchNorm"),o=qt(e,"mean","batchNorm"),u=qt(n,"variance","batchNorm");let l,c;null!=s&&(l=qt(s,"scale","batchNorm")),null!=r&&(c=qt(r,"offset","batchNorm")),S(o.rank===u.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),S(null==c||o.rank===c.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),S(null==l||o.rank===l.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");const h=function(t){let e;return e=0===t.rank||1===t.rank?t.as4D(1,1,1,t.size):2===t.rank?t.as4D(1,1,t.shape[0],t.shape[1]):3===t.rank?t.as4D(1,t.shape[0],t.shape[1],t.shape[2]):t,e}(i),p={x:h,scale:l,offset:c,mean:o,variance:u},d={varianceEpsilon:a},f=Lt.runKernelFunc((t,e)=>(e([h,o,u,l]),t.batchNorm(h,Ei(o),Ei(u),Ei(c),Ei(l),a)),p,null,"FusedBatchNorm",d);return we(f,i.shape)}});const Ri=Kt({batchNorm2d_:function(t,e,n,r,s,a){const i=qt(t,"x","batchNorm"),o=qt(e,"mean","batchNorm"),u=qt(n,"variance","batchNorm");let l,c;return null!=s&&(l=qt(s,"scale","batchNorm")),null!=r&&(c=qt(r,"offset","batchNorm")),S(2===i.rank,()=>"Error in batchNorm3D: x must be rank 3 but got rank "+i.rank+"."),S(2===o.rank||1===o.rank,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${o.rank}.`),S(2===u.rank||1===u.rank,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${u.rank}.`),null!=l&&S(2===l.rank||1===l.rank,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${l.rank}.`),null!=c&&S(2===c.rank||1===c.rank,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`),Ti(i,o,u,c,l,a)}});const $i=Kt({batchNorm3d_:function(t,e,n,r,s,a){const i=qt(t,"x","batchNorm"),o=qt(e,"mean","batchNorm"),u=qt(n,"variance","batchNorm");let l,c;return null!=s&&(l=qt(s,"scale","batchNorm")),null!=r&&(c=qt(r,"offset","batchNorm")),S(3===i.rank,()=>"Error in batchNorm3D: x must be rank 3 but got rank "+i.rank+"."),S(3===o.rank||1===o.rank,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${o.rank}.`),S(3===u.rank||1===u.rank,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${u.rank}.`),null!=l&&S(3===l.rank||1===l.rank,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${l.rank}.`),null!=c&&S(3===c.rank||1===c.rank,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`),Ti(i,o,u,c,l,a)}});const _i=Kt({batchNorm4d_:function(t,e,n,r,s,a){const i=qt(t,"x","batchNorm"),o=qt(e,"mean","batchNorm"),u=qt(n,"variance","batchNorm");let l,c;return null!=s&&(l=qt(s,"scale","batchNorm")),null!=r&&(c=qt(r,"offset","batchNorm")),S(4===i.rank,()=>"Error in batchNorm4D: x must be rank 4 but got rank "+i.rank+"."),S(4===o.rank||1===o.rank,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${o.rank}.`),S(4===u.rank||1===u.rank,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${u.rank}.`),null!=l&&S(4===l.rank||1===l.rank,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${l.rank}.`),null!=c&&S(4===c.rank||1===c.rank,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`),Ti(i,o,u,c,l,a)}});const Di=Kt({broadcastTo_:function(t,e){let n=qt(t,"broadcastTo","x");const r=n.shape;if(e.some(t=>!(t>0)||t%1!=0))throw new Error(`broadcastTo(): Invalid broadcast shape [${e}].`);if(e.length<n.rank)throw new Error(`broadcastTo(): shape.length=${e.length} < input.rank=${n.rank}.`);if(e.length>n.rank){const t=n.shape.slice();for(;t.length<e.length;)t.unshift(1);n=we(n,t)}const s=n.shape,a=Array.from(e);for(let t=e.length-1;t>=0;t--)if(s[t]===e[t])a[t]=1;else if(1!==n.shape[t])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${e}].`);if(0===a.map((t,e)=>t>1?e:-1).filter(t=>t>=0).length)return Dr(n);const i={x:n},o={shape:e,inputShape:s};return Lt.runKernelFunc(t=>t.tile(n,a),i,null,"BroadcastTo",o)}});function Fi(t,e="float32",n){return e=e||"float32",it(t),new bt(t,e,n)}const Oi=Kt({ceil_:function(t){const e=qt(t,"x","ceil"),n={x:e};return Lt.runKernelFunc(t=>t.ceil(e),n,null,"Ceil")}});const Mi=Kt({clipByValue_:function(t,e,n){const r=qt(t,"x","clipByValue");S(e<=n,()=>`Error in clip: min (${e}) must be less than or equal to max (${n}).`);const s={x:r},a={clipValueMin:e,clipValueMax:n};return Lt.runKernelFunc((t,s)=>{const a=t.clip(r,e,n);return s([r]),a},s,null,"ClipByValue",a)}});const Li=Kt({concat1d_:function(t){return xs(t,0)}});const zi=Kt({concat2d_:function(t,e){return xs(t,e)}});const Bi=Kt({concat3d_:function(t,e){return xs(t,e)}});const Pi=Kt({concat4d_:function(t,e){return xs(t,e)}});const Wi=Kt({conv1d_:function(t,e,n,r,s="NWC",a=1,i){const o=qt(t,"x","conv1d"),u=qt(e,"filter","conv1d");let l=o,c=!1;2===o.rank&&(c=!0,l=we(o,[1,o.shape[0],o.shape[1]])),S(3===l.rank,()=>`Error in conv1d: input must be rank 3, but got rank ${l.rank}.`),S(3===u.rank,()=>"Error in conv1d: filter must be rank 3, but got rank "+u.rank+"."),null!=i&&S($(r),()=>`Error in conv1d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`),S(l.shape[2]===u.shape[1],()=>`Error in conv1d: depth of input (${l.shape[2]}) must match input depth for filter ${u.shape[1]}.`),S(Ge(n,a),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`),S("NWC"===s,()=>`Error in conv1d: got dataFormat of ${s} but only NWC is currently supported.`);const h=we(u,[1,u.shape[0],u.shape[1],u.shape[2]]),p=we(l,[l.shape[0],1,l.shape[1],l.shape[2]]),d=mn(p,h,[1,n],r,"NHWC",[1,a],i);return we(d,c?[d.shape[2],d.shape[3]]:[d.shape[0],d.shape[2],d.shape[3]])}});const Vi=Kt({conv2dTranspose_:function(t,e,n,r,s,a){const i=qt(t,"x","conv2dTranspose"),o=qt(e,"filter","conv2dTranspose");return dn(n,i,o,r,s,"NHWC",a)}});const Ui=Kt({conv3d_:function(t,e,n,r,s="NDHWC",a=[1,1,1]){const i=qt(t,"x","conv3d"),o=qt(e,"filter","conv3d");let u=i,l=!1;4===i.rank&&(l=!0,u=we(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),S(5===u.rank,()=>`Error in conv3d: input must be rank 5, but got rank ${u.rank}.`),S(5===o.rank,()=>"Error in conv3d: filter must be rank 5, but got rank "+o.rank+"."),S(u.shape[4]===o.shape[3],()=>`Error in conv3d: depth of input (${u.shape[4]}) must match input depth for filter ${o.shape[3]}.`),S(Ge(n,a),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),S("NDHWC"===s,()=>`Error in conv3d: got dataFormat of ${s} but only NDHWC is currently supported.`);const c={x:u,filter:o},h={strides:n,pad:r,dataFormat:s,dilations:a},p=Lt.runKernelFunc((t,e)=>{const s=Le(u.shape,o.shape,n,a,r),i=t.conv3d(u,o,s);return e([u,o]),i},c,null,"Conv3D",h);return l?p.as4D(p.shape[1],p.shape[2],p.shape[3],p.shape[4]):p}});const Gi=Kt({conv3dTranspose_:function(t,e,n,r,s){const a=qt(t,"x","conv3dTranspose"),i=qt(e,"filter","conv3dTranspose");return bn(n,a,i,r,s)}});const Hi=Kt({depthToSpace_:function(t,e,n="NHWC"){const r=qt(t,"x","depthToSpace"),s="NHWC"===n?r.shape[1]:r.shape[2],a="NHWC"===n?r.shape[2]:r.shape[3],i="NHWC"===n?r.shape[3]:r.shape[1];S(s*e>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${s} and ${e}  for depthToSpace with input shape\n    ${r.shape}`),S(a*e>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${e} for depthToSpace with input shape\n        ${r.shape}`),S(i%(e*e)==0,()=>`Dimension size must be evenly divisible by ${e*e} but is ${i} for depthToSpace with input shape ${r.shape}`);const o={x:r},u={blockSize:e,dataFormat:n};return Lt.runKernelFunc(t=>t.depthToSpace(r,e,n),o,null,"DepthToSpace",u)}});const qi=Kt({depthwiseConv2d_:function(t,e,n,r,s="NHWC",a=[1,1],i){const o=qt(t,"x","depthwiseConv2d"),u=qt(e,"filter","depthwiseConv2d");let l=o,c=!1;3===o.rank&&(c=!0,l=we(o,[1,o.shape[0],o.shape[1],o.shape[2]])),S(4===l.rank,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${l.rank}.`),S(4===u.rank,()=>"Error in depthwiseConv2d: filter must be rank 4, but got rank "+u.rank+"."),S(l.shape[3]===u.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`),null!=i&&S($(r),()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`);const h={x:l,filter:u},p={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i},d=Lt.runKernelFunc((t,e)=>{null==a&&(a=[1,1]),S(Ge(n,a),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`);const s=Me(l.shape,u.shape,n,a,r,i,!0),o=t.depthwiseConv2D(l,u,s);return e([l,u]),o},h,null,"DepthwiseConv2dNative",p);return c?we(d,[d.shape[1],d.shape[2],d.shape[3]]):d}});const ji=Kt({diag_:function(t){const e=qt(t,"x","diag").flatten(),n={x:e};return Lt.runKernelFunc(n=>{const r=n.diag(e),s=[...t.shape,...t.shape];return we(r,s)},n,null,"Diag")}});const Ki=Kt({dilation2d_:function(t,e,n,r,s=[1,1],a="NHWC"){const i=qt(t,"x","dilation2d"),o=qt(e,"filter","dilation2d");S(3===i.rank||4===i.rank,()=>"Error in dilation2d: input must be rank 3 or 4, but got rank "+i.rank+"."),S(3===o.rank,()=>"Error in dilation2d: filter must be rank 3, but got rank "+o.rank+"."),S("NHWC"===a,()=>"Error in dilation2d: Only NHWC is currently supported, but got dataFormat of "+a);let u=i,l=!1;3===i.rank&&(u=we(i,[1,i.shape[0],i.shape[1],i.shape[2]]),l=!0);const c={x:u,filter:o},h={strides:n,pad:r,dilations:s},p=Lt.runKernel("Dilation2D",c,h);return l?we(p,[p.shape[1],p.shape[2],p.shape[3]]):p}});const Xi=Kt({divNoNan_:function(t,e){let n=qt(t,"a","div"),r=qt(e,"b","div");[n,r]=$t(n,r);const s=te(n,r),a=fe(s),i=r.equal(a);return on(i,a,s)}});const Yi=Kt({dot_:function(t,e){const n=qt(t,"t1","dot"),r=qt(e,"t2","dot");S(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`);const s=1===n.rank?n.size:n.shape[1],a=1===r.rank?r.size:r.shape[0];if(S(s===a,()=>`Error in dot: inner dimensions of inputs must match, but got ${s} and ${a}.`),1===n.rank&&1===r.rank){const t=we(n,[1,-1]),e=we(r,[-1,1]),s=Ye(t,e);return we(s,[])}if(1===n.rank&&2===r.rank){const t=we(n,[1,-1]),e=we(r,[r.shape[0],r.shape[1]]),s=Ye(t,e);return we(s,[s.size])}if(2===n.rank&&1===r.rank){const t=we(r,[-1,1]),e=Ye(n,t);return we(e,[e.size])}{const t=we(r,[r.shape[0],r.shape[1]]);return Ye(n,t)}}});const Ji=Kt({elu_:function(t){const e=qt(t,"x","elu"),n={x:e};return Lt.runKernelFunc((t,n)=>{const r=t.elu(e);return n([r]),r},n,null,"Elu")}});const Zi=Kt({erf_:function(t){let e=qt(t,"x","erf");S("int32"===e.dtype||"float32"===e.dtype,()=>"Input dtype must be `int32` or `float32`."),"int32"===e.dtype&&(e=e.toFloat());const n={x:e};return Lt.runKernelFunc((t,n)=>{const r=t.erf(e);return n([e]),r},n,null,"Erf")}});const Qi=Kt({expm1_:function(t){const e=qt(t,"x","expm1"),n={x:e};return Lt.runKernelFunc((t,n)=>{const r=t.expm1(e);return n([e]),r},n,null,"Expm1")}});const to=Kt({eye_:function(t,e,n,r="float32"){null==e&&(e=t);const s=Fi([t,e],r),a=t<=e?t:e;for(let t=0;t<a;++t)s.set(1,t,t);const i=s.toTensor().as2D(t,e);if(null==n)return i;if(1===n.length)return Pn(Ds(i,0),[n[0],1,1]);if(2===n.length)return Pn(Ds(Ds(i,0),0),[n[0],n[1],1,1]);if(3===n.length)return Pn(Ds(Ds(Ds(i,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});const eo=Kt({fft_:function(t){S("complex64"===t.dtype,()=>`The dtype for tf.spectral.fft() must be complex64 but got ${t.dtype}.`);const e={input:t};return Lt.runKernelFunc(e=>{const n=t.shape[t.shape.length-1],r=t.size/n,s=t.as2D(r,n);return e.fft(s).reshape(t.shape)},e,null,"FFT")}});function no(t,e,n){const r={shape:t,value:e,dtype:n};return Lt.runKernelFunc(r=>r.fill(t,e,n),{},null,"Fill",r)}const ro=Kt({ifft_:function(t){S("complex64"===t.dtype,()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${t.dtype}.`);const e={input:t};return Lt.runKernelFunc(e=>{const n=t.shape[t.shape.length-1],r=t.size/n,s=t.as2D(r,n);return e.ifft(s).reshape(t.shape)},e,null,"IFFT")}});const so=Kt({imag_:function(t){const e=qt(t,"input","imag"),n={input:e};return Lt.runKernelFunc(t=>t.imag(e),n,null,"Imag")}});const ao=Kt({real_:function(t){const e=qt(t,"input","real"),n={input:e};return Lt.runKernelFunc(t=>t.real(e),n,null,"Real")}});const io=Kt({irfft_:function(t){const e=t.shape[t.shape.length-1],n=t.size/e;let r;if(e<=2){const s=we(t,[n,e]);r=ro(s)}else{const s=[n,2*(e-1)],a=we(ao(t),[n,e]),i=we(so(t),[n,e]),o=Fr(Rs(a,[0,1],[n,e-2]),1),u=Yt(Fr(Rs(i,[0,1],[n,e-2]),1),re(-1)),l=xs([a,o],1),c=xs([i,u],1),h=we(br(l,c),[s[0],s[1]]);r=ro(h)}if(r=ao(r),3===t.rank&&0!==t.shape[0]){const e=r,n=t.shape[0];r=we(r,[n,r.shape[0]/n,r.shape[1]]),e.dispose()}return r}});const oo=Kt({isFinite_:function(t){const e=qt(t,"x","isFinite"),n={x:e};return Lt.runKernelFunc(t=>t.isFinite(e),n,null,"IsFinite")}});const uo=Kt({isInf_:function(t){const e=qt(t,"x","isInf"),n={x:e};return Lt.runKernelFunc(t=>t.isInf(e),n,null,"IsInf")}});const lo=Kt({isNaN_:function(t){const e=qt(t,"x","isNaN"),n={x:e};return Lt.runKernelFunc(t=>t.isNaN(e),n,null,"IsNan")}});const co=Kt({leakyRelu_:function(t,e=.2){const n=qt(t,"x","leakyRelu");return Ps(Yt(re(e),n),n)}});function ho(t,e,n){if(n<=0)throw new Error("The number of values should be positive.");const r={start:t,stop:e,num:n};return Lt.runKernelFunc(r=>r.linspace(t,e,n),{},null,"LinSpace",r)}const po=Kt({localResponseNormalization_:function(t,e=5,n=1,r=1,s=.5){const a=qt(t,"x","localResponseNormalization");S(4===a.rank||3===a.rank,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`),S($(e),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${e}.`);let i=a,o=!1;3===a.rank&&(o=!0,i=we(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const u={x:i},l={depthRadius:e,bias:n,alpha:r,beta:s},c=Lt.runKernelFunc((t,a)=>{const o=t.localResponseNormalization4D(i,e,n,r,s);return a([i,o]),o},u,null,"LRN",l);return o?c.as3D(c.shape[1],c.shape[2],c.shape[3]):c}});const fo=Kt({log1p_:function(t){const e=qt(t,"x","log1p"),n={x:e};return Lt.runKernelFunc((t,n)=>{const r=t.log1p(e);return n([e]),r},n,null,"Log1p")}});function mo(t,e){S(J(t),()=>"The f passed in variableGrads(f) must be a function"),S(null==e||Array.isArray(e)&&e.every(t=>t instanceof kt),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");const n=null!=e;if(!n){e=[];for(const t in Lt.registeredVariables)e.push(Lt.registeredVariables[t])}const r=n?e.filter(t=>!t.trainable):null,s=e.length;S((e=e.filter(t=>t.trainable)).length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${s} variables is trainable.`);const{value:a,grads:i}=Lt.gradients(t,e,null,!0);S(i.some(t=>null!=t),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),S(0===a.rank,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`);const o={};return e.forEach((t,e)=>{null!=i[e]&&(o[t.name]=i[e])}),null!=r&&r.forEach(t=>o[t.name]=null),{value:a,grads:o}}function go(t){return Lt.customGrad(t)}function yo(t){if(t.filter(t=>null==t).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}const bo=Kt({logSigmoid_:function(t){const e=qt(t,"x","logSigmoid");return go(t=>({value:ee(ee(t).softplus()),gradFunc:e=>Yt(e,ps(ee(t)))}))(e)}});const xo=Kt({max_:function(t,e=null,n=!1){const r=qt(t,"x","max"),s={x:r},a={reductionIndices:e,keepDims:n};return Lt.runKernelFunc((t,s)=>{let a=L(e,r.shape);const i=Ce(a,r.rank);let o=r;null!=i&&(o=In(r,i),a=Ee(a.length,o.rank));const u=t.max(o,a);null!=i&&o.dispose();let l=u;if(n){const t=Ie(l.shape,L(e,r.shape));l=we(l,t),u.dispose()}return s([r,l]),l},s,null,Ut,a)}});const wo=Kt({logSoftmax_:function(t,e=-1){const n=qt(t,"logits","logSoftmax");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${e}`);const r={logits:n},s={axis:e};return Lt.runKernelFunc((n,r)=>{const s=xo(t,e,!0),a=ie(t,s),i=a.toFloat().sub(a.exp().sum(e,!0).log());return r([i]),i},r,null,"LogSoftmax",s)}});const vo=Kt({logSumExp_:function(t,e=null,n=!1){const r=qt(t,"x","logSumExp"),s=L(e,r.shape),a=xo(r,s,!0),i=ie(r,a),o=Dn(i),u=Te(o,s),l=Nr(u),c=be(we(a,l.shape),l);if(n){const t=Ie(c.shape,s);return we(c,t)}return c}});const ko=Kt({logicalOr_:function(t,e){const n=qt(t,"a","logicalOr","bool"),r=qt(e,"b","logicalOr","bool");he(n.shape,r.shape);const s={a:n,b:r};return Lt.runKernelFunc(t=>t.logicalOr(n,r),s,null,"LogicalOr")}});const No=Kt({logicalXor_:function(t,e){const n=qt(t,"a","logicalXor","bool"),r=qt(e,"b","logicalXor","bool");return he(n.shape,r.shape),an(ko(t,e),zr(an(t,e)))}});const Io=Kt({maxPool_:function(t,e,n,r,s){const a=qt(t,"x","maxPool");let i=a,o=!1;3===a.rank&&(o=!0,i=we(a,[1,a.shape[0],a.shape[1],a.shape[2]])),S(4===i.rank,()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`),S(Ge(n,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`),null!=s&&S($(r),()=>`Error in maxPool: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`);const u={x:i},l={filterSize:e,strides:n,pad:r,dimRoundingMode:s},c=Lt.runKernelFunc((t,a)=>{const o=Fe(i.shape,e,n,1,r,s);let u;return u=1===o.filterWidth&&1===o.filterHeight&&R(o.inShape,o.outShape)?i.clone():t.maxPool(i,o),a([i,u]),u},u,null,"MaxPool",l);return o?we(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const So=Kt({maxPool3d_:function(t,e=[1,1,1],n,r,s,a="NDHWC",i){null==i?i=[1,1,1]:ri("dilations is deprecated, this field will be gone in v3.0.0.");const o=qt(t,"x","maxPool3d");let u=o,l=!1;4===o.rank&&(l=!0,u=o.as5D(1,o.shape[0],o.shape[1],o.shape[2],o.shape[3])),S(5===u.rank,()=>`Error in maxPool3d: x must be rank 5 but got rank ${u.rank}.`),S("NDHWC"===a,()=>"Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of "+a),S(Ge(n,i),()=>`Error in maxPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`),null!=s&&S($(r),()=>`Error in maxPool3d: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`);const c={x:u},h={filterSize:e,strides:n,pad:r,dimRoundingMode:s,dataFormat:a,dilations:i},p=Lt.runKernelFunc((t,o)=>{null==i&&(i=[1,1,1]);const l=Oe(u.shape,e,n,i,r,s,a),c=t.maxPool3d(u,l);return o([u,c]),c},c,null,"MaxPool3D",h);return l?we(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const Co=Kt({maxPoolWithArgmax_:function(t,e,n,r,s=!1){const a={x:qt(t,"x","maxPoolWithArgmax")},i={filterSize:e,strides:n,pad:r,includeBatchInIndex:s},o=Lt.runKernel("MaxPoolWithArgmax",a,i);return{result:o[0],indexes:o[1]}}});const Ao=Kt({mean_:function(t,e=null,n=!1){const r=qt(t,"x","mean"),s=L(e,r.shape),a=T(Ne(r.shape,s)[1]);return go(t=>{const r=re(a),i=r.dtype===t.dtype?t:Xt(t,r.dtype),o=te(i,r);return{value:Te(o,e,n),gradFunc:e=>{const n=t.shape.slice();s.forEach(t=>{n[t]=1});const r=we(e,n);return te(Yt(r,Cs(t.shape,"float32")),a)}}})(r)}});const Eo=Kt({min_:function(t,e=null,n=!1){const r=qt(t,"x","min"),s={x:r},a={axis:e,keepDims:n};return Lt.runKernelFunc((t,s)=>{const a=L(e,r.shape);let i=a;const o=Ce(i,r.rank);let u=r;null!=o&&(u=In(r,o),i=Ee(i.length,r.rank));const l=t.min(u,i);null!=o&&u.dispose();let c=l;if(n){const t=Ie(c.shape,a);c=we(l,t),l.dispose()}return s([r,c]),c},s,null,"Min",a)}});const To=Kt({minimum_:function(t,e){let n=qt(t,"a","minimum"),r=qt(e,"b","minimum");[n,r]=$t(n,r),"bool"===n.dtype&&(n=Xt(n,"int32"),r=Xt(r,"int32")),he(n.shape,r.shape);const s={a:n,b:r};return Lt.runKernelFunc((t,e)=>{const s=t.minimum(n,r);return e([n,r]),s},s,null,"Minimum")}});const Ro=Kt({mod_:function(t,e){let n=qt(t,"a","mod"),r=qt(e,"b","mod");[n,r]=$t(n,r);const s={a:n,b:r};return Lt.runKernelFunc((t,e)=>{const s=t.mod(n,r);return e([n,r]),s},s,null,"Mod")}});const $o=Kt({moments_:function(t,e=null,n=!1){const r=L(e,(t=qt(t,"x","moments")).shape),s=Ao(t,r,n);let a=s.shape;n||(a=Ie(s.shape,r));const i=ae(ie(Xt(t,"float32"),we(s,a)));return{mean:s,variance:Ao(i,r,n)}}});const _o=Kt({multiRNNCell_:function(t,e,n,r){const s=qt(e,"data","multiRNNCell"),a=jt(n,"c","multiRNNCell"),i=jt(r,"h","multiRNNCell");let o=s;const u=[];for(let e=0;e<t.length;e++){const n=t[e](o,a[e],i[e]);u.push(n[0]),u.push(n[1]),o=n[1]}const l=[],c=[];for(let t=0;t<u.length;t+=2)l.push(u[t]),c.push(u[t+1]);return[l,c]}});const Do=Kt({multinomial_:function(t,e,n,r=!1){const s=qt(t,"logits","multinomial"),a=s.size,i=s.rank;if(a<2)throw new Error("Error in multinomial: you need at least 2 outcomes, but got "+a+".");if(i>2)throw new Error("Rank of probabilities must be 1 or 2, but is "+i);n=n||Math.random();const o=1===i?s.as2D(1,-1):s,u=Lt.runKernelFunc(t=>t.multinomial(o,r,e,n),{logits2D:o});return 1===i?u.as1D():u}});const Fo=Kt({notEqual_:function(t,e){let n=qt(t,"a","notEqual"),r=qt(e,"b","notEqual");[n,r]=$t(n,r),he(n.shape,r.shape);const s={a:n,b:r};return Lt.runKernelFunc(t=>t.notEqual(n,r),s,null,"NotEqual")}});const Oo=Kt({onesLike_:function(t){const e=qt(t,"x","onesLike"),n={x:e};return Lt.runKernelFunc((t,n)=>{if("complex64"===e.dtype){const t=Oo(ao(e)),n=fe(so(e));return br(t,n)}return t.onesLike(e)},n,null,"OnesLike")}});const Mo=Kt({outerProduct_:function(t,e){const n=qt(t,"v1","outerProduct"),r=qt(e,"v2","outerProduct");S(1===n.rank&&1===r.rank,()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${r.rank}.`);const s=we(n,[-1,1]),a=we(r,[1,-1]);return Ye(s,a)}});const Lo=Kt({pad1d_:function(t,e,n=0){return S(2===e.length,()=>"Invalid number of paddings. Must be length of 2."),Kr(t,[e],n)}});const zo=Kt({pad2d_:function(t,e,n=0){return S(2===e.length&&2===e[0].length&&2===e[1].length,()=>"Invalid number of paddings. Must be length of 2 each."),Kr(t,e,n)}});const Bo=Kt({pad3d_:function(t,e,n=0){return S(3===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length,()=>"Invalid number of paddings. Must be length of 2 each."),Kr(t,e,n)}});const Po=Kt({pad4d_:function(t,e,n=0){return S(4===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length&&2===e[3].length,()=>"Invalid number of paddings. Must be length of 2 each."),Kr(t,e,n)}});const Wo=Kt({pool_:function(t,e,n,r,s,a){null==s&&(s=[1,1]),null==a&&(a=1),0===r&&(r="valid");const i=qt(t,"x","maxPool");let o=i,u=!1;3===i.rank&&(u=!0,o=we(i,[1,i.shape[0],i.shape[1],i.shape[2]])),S(Ge(a,s),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${s}'`);const l=Fe(o.shape,e,a,s,r),c=[l.dilationHeight,l.dilationWidth];let h;h="same"===r?function(t,e){const n=t.map((t,n)=>t+(t-1)*(e[n]-1)).map(t=>t-1),r=n.map(t=>Math.floor(t/2)),s=n.map((t,e)=>t-r[e]);return n.map((t,e)=>[r[e],s[e]])}([l.filterHeight,l.filterWidth],c):[[0,0],[0,0]];const p=1===c[0]&&1===c[1],[d,f]=function(t,e,n){const r=n.map(t=>t[0]),s=n.map(t=>t[1]),a=t.concat(r,s),i=e.map((t,e)=>(t-a[e]%t)%t),o=s.map((t,e)=>t+i[e]),u=e.map((t,e)=>[r[e],o[e]]),l=e.map((t,e)=>[0,i[e]]);return[u,l]}([l.inHeight,l.inWidth],c,h),m=p?r:"valid",g=p?o:Ze(o,c,d),y=("avg"===n?()=>Ii(g,e,a,m):()=>Io(g,e,a,m))(),b=p?y:fs(y,c,f);return u?we(b,[b.shape[1],b.shape[2],b.shape[3]]):b}});const Vo=Kt({prelu_:function(t,e){const n=qt(t,"x","prelu"),r=qt(e,"alpha","prelu"),s={x:n,alpha:r};return Lt.runKernelFunc((t,e)=>{const s=t.prelu(n,r);return e([n,r]),s},s,null,"Prelu")}});function Uo(t,e=!1){console.log(t.toString(e))}const Go=Kt({prod_:function(t,e=null,n=!1){let r=qt(t,"x","prod");const s={x:r},a={axis:e,keepDims:n};return Lt.runKernelFunc(t=>{"bool"===r.dtype&&(r=r.toInt());const s=L(e,r.shape),a=Ce(s,r.rank);let i=s,o=r;null!=a&&(o=r.transpose(a),i=Ee(i.length,r.rank));let u=t.prod(o,i);if(n){const t=Ie(u.shape,s);u=u.reshape(t)}return u},s,null,"Prod",a)}});const Ho=Kt({rand_:function(t,e,n){const r=T(t);let s=null;if(null==n||"float32"===n)s=new Float32Array(r);else if("int32"===n)s=new Int32Array(r);else{if("bool"!==n)throw new Error("Unknown data type "+n);s=new Uint8Array(r)}for(let t=0;t<r;t++)s[t]=e();return Lt.makeTensor(s,t,n)}});"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;function qo(t,e,n){return t(n={path:e,exports:{},require:function(t,e){return function(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}(null==e&&n.path)}},n.exports),n.exports}var jo=qo((function(t){!function(t,e,n){function r(t){var e,n=this,r=(e=4022871197,function(t){t=t.toString();for(var n=0;n<t.length;n++){var r=.02519603282416938*(e+=t.charCodeAt(n));r-=e=r>>>0,e=(r*=e)>>>0,e+=4294967296*(r-=e)}return 2.3283064365386963e-10*(e>>>0)});n.next=function(){var t=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=t-(n.c=0|t)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(t),n.s0<0&&(n.s0+=1),n.s1-=r(t),n.s1<0&&(n.s1+=1),n.s2-=r(t),n.s2<0&&(n.s2+=1),r=null}function s(t,e){return e.c=t.c,e.s0=t.s0,e.s1=t.s1,e.s2=t.s2,e}function a(t,e){var n=new r(t),a=e&&e.state,i=n.next;return i.int32=function(){return 4294967296*n.next()|0},i.double=function(){return i()+11102230246251565e-32*(2097152*i()|0)},i.quick=i,a&&("object"==typeof a&&s(a,n),i.state=function(){return s(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.alea=a}(0,t,!1)})),Ko=qo((function(t){!function(t,e,n){function r(t){var e=this,n="";e.x=0,e.y=0,e.z=0,e.w=0,e.next=function(){var t=e.x^e.x<<11;return e.x=e.y,e.y=e.z,e.z=e.w,e.w^=e.w>>>19^t^t>>>8},t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),e.next()}function s(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e}function a(t,e){var n=new r(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&s(a,n),i.state=function(){return s(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xor128=a}(0,t,!1)})),Xo=qo((function(t){!function(t,e,n){function r(t){var e=this,n="";e.next=function(){var t=e.x^e.x>>>2;return e.x=e.y,e.y=e.z,e.z=e.w,e.w=e.v,(e.d=e.d+362437|0)+(e.v=e.v^e.v<<4^t^t<<1)|0},e.x=0,e.y=0,e.z=0,e.w=0,e.v=0,t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),r==n.length&&(e.d=e.x<<10^e.x>>>4),e.next()}function s(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e.v=t.v,e.d=t.d,e}function a(t,e){var n=new r(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&s(a,n),i.state=function(){return s(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xorwow=a}(0,t,!1)})),Yo=qo((function(t){!function(t,e,n){function r(t){var e=this;e.next=function(){var t,n,r=e.x,s=e.i;return t=r[s],n=(t^=t>>>7)^t<<24,n^=(t=r[s+1&7])^t>>>10,n^=(t=r[s+3&7])^t>>>3,n^=(t=r[s+4&7])^t<<7,t=r[s+7&7],n^=(t^=t<<13)^t<<9,r[s]=n,e.i=s+1&7,n},function(t,e){var n,r=[];if(e===(0|e))r[0]=e;else for(e=""+e,n=0;n<e.length;++n)r[7&n]=r[7&n]<<15^e.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],t.x=r,t.i=0,n=256;n>0;--n)t.next()}(e,t)}function s(t,e){return e.x=t.x.slice(),e.i=t.i,e}function a(t,e){null==t&&(t=+new Date);var n=new r(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&(a.x&&s(a,n),i.state=function(){return s(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xorshift7=a}(0,t,!1)})),Jo=qo((function(t){!function(t,e,n){function r(t){var e=this;e.next=function(){var t,n,r=e.w,s=e.X,a=e.i;return e.w=r=r+1640531527|0,n=s[a+34&127],t=s[a=a+1&127],n^=n<<13,t^=t<<17,n^=n>>>15,t^=t>>>12,n=s[a]=n^t,e.i=a,n+(r^r>>>16)|0},function(t,e){var n,r,s,a,i,o=[],u=128;for(e===(0|e)?(r=e,e=null):(e+="\0",r=0,u=Math.max(u,e.length)),s=0,a=-32;a<u;++a)e&&(r^=e.charCodeAt((a+32)%e.length)),0===a&&(i=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,a>=0&&(i=i+1640531527|0,s=0==(n=o[127&a]^=r+i)?s+1:0);for(s>=128&&(o[127&(e&&e.length||0)]=-1),s=127,a=512;a>0;--a)r=o[s+34&127],n=o[s=s+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,o[s]=r^n;t.w=i,t.X=o,t.i=s}(e,t)}function s(t,e){return e.i=t.i,e.w=t.w,e.X=t.X.slice(),e}function a(t,e){null==t&&(t=+new Date);var n=new r(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&(a.X&&s(a,n),i.state=function(){return s(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xor4096=a}(0,t,!1)})),Zo=qo((function(t){!function(t,e,n){function r(t){var e=this,n="";e.next=function(){var t=e.b,n=e.c,r=e.d,s=e.a;return t=t<<25^t>>>7^n,n=n-r|0,r=r<<24^r>>>8^s,s=s-t|0,e.b=t=t<<20^t>>>12^n,e.c=n=n-r|0,e.d=r<<16^n>>>16^s,e.a=s-t|0},e.a=0,e.b=0,e.c=-1640531527,e.d=1367130551,t===Math.floor(t)?(e.a=t/4294967296|0,e.b=0|t):n+=t;for(var r=0;r<n.length+20;r++)e.b^=0|n.charCodeAt(r),e.next()}function s(t,e){return e.a=t.a,e.b=t.b,e.c=t.c,e.d=t.d,e}function a(t,e){var n=new r(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&s(a,n),i.state=function(){return s(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.tychei=a}(0,t,!1)})),Qo=qo((function(t){!function(e,n){var r,a=this,i=n.pow(256,6),o=n.pow(2,52),u=2*o;function l(t,s,l){var f=[],m=p(function t(e,n){var r,s=[],a=typeof e;if(n&&"object"==a)for(r in e)try{s.push(t(e[r],n-1))}catch(t){}return s.length?s:"string"==a?e:e+"\0"}((s=1==s?{entropy:!0}:s||{}).entropy?[t,d(e)]:null==t?function(){try{var t;return r&&(t=r.randomBytes)?t=t(256):(t=new Uint8Array(256),(a.crypto||a.msCrypto).getRandomValues(t)),d(t)}catch(t){var n=a.navigator,s=n&&n.plugins;return[+new Date,a,s,a.screen,d(e)]}}():t,3),f),g=new c(f),y=function(){for(var t=g.g(6),e=i,n=0;t<o;)t=256*(t+n),e*=256,n=g.g(1);for(;t>=u;)t/=2,e/=2,n>>>=1;return(t+n)/e};return y.int32=function(){return 0|g.g(4)},y.quick=function(){return g.g(4)/4294967296},y.double=y,p(d(g.S),e),(s.pass||l||function(t,e,r,s){return s&&(s.S&&h(s,g),t.state=function(){return h(g,{})}),r?(n.random=t,e):t})(y,m,"global"in s?s.global:this==n,s.state)}function c(t){var e,n=t.length,r=this,s=0,a=r.i=r.j=0,i=r.S=[];for(n||(t=[n++]);s<256;)i[s]=s++;for(s=0;s<256;s++)i[s]=i[a=255&a+t[s%n]+(e=i[s])],i[a]=e;(r.g=function(t){for(var e,n=0,s=r.i,a=r.j,i=r.S;t--;)e=i[s=255&s+1],n=256*n+i[255&(i[s]=i[a=255&a+e])+(i[a]=e)];return r.i=s,r.j=a,n})(256)}function h(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function p(t,e){for(var n,r=t+"",s=0;s<r.length;)e[255&s]=255&(n^=19*e[255&s])+r.charCodeAt(s++);return d(e)}function d(t){return String.fromCharCode.apply(0,t)}if(n.seedrandom=l,p(n.random(),e),t.exports){t.exports=l;try{r=s.default}catch(t){}}}([],Math)}));Qo.alea=jo,Qo.xor128=Ko,Qo.xorwow=Xo,Qo.xorshift7=Yo,Qo.xor4096=Jo,Qo.tychei=Zo;var tu=Qo;class eu{constructor(t,e,n,r,s){this.mean=t,this.stdDev=e,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=s||Math.random();this.random=tu.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const t=this.nextVal;return this.nextVal=NaN,t}let t,e,n=!1;for(;!n;){let r,s,a;do{r=2*this.random()-1,s=2*this.random()-1,a=r*r+s*s}while(a>=1||0===a);const i=Math.sqrt(-2*Math.log(a)/a);t=this.mean+this.stdDev*r*i,e=this.mean+this.stdDev*s*i,this.truncated&&!this.isValidTruncated(t)||(n=!0)}return this.truncated&&!this.isValidTruncated(e)||(this.nextVal=this.convertValue(e)),this.convertValue(t)}convertValue(t){return null==this.dtype||"float32"===this.dtype?t:Math.round(t)}isValidTruncated(t){return t<=this.upper&&t>=this.lower}}class nu{constructor(t,e,n,r){this.alpha=t,this.beta=1/e,this.dtype=n;const s=r||Math.random();this.randu=tu.alea(s.toString()),this.randn=new eu(0,1,n,!1,this.randu()),this.d=t<1?t+2/3:t-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let t,e,n,r,s,a;for(;;){do{r=this.randn.nextValue(),a=1+this.c*r}while(a<=0);if(a*=a*a,t=r*r,e=1-.331*t*t,n=.5*t+this.d*(1-a+Math.log(a)),s=this.randu(),s<e||Math.log(s)<n)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(t){return"float32"===this.dtype?t:Math.round(t)}}class ru{constructor(t=0,e=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=t,this.range=e-t,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${t} - ${e} <= 1 and dtype is not float`);this.random=tu.alea(r)}convertValue(t){return this.canReturnFloat()?t:Math.round(t)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const su=Kt({randomGamma_:function(t,e,n=1,r="float32",s){if(null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error("Unsupported data type "+r);const a=new nu(e,n,r,s),i=Fi(t,r);for(let t=0;t<i.values.length;t++)i.values[t]=a.nextValue();return i.toTensor()}});const au=Kt({randomNormal_:function(t,e=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error("Unsupported data type "+r);const a=new eu(e,n,r,!1,s),i=Fi(t,r);for(let t=0;t<i.values.length;t++)i.values[t]=a.nextValue();return i.toTensor()}});const iu=Kt({randomUniform_:function(t,e=0,n=1,r="float32",s){const a=Fi(t,r),i=new ru(e,n,null,s);for(let t=0;t<a.values.length;t++)a.values[t]=i.nextValue();return a.toTensor()}});function ou(t,e){A(t);const n=Gt(t,e);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return ne(t,null,n,e)}function uu(t,e,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");const s={start:t,stop:e,step:n,dtype:r};return Lt.runKernelFunc(()=>{if(t===e||t<e&&n<0||e<t&&n>1)return xr([0],r);const s=rt(Math.abs(Math.ceil((e-t)/n)),r);e<t&&1===n&&(n=-1),s[0]=t;for(let t=1;t<s.length;t++)s[t]=s[t-1]+n;return ou(s,r)},{},null,"Range",s)}const lu=Kt({reciprocal_:function(t){const e=qt(t,"x","reciprocal"),n={x:e};return Lt.runKernelFunc((t,n)=>{const r=t.reciprocal(e);return n([e]),r},n,null,"Reciprocal")}});const cu=Kt({relu_:function(t){const e=qt(t,"x","relu"),n={x:e};return Lt.runKernelFunc((t,n)=>(n([e]),"bool"===e.dtype?e.toInt():t.relu(e)),n,null,"Relu")}});const hu=Kt({relu6_:function(t){const e=qt(t,"x","relu6"),n={x:e};return Lt.runKernelFunc((t,n)=>(n([e]),"bool"===e.dtype?Xt(e,"int32"):t.relu6(e)),n,null,"Relu6")}});const pu=Kt({reverse1d_:function(t){const e=qt(t,"x","reverse");return S(1===e.rank,()=>`Error in reverse1D: x must be rank 1 but got rank ${e.rank}.`),Fr(e,0)}});const du=Kt({reverse2d_:function(t,e){const n=qt(t,"x","reverse");return S(2===n.rank,()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`),Fr(n,e)}});const fu=Kt({reverse3d_:function(t,e){const n=qt(t,"x","reverse");return S(3===n.rank,()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`),Fr(n,e)}});const mu=Kt({reverse4d_:function(t,e){const n=qt(t,"x","reverse");return S(4===n.rank,()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`),Fr(n,e)}});const gu=Kt({rfft_:function(t,e){S("float32"===t.dtype,()=>"The dtype for rfft() must be real value but got "+t.dtype);let n=t.shape[t.shape.length-1];const r=t.size/n;let s;if(null!=e&&e<n){const r=t.shape.map(t=>0),a=t.shape.map(t=>t);a[t.shape.length-1]=e,s=Rs(t,r,a),n=e}else if(null!=e&&e>n){const r=t.shape.map(t=>t);r[t.shape.length-1]=e-n,s=xs([t,xr(r)],t.shape.length-1),n=e}else s=t;const a=fe(s),i=we(br(s,a),[r,n]),o=eo(i),u=Math.floor(n/2)+1,l=ao(o),c=so(o),h=cn(l,[u,n-u],l.shape.length-1),p=cn(c,[u,n-u],c.shape.length-1),d=s.shape.slice();return d[s.shape.length-1]=u,we(br(h[0],p[0]),d)}});const yu=Kt({round_:function(t){const e=qt(t,"x","round"),n={x:e};return Lt.runKernelFunc(t=>t.round(e),n,null,"Round")}});const bu=Kt({selu_:function(t){const e=qt(t,"x","selu"),n={x:e};return Lt.runKernelFunc((t,n)=>{const r=t.selu(e);return n([e]),r},n,null,"Selu")}});const xu=Kt({separableConv2d_:function(t,e,n,r,s,a=[1,1],i="NHWC"){const o=qt(t,"x","separableConv2d"),u=qt(e,"depthwiseFilter","separableConv2d"),l=qt(n,"pointwiseFilter","separableConv2d");let c=o,h=!1;if(3===o.rank&&(h=!0,c=o.as4D(1,o.shape[0],o.shape[1],o.shape[2])),"NCHW"===i)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");S(4===c.rank,()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`),S(4===u.rank,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${u.rank}.`),S(4===l.rank,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${u.rank}.`),S(1===l.shape[0],()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${l.shape[0]}.`),S(1===l.shape[1],()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${l.shape[1]}.`);const p=u.shape[2],d=u.shape[3];S(l.shape[2]===p*d,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${p*d}, but got ${l.shape[2]}.`);const f=qi(c,u,r,s,i,a),m=mn(f,l,1,"valid",i);return h?m.as3D(m.shape[1],m.shape[2],m.shape[3]):m}});const wu=async function(t,e){const n=qt(t,"x","setdiff1d"),r=qt(e,"y","setdiff1d");S(n.dtype===r.dtype,()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${r.dtype}).`),S(1===n.rank,()=>`x should be 1D tensor, but got x (${n.shape}).`),S(1===r.rank,()=>`y should be 1D tensor, but got y (${r.shape}).`);const s=await n.data(),a=await r.data(),i=new Set(a);let o=0;for(let t=0;t<s.length;t++)i.has(s[t])||o++;const u=new bt([o],n.dtype),l=new bt([o],"int32");for(let t=0,e=0;t<s.length;t++)i.has(s[t])||(u.values[e]=s[t],l.values[e]=t,e++);return[u.toTensor(),l.toTensor()]};const vu=Kt({sign_:function(t){const e=qt(t,"x","sign"),n={x:e};return Lt.runKernelFunc(t=>t.sign(e),n,null,"Sign")}});const ku=Kt({slice1d_:function(t,e,n){const r=qt(t,"x","slice1d");return S(1===r.rank,()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`),Rs(r,[e],[n])}});const Nu=Kt({slice2d_:function(t,e,n){const r=qt(t,"x","slice2d");return S(2===r.rank,()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`),Rs(r,e,n)}});const Iu=Kt({slice3d_:function(t,e,n){const r=qt(t,"x","slice3d");return S(3===r.rank,()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`),Rs(r,e,n)}});const Su=Kt({slice4d_:function(t,e,n){const r=qt(t,"x","slice4d");return S(4===r.rank,()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`),Rs(r,e,n)}});const Cu=Kt({softmax_:function(t,e=-1){const n=qt(t,"logits","softmax","float32");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${e}`);const r={logits:n},s={dim:e};return Lt.runKernelFunc((t,r)=>{const s=t.softmax(n,e);return r([s]),s},r,null,"Softmax",s)}});const Au=Kt({softplus_:function(t){const e=qt(t,"x","softplus"),n={x:e};return Lt.runKernelFunc((t,n)=>{const r=t.softplus(e);return n([e]),r},n,null,"Softplus")}});const Eu=Kt({squaredDifference_:function(t,e){let n=qt(t,"a","squaredDifference"),r=qt(e,"b","squaredDifference");[n,r]=$t(n,r),he(n.shape,r.shape);const s={a:n,b:r};return Lt.runKernelFunc((t,e)=>{const s=t.squaredDifference(n,r);return e([n,r]),s},s,null,"SquaredDifference",{})}});const Tu=Kt({squeeze_:function(t,e){const n=qt(t,"x","squeeze");return we(n,z(n.shape,e).newShape)}});const Ru=Kt({stridedSlice_:function(t,e,n,r,s=0,a=0,i=0,o=0,u=0){null==r&&(r=new Array(e.length));let l=qt(t,"x","stridedSlice");const c={x:l},h={begin:e,end:n,strides:r,beginMask:s,endMask:a,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:u};return Lt.runKernelFunc(t=>{const c=Yr(i);if(c.length>1)throw new Error("Multiple ellipses in slice is not allowed.");if(0!==i&&0!==o)throw new Error("Using both ellipsisMask and newAxisMask is not yet supported.");if(0!==i&&0!==u)throw new Error("Using both ellipsisMask and shrinkAxisMask is not yet supported.");const h=l.rank-e.length,p=Yr(o),d=l.shape.slice();if(p.forEach(t=>{e[t]=0,n[t]=1,d.splice(t,0,1)}),l=we(l,d),c.length&&h>0){const t=c[0],i=h+1;e=es(s,t,i,e,l.shape),n=ns(a,t,i,n,l.shape),r=Zr(r,t,i,l.shape)}else for(let t=0;t<l.rank;t++)e[t]=ss(s,e,r,l.shape,t,i),n[t]=as(a,n,r,l.shape,t,i),r[t]=rs(r,t,i);const f=Yr(u);f.forEach(t=>{n[t]=e[t]+1,r[t]=1});const m=Jr(e,n,r),g=m.filter((t,e)=>-1===f.indexOf(e));if(r.every(t=>1===t))return we(Rs(l,e,m),g);return t.stridedSlice(l,e,n,r).reshape(g)},c,null,"StridedSlice",h)}});const $u=Kt({tan_:function(t){const e=qt(t,"x","tan"),n={x:e};return Lt.runKernelFunc((t,n)=>{const r=t.tan(e);return n([e]),r},n,null,"Tan")}});function _u(t,e,n){if(A(t),null!=e&&2!==e.length)throw new Error("tensor2d() requires shape to have two numbers");const r=Gt(t,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return ne(t,e,r,n)}function Du(t,e,n){if(A(t),null!=e&&4!==e.length)throw new Error("tensor4d() requires shape to have four numbers");const r=Gt(t,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return ne(t,e,r,n)}function Fu(t,e,n){if(A(t),null!=e&&5!==e.length)throw new Error("tensor5d() requires shape to have five numbers");const r=Gt(t,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return ne(t,e,r,n)}function Ou(t,e,n){if(A(t),null!=e&&6!==e.length)throw new Error("tensor6d() requires shape to have six numbers");const r=Gt(t,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return ne(t,e=e||r,r,n)}const Mu=Kt({topk_:function(t,e=1,n=!0){const r=qt(t,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const s=r.shape[r.shape.length-1];if(e>s)throw new Error(`'k' passed to topk() must be <= the last dimension (${s}) but got `+e);const a={x:r},i={k:e,sorted:n},[o,u]=Lt.runKernelFunc(t=>t.topk(r,e,n),a,null,"TopK",i);return{values:o,indices:u}}});const Lu=Kt({truncatedNormal_:function(t,e=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const a=new eu(e,n,r,!0,s),i=Fi(t,r);for(let t=0;t<i.values.length;t++)i.values[t]=a.nextValue();return i.toTensor()}});const zu=Kt({unstack_:function(t,e=0){const n=qt(t,"x","unstack");S(e>=-n.shape.length&&e<n.shape.length,()=>`Axis = ${e} is not in [-${n.shape.length}, ${n.shape.length})`),e<0&&(e+=n.shape.length);const r={value:n},s={axis:e};return Lt.runKernelFunc(t=>t.unstack(n,e),r,null,"Unpack",s)}});function Bu(t,e=!0,n,r){return Lt.makeVariable(t,e,n,r)}function Pu(t,e){const n=[];for(let t=0;t<e.length;t++)e[t]&&n.push(t);const r=Fi(t,"int32"),s=Fi([n.length,t.length],"int32");for(let e=0;e<n.length;e++){const a=r.indexToLoc(n[e]),i=e*t.length;s.values.set(a,i)}return s.toTensor()}const Wu=async function(t){const e=qt(t,"condition","whereAsync","bool"),n=await e.data(),r=Pu(e.shape,n);return t!==e&&e.dispose(),r};const Vu=async function(t,e,n){const r=qt(t,"tensor","boolMask"),s=qt(e,"mask","boolMask","bool"),a=null==n?0:n,i=s.rank,o=r.shape;S(i>0,()=>"mask cannot be scalar"),C(o.slice(a,a+i),s.shape,"mask's shape must match the first K dimensions of tensor's shape,");let u=1;for(let t=a;t<a+i;t++)u*=o[t];const l=o.slice(0,a).concat([u],o.slice(a+i)),c=r.reshape(l),h=s.reshape([-1]),p=await Wu(h),d=p.squeeze([1]),f=Bs(c,d,a);return t!==r&&r.dispose(),e!==s&&s.dispose(),d.dispose(),c.dispose(),h.dispose(),p.dispose(),f};const Uu=Kt({equalStrict_:function(t,e){ri("strict variants of ops have been deprecated and will be removed in future");const n=qt(t,"a","equalStrict"),r=qt(e,"b","equalStrict");return C(n.shape,r.shape,"Error in equalStrict: "),n.equal(r)}}),Gu=Kt({greaterEqualStrict_:function(t,e){ri("strict variants of ops have been deprecated and will be removed in future");const n=qt(t,"a","greaterEqualStrict"),r=qt(e,"b","greaterEqualStrict");return C(n.shape,r.shape,"Error in greaterEqualStrict: "),n.greaterEqual(r)}}),Hu=Kt({greaterStrict_:function(t,e){ri("strict variants of ops have been deprecated and will be removed in future");const n=qt(t,"a","greaterStrict"),r=qt(e,"b","greaterStrict");return C(n.shape,r.shape,"Error in greaterStrict: "),n.greater(r)}}),qu=Kt({lessEqualStrict_:function(t,e){ri("strict variants of ops have been deprecated and will be removed in future");const n=qt(t,"a","lessEqualStrict"),r=qt(e,"b","lessEqualStrict");return C(n.shape,r.shape,"Error in lessEqualStrict: "),n.lessEqual(r)}}),ju=Kt({lessStrict_:function(t,e){ri("strict variants of ops have been deprecated and will be removed in future");const n=qt(t,"a","lessStrict"),r=qt(e,"b","lessStrict");return C(n.shape,r.shape,"Error in lessStrict: "),n.less(r)}}),Ku=Kt({notEqualStrict_:function(t,e){ri("strict variants of ops have been deprecated and will be removed in future");const n=qt(t,"a","notEqualStrict"),r=qt(e,"b","notEqualStrict");return C(n.shape,r.shape,"Error in notEqualStrict: "),n.notEqual(r)}});const Xu=Kt({addStrict_:function(t,e){ri("strict variants of ops have been deprecated and will be removed in future");const n=qt(t,"a","addStrict"),r=qt(e,"b","addStrict");return C(n.shape,r.shape,"Error in addStrict: "),n.add(r)}}),Yu=Kt({divStrict_:function(t,e){ri("strict variants of ops have been deprecated and will be removed in future");const n=qt(t,"a","div"),r=qt(e,"b","div");return C(n.shape,r.shape,"Error in divideStrict: "),n.div(r)}}),Ju=Kt({maximumStrict_:function(t,e){ri("strict variants of ops have been deprecated and will be removed in future");const n=qt(t,"a","maximumStrict"),r=qt(e,"b","maximumStrict");return C(n.shape,r.shape,"Error in maximumStrict: "),n.maximum(r)}}),Zu=Kt({minimumStrict_:function(t,e){ri("strict variants of ops have been deprecated and will be removed in future");const n=qt(t,"a","minimumStrict"),r=qt(e,"b","minimumStrict");return C(n.shape,r.shape,"Error in minimumStrict: "),n.minimum(r)}}),Qu=Kt({modStrict_:function(t,e){ri("strict variants of ops have been deprecated and will be removed in future");const n=qt(t,"a","modStrict"),r=qt(e,"b","modStrict");return C(n.shape,r.shape,"Error in modStrict: "),n.mod(r)}}),tl=Kt({mulStrict_:function(t,e){ri("strict variants of ops have been deprecated and will be removed in future");const n=qt(t,"a","mul"),r=qt(e,"b","mul");return C(n.shape,r.shape,"Error in multiplyStrict: "),n.mul(r)}}),el=Kt({powStrict_:function(t,e){return ri("strict variants of ops have been deprecated and will be removed in future"),C(t.shape,e.shape,"Error in powStrict: "),t.pow(e)}}),nl=Kt({squaredDifferenceStrict_:function(t,e){ri("strict variants of ops have been deprecated and will be removed in future");const n=qt(t,"a","squaredDifferenceStrict"),r=qt(e,"b","squaredDifferenceStrict");return C(n.shape,r.shape,"Error in squaredDifferenceStrict: "),n.squaredDifference(r)}}),rl=Kt({subStrict_:function(t,e){ri("strict variants of ops have been deprecated and will be removed in future");const n=qt(t,"a","subStrict"),r=qt(e,"b","subStrict");return C(n.shape,r.shape,"Error in subStrict: "),n.sub(r)}});const sl=Kt({norm_:function(t,e="euclidean",n=null,r=!1){const s=function t(e,n,r=null){if(0===e.rank)return hi(e);if(1!==e.rank&&null===r)return t(we(e,[-1]),n,r);if(1===e.rank||"number"==typeof r||Array.isArray(r)&&1===r.length){if(1===n)return Te(hi(e),r);if(n===1/0)return xo(hi(e),r);if(n===-1/0)return Eo(hi(e),r);if("euclidean"===n||2===n)return se(Te(Ir(hi(e),re(2,"int32")),r));throw new Error("Error in norm: invalid ord value: "+n)}if(Array.isArray(r)&&2===r.length){if(1===n)return xo(Te(hi(e),r[0]),r[1]-1);if(n===1/0)return xo(Te(hi(e),r[1]),r[0]);if(n===-1/0)return Eo(Te(hi(e),r[1]),r[0]);if("fro"===n||"euclidean"===n)return se(Te(ae(e),r));throw new Error("Error in norm: invalid ord value: "+n)}throw new Error("Error in norm: invalid axis: "+r)}(t=qt(t,"x","norm"),e,n);let a=s.shape;if(r){const e=L(n,t.shape);a=Ie(s.shape,e)}return s.reshape(a)}});const al=Kt({movingAverage_:function(t,e,n,r,s=!0){const a=qt(t,"v","movingAverage"),i=qt(e,"x","movingAverage"),o=qt(n,"decay","movingAverage");_t(a,i),S(R(a.shape,i.shape),()=>"Shape mismatch in v and x");const u=re(1),l=ie(u,o);let c=Yt(ie(i,a),l);if(s){S(null!=r,()=>"When using zeroDebias: true, step is required.");const t=qt(r,"step","movingAverage");c=te(c,ie(u,Ir(o,t)))}return be(a,c)}});const il=Kt({scatterND_:function(t,e,n){const r=qt(t,"indices","scatterND","int32"),s=qt(e,"updates","scatterND");qa(s,r,n);const a={indices:r,updates:s},i={shape:n};return Lt.runKernelFunc(t=>t.scatterND(r,s,n),a,null,"ScatterNd",i)}});const ol=Kt({sparseToDense_:function(t,e,n,r=0){const s=qt(t,"sparseIndices","sparseToDense","int32"),a=qt(e,"sparseValues","sparseToDense"),i=qt(r,"defaultValue","sparseToDense",a.dtype);!function(t,e,n,r){if("int32"!==t.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${t.shape}.`);const s=t.rank>0?t.shape[0]:1,a=t.rank>1?t.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const i=e.size;if(0!==e.rank&&(1!==e.rank||i!==s))throw new Error(`sparseValues has incorrect shape ${e.shape}, should be [] or [${s}]`);if(e.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(s,a,n,i);const o={sparseIndices:s,sparseValues:a,defaultValue:i},u={outputShape:n};return Lt.runKernelFunc(t=>t.sparseToDense(s,a,n,i),o,null,"SparseToDense",u)}});const ul=Kt({gatherND_:function(t,e){const n=qt(e,"indices","gatherND","int32"),r=qt(t,"x","gatherND"),s={params:r,indices:n};return Lt.runKernelFunc(t=>t.gatherND(r,n),s,null,"GatherNd")}});const ll=Kt({dropout_:function(t,e,n,r){const s=qt(t,"x","dropout");if(S("float32"===s.dtype,()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${s.dtype} tensor instead.`),S(e>=0&&e<1,()=>`rate must be a float in the range [0, 1), but got ${e}.`),0===e)return t instanceof vt?s.clone():s;const a=function(t,e){if(null==e)return t.shape.slice();if(R(t.shape,e))return e;if(t.shape.length===e.length){const n=[];for(let r=0;r<t.shape.length;r++)null==e[r]&&null!=t.shape[r]?n.push(t.shape[r]):n.push(e[r]);return n}return e}(s,n),i=1-e,o=iu(a,0,1,"float32",r).add(i).floor().div(i);return s.mul(o)}});function cl(t){return Math.floor(Math.pow(2,Math.ceil(Math.log(t)/Math.log(2))))}function hl(t,e,n){const r=1-t%2,s=new Float32Array(t);for(let a=0;a<t;++a){const i=2*Math.PI*a/(t+r-1);s[a]=e-n*Math.cos(i)}return ou(s,"float32")}const pl=async function(t,e,n=1){const r=qt(t,"predictions","inTopK"),s=qt(e,"targets","inTopK");S(r.rank>1,()=>"inTopK() expects the predictions to be of rank 2 or higher, but got "+r.rank),S(r.rank-1===s.rank,()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${r.rank} and targets rank ${s.rank}`),C(r.shape.slice(0,r.shape.length-1),s.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const a=r.shape[r.shape.length-1];S(n>0&&n<=a,()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${a}), but got ${n}`);const i=await r.data(),o=await s.data(),[u,l]=[i.length/a,a],c=B("bool",u);for(let t=0;t<u;t++){const e=t*l,r=i.subarray(e,e+l),s=[];for(let t=0;t<r.length;t++)s.push({value:r[t],index:t});s.sort((t,e)=>e.value-t.value),c[t]=0;for(let e=0;e<n;e++)if(s[e].index===o[t]){c[t]=1;break}}return t!==r&&r.dispose(),e!==s&&s.dispose(),bs(c,s.shape,"bool")};function dl(t,e,n){if(null==n||"linear"===n)return t;if("relu"===n)return t.mul(e.step());throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function fl(t,e){let n=e;const r=ce(t.shape,e.shape);return r.length>0&&(n=n.sum(r)),n.reshape(t.shape)}function ml(t,e,n){if("linear"===e)return t;if("relu"===e)return cu(t);if("elu"===e)return Ji(t);if("relu6"===e)return hu(t);if("prelu"===e)return Vo(t,n);throw new Error(`Unknown fused activation ${e}.`)}const gl=(t,e)=>!(t>0)||"linear"===e;const yl=Kt({fusedConv2d_:function({x:t,filter:e,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:u="linear",preluActivationWeights:l}){if(u=u||"linear",!1===gl(Lt.state.gradientDepth,u)){let c=mn(t,e,n,r,s,a,i);return null!=o&&(c=be(c,o)),ml(c,u,l)}const c=qt(t,"x","conv2d"),h=qt(e,"filter","conv2d");let p=c,d=!1;3===c.rank&&(d=!0,p=c.as4D(1,c.shape[0],c.shape[1],c.shape[2])),S(4===p.rank,()=>"Error in fused conv2d: input must be rank 4, but got rank "+p.rank+"."),S(4===h.rank,()=>"Error in fused conv2d: filter must be rank 4, but got rank "+h.rank+"."),null!=i&&S($(r),()=>`Error in fused conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`),S(p.shape[3]===h.shape[2],()=>`Error in conv2d: depth of input (${p.shape[3]}) must match input depth for filter ${h.shape[2]}.`),S(Ge(n,a),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),S("NHWC"===s,()=>`Error in conv2d: got dataFormat of ${s} but only NHWC is currently supported.`);const f=Me(p.shape,h.shape,n,a,r,i);let m,g;null!=o&&(m=qt(o,"bias","fused conv2d"),[m]=$t(m,c),he(f.outShape,m.shape)),null!=l&&(g=qt(l,"prelu weights","fused conv2d"));const y=(t,e)=>{const[s,i,o,l]=e,c=dl(t,o,u);S(Ue(a),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`);const h=[dn(i.shape,c,s,n,r),pn(i,c,s.shape,n,r)];if(null!=l){const t=fl(l,c);h.push(t)}return h},b=t=>t.fusedConv2d({input:p,filter:h,convInfo:f,bias:m,activation:u,preluActivationWeights:g}),x={x:p,filter:h,bias:m,preluActivationWeights:g},w={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i,activation:u};if(null==o){return go((t,e,n)=>{let r=Lt.runKernelFunc(b,x,null,"FusedConv2D",w);return n([e,t,r]),d&&(r=r.as3D(r.shape[1],r.shape[2],r.shape[3])),{value:r,gradFunc:y}})(p,h)}return go((t,e,n,r)=>{let s=Lt.runKernelFunc(b,x,null,"FusedConv2D",w);return r([e,t,s,n]),d&&(s=s.as3D(s.shape[1],s.shape[2],s.shape[3])),{value:s,gradFunc:y}})(p,h,m)}});const bl=Kt({fusedDepthwiseConv2d_:function({x:t,filter:e,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:u="linear",preluActivationWeights:l}){if(!1===gl(Lt.state.gradientDepth,u)){let c=qi(t,e,n,r,s,a,i);return null!=o&&(c=be(c,o)),ml(c,u,l)}const c=qt(t,"x","depthwiseConv2d"),h=qt(e,"filter","depthwiseConv2d");let p=c,d=!1;3===c.rank&&(d=!0,p=c.as4D(1,c.shape[0],c.shape[1],c.shape[2])),S(4===p.rank,()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${p.rank}.`),S(4===h.rank,()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${h.rank}.`),S(p.shape[3]===h.shape[2],()=>`Error in fused depthwiseConv2d: number of input channels (${p.shape[3]}) must match the inChannels dimension in filter ${h.shape[2]}.`),null==a&&(a=[1,1]),S(Ge(n,a),()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),null!=i&&S($(r),()=>`Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode ${i} but got pad ${r}.`);const f=Me(p.shape,h.shape,n,a,r,i,!0);let m,g;null!=o&&(m=qt(o,"bias","fused conv2d"),[m]=$t(m,c),he(f.outShape,m.shape)),null!=l&&(g=qt(l,"prelu weights","fused depthwiseConv2d"));const y=(t,e)=>{S(Ue(a),()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`);const[n,r,s,i]=e,o=dl(t,s,u),l=En(r.shape,o,n,f),c=An(r,o,n.shape,f);if(null!=i){return[l,c,fl(m,o)]}return[l,c]},b=t=>t.fusedDepthwiseConv2D({input:p,filter:h,convInfo:f,bias:m,activation:u,preluActivationWeights:g}),x={x:p,filter:h,bias:m,preluActivationWeights:g},w={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i,activation:u};if(null==o){return go((t,e,n)=>{let r=Lt.runKernelFunc(b,x,null,"FusedDepthwiseConv2D",w);return n([e,t,r]),d&&(r=r.as3D(r.shape[1],r.shape[2],r.shape[3])),{value:r,gradFunc:y}})(p,h)}return go((t,e,n,r)=>{let s=Lt.runKernelFunc(b,x,null,"FusedDepthwiseConv2D",w);return r([e,t,s,n]),d&&(s=s.as3D(s.shape[1],s.shape[2],s.shape[3])),{value:s,gradFunc:y}})(p,h,m)}});const xl=Kt({fusedMatMul_:function({a:t,b:e,transposeA:n=!1,transposeB:r=!1,bias:s,activation:a="linear",preluActivationWeights:i}){if(!1===gl(Lt.state.gradientDepth,a)){let o=Ye(t,e,n,r);return null!=s&&(o=be(o,s)),ml(o,a,i)}let o=qt(t,"a","fused matMul"),u=qt(e,"b","fused matMul");[o,u]=$t(o,u);const l=n?o.shape[o.rank-2]:o.shape[o.rank-1],c=r?u.shape[u.rank-1]:u.shape[u.rank-2],h=n?o.shape[o.rank-1]:o.shape[o.rank-2],p=r?u.shape[u.rank-2]:u.shape[u.rank-1],d=o.shape.slice(0,-2),f=u.shape.slice(0,-2),m=T(d),g=T(f);S(o.rank>=2&&u.rank>=2&&o.rank===u.rank,()=>`Error in fused matMul: inputs must have the same rank of at least 2, got ranks ${o.rank} and ${u.rank}.`),S(R(d,f),()=>`Error in fused matMul: outer dimensions (${d}) and (${f}) of Tensors with shapes ${o.shape} and `+u.shape+" must match."),S(l===c,()=>`Error in fused matMul: inner shapes (${l}) and (${c}) of Tensors with shapes ${o.shape} and ${u.shape} and transposeA=${n} and transposeB=${r} must match.`);const y=o.shape.slice(0,-2).concat([h,p]),b=n?o.as3D(m,l,h):o.as3D(m,h,l),x=r?u.as3D(g,p,c):u.as3D(g,c,p);let w,v;null!=s&&(w=qt(s,"bias","fused matMul"),[w]=$t(w,o),he(y,w.shape)),null!=i&&(v=qt(i,"prelu weights","fused matMul"));const k=(t,e)=>{const[i,o,u,l]=e,c=dl(we(t,u.shape),u,a);let h,p;if(n||r?!n&&r?(h=Ye(c,o,!1,!1),p=Ye(c,i,!0,!1)):n&&!r?(h=Ye(o,c,!1,!0),p=Ye(i,c,!1,!1)):(h=Ye(o,c,!0,!0),p=Ye(c,i,!0,!0)):(h=Ye(c,o,!1,!0),p=Ye(i,c,!0,!1)),null!=s){return[h,p,fl(l,c)]}return[h,p]},N=t=>t.fusedBatchMatMul({a:b,b:x,transposeA:n,transposeB:r,bias:w,activation:a,preluActivationWeights:v}),I={a:b,b:x,bias:w,preluActivationWeights:v},C={transposeA:n,transposeB:r,activation:a};if(null==s){return go((t,e,n)=>{const r=Lt.runKernelFunc(N,I,null,"_FusedMatMul",C);return n([t,e,r]),{value:we(r,y),gradFunc:k}})(b,x)}return go((t,e,n,r)=>{const s=Lt.runKernelFunc(N,I,null,"_FusedMatMul",C);return r([t,e,s,n]),{value:we(s,y),gradFunc:k}})(b,x,w)}});var wl=Object.freeze({__proto__:null,conv2d:yl,depthwiseConv2d:bl,matMul:xl});const vl=Kt({hammingWindow_:function(t){return hl(t,.54,.46)}});const kl=Kt({hannWindow_:function(t){return hl(t,.5,.5)}});const Nl=Kt({frame_:function(t,e,n,r=!1,s=0){let a=0;const i=[];for(;a+e<=t.size;)i.push(Rs(t,a,e)),a+=n;if(r)for(;a<t.size;){const r=a+e-t.size,o=xs([Rs(t,a,e-r),no([r],s)]);i.push(o),a+=n}return 0===i.length?_u([],[0,e]):we(xs(i),[i.length,e])}});const Il=Kt({stft_:function(t,e,n,r,s=kl){null==r&&(r=cl(e));const a=Nl(t,e,n),i=Yt(a,s(e)),o=[];for(let t=0;t<a.shape[0];t++)o.push(gu(Rs(i,[t,0],[1,e]),r));return xs(o)}});const Sl=Kt({cropAndResize_:function(t,e,n,r,s,a){const i=qt(t,"image","cropAndResize"),o=qt(e,"boxes","cropAndResize","float32"),u=qt(n,"boxInd","cropAndResize","int32");s=s||"bilinear",a=a||0;const l=o.shape[0];S(4===i.rank,()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`),S(2===o.rank&&4===o.shape[1],()=>`Error in cropAndResize: boxes must be have size [${l},4] but had shape ${o.shape}.`),S(1===u.rank&&u.shape[0]===l,()=>`Error in cropAndResize: boxInd must be have size [${l}] but had shape ${o.shape}.`),S(2===r.length,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`),S(r[0]>=1&&r[1]>=1,()=>"cropSize must be atleast [1,1], but was "+r),S("bilinear"===s||"nearest"===s,()=>"method must be bilinear or nearest, but was "+s);const c={image:i,boxes:o,boxInd:u},h={method:s,extrapolationValue:a,cropSize:r};return Lt.runKernelFunc(t=>t.cropAndResize(i,o,u,r,s,a),c,null,"CropAndResize",h)}});const Cl=Kt({rotateWithOffset_:function(t,e,n=0,r=.5){const s=qt(t,"image","rotateWithOffset","float32");S(4===s.rank,()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${s.rank}.`);const a={image:s},i={radians:e,fillValue:n,center:r};return Lt.runKernel("RotateWithOffset",a,i)}});function Al(t,e,n,r,s,a){null==r&&(r=.5),null==s&&(s=Number.NEGATIVE_INFINITY),null==a&&(a=0);const i=t.shape[0];return n=Math.min(n,i),S(0<=r&&r<=1,()=>`iouThreshold must be in [0, 1], but was '${r}'`),S(2===t.rank,()=>`boxes must be a 2D tensor, but was of rank '${t.rank}'`),S(4===t.shape[1],()=>"boxes must have 4 columns, but 2nd dimension was "+t.shape[1]),S(1===e.rank,()=>"scores must be a 1D tensor"),S(e.shape[0]===i,()=>`scores has incompatible shape with boxes. Expected ${i}, but was `+e.shape[0]),S(0<=a&&a<=1,()=>`softNmsSigma must be in [0, 1], but was '${a}'`),{maxOutputSize:n,iouThreshold:r,scoreThreshold:s,softNmsSigma:a}}const El=Kt({nonMaxSuppression_:function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=qt(t,"boxes","nonMaxSuppression"),i=qt(e,"scores","nonMaxSuppression"),o=Al(a,i,n,r,s);n=o.maxOutputSize,r=o.iouThreshold,s=o.scoreThreshold;const u={maxOutputSize:n,iouThreshold:r,scoreThreshold:s};return Lt.runKernelFunc(t=>t.nonMaxSuppression(a,i,n,r,s),{boxes:a,scores:i},null,"NonMaxSuppressionV3",u)}});function Tl(t,e,n){const r=function(t,e,n){return function(t,e,n){let r=0,s=t.length,a=0,i=!1;for(;r<s;){a=r+(s-r>>>1);const o=n(e,t[a]);o>0?r=a+1:(s=a,i=!o)}return i?r:-r-1}(t,e,n||Rl)}(t,e,n),s=r<0?-(r+1):r;t.splice(s,0,e)}function Rl(t,e){return t>e?1:t<e?-1:0}function $l(t,e,n,r,s){return Fl(t,e,n,r,s,0).selectedIndices}function _l(t,e,n,r,s,a){return Fl(t,e,n,r,s,0,!1,a,!0)}function Dl(t,e,n,r,s,a){return Fl(t,e,n,r,s,a,!0)}function Fl(t,e,n,r,s,a,i=!1,o=!1,u=!1){const l=[];for(let t=0;t<e.length;t++)e[t]>s&&l.push({score:e[t],boxIndex:t,suppressBeginIndex:0});l.sort(Ll);const c=a>0?-.5/a:0,h=[],p=[];for(;h.length<n&&l.length>0;){const e=l.pop(),{score:n,boxIndex:a,suppressBeginIndex:i}=e;if(n<s)break;let o=!1;for(let n=h.length-1;n>=i;--n){const i=Ol(t,a,h[n]);if(i>=r){o=!0;break}if(e.score=e.score*Ml(r,c,i),e.score<=s)break}e.suppressBeginIndex=h.length,o||(e.score===n?(h.push(a),p.push(e.score)):e.score>s&&Tl(l,e,Ll))}const d=h.length,f=n-d;o&&f>0&&(h.push(...new Array(f).fill(0)),p.push(...new Array(f).fill(0)));const m={selectedIndices:ou(h,"int32")};return i&&(m.selectedScores=ou(p,"float32")),u&&(m.validOutputs=re(d,"int32")),m}function Ol(t,e,n){const r=t.subarray(4*e,4*e+4),s=t.subarray(4*n,4*n+4),a=Math.min(r[0],r[2]),i=Math.min(r[1],r[3]),o=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),l=Math.min(s[0],s[2]),c=Math.min(s[1],s[3]),h=Math.max(s[0],s[2]),p=Math.max(s[1],s[3]),d=(o-a)*(u-i),f=(h-l)*(p-c);if(d<=0||f<=0)return 0;const m=Math.max(a,l),g=Math.max(i,c),y=Math.min(o,h),b=Math.min(u,p),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(d+f-x)}function Ml(t,e,n){const r=Math.exp(e*n*n);return n<=t?r:0}function Ll(t,e){return t.score-e.score||t.score===e.score&&e.boxIndex-t.boxIndex}const zl=async function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=qt(t,"boxes","nonMaxSuppressionAsync"),i=qt(e,"scores","nonMaxSuppressionAsync"),o=Al(a,i,n,r,s);n=o.maxOutputSize,r=o.iouThreshold,s=o.scoreThreshold;const u=await Promise.all([a.data(),i.data()]),l=$l(u[0],u[1],n,r,s);return a!==t&&a.dispose(),i!==e&&i.dispose(),l};const Bl=Kt({nonMaxSuppressionWithScore_:function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const i=qt(t,"boxes","nonMaxSuppression"),o=qt(e,"scores","nonMaxSuppression"),u=Al(i,o,n,r,s,a),l={boxes:i,scores:o},c={maxOutputSize:n=u.maxOutputSize,iouThreshold:r=u.iouThreshold,scoreThreshold:s=u.scoreThreshold,softNmsSigma:a=u.softNmsSigma},h=Lt.runKernel("NonMaxSuppressionV5",l,c);return{selectedIndices:h[0],selectedScores:h[1]}}});const Pl=async function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const i=qt(t,"boxes","nonMaxSuppressionAsync"),o=qt(e,"scores","nonMaxSuppressionAsync"),u=Al(i,o,n,r,s,a);n=u.maxOutputSize,r=u.iouThreshold,s=u.scoreThreshold,a=u.softNmsSigma;const l=await Promise.all([i.data(),o.data()]),c=Dl(l[0],l[1],n,r,s,a);return i!==t&&i.dispose(),o!==e&&o.dispose(),c};const Wl=Kt({nonMaxSuppressionPadded_:function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const i=qt(t,"boxes","nonMaxSuppression"),o=qt(e,"scores","nonMaxSuppression"),u=Al(i,o,n,r,s,null),l={boxes:i,scores:o},c={maxOutputSize:u.maxOutputSize,iouThreshold:u.iouThreshold,scoreThreshold:u.scoreThreshold,padToMaxOutputSize:a},h=Lt.runKernel("NonMaxSuppressionV4",l,c);return{selectedIndices:h[0],validOutputs:h[1]}}});const Vl=async function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const i=qt(t,"boxes","nonMaxSuppressionAsync"),o=qt(e,"scores","nonMaxSuppressionAsync"),u=Al(i,o,n,r,s,null),l=u.maxOutputSize,c=u.iouThreshold,h=u.scoreThreshold,[p,d]=await Promise.all([i.data(),o.data()]),f=_l(p,d,l,c,h,a);return i!==t&&i.dispose(),o!==e&&o.dispose(),f};const Ul=Kt({resizeBilinear_:function(t,e,n=!1){const r=qt(t,"images","resizeBilinear");S(3===r.rank||4===r.rank,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`),S(2===e.length,()=>"Error in resizeBilinear: new shape must 2D, but got shape "+e+".");let s=r,a=!1;3===r.rank&&(a=!0,s=r.as4D(1,r.shape[0],r.shape[1],r.shape[2]));const[i,o]=e,u={images:s},l={alignCorners:n,size:e},c=Lt.runKernelFunc((t,e)=>(e([s]),t.resizeBilinear(s,i,o,n)),u,null,"ResizeBilinear",l);return a?c.as3D(c.shape[1],c.shape[2],c.shape[3]):c}});const Gl=Kt({resizeNearestNeighbor_:function(t,e,n=!1){const r=qt(t,"images","resizeNearestNeighbor");S(3===r.rank||4===r.rank,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`),S(2===e.length,()=>"Error in resizeNearestNeighbor: new shape must 2D, but got shape "+e+"."),S("float32"===r.dtype||"int32"===r.dtype,()=>"`images` must have `int32` or `float32` as dtype");let s=r,a=!1;3===r.rank&&(a=!0,s=r.as4D(1,r.shape[0],r.shape[1],r.shape[2]));const[i,o]=e,u={images:s},l={alignCorners:n,size:e},c=Lt.runKernelFunc((t,e)=>(e([s]),t.resizeNearestNeighbor(s,i,o,n)),u,null,"ResizeNearestNeighbor",l);return a?c.as3D(c.shape[1],c.shape[2],c.shape[3]):c}});const Hl=Kt({bandPart_:function(t,e,n){S(e%1==0,()=>`bandPart(): numLower must be an integer, got ${e}.`),S(n%1==0,()=>`bandPart(): numUpper must be an integer, got ${n}.`);const r=qt(t,"a","bandPart");S(r.rank>=2,()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`);const s=r.shape,[a,i]=r.shape.slice(-2);if(!(e<=a))throw new Error(`bandPart(): numLower (${e}) must not be greater than the number of rows (${a}).`);if(!(n<=i))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`);e<0&&(e=a),n<0&&(n=i);const o=we(uu(0,a,1,"int32"),[-1,1]),u=uu(0,i,1,"int32"),l=ie(o,u),c=an(sn(l,re(+e,"int32")),rn(l,re(-n,"int32"))),h=xr([a,i],r.dtype);return we(Fs(zu(we(r,[-1,a,i])).map(t=>on(c,t,h))),s)}});const ql=Kt({gramSchmidt_:function(t){let e;if(Array.isArray(t)){e=!1,S(null!=t&&t.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");const n=t[0].shape[0];for(let e=1;e<t.length;++e)S(t[e].shape[0]===n,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${t[e].shape[0]} vs. ${n})`)}else e=!0,t=cn(t,t.shape[0],0).map(t=>Tu(t,[0]));S(t.length<=t[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${t.length}) exceeds number of dimensions (${t[0].shape[0]}).`);const n=[],r=t;for(let e=0;e<t.length;++e)n.push(Lt.tidy(()=>{let t=r[e];if(e>0)for(let r=0;r<e;++r){const e=Yt(Te(Yt(n[r],t)),n[r]);t=ie(t,e)}return te(t,sl(t,"euclidean"))}));return e?Fs(n,0):n}});function jl(t,e=!1){return Lt.tidy(()=>{S(2===t.shape.length,()=>`qr2d() requires a 2D Tensor, but got a ${t.shape.length}D Tensor.`);const n=t.shape[0],r=t.shape[1];let s=to(n),a=Dr(t);const i=_u([[1]],[1,1]);let o=Dr(i);const u=n>=r?r:n;for(let t=0;t<u;++t){const e=a,u=o,l=s;[o,a,s]=Lt.tidy(()=>{const e=Rs(a,[t,t],[n-t,1]),u=sl(e),l=Rs(a,[t,t],[1,1]),c=on(pr(l,0),_u([[-1]]),_u([[1]])),h=ie(l,Yt(c,u)),p=te(e,h);o=1===p.shape[0]?Dr(i):xs([i,Rs(p,[1,0],[p.shape[0]-1,p.shape[1]])],0);const d=ee(te(Ye(c,h),u)),f=Rs(a,[t,0],[n-t,r]),m=Yt(d,o),g=In(o);if(0===t)a=ie(f,Ye(m,Ye(g,f)));else{const e=ie(f,Ye(m,Ye(g,f)));a=xs([Rs(a,[0,0],[t,r]),e],0)}const y=In(m),b=Rs(s,[0,t],[n,s.shape[1]-t]);if(0===t)s=ie(b,Ye(Ye(b,o),y));else{const e=ie(b,Ye(Ye(b,o),y));s=xs([Rs(s,[0,0],[n,t]),e],1)}return[o,a,s]}),oi([e,u,l])}return!e&&n>r&&(s=Rs(s,[0,0],[n,r]),a=Rs(a,[0,0],[r,r])),[s,a]})}const Kl=Kt({qr_:function(t,e=!1){if(S(t.rank>=2,()=>"qr() requires input tensor to have a rank >= 2, but got rank "+t.rank),2===t.rank)return jl(t,e);{const n=t.shape.slice(0,t.shape.length-2).reduce((t,e)=>t*e),r=zu(we(t,[n,t.shape[t.shape.length-2],t.shape[t.shape.length-1]]),0),s=[],a=[];r.forEach(t=>{const[n,r]=jl(t,e);s.push(n),a.push(r)});return[we(Fs(s,0),t.shape),we(Fs(a,0),t.shape)]}}});var Xl;!function(t){t[t.NONE=0]="NONE",t[t.MEAN=1]="MEAN",t[t.SUM=2]="SUM",t[t.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(Xl||(Xl={}));const Yl=Kt({computeWeightedLoss_:function(t,e,n=Xl.SUM_BY_NONZERO_WEIGHTS){const r=qt(t,"losses","computeWeightedLoss");let s=null;null!=e&&(s=qt(e,"weights","computeWeightedLoss"));const a=null==s?r:Yt(r,s);if(n===Xl.NONE)return a;if(n===Xl.SUM)return Te(a);if(n===Xl.MEAN){if(null==s)return Ao(a);{const t=r.size/s.size,e=te(Te(a),Te(s));return t>1?te(e,re(t)):e}}if(n===Xl.SUM_BY_NONZERO_WEIGHTS){if(null==s)return te(Te(a),re(r.size));{const t=Yt(s,Cs(r.shape)),e=Xt(Te(Fo(t,re(0))),"float32");return te(Te(a),e)}}throw Error("Unknown reduction: "+n)}});const Jl=Kt({absoluteDifference_:function(t,e,n,r=Xl.SUM_BY_NONZERO_WEIGHTS){const s=qt(t,"labels","absoluteDifference"),a=qt(e,"predictions","absoluteDifference");let i=null;null!=n&&(i=qt(n,"weights","absoluteDifference")),C(s.shape,a.shape,"Error in absoluteDifference: ");const o=hi(ie(s,a));return Yl(o,i,r)}});const Zl=Kt({cosineDistance_:function(t,e,n,r,s=Xl.SUM_BY_NONZERO_WEIGHTS){const a=qt(t,"labels","cosineDistance"),i=qt(e,"predictions","cosineDistance");let o=null;null!=r&&(o=qt(r,"weights","cosineDistance")),C(a.shape,i.shape,"Error in cosineDistance: ");const u=re(1),l=ie(u,Te(Yt(a,i),n,!0));return Yl(l,o,s)}});const Ql=Kt({hingeLoss_:function(t,e,n,r=Xl.SUM_BY_NONZERO_WEIGHTS){let s=qt(t,"labels","hingeLoss");const a=qt(e,"predictions","hingeLoss");let i=null;null!=n&&(i=qt(n,"weights","hingeLoss")),C(s.shape,a.shape,"Error in hingeLoss: ");const o=re(1);s=ie(Yt(re(2),s),o);const u=cu(ie(o,Yt(s,a)));return Yl(u,i,r)}});const tc=Kt({huberLoss_:function(t,e,n,r=1,s=Xl.SUM_BY_NONZERO_WEIGHTS){const a=qt(t,"labels","huberLoss"),i=qt(e,"predictions","huberLoss");let o=null;null!=n&&(o=qt(n,"weights","huberLoss")),C(a.shape,i.shape,"Error in huberLoss: ");const u=re(r),l=hi(ie(i,a)),c=To(l,u),h=ie(l,c),p=be(Yt(re(.5),ae(c)),Yt(u,h));return Yl(p,o,s)}});const ec=Kt({logLoss_:function(t,e,n,r=1e-7,s=Xl.SUM_BY_NONZERO_WEIGHTS){const a=qt(t,"labels","logLoss"),i=qt(e,"predictions","logLoss");let o=null;null!=n&&(o=qt(n,"weights","logLoss")),C(a.shape,i.shape,"Error in logLoss: ");const u=re(1),l=re(r),c=ee(Yt(a,Nr(be(i,l)))),h=Yt(ie(u,a),Nr(be(ie(u,i),l))),p=ie(c,h);return Yl(p,o,s)}});const nc=Kt({meanSquaredError_:function(t,e,n,r=Xl.SUM_BY_NONZERO_WEIGHTS){const s=qt(t,"labels","meanSquaredError"),a=qt(e,"predictions","meanSquaredError");let i=null;null!=n&&(i=qt(n,"weights","meanSquaredError")),C(s.shape,a.shape,"Error in meanSquaredError: ");const o=Eu(s,a);return Yl(o,i,r)}});const rc=Kt({sigmoidCrossEntropy_:function(t,e,n,r=0,s=Xl.SUM_BY_NONZERO_WEIGHTS){let a=qt(t,"multiClassLabels","sigmoidCrossEntropy");const i=qt(e,"logits","sigmoidCrossEntropy");let o=null;if(null!=n&&(o=qt(n,"weights","sigmoidCrossEntropy")),C(a.shape,i.shape,"Error in sigmoidCrossEntropy: "),r>0){const t=re(r),e=re(1),n=re(.5);a=be(Yt(a,ie(e,t)),Yt(n,t))}const u=function(t,e){const n=qt(t,"labels","sigmoidCrossEntropyWithLogits"),r=qt(e,"logits","sigmoidCrossEntropyWithLogits");C(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const s=cu(r),a=Yt(r,n),i=fo(Dn(ee(hi(r))));return be(ie(s,a),i)}(a,i);return Yl(u,o,s)}});const sc=Kt({softmaxCrossEntropy_:function(t,e,n,r=0,s=Xl.SUM_BY_NONZERO_WEIGHTS){let a=qt(t,"onehotLabels","softmaxCrossEntropy");const i=qt(e,"logits","softmaxCrossEntropy");let o=null;if(null!=n&&(o=qt(n,"weights","softmaxCrossEntropy")),C(a.shape,i.shape,"Error in softmaxCrossEntropy: "),r>0){const t=re(r),e=re(1),n=re(a.shape[1]);a=be(Yt(a,ie(e,t)),te(t,n))}const u=function(t,e,n=-1){if(-1===n&&(n=e.rank-1),n!==e.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${e.rank} and dim was `+n);return go((t,e,r)=>{const s=vo(e,[n],!0),a=ie(Xt(e,"float32"),s);r([t,a]);const i=ee(Yt(a,t));return{value:Te(i,[n]),gradFunc:(t,e)=>{const[r,s]=e,a=Ie(t.shape,[n]);return[Yt(we(t,a),ie(Xt(r,"float32"),Dn(s))),Yt(we(t,a),ie(Dn(s),Xt(r,"float32")))]}}})(t,e)}(a,i);return Yl(u,o,s)}}),ac={fft:eo,ifft:ro,rfft:gu,irfft:io},ic={hammingWindow:vl,hannWindow:kl,frame:Nl,stft:Il},oc={resizeNearestNeighbor:Gl,resizeBilinear:Ul,rotateWithOffset:Cl,cropAndResize:Sl,nonMaxSuppression:El,nonMaxSuppressionAsync:zl,nonMaxSuppressionWithScore:Bl,nonMaxSuppressionWithScoreAsync:Pl,nonMaxSuppressionPadded:Wl,nonMaxSuppressionPaddedAsync:Vl},uc={bandPart:Hl,gramSchmidt:ql,qr:Kl},lc={absoluteDifference:Jl,computeWeightedLoss:Yl,cosineDistance:Zl,hingeLoss:Ql,huberLoss:tc,logLoss:ec,meanSquaredError:nc,sigmoidCrossEntropy:rc,softmaxCrossEntropy:sc};var cc=Object.freeze({__proto__:null,image:oc,linalg:uc,losses:lc,spectral:ac,fused:wl,signal:ic,abs:hi,acos:pi,acosh:di,add:be,addN:fi,all:mi,any:gi,argMax:yi,argMin:bi,asin:xi,asinh:wi,atan:vi,atan2:ki,atanh:Ni,avgPool:Ii,avgPool3d:Si,basicLSTMCell:Ai,batchToSpaceND:fs,batchNorm:Ti,batchNorm2d:Ri,batchNorm3d:$i,batchNorm4d:_i,broadcastTo:Di,buffer:Fi,cast:Xt,ceil:Oi,clipByValue:Mi,clone:Dr,complex:br,concat:xs,concat1d:Li,concat2d:zi,concat3d:Bi,concat4d:Pi,conv1d:Wi,conv2d:mn,conv2dTranspose:Vi,conv3d:Ui,conv3dTranspose:Gi,cos:Gr,cosh:qr,cumsum:Sn,depthToSpace:Hi,depthwiseConv2d:qi,diag:ji,dilation2d:Ki,div:te,divNoNan:Xi,dot:Yi,elu:Ji,equal:nr,erf:Zi,exp:Dn,expandDims:Ds,expm1:Qi,eye:to,fft:eo,fill:no,floor:fr,floorDiv:Qt,gather:Bs,greater:pr,greaterEqual:rn,ifft:ro,imag:so,irfft:io,isFinite:oo,isInf:uo,isNaN:lo,leakyRelu:co,less:ar,lessEqual:sn,linspace:ho,localResponseNormalization:po,log:Nr,log1p:fo,logSigmoid:bo,logSoftmax:wo,logSumExp:vo,logicalAnd:an,logicalNot:zr,logicalOr:ko,logicalXor:No,matMul:Ye,max:xo,maxPool:Io,maxPool3d:So,maxPoolWithArgmax:Co,maximum:Ps,mean:Ao,min:Eo,minimum:To,mod:Ro,moments:$o,mul:Yt,multiRNNCell:_o,multinomial:Do,neg:ee,notEqual:Fo,oneHot:Ma,ones:Cs,onesLike:Oo,outerProduct:Mo,pad:Kr,pad1d:Lo,pad2d:zo,pad3d:Bo,pad4d:Po,pool:Wo,pow:Ir,prelu:Vo,print:Uo,prod:Go,rand:Ho,randomGamma:su,randomNormal:au,randomUniform:iu,range:uu,real:ao,reciprocal:lu,relu:cu,relu6:hu,reshape:we,reverse:Fr,reverse1d:pu,reverse2d:du,reverse3d:fu,reverse4d:mu,rfft:gu,round:yu,rsqrt:Bn,scalar:re,selu:bu,separableConv2d:xu,setdiff1dAsync:wu,sigmoid:ps,sign:vu,sin:wn,sinh:kn,slice:Rs,slice1d:ku,slice2d:Nu,slice3d:Iu,slice4d:Su,softmax:Cu,softplus:Au,spaceToBatchND:Ze,split:cn,sqrt:se,square:ae,squaredDifference:Eu,squeeze:Tu,stack:Fs,step:Jt,stridedSlice:Ru,sub:ie,sum:Te,tan:$u,tanh:Ci,tensor:bs,tensor1d:ou,tensor2d:_u,tensor3d:Ba,tensor4d:Du,tensor5d:Fu,tensor6d:Ou,tile:Pn,topk:Mu,truncatedNormal:Lu,unsortedSegmentSum:Vn,unstack:zu,variable:Bu,where:on,whereAsync:Wu,zeros:xr,zerosLike:fe,op:Kt,booleanMaskAsync:Vu,equalStrict:Uu,greaterEqualStrict:Gu,greaterStrict:Hu,lessEqualStrict:qu,lessStrict:ju,notEqualStrict:Ku,addStrict:Xu,divStrict:Yu,maximumStrict:Ju,minimumStrict:Zu,modStrict:Qu,mulStrict:tl,powStrict:el,squaredDifferenceStrict:nl,subStrict:rl,transpose:In,norm:sl,movingAverage:al,scatterND:il,sparseToDense:ol,gatherND:ul,dropout:ll,enclosingPowerOfTwo:cl,cosineWindow:hl,inTopKAsync:pl});class hc extends Xa{minimize(t,e=!1,n){const{value:r,grads:s}=this.computeGradients(t,n);if(null!=n){const t=n.map(t=>({name:t.name,tensor:s[t.name]}));this.applyGradients(t)}else this.applyGradients(s);return oi(s),e?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(t,e){return mo(t,e)}dispose(){null!=this.iterations_&&oi(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:re(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(t){throw new Error("setWeights() is not implemented for this optimizer class "+this.getClassName())}async extractIterations(t){return this.iterations_=(await t[0].tensor.data())[0],t.slice(1)}}Object.defineProperty(hc,Symbol.hasInstance,{value:t=>null!=t.minimize&&null!=t.computeGradients&&null!=t.applyGradients});class pc extends hc{constructor(t,e,n=null){super(),this.learningRate=t,this.rho=e,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=Lt.backend.epsilon())}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const r=Lt.registeredVariables[e];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:e+"/accum_grad",variable:ii(()=>fe(r).variable(!1))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:e+"/accum_var",variable:ii(()=>fe(r).variable(!1))});const s=Array.isArray(t)?t[n].tensor:t[e];if(null==s)return;const a=this.accumulatedGrads[n].variable,i=this.accumulatedUpdates[n].variable;ii(()=>{const t=a.mul(this.rho).add(s.square().mul(1-this.rho)),e=i.add(this.epsilon).sqrt().div(a.add(this.epsilon).sqrt()).mul(s),n=i.mul(this.rho).add(e.square().mul(1-this.rho));a.assign(t),i.assign(n);const o=e.mul(-this.learningRate).add(r);r.assign(o)})}),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(oi(this.accumulatedGrads.map(t=>t.variable)),oi(this.accumulatedUpdates.map(t=>t.variable)))}async getWeights(){const t=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(t.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){const e=(t=await this.extractIterations(t)).length/2;this.accumulatedGrads=t.slice(0,e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)})),this.accumulatedUpdates=t.slice(e,2*e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.rho,e.epsilon)}}pc.className="Adadelta",Ja(pc);class dc extends hc{constructor(t,e=.1){super(),this.learningRate=t,this.initialAccumulatorValue=e,this.accumulatedGrads=[]}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const r=Lt.registeredVariables[e];if(null==this.accumulatedGrads[n]){const t=!1;this.accumulatedGrads[n]={originalName:e+"/accumulator",variable:ii(()=>no(r.shape,this.initialAccumulatorValue).variable(t))}}const s=Array.isArray(t)?t[n].tensor:t[e];if(null==s)return;const a=this.accumulatedGrads[n].variable;ii(()=>{const t=a.add(s.square());a.assign(t);const e=s.div(t.add(Lt.backend.epsilon()).sqrt()).mul(-this.learningRate).add(r);r.assign(e)})}),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&oi(this.accumulatedGrads.map(t=>t.variable))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t);this.accumulatedGrads=t.map(t=>({originalName:t.name,variable:t.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(t,e){return new t(e.learningRate,e.initialAccumulatorValue)}}dc.className="Adagrad",Ja(dc);class fc extends hc{constructor(t,e,n,r=null){super(),this.learningRate=t,this.beta1=e,this.beta2=n,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],ii(()=>{this.accBeta1=re(e).variable(),this.accBeta2=re(n).variable()}),null==r&&(this.epsilon=Lt.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map(t=>t.name):Object.keys(t);ii(()=>{const n=ie(1,this.accBeta1),r=ie(1,this.accBeta2);e.forEach((e,s)=>{const a=Lt.registeredVariables[e];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:e+"/m",variable:ii(()=>fe(a).variable(!1))}),null==this.accumulatedSecondMoment[s]&&(this.accumulatedSecondMoment[s]={originalName:e+"/v",variable:ii(()=>fe(a).variable(!1))});const i=Array.isArray(t)?t[s].tensor:t[e];if(null==i)return;const o=this.accumulatedFirstMoment[s].variable,u=this.accumulatedSecondMoment[s].variable,l=o.mul(this.beta1).add(i.mul(1-this.beta1)),c=u.mul(this.beta2).add(i.square().mul(1-this.beta2)),h=l.div(n),p=c.div(r);o.assign(l),u.assign(c);const d=h.div(p.sqrt().add(this.epsilon)).mul(-this.learningRate).add(a);a.assign(d)}),this.accBeta1.assign(this.accBeta1.mul(this.beta1)),this.accBeta2.assign(this.accBeta2.mul(this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&oi(this.accumulatedFirstMoment.map(t=>t.variable)),null!=this.accumulatedSecondMoment&&oi(this.accumulatedSecondMoment.map(t=>t.variable))}async getWeights(){const t=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(t.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t),ii(()=>{this.accBeta1.assign(Ir(this.beta1,this.iterations_+1)),this.accBeta2.assign(Ir(this.beta2,this.iterations_+1))});const e=t.length/2;this.accumulatedFirstMoment=t.slice(0,e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)})),this.accumulatedSecondMoment=t.slice(e,2*e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon)}}fc.className="Adam",Ja(fc);class mc extends hc{constructor(t,e,n,r=null,s=0){super(),this.learningRate=t,this.beta1=e,this.beta2=n,this.epsilon=r,this.decay=s,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],ii(()=>{this.iteration=re(0).variable(),this.accBeta1=re(e).variable()}),null==r&&(this.epsilon=Lt.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map(t=>t.name):Object.keys(t);ii(()=>{const n=ie(1,this.accBeta1),r=te(-this.learningRate,this.iteration.mul(this.decay).add(1));e.forEach((e,s)=>{const a=Lt.registeredVariables[e];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:e+"/m",variable:fe(a).variable(!1)}),null==this.accumulatedWeightedInfNorm[s]&&(this.accumulatedWeightedInfNorm[s]={originalName:e+"/v",variable:fe(a).variable(!1)});const i=Array.isArray(t)?t[s].tensor:t[e];if(null==i)return;const o=this.accumulatedFirstMoment[s].variable,u=this.accumulatedWeightedInfNorm[s].variable,l=o.mul(this.beta1).add(i.mul(1-this.beta1)),c=u.mul(this.beta2),h=i.abs(),p=c.maximum(h);o.assign(l),u.assign(p);const d=r.div(n).mul(l.div(p.add(this.epsilon))).add(a);a.assign(d)}),this.iteration.assign(this.iteration.add(1)),this.accBeta1.assign(this.accBeta1.mul(this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&oi(this.accumulatedFirstMoment.map(t=>t.variable)),null!=this.accumulatedWeightedInfNorm&&oi(this.accumulatedWeightedInfNorm.map(t=>t.variable))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(t){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon,e.decay)}}mc.className="Adamax",Ja(mc);class gc extends hc{constructor(t){super(),this.learningRate=t,this.setLearningRate(t)}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const r=Array.isArray(t)?t[n].tensor:t[e];if(null==r)return;const s=Lt.registeredVariables[e];ii(()=>{const t=this.c.mul(r).add(s);s.assign(t)})}),this.incrementIterations()}setLearningRate(t){this.learningRate=t,null!=this.c&&this.c.dispose(),this.c=ui(re(-t))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(t){if(0!==(t=await this.extractIterations(t)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(t,e){return new t(e.learningRate)}}gc.className="SGD",Ja(gc);class yc extends gc{constructor(t,e,n=!1){super(t),this.learningRate=t,this.momentum=e,this.useNesterov=n,this.accumulations=[],this.m=re(this.momentum)}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const r=Lt.registeredVariables[e];if(null==this.accumulations[n]){const t=!1;this.accumulations[n]={originalName:e+"/momentum",variable:ii(()=>fe(r).variable(t))}}const s=this.accumulations[n].variable,a=Array.isArray(t)?t[n].tensor:t[e];null!=a&&ii(()=>{let t;const e=this.m.mul(s).add(a);t=this.useNesterov?this.c.mul(a.add(e.mul(this.m))).add(r):this.c.mul(e).add(r),s.assign(e),r.assign(t)})}),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&oi(this.accumulations.map(t=>t.variable))}setMomentum(t){this.momentum=t}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t);this.accumulations=t.map(t=>({originalName:t.name,variable:t.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(t,e){return new t(e.learningRate,e.momentum,e.useNesterov)}}yc.className="Momentum",Ja(yc);class bc extends hc{constructor(t,e=.9,n=0,r=null,s=!1){if(super(),this.learningRate=t,this.decay=e,this.momentum=n,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=s,null==r&&(this.epsilon=Lt.backend.epsilon()),null==t)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const r=Lt.registeredVariables[e];null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:e+"/rms",variable:ii(()=>fe(r).variable(!1))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:e+"/momentum",variable:ii(()=>fe(r).variable(!1))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:e+"/mg",variable:ii(()=>fe(r).variable(!1))});const s=Array.isArray(t)?t[n].tensor:t[e];if(null==s)return;const a=this.accumulatedMeanSquares[n].variable,i=this.accumulatedMoments[n].variable;ii(()=>{const t=a.mul(this.decay).add(s.square().mul(1-this.decay));if(this.centered){const e=this.accumulatedMeanGrads[n].variable,o=e.mul(this.decay).add(s.mul(1-this.decay)),u=i.mul(this.momentum).add(s.mul(this.learningRate).div(t.sub(o.square().add(this.epsilon)).sqrt()));a.assign(t),e.assign(o),i.assign(u);const l=r.sub(u);r.assign(l)}else{const t=a.mul(this.decay).add(s.square().mul(1-this.decay)),e=i.mul(this.momentum).add(s.mul(this.learningRate).div(t.add(this.epsilon).sqrt()));a.assign(t),i.assign(e);const n=r.sub(e);r.assign(n)}})}),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&oi(this.accumulatedMeanSquares.map(t=>t.variable)),null!=this.accumulatedMeanGrads&&this.centered&&oi(this.accumulatedMeanGrads.map(t=>t.variable)),null!=this.accumulatedMoments&&oi(this.accumulatedMoments.map(t=>t.variable))}async getWeights(){const t=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&t.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(t.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t);const e=this.centered?t.length/3:t.length/2;this.accumulatedMeanSquares=t.slice(0,e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)})),this.accumulatedMoments=t.slice(e,2*e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)})),this.centered&&(this.accumulatedMeanGrads=t.slice(2*e,3*e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(t,e){return new t(e.learningRate,e.decay,e.momentum,e.epsilon,e.centered)}}bc.className="RMSProp",Ja(bc);class xc{static sgd(t){return new gc(t)}static momentum(t,e,n=!1){return new yc(t,e,n)}static rmsprop(t,e=.9,n=0,r=null,s=!1){return new bc(t,e,n,r,s)}static adam(t=.001,e=.9,n=.999,r=null){return new fc(t,e,n,r)}static adadelta(t=.001,e=.95,n=null){return new pc(t,e,n)}static adamax(t=.002,e=.9,n=.999,r=null,s=0){return new mc(t,e,n,r,s)}static adagrad(t,e=.1){return new dc(t,e)}}const wc={sgd:xc.sgd,momentum:xc.momentum,adadelta:xc.adadelta,adagrad:xc.adagrad,rmsprop:xc.rmsprop,adamax:xc.adamax,adam:xc.adam},vc="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:t=>t();function kc(){return new Promise(t=>vc(()=>t()))}function Nc(t,e,n){return[n*("number"==typeof t?t:t[0]),e*("number"==typeof t?t:t[1])]}function Ic(t,e,n,r=!0){let s=[];if(r)s=s.concat(e.slice(0)),s.push(t[0]/n),s=s.concat(t.slice(1));else{s=s.concat(t[0]);const n=e.length;for(let r=0;r<n;++r)s=s.concat([t[r+1]/e[r],e[r]]);s=s.concat(t.slice(n+1))}return s}function Sc(t,e,n=!0){const r=[];if(n){r.push(e);for(let n=e+1;n<t;++n)n<=2*e?(r.push(n),r.push(n-(e+1))):r.push(n)}else{const n=[],s=[];for(let r=1;r<t;++r)r>=2*e+1||r%2==1?s.push(r):n.push(r);r.push(...n),r.push(0),r.push(...s)}return r}function Cc(t,e,n,r=!0){const s=[];r?s.push(t[0]/n):s.push(t[0]*n);for(let n=1;n<t.length;++n)n<=e.length?r?s.push(e[n-1]*t[n]):s.push(t[n]/e[n-1]):s.push(t[n]);return s}function Ac(t,e){const n=[0];for(let r=0;r<e;++r)n.push(t[r][0]);return n}function Ec(t,e,n){const r=t.slice(0,1);for(let s=0;s<n;++s)r.push(t[s+1]-e[s][0]-e[s][1]);return r}function Tc(...t){u().getBool("IS_TEST")||console.warn(...t)}function Rc(t,e){if(t.length!==e.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${t.length}, imag: ${e.length}.`);const n=new Float32Array(2*t.length);for(let r=0;r<n.length;r+=2)n[r]=t[r/2],n[r+1]=e[r/2];return n}function $c(t){const e=new Float32Array(t.length/2),n=new Float32Array(t.length/2);for(let r=0;r<t.length;r+=2)e[r/2]=t[r],n[r/2]=t[r+1];return{real:e,imag:n}}function _c(t){const e=Math.ceil(t.length/4),n=new Float32Array(e),r=new Float32Array(e);for(let e=0;e<t.length;e+=4)n[Math.floor(e/4)]=t[e],r[Math.floor(e/4)]=t[e+1];return{real:n,imag:r}}function Dc(t){const e=Math.floor(t.length/4),n=new Float32Array(e),r=new Float32Array(e);for(let e=2;e<t.length;e+=4)n[Math.floor(e/4)]=t[e],r[Math.floor(e/4)]=t[e+1];return{real:n,imag:r}}function Fc(t,e){return{real:t[2*e],imag:t[2*e+1]}}function Oc(t,e,n,r){t[2*r]=e,t[2*r+1]=n}function Mc(t,e){const n=new Float32Array(t/2),r=new Float32Array(t/2);for(let s=0;s<Math.ceil(t/2);s++){const a=(e?2:-2)*Math.PI*(s/t);n[s]=Math.cos(a),r[s]=Math.sin(a)}return{real:n,imag:r}}function Lc(t,e,n){const r=(n?2:-2)*Math.PI*(t/e);return{real:Math.cos(r),imag:Math.sin(r)}}function zc(t,e,n){if("complex64"===e){if("complex64"===t.dtype)return t.clone();const e=xr(t.shape),r=t.toFloat(),s=n.complex(r,e);return e.dispose(),r.dispose(),s}if(!U(t.dtype,e))return Lt.makeTensorFromDataId(t.dataId,t.shape,e);if("complex64"===t.dtype){const r=n.real(t),s=r.cast(e);return r.dispose(),s}if("int32"===e)return n.int(t);if("bool"===e){const e=re(0,t.dtype),r=n.notEqual(t,e);return e.dispose(),r}throw new Error(`Error in Cast: failed to cast ${t.dtype} to ${e}`)}function Bc(t,e){return Lt.makeTensorFromDataId(t.dataId,e,t.dtype)}function Pc(t,e,n){const r=(e-t)/(n-1),s=rt(n,"float32");s[0]=t;for(let t=1;t<s.length;t++)s[t]=s[t-1]+r;return ou(s,"float32")}var Wc=Object.freeze({__proto__:null,segment_util:zs,castTensor:zc,reshapeTensor:Bc,linspaceImpl:Pc,upcastType:Tt,axesAreInnerMostDims:ve,combineLocations:ke,computeOutAndReduceShapes:Ne,expandShapeToKeepDim:Ie,assertAxesAreInnerMostDims:Se,getAxesPermutation:Ce,getUndoAxesPermutation:Ae,getInnerMostAxes:Ee,getBroadcastDims:le,getReductionAxes:ce,assertAndGetBroadcastShape:he,assertParamsConsistent:gs,computeOutShape:ys,computeDilation2DInfo:De,computePool2DInfo:Fe,computePool3DInfo:Oe,computeConv2DInfo:Me,computeConv3DInfo:Le,computeDefaultPad:ze,tupleValuesAreOne:Ue,eitherStridesOrDilationsAreOne:Ge,convertConv2DDataFormat:He,getFusedDyActivation:dl,getFusedBiasGradient:fl,applyActivation:ml,shouldFuse:gl,PARALLELIZE_THRESHOLD:30,computeOptimalWindowSize:Ms,getImageCenter:Nc,getReshaped:Ic,getPermuted:Sc,getReshapedPermuted:Cc,getSliceBeginCoords:Ac,getSliceSize:Ec,prepareAndValidate:Ua,validateUpdateShape:Ha,validateInput:qa,calculateShapes:ja,SELU_SCALEALPHA:1.7580993408473768,SELU_SCALE:Pr,ERF_P:.3275911,ERF_A1:.254829592,ERF_A2:-.284496736,ERF_A3:1.421413741,ERF_A4:-1.453152027,ERF_A5:1.061405429,warn:Tc,log:function(...t){u().getBool("IS_TEST")||console.log(...t)},mergeRealAndImagArrays:Rc,splitRealAndImagArrays:$c,complexWithEvenIndex:_c,complexWithOddIndex:Dc,getComplexWithIndex:Fc,assignToTypedArray:Oc,exponents:Mc,exponent:Lc,prepareSplitSize:ln});function Vc(t,e,n){const r=new Array(t.rank).fill(0),s=t.shape.slice();return e.map(e=>{const a=[...s];a[n]=e;const i=t.slice(r,a);return r[n]+=e,i})}function Uc(t,e){const n=new Array(t.rank);for(let r=0;r<n.length;r++)n[r]=t.shape[r]*e[r];const r=Fi(n,t.dtype);for(let e=0;e<r.values.length;++e){const n=r.indexToLoc(e),s=new Array(t.rank);for(let e=0;e<s.length;e++)s[e]=n[e]%t.shape[e];const a=t.locToIndex(s);r.values[e]=t.values[a]}return r.toTensor()}function Gc(t,e,n,r,s){const a=e[e.length-1],[i,o]=[t.length/a,a],u=B(n,i*r),l=B("int32",i*r);for(let e=0;e<i;e++){const n=e*o,s=t.subarray(n,n+o),a=[];for(let t=0;t<s.length;t++)a.push({value:s[t],index:t});a.sort((t,e)=>e.value-t.value);const i=e*r,c=u.subarray(i,i+r),h=l.subarray(i,i+r);for(let t=0;t<r;t++)c[t]=a[t].value,h[t]=a[t].index}const c=e.slice();return c[c.length-1]=r,[bs(u,c,n),bs(l,c,"int32")]}var Hc=Object.freeze({__proto__:null,nonMaxSuppressionV3Impl:$l,nonMaxSuppressionV4Impl:_l,nonMaxSuppressionV5Impl:Dl,split:Vc,tile:Uc,topkImpl:Gc,whereImpl:Pu});class qc{constructor(t,e){this.backend=t,this.dataMover=e,this.data=new WeakMap,this.dataIdsCount=0}get(t){return this.data.has(t)||this.dataMover.moveData(this.backend,t),this.data.get(t)}set(t,e){this.dataIdsCount++,this.data.set(t,e)}has(t){return this.data.has(t)}delete(t){return this.dataIdsCount--,this.data.delete(t)}numDataIds(){return this.dataIdsCount}}class jc{time(t){return Kc("time")}read(t){return Kc("read")}readSync(t){return Kc("readSync")}numDataIds(){return Kc("numDataIds")}disposeData(t){return Kc("disposeData")}write(t,e,n){return Kc("write")}move(t,e,n,r){return Kc("move")}memory(){return Kc("memory")}floatPrecision(){return Kc("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}batchMatMul(t,e,n,r){return Kc("batchMatMul")}fusedBatchMatMul({a:t,b:e,transposeA:n,transposeB:r,bias:s,activation:a,preluActivationWeights:i}){return Kc("fusedBatchMatMul")}slice(t,e,n){return Kc("slice")}stridedSlice(t,e,n,r){return Kc("stridedSlice")}unstack(t,e){return Kc("unstack")}reverse(t,e){return Kc("reverse")}concat(t,e){return Kc("concat")}neg(t){return Kc("neg")}add(t,e){return Kc("add")}addN(t){return Kc("addN")}subtract(t,e){return Kc("subtract")}multiply(t,e){return Kc("multiply")}realDivide(t,e){return Kc("realDivide")}floorDiv(t,e){return Kc("floorDiv")}sum(t,e){return Kc("sum")}prod(t,e){return Kc("prod")}unsortedSegmentSum(t,e,n){return Kc("unsortedSegmentSum")}argMin(t,e){return Kc("argMin")}argMax(t,e){return Kc("argMax")}equal(t,e){return Kc("equal")}notEqual(t,e){return Kc("notEqual")}less(t,e){return Kc("less")}lessEqual(t,e){return Kc("lessEqual")}greater(t,e){return Kc("greater")}greaterEqual(t,e){return Kc("greaterEqual")}logicalNot(t){return Kc("logicalNot")}logicalAnd(t,e){return Kc("logicalAnd")}logicalOr(t,e){return Kc("logicalOr")}where(t){return Kc("where")}select(t,e,n){return Kc("select")}topk(t,e,n){return Kc("topk")}min(t,e){return Kc("min")}minimum(t,e){return Kc("minimum")}mod(t,e){return Kc("mod")}max(t,e){return Kc("max")}maximum(t,e){return Kc("maximum")}all(t,e){return Kc("all")}any(t,e){return Kc("any")}squaredDifference(t,e){return Kc("squaredDifference")}ceil(t){return Kc("ceil")}floor(t){return Kc("floor")}round(t){return Kc("round")}sign(t){return Kc("sign")}isNaN(t){return Kc("isNaN")}isInf(t){return Kc("isInf")}isFinite(t){return Kc("isFinite")}pow(t,e){return Kc("pow")}exp(t){return Kc("exp")}expm1(t){return Kc("expm1")}softmax(t,e){return Kc("softmax")}log(t){return Kc("log")}log1p(t){return Kc("log1p")}sqrt(t){return Kc("sqrt")}rsqrt(t){return Kc("rsqrt")}square(t){return Kc("square")}reciprocal(t){return Kc("reciprocal")}relu(t){return Kc("relu")}relu6(t){return Kc("relu6")}prelu(t,e){return Kc("prelu")}elu(t){return Kc("elu")}eluDer(t,e){return Kc("eluDer")}selu(t){return Kc("selu")}int(t){return Kc("int")}clip(t,e,n){return Kc("clip")}abs(t){return Kc("abs")}complexAbs(t){return Kc("complexAbs")}sigmoid(t){return Kc("sigmoid")}softplus(t){return Kc("softplus")}sin(t){return Kc("sin")}cos(t){return Kc("cos")}tan(t){return Kc("tan")}asin(t){return Kc("asin")}acos(t){return Kc("acos")}atan(t){return Kc("atan")}atan2(t,e){return Kc("atan2")}sinh(t){return Kc("sinh")}cosh(t){return Kc("cosh")}tanh(t){return Kc("tanh")}asinh(t){return Kc("asinh")}acosh(t){return Kc("acosh")}atanh(t){return Kc("atanh")}erf(t){return Kc("erf")}step(t,e){return Kc("step")}fusedConv2d({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){return Kc("fusedConv2d")}conv2d(t,e,n){return Kc("conv2d")}conv2dDerInput(t,e,n){return Kc("conv2dDerInput")}conv2dDerFilter(t,e,n){return Kc("conv2dDerFilter")}fusedDepthwiseConv2D({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){return Kc("fusedDepthwiseConv2D")}depthwiseConv2D(t,e,n){return Kc("depthwiseConv2D")}depthwiseConv2DDerInput(t,e,n){return Kc("depthwiseConv2DDerInput")}depthwiseConv2DDerFilter(t,e,n){return Kc("depthwiseConv2DDerFilter")}conv3d(t,e,n){return Kc("conv3d")}conv3dDerInput(t,e,n){return Kc("conv3dDerInput")}conv3dDerFilter(t,e,n){return Kc("conv3dDerFilter")}maxPool(t,e){return Kc("maxPool")}maxPoolBackprop(t,e,n,r){return Kc("maxPoolBackprop")}avgPool(t,e){return Kc("avgPool")}avgPoolBackprop(t,e,n){return Kc("avgPoolBackprop")}avgPool3d(t,e){return Kc("avgPool3d")}avgPool3dBackprop(t,e,n){return Kc("avgPool3dBackprop")}maxPool3d(t,e){return Kc("maxPool3d")}maxPool3dBackprop(t,e,n,r){return Kc("maxPool3dBackprop")}reshape(t,e){return Kc("reshape")}cast(t,e){return Kc("cast")}tile(t,e){return Kc("tile")}pad(t,e,n){return Kc("pad")}transpose(t,e){return Kc("transpose")}gather(t,e,n){return Kc("gather")}gatherND(t,e){return Kc("gatherND")}scatterND(t,e,n){return Kc("scatterND")}batchToSpaceND(t,e,n){return Kc("batchToSpaceND")}spaceToBatchND(t,e,n){return Kc("spaceToBatchND")}resizeBilinear(t,e,n,r){return Kc("resizeBilinear")}resizeBilinearBackprop(t,e,n){return Kc("resizeBilinearBackprop")}resizeNearestNeighbor(t,e,n,r){return Kc("resizeNearestNeighbor")}resizeNearestNeighborBackprop(t,e,n){return Kc("resizeNearestNeighborBackprop")}batchNorm(t,e,n,r,s,a){return Kc("batchNorm")}localResponseNormalization4D(t,e,n,r,s){return Kc("localResponseNormalization4D")}LRNGrad(t,e,n,r,s,a,i){return Kc("LRNGrad")}multinomial(t,e,n,r){return Kc("multinomial")}oneHot(t,e,n,r){return Kc("oneHot")}cumsum(t,e,n,r){return Kc("cumsum")}nonMaxSuppression(t,e,n,r,s){return Kc("nonMaxSuppression")}fft(t){return Kc("fft")}ifft(t){return Kc("ifft")}complex(t,e){return Kc("complex")}real(t){return Kc("real")}imag(t){return Kc("imag")}cropAndResize(t,e,n,r,s,a){return Kc("cropAndResize")}depthToSpace(t,e,n){return Kc("depthToSpace")}split(t,e,n){return Kc("split")}sparseToDense(t,e,n,r){return Kc("sparseToDense")}diag(t){return Kc("diag")}fill(t,e,n){return Kc("fill")}onesLike(t){return Kc("onesLike")}zerosLike(t){return Kc("zerosLike")}linspace(t,e,n){return Kc("linspace")}dispose(){return Kc("dispose")}}function Kc(t){throw new Error(`'${t}' not yet implemented or not found in the registry. Did you forget to import the kernel?`)}vt.prototype.abs=function(){return this.throwIfDisposed(),hi(this)},vt.prototype.acos=function(){return this.throwIfDisposed(),pi(this)},vt.prototype.acosh=function(){return this.throwIfDisposed(),di(this)},vt.prototype.addStrict=function(t){return this.throwIfDisposed(),Xu(this,t)},vt.prototype.add=function(t){return this.throwIfDisposed(),be(this,t)},vt.prototype.all=function(t,e){return this.throwIfDisposed(),mi(this,t,e)},vt.prototype.any=function(t,e){return this.throwIfDisposed(),gi(this,t,e)},vt.prototype.argMax=function(t){return this.throwIfDisposed(),yi(this,t)},vt.prototype.argMin=function(t){return this.throwIfDisposed(),bi(this,t)},vt.prototype.asScalar=function(){return this.throwIfDisposed(),S(1===this.size,()=>"The array must have only 1 element."),we(this,[])},vt.prototype.asType=function(t){return this.throwIfDisposed(),Xt(this,t)},vt.prototype.as1D=function(){return this.throwIfDisposed(),we(this,[this.size])},vt.prototype.as2D=function(t,e){return this.throwIfDisposed(),we(this,[t,e])},vt.prototype.as3D=function(t,e,n){return this.throwIfDisposed(),we(this,[t,e,n])},vt.prototype.as4D=function(t,e,n,r){return this.throwIfDisposed(),we(this,[t,e,n,r])},vt.prototype.as5D=function(t,e,n,r,s){return this.throwIfDisposed(),we(this,[t,e,n,r,s])},vt.prototype.asin=function(){return this.throwIfDisposed(),xi(this)},vt.prototype.asinh=function(){return this.throwIfDisposed(),wi(this)},vt.prototype.atan=function(){return this.throwIfDisposed(),vi(this)},vt.prototype.atan2=function(t){return this.throwIfDisposed(),ki(this,t)},vt.prototype.atanh=function(){return this.throwIfDisposed(),Ni(this)},vt.prototype.avgPool=function(t,e,n,r){return this.throwIfDisposed(),Ii(this,t,e,n,r)},vt.prototype.batchToSpaceND=function(t,e){return this.throwIfDisposed(),fs(this,t,e)},vt.prototype.batchNorm=function(t,e,n,r,s){return this.throwIfDisposed(),Ti(this,t,e,n,r,s)},vt.prototype.broadcastTo=function(t){return this.throwIfDisposed(),Di(this,t)},vt.prototype.cast=function(t){return this.throwIfDisposed(),Xt(this,t)},vt.prototype.ceil=function(){return this.throwIfDisposed(),Oi(this)},vt.prototype.clipByValue=function(t,e){return this.throwIfDisposed(),Mi(this,t,e)},vt.prototype.concat=function(t,e){return this.throwIfDisposed(),t instanceof vt&&(t=[t]),xs([this,...t],e)},vt.prototype.conv1d=function(t,e,n,r,s,a){return this.throwIfDisposed(),Wi(this,t,e,n,r,s,a)},vt.prototype.conv2dTranspose=function(t,e,n,r,s){return this.throwIfDisposed(),Vi(this,t,e,n,r,s)},vt.prototype.conv2d=function(t,e,n,r,s,a){return this.throwIfDisposed(),mn(this,t,e,n,r,s,a)},vt.prototype.cos=function(){return this.throwIfDisposed(),Gr(this)},vt.prototype.cosh=function(){return this.throwIfDisposed(),qr(this)},vt.prototype.cumsum=function(t,e,n){return this.throwIfDisposed(),Sn(this,t,e,n)},vt.prototype.depthToSpace=function(t,e){return this.throwIfDisposed(),Hi(this,t,e)},vt.prototype.depthwiseConv2D=function(t,e,n,r,s,a){return ri("depthwiseConv2D is deprecated, use depthwiseConv2d instead"),this.throwIfDisposed(),qi(this,t,e,n,r,s,a)},vt.prototype.depthwiseConv2d=function(t,e,n,r,s,a){return this.throwIfDisposed(),qi(this,t,e,n,r,s,a)},vt.prototype.dilation2d=function(t,e,n,r,s){return this.throwIfDisposed(),Ki(this,t,e,n,r,s)},vt.prototype.divNoNan=function(t){return this.throwIfDisposed(),Xi(this,t)},vt.prototype.divStrict=function(t){return this.throwIfDisposed(),Yu(this,t)},vt.prototype.div=function(t){return this.throwIfDisposed(),te(this,t)},vt.prototype.dot=function(t){return this.throwIfDisposed(),Yi(this,t)},vt.prototype.elu=function(){return this.throwIfDisposed(),Ji(this)},vt.prototype.equalStrict=function(t){return this.throwIfDisposed(),Uu(this,t)},vt.prototype.equal=function(t){return this.throwIfDisposed(),nr(this,t)},vt.prototype.erf=function(){return this.throwIfDisposed(),Zi(this)},vt.prototype.exp=function(){return this.throwIfDisposed(),Dn(this)},vt.prototype.expandDims=function(t){return this.throwIfDisposed(),Ds(this,t)},vt.prototype.expm1=function(){return this.throwIfDisposed(),Qi(this)},vt.prototype.fft=function(){return this.throwIfDisposed(),eo(this)},vt.prototype.flatten=function(){return this.throwIfDisposed(),we(this,[this.size])},vt.prototype.floor=function(){return this.throwIfDisposed(),fr(this)},vt.prototype.floorDiv=function(t){return this.throwIfDisposed(),Qt(this,t)},vt.prototype.gather=function(t,e){return this.throwIfDisposed(),Bs(this,t,e)},vt.prototype.greaterEqualStrict=function(t){return this.throwIfDisposed(),Gu(this,t)},vt.prototype.greaterEqual=function(t){return this.throwIfDisposed(),rn(this,t)},vt.prototype.greaterStrict=function(t){return this.throwIfDisposed(),Hu(this,t)},vt.prototype.greater=function(t){return this.throwIfDisposed(),pr(this,t)},vt.prototype.ifft=function(){return this.throwIfDisposed(),ro(this)},vt.prototype.irfft=function(){return this.throwIfDisposed(),io(this)},vt.prototype.isFinite=function(){return this.throwIfDisposed(),oo(this)},vt.prototype.isInf=function(){return this.throwIfDisposed(),uo(this)},vt.prototype.isNaN=function(){return this.throwIfDisposed(),lo(this)},vt.prototype.leakyRelu=function(t){return this.throwIfDisposed(),co(this,t)},vt.prototype.lessEqualStrict=function(t){return this.throwIfDisposed(),qu(this,t)},vt.prototype.lessEqual=function(t){return this.throwIfDisposed(),sn(this,t)},vt.prototype.lessStrict=function(t){return this.throwIfDisposed(),ju(this,t)},vt.prototype.less=function(t){return this.throwIfDisposed(),ar(this,t)},vt.prototype.localResponseNormalization=function(t,e,n,r){return this.throwIfDisposed(),po(this,t,e,n,r)},vt.prototype.logSigmoid=function(){return this.throwIfDisposed(),bo(this)},vt.prototype.logSoftmax=function(t){return this.throwIfDisposed(),wo(this,t)},vt.prototype.logSumExp=function(t,e){return this.throwIfDisposed(),vo(this,t,e)},vt.prototype.log=function(){return this.throwIfDisposed(),Nr(this)},vt.prototype.log1p=function(){return this.throwIfDisposed(),fo(this)},vt.prototype.logicalAnd=function(t){return this.throwIfDisposed(),an(this,t)},vt.prototype.logicalNot=function(){return this.throwIfDisposed(),zr(this)},vt.prototype.logicalOr=function(t){return this.throwIfDisposed(),ko(this,t)},vt.prototype.logicalXor=function(t){return this.throwIfDisposed(),No(this,t)},vt.prototype.matMul=function(t,e,n){return this.throwIfDisposed(),Ye(this,t,e,n)},vt.prototype.maxPool=function(t,e,n,r){return this.throwIfDisposed(),Io(this,t,e,n,r)},vt.prototype.max=function(t,e){return this.throwIfDisposed(),xo(this,t,e)},vt.prototype.maximumStrict=function(t){return this.throwIfDisposed(),Ju(this,t)},vt.prototype.maximum=function(t){return this.throwIfDisposed(),Ps(this,t)},vt.prototype.mean=function(t,e){return this.throwIfDisposed(),Ao(this,t,e)},vt.prototype.min=function(t,e){return this.throwIfDisposed(),Eo(this,t,e)},vt.prototype.minimumStrict=function(t){return this.throwIfDisposed(),Zu(this,t)},vt.prototype.minimum=function(t){return this.throwIfDisposed(),To(this,t)},vt.prototype.modStrict=function(t){return this.throwIfDisposed(),Qu(this,t)},vt.prototype.mod=function(t){return this.throwIfDisposed(),Ro(this,t)},vt.prototype.mulStrict=function(t){return this.throwIfDisposed(),tl(this,t)},vt.prototype.mul=function(t){return this.throwIfDisposed(),Yt(this,t)},vt.prototype.neg=function(){return this.throwIfDisposed(),ee(this)},vt.prototype.norm=function(t,e,n){return this.throwIfDisposed(),sl(this,t,e,n)},vt.prototype.notEqualStrict=function(t){return this.throwIfDisposed(),Ku(this,t)},vt.prototype.notEqual=function(t){return this.throwIfDisposed(),Fo(this,t)},vt.prototype.oneHot=function(t,e=1,n=0){return this.throwIfDisposed(),Ma(this,t,e,n)},vt.prototype.onesLike=function(){return this.throwIfDisposed(),Oo(this)},vt.prototype.pad=function(t,e){return this.throwIfDisposed(),Kr(this,t,e)},vt.prototype.pool=function(t,e,n,r,s){return this.throwIfDisposed(),Wo(this,t,e,n,r,s)},vt.prototype.powStrict=function(t){return this.throwIfDisposed(),el(this,t)},vt.prototype.pow=function(t){return this.throwIfDisposed(),Ir(this,t)},vt.prototype.prelu=function(t){return this.throwIfDisposed(),Vo(this,t)},vt.prototype.prod=function(t,e){return this.throwIfDisposed(),Go(this,t,e)},vt.prototype.reciprocal=function(){return this.throwIfDisposed(),lu(this)},vt.prototype.relu=function(){return this.throwIfDisposed(),cu(this)},vt.prototype.relu6=function(){return this.throwIfDisposed(),hu(this)},vt.prototype.reshapeAs=function(t){return this.throwIfDisposed(),we(this,t.shape)},vt.prototype.reshape=function(t){return this.throwIfDisposed(),we(this,t)},vt.prototype.resizeBilinear=function(t,e){return this.throwIfDisposed(),Ul(this,t,e)},vt.prototype.resizeNearestNeighbor=function(t,e){return this.throwIfDisposed(),Gl(this,t,e)},vt.prototype.reverse=function(t){return this.throwIfDisposed(),Fr(this,t)},vt.prototype.rfft=function(){return this.throwIfDisposed(),gu(this)},vt.prototype.round=function(){return this.throwIfDisposed(),yu(this)},vt.prototype.rsqrt=function(){return this.throwIfDisposed(),Bn(this)},vt.prototype.selu=function(){return this.throwIfDisposed(),bu(this)},vt.prototype.separableConv2d=function(t,e,n,r,s,a){return this.throwIfDisposed(),xu(this,t,e,n,r,s,a)},vt.prototype.sigmoid=function(){return this.throwIfDisposed(),ps(this)},vt.prototype.sign=function(){return this.throwIfDisposed(),vu(this)},vt.prototype.sin=function(){return this.throwIfDisposed(),wn(this)},vt.prototype.sinh=function(){return this.throwIfDisposed(),kn(this)},vt.prototype.slice=function(t,e){return this.throwIfDisposed(),Rs(this,t,e)},vt.prototype.softmax=function(t){return this.throwIfDisposed(),Cu(this,t)},vt.prototype.softplus=function(){return this.throwIfDisposed(),Au(this)},vt.prototype.spaceToBatchND=function(t,e){return this.throwIfDisposed(),Ze(this,t,e)},vt.prototype.split=function(t,e){return this.throwIfDisposed(),cn(this,t,e)},vt.prototype.sqrt=function(){return this.throwIfDisposed(),se(this)},vt.prototype.square=function(){return this.throwIfDisposed(),ae(this)},vt.prototype.squaredDifference=function(t){return this.throwIfDisposed(),Eu(this,t)},vt.prototype.squaredDifferenceStrict=function(t){return this.throwIfDisposed(),nl(this,t)},vt.prototype.squeeze=function(t){return this.throwIfDisposed(),Tu(this,t)},vt.prototype.stack=function(t,e){this.throwIfDisposed();const n=t instanceof vt?[this,t]:[this,...t];return Fs(n,e)},vt.prototype.step=function(t){return this.throwIfDisposed(),Jt(this,t)},vt.prototype.stridedSlice=function(t,e,n,r,s,a,i,o){return this.throwIfDisposed(),Ru(this,t,e,n,r,s,a,i,o)},vt.prototype.subStrict=function(t){return this.throwIfDisposed(),rl(this,t)},vt.prototype.sub=function(t){return this.throwIfDisposed(),ie(this,t)},vt.prototype.sum=function(t,e){return this.throwIfDisposed(),Te(this,t,e)},vt.prototype.tan=function(){return this.throwIfDisposed(),$u(this)},vt.prototype.tanh=function(){return this.throwIfDisposed(),Ci(this)},vt.prototype.tile=function(t){return this.throwIfDisposed(),Pn(this,t)},vt.prototype.toBool=function(){return this.throwIfDisposed(),Xt(this,"bool")},vt.prototype.toFloat=function(){return this.throwIfDisposed(),Xt(this,"float32")},vt.prototype.toInt=function(){return this.throwIfDisposed(),Xt(this,"int32")},vt.prototype.topk=function(t,e){return this.throwIfDisposed(),Mu(this,t,e)},vt.prototype.transpose=function(t){return this.throwIfDisposed(),In(this,t)},vt.prototype.unsortedSegmentSum=function(t,e){return this.throwIfDisposed(),Vn(this,t,e)},vt.prototype.unstack=function(t){return this.throwIfDisposed(),zu(this,t)},vt.prototype.where=function(t,e){return this.throwIfDisposed(),on(t,this,e)},vt.prototype.zerosLike=function(){return this.throwIfDisposed(),fe(this)},wt=cc;var Xc,Yc,Jc=Object.freeze({__proto__:null,version_core:"2.1.0",browser:Va,io:Oa,math:za,serialization:Za,test_util:ni,util:ht,backend_util:Wc,tensor_util:Ft,slice_util:ls,gather_util:Ga,scatter_util:Ka,device_util:Pt,kernel_impls:Hc,AdadeltaOptimizer:pc,AdagradOptimizer:dc,AdamOptimizer:fc,AdamaxOptimizer:mc,MomentumOptimizer:yc,Optimizer:hc,RMSPropOptimizer:bc,SGDOptimizer:gc,Tensor:vt,TensorBuffer:bt,Variable:kt,get Rank(){return Nt},sumOutType:Rt,upcastType:Tt,get Reduction(){return Xl},customGrad:go,grad:function(t){return S(J(t),()=>"The f passed in grad(f) must be a function"),(e,n)=>{const r=qt(e,"x","tf.grad",null),s=null!=n?qt(n,"dy","tf.grad"):null;return Lt.tidy(()=>{const{value:e,grads:n}=Lt.gradients(()=>t(r),[r],s);return null!=s&&C(e.shape,s.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),yo(n),n[0]})}},grads:function(t){return S(J(t),()=>"The f passed in grads(f) must be a function"),(e,n)=>{S(Array.isArray(e),()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s");const r=jt(e,"args","tf.grads",null),s=null!=n?qt(n,"dy","tf.grads"):null;return Lt.tidy(()=>{const{value:e,grads:n}=Lt.gradients(()=>t(...r),r,s);return null!=s&&C(e.shape,s.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),yo(n),n})}},valueAndGrad:function(t){return S(J(t),()=>"The f passed in valueAndGrad(f) must be a function"),(e,n)=>{S(e instanceof vt,()=>"The x passed in valueAndGrad(f)(x) must be a tensor"),S(null==n||n instanceof vt,()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor");const{grads:r,value:s}=Lt.gradients(()=>t(e),[e],n);return yo(r),{grad:r[0],value:s}}},valueAndGrads:function(t){return S(J(t),()=>"The f passed in valueAndGrads(f) must be a function"),(e,n)=>{S(Array.isArray(e)&&e.every(t=>t instanceof vt),()=>"The args passed in valueAndGrads(f)(args) must be array of tensors"),S(null==n||n instanceof vt,()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor");const r=Lt.gradients(()=>t(...e),e,n);return null!=n&&C(r.value.shape,n.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),yo(r.grads),r}},variableGrads:mo,Environment:o,env:u,get ENV(){return c},nextFrame:kc,KernelBackend:jc,DataStorage:qc,abs:hi,acos:pi,acosh:di,add:be,addN:fi,all:mi,any:gi,argMax:yi,argMin:bi,asin:xi,asinh:wi,atan:vi,atan2:ki,atanh:Ni,avgPool:Ii,avgPool3d:Si,basicLSTMCell:Ai,batchToSpaceND:fs,batchNorm:Ti,batchNorm2d:Ri,batchNorm3d:$i,batchNorm4d:_i,broadcastTo:Di,buffer:Fi,cast:Xt,ceil:Oi,clipByValue:Mi,clone:Dr,complex:br,concat:xs,concat1d:Li,concat2d:zi,concat3d:Bi,concat4d:Pi,conv1d:Wi,conv2d:mn,conv2dTranspose:Vi,conv3d:Ui,conv3dTranspose:Gi,cos:Gr,cosh:qr,cumsum:Sn,depthToSpace:Hi,depthwiseConv2d:qi,diag:ji,dilation2d:Ki,div:te,divNoNan:Xi,dot:Yi,elu:Ji,equal:nr,erf:Zi,exp:Dn,expandDims:Ds,expm1:Qi,eye:to,fft:eo,fill:no,floor:fr,floorDiv:Qt,gather:Bs,greater:pr,greaterEqual:rn,ifft:ro,imag:so,irfft:io,isFinite:oo,isInf:uo,isNaN:lo,leakyRelu:co,less:ar,lessEqual:sn,linspace:ho,localResponseNormalization:po,log:Nr,log1p:fo,logSigmoid:bo,logSoftmax:wo,logSumExp:vo,logicalAnd:an,logicalNot:zr,logicalOr:ko,logicalXor:No,matMul:Ye,max:xo,maxPool:Io,maxPool3d:So,maxPoolWithArgmax:Co,maximum:Ps,mean:Ao,min:Eo,minimum:To,mod:Ro,moments:$o,mul:Yt,multiRNNCell:_o,multinomial:Do,neg:ee,notEqual:Fo,oneHot:Ma,ones:Cs,onesLike:Oo,outerProduct:Mo,pad:Kr,pad1d:Lo,pad2d:zo,pad3d:Bo,pad4d:Po,pool:Wo,pow:Ir,prelu:Vo,print:Uo,prod:Go,rand:Ho,randomGamma:su,randomNormal:au,randomUniform:iu,range:uu,real:ao,reciprocal:lu,relu:cu,relu6:hu,reshape:we,reverse:Fr,reverse1d:pu,reverse2d:du,reverse3d:fu,reverse4d:mu,rfft:gu,round:yu,rsqrt:Bn,scalar:re,selu:bu,separableConv2d:xu,setdiff1dAsync:wu,sigmoid:ps,sign:vu,sin:wn,sinh:kn,slice:Rs,slice1d:ku,slice2d:Nu,slice3d:Iu,slice4d:Su,softmax:Cu,softplus:Au,spaceToBatchND:Ze,split:cn,sqrt:se,square:ae,squaredDifference:Eu,squeeze:Tu,stack:Fs,step:Jt,stridedSlice:Ru,sub:ie,sum:Te,tan:$u,tanh:Ci,tensor:bs,tensor1d:ou,tensor2d:_u,tensor3d:Ba,tensor4d:Du,tensor5d:Fu,tensor6d:Ou,tile:Pn,topk:Mu,truncatedNormal:Lu,unsortedSegmentSum:Vn,unstack:zu,variable:Bu,where:on,whereAsync:Wu,zeros:xr,zerosLike:fe,op:Kt,booleanMaskAsync:Vu,equalStrict:Uu,greaterEqualStrict:Gu,greaterStrict:Hu,lessEqualStrict:qu,lessStrict:ju,notEqualStrict:Ku,addStrict:Xu,divStrict:Yu,maximumStrict:Ju,minimumStrict:Zu,modStrict:Qu,mulStrict:tl,powStrict:el,squaredDifferenceStrict:nl,subStrict:rl,transpose:In,norm:sl,movingAverage:al,scatterND:il,sparseToDense:ol,gatherND:ul,dropout:ll,enclosingPowerOfTwo:cl,cosineWindow:hl,inTopKAsync:pl,image:oc,linalg:uc,losses:lc,spectral:ac,fused:wl,signal:ic,train:wc,enableProdMode:function(){u().set("PROD",!0)},enableDebugMode:function(){u().set("DEBUG",!0)},disableDeprecationWarnings:function(){u().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")},deprecationWarn:ri,disposeVariables:function(){Lt.disposeVariables()},engine:si,memory:ai,profile:function(t){return Lt.profile(t)},tidy:ii,dispose:oi,keep:ui,time:function(t){return Lt.time(t)},setBackend:function(t){return Lt.setBackend(t)},ready:function(){return Lt.ready()},getBackend:function(){return Lt.backendName},removeBackend:function(t){Lt.removeBackend(t)},findBackend:function(t){return Lt.findBackend(t)},findBackendFactory:function(t){return Lt.findBackendFactory(t)},registerBackend:li,backend:ci,setPlatform:function(t,e){u().setPlatform(t,e)},getKernel:m,getGradient:g,getKernelsForBackend:y,registerKernel:b,registerGradient:x,unregisterKernel:function(t,e){const n=w(t,e);if(!d.has(n))throw new Error(`The kernel '${t}' for backend '${e}' is not registered`);d.delete(n)},unregisterGradient:function(t){if(!f.has(t))throw new Error(`The gradient '${t}' for backend is not registered`);f.delete(t)},Abs:"Abs",Acos:"Acos",Acosh:"Acosh",Add:"Add",AddN:"AddN",All:"All",Any:"Any",ArgMax:"ArgMax",ArgMin:"ArgMin",Asin:"Asin",Asinh:"Asinh",Atan:"Atan",Atanh:"Atanh",Atan2:"Atan2",AvgPool:"AvgPool",AvgPoolBackprop:"AvgPoolBackprop",AvgPool3D:"AvgPool3D",AvgPool3DBackprop:"AvgPool3DBackprop",BatchMatMul:"BatchMatMul",BatchToSpaceND:"BatchToSpaceND",BroadcastTo:"BroadcastTo",Cast:"Cast",Ceil:"Ceil",ClipByValue:"ClipByValue",Complex:"Complex",Concat:"Concat",Conv2D:"Conv2D",Conv2DBackpropFilter:"Conv2DBackpropFilter",Conv2DBackpropInput:"Conv2DBackpropInput",Conv3D:"Conv3D",Conv3DBackpropFilterV2:"Conv3DBackpropFilterV2",Conv3DBackpropInputV2:"Conv3DBackpropInputV2",Cos:"Cos",Cosh:"Cosh",Cumsum:"Cumsum",CropAndResize:"CropAndResize",DepthToSpace:"DepthToSpace",DepthwiseConv2dNative:"DepthwiseConv2dNative",DepthwiseConv2dNativeBackpropFilter:"DepthwiseConv2dNativeBackpropFilter",DepthwiseConv2dNativeBackpropInput:"DepthwiseConv2dNativeBackpropInput",Diag:"Diag",Dilation2D:"Dilation2D",Dilation2DBackpropInput:"Dilation2DBackpropInput",Dilation2DBackpropFilter:"Dilation2DBackpropFilter",Div:Vt,Elu:"Elu",EluGrad:"EluGrad",Erf:"Erf",Equal:"Equal",Exp:"Exp",Expm1:"Expm1",FFT:"FFT",Floor:"Floor",FloorDiv:"FloorDiv",Fill:"Fill",FusedBatchNorm:"FusedBatchNorm",GatherV2:"GatherV2",GatherNd:"GatherNd",Greater:"Greater",GreaterEqual:"GreaterEqual",Identity:"Identity",IFFT:"IFFT",Imag:"Imag",IsFinite:"IsFinite",IsInf:"IsInf",IsNan:"IsNan",Less:"Less",LessEqual:"LessEqual",LinSpace:"LinSpace",Log:"Log",Log1p:"Log1p",LogicalAnd:"LogicalAnd",LogicalNot:"LogicalNot",LogicalOr:"LogicalOr",LogSoftmax:"LogSoftmax",LRN:"LRN",LRNBackprop:"LRNBackprop",Max:Ut,Maximum:"Maximum",MaxPool:"MaxPool",MaxPoolBackprop:"MaxPoolBackprop",MaxPool3D:"MaxPool3D",MaxPool3DBackprop:"MaxPool3DBackprop",MaxPoolWithArgmax:"MaxPoolWithArgmax",Mean:"Mean",Min:"Min",Minimum:"Minimum",Mod:"Mod",Multiply:"Multiply",Negate:"Negate",NotEqual:"NotEqual",NonMaxSuppressionV3:"NonMaxSuppressionV3",NonMaxSuppressionV4:"NonMaxSuppressionV4",NonMaxSuppressionV5:"NonMaxSuppressionV5",OnesLike:"OnesLike",OneHot:"OneHot",PadV2:"PadV2",Pool:"Pool",Pow:"Pow",Prelu:"Prelu",Prod:"Prod",Range:"Range",Real:"Real",Reciprocal:"Reciprocal",Relu:"Relu",Reshape:"Reshape",ResizeNearestNeighbor:"ResizeNearestNeighbor",ResizeNearestNeighborGrad:"ResizeNearestNeighborGrad",ResizeBilinear:"ResizeBilinear",ResizeBilinearGrad:"ResizeBilinearGrad",Relu6:"Relu6",Reverse:"Reverse",Round:"Round",Rsqrt:"Rsqrt",ScatterNd:"ScatterNd",SelectV2:"SelectV2",Selu:"Selu",Slice:"Slice",Sin:"Sin",Sinh:"Sinh",Sign:"Sign",Sigmoid:"Sigmoid",Softplus:"Softplus",Sqrt:"Sqrt",Sum:"Sum",SpaceToBatchND:"SpaceToBatchND",SplitV:"SplitV",Softmax:"Softmax",SquaredDifference:"SquaredDifference",Square:"Square",Sub:"Sub",SparseToDense:"SparseToDense",StridedSlice:"StridedSlice",Tan:"Tan",Tanh:"Tanh",Tile:"Tile",TopK:"TopK",Transpose:"Transpose",Unpack:"Unpack",UnsortedSegmentSum:"UnsortedSegmentSum",ZerosLike:"ZerosLike",Step:"Step",FromPixels:"FromPixels",RotateWithOffset:"RotateWithOffset",_FusedMatMul:"_FusedMatMul",FusedConv2D:"FusedConv2D",FusedDepthwiseConv2D:"FusedDepthwiseConv2D"});let Zc;var Qc;(Qc=Xc||(Xc={}))[Qc.float32=0]="float32",Qc[Qc.int32=1]="int32",Qc[Qc.bool=2]="bool",Qc[Qc.string=3]="string",Qc[Qc.complex64=4]="complex64",function(t){t[t.linear=0]="linear",t[t.relu=1]="relu",t[t.relu6=2]="relu6",t[t.prelu=3]="prelu"}(Yc||(Yc={}));const th={kernelName:"_FusedMatMul",backendName:"wasm",setupFunc:function(t){Zc=t.wasm.cwrap("_FusedMatMul",null,["number","array","number","number","array","number","number","number","number","number","number","number"])},kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{a:s,b:a,bias:i,preluActivationWeights:o}=e;if("float32"!==s.dtype||"float32"!==a.dtype)throw new Error("_FusedMatMul for non non-float32 tensors not yet supported.");const{transposeA:u,transposeB:l,activation:c}=r,h=n.dataIdMap.get(s.dataId).id,p=n.dataIdMap.get(a.dataId).id;let d=0;if(null!=i){const t=n.dataIdMap.get(i.dataId);if(1!==t.shape.length)throw new Error(`_FusedMatMul only supports rank-1 bias but got rank ${t.shape.length}.`);d=t.id}const f=null==o?0:n.dataIdMap.get(o.dataId).id,m=Yc[c];if(null==m)throw new Error(c+" activation not yet supported for FusedConv2D in the wasm backend.");const g=u?s.shape[2]:s.shape[1],y=l?a.shape[1]:a.shape[2],b=s.shape[0],x=n.makeOutput([b,g,y],s.dtype),w=n.dataIdMap.get(x.dataId).id,v=new Uint8Array(new Int32Array(s.shape).buffer),k=new Uint8Array(new Int32Array(a.shape).buffer);return Zc(h,v,s.shape.length,p,k,a.shape.length,u,l,m,d,f,w),x}};function eh(t){let e;return{kernelName:t,backendName:"wasm",setupFunc:function(n){e=n.wasm.cwrap(t,null,["number","number"])},kernelFunc:function(t){const{backend:n,inputs:{x:r}}=t,s=n.dataIdMap.get(r.dataId).id,a=n.makeOutput(r.shape,r.dtype),i=n.dataIdMap.get(a.dataId).id;return 0===T(a.shape)||e(s,i),a}}}const nh=eh("Abs");function rh(t,e,n){let r;return{kernelName:t,backendName:"wasm",setupFunc:function(e){r=e.wasm.cwrap(t,null,["number","array","number","number","array","number","number","number"])},kernelFunc:function(s){const{backend:a,inputs:i}=s,{a:o,b:u}=i,l=a.dataIdMap.get(o.dataId).id,c=a.dataIdMap.get(u.dataId).id,h=null!=n?n:o.dtype,p=he(o.shape,u.shape),d=a.makeOutput(p,h);if(0===T(p))return d;const f=new Uint8Array(new Int32Array(o.shape).buffer),m=new Uint8Array(new Int32Array(u.shape).buffer),g=a.dataIdMap.get(d.dataId).id,y=()=>r(l,f,o.shape.length,c,m,u.shape.length,Xc[o.dtype],g);if(e&&"float32"===o.dtype)return y(),d;const b=le(o.shape,p),x=le(u.shape,p),w=b.every((t,e)=>t===e),v=x.every((t,e)=>t===e);if(w&&v)return y(),d;throw new Error(`Broadcasting along outer dims is not yet supported for ${o.dtype} ${t}.`)}}}const sh=rh("Add",!0);let ah;const ih={kernelName:"AddN",backendName:"wasm",setupFunc:function(t){ah=t.wasm.cwrap("AddN",null,["array","number","number","number"])},kernelFunc:function(t){const{inputs:e,backend:n}=t,r=n.makeOutput(e[0].shape,e[0].dtype);if(0===T(r.shape))return r;const s=e.map(t=>n.dataIdMap.get(t.dataId).id),a=new Uint8Array(new Int32Array(s).buffer),i=n.dataIdMap.get(r.dataId).id;return ah(a,s.length,Xc[r.dtype],i),r}};function oh(t){const{inputs:{x:e},backend:n}=t,r=n.makeOutput(e.shape,e.dtype),s=n.typedArrayFromHeap(e);return n.typedArrayFromHeap(r).set(s),r}const uh={kernelName:"Identity",backendName:"wasm",kernelFunc:oh};let lh;function ch(t){const{inputs:e,backend:n,attrs:r}=t,[s,a]=function(t,e){const n=[],r=[];for(let s=0;s<t.length;++s)1!==t[s]&&n.push(t[s]),1!==t[e[s]]&&r.push(e[s]);for(let t=0;t<r.length;++t){let e=-1;for(let n=0;n<r.length;++n)r[n]>=t&&(-1===e||r[e]>r[n])&&(e=n);r[e]=t}return[n,r]}(e.x.shape,r.perm);let i=!0;for(let t=0;t<a.length;t++)a[t]!==t&&(i=!1);const o=function(t,e){const n=new Array(t.length);for(let r=0;r<n.length;r++)n[r]=t[e[r]];return n}(e.x.shape,r.perm),u={dataId:e.x.dataId,shape:s,dtype:e.x.dtype};if(i){const t=oh({inputs:e,backend:n});return t.shape=o,t}const l=n.makeOutput(o,u.dtype),c=n.dataIdMap.get(u.dataId).id,h=n.dataIdMap.get(l.dataId).id,p=new Uint8Array(new Int32Array(a).buffer),d=new Uint8Array(new Int32Array(u.shape).buffer);return lh(c,d,u.shape.length,Xc[u.dtype],h,p,a.length),l}const hh={kernelName:"Transpose",backendName:"wasm",kernelFunc:ch,setupFunc:function(t){lh=t.wasm.cwrap("Transpose",null,["number","array","number","number","number","array","number"])}};function ph(t,e,n){const r=t.shape,s=t.shape.length,a=L(e,r);let i=a;const o=Ce(i,s);let u=null,l=!1;if(null!=o){const e=new Array(s);for(let t=0;t<e.length;t++)e[t]=r[o[t]];i=Ee(i.length,s),u=ch({inputs:{x:t},attrs:{perm:o},backend:n});const a=n.dataIdMap.get(t.dataId).id;n.dataIdMap.get(u.dataId).id!==a&&(l=!0)}return{transposed:u,originalAxes:a,axes:i,inputWasTransposed:l}}let dh;const fh={kernelName:"ArgMax",backendName:"wasm",kernelFunc:function(t){const{backend:e,inputs:n,attrs:r}=t,{axis:s}=r,{x:a}=n,i=e.dataIdMap.get(a.dataId).id;let o=i,u=a;const{transposed:l,axes:c,inputWasTransposed:h}=ph(a,s,e);if(h){const t=e.dataIdMap.get(l.dataId).id;t!==i&&(u=l,o=t)}const p=u.shape.slice(0,-1),d=e.makeOutput(p,"int32"),f=e.dataIdMap.get(d.dataId).id,m=T(d.shape),g=u.shape[c[0]];return dh(o,Xc[u.dtype],m,g,f),h&&e.disposeData(l.dataId),d},setupFunc:function(t){dh=t.wasm.cwrap("ArgMax",null,["number","number","number","number","number"])}};let mh;const gh={kernelName:"AvgPool",backendName:"wasm",setupFunc:function(t){mh=t.wasm.cwrap("AvgPool",null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(t){const{inputs:e,attrs:n,backend:r}=t,s=e.x,a=r.dataIdMap.get(s.dataId).id,{filterSize:i,strides:o,pad:u,dimRoundingMode:l}=n,c=Fe(s.shape,i,o,1,u,l),h=c.filterHeight,p=c.filterWidth,d=c.padInfo.top,f=c.padInfo.right,m=c.padInfo.bottom,g=c.padInfo.left,y=c.strideHeight,b=c.strideWidth,x=c.inChannels;if("channelsLast"!==c.dataFormat)throw new Error("wasm backend does not support dataFormat:'"+c.dataFormat+"'. Please use 'channelsLast'.");if(1!==c.dilationWidth||1!==c.dilationHeight)throw new Error(`was backend only supports average pooling with dilation = [1, 1], got [${c.dilationHeight}, ${c.dilationWidth}].`);const w=r.makeOutput(c.outShape,"float32"),v=r.dataIdMap.get(w.dataId).id;return mh(a,s.shape[0],s.shape[1],s.shape[2],h,p,d,f,m,g,y,b,x,v),w}};let yh;const bh={kernelName:"BatchMatMul",backendName:"wasm",setupFunc:function(t){yh=t.wasm.cwrap("BatchMatMul",null,["number","array","number","number","array","number","number","number","number"])},kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{a:s,b:a}=e;if("float32"!==s.dtype||"float32"!==a.dtype)throw new Error("BatchMatMul for non non-float32 tensors not yet supported.");const{transposeA:i,transposeB:o}=r,u=n.dataIdMap.get(s.dataId).id,l=n.dataIdMap.get(a.dataId).id,c=i?s.shape[2]:s.shape[1],h=o?a.shape[1]:a.shape[2],p=s.shape[0],d=n.makeOutput([p,c,h],s.dtype),f=n.dataIdMap.get(d.dataId).id,m=new Uint8Array(new Int32Array(s.shape).buffer),g=new Uint8Array(new Int32Array(a.shape).buffer);return yh(u,m,s.shape.length,l,g,a.shape.length,i,o,f),d}};function xh(t){const{inputs:{x:e},attrs:{dtype:n},backend:r}=t,s=r.makeOutput(e.shape,n),a=r.typedArrayFromHeap(e);return r.typedArrayFromHeap(s).set(a),s}const wh={kernelName:"Cast",backendName:"wasm",kernelFunc:xh};let vh;const kh={kernelName:"ClipByValue",backendName:"wasm",setupFunc:function(t){vh=t.wasm.cwrap("ClipByValue",null,["number","number","number","number"])},kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{clipValueMin:a,clipValueMax:i}=r,o=n.dataIdMap.get(s.dataId).id,u=n.makeOutput(s.shape,"float32"),l=n.dataIdMap.get(u.dataId).id;return vh(o,a,i,l),u}},Nh={kernelName:"Concat",backendName:"wasm",kernelFunc:function(t){const{inputs:e,backend:n}=t,r=L(t.attrs.axis,e[0].shape)[0],s=ys(e.map(t=>t.shape),r),a=n.makeOutput(s,e[0].dtype),i=T(e[0].shape.slice(0,r));let o=0;const u=e.map(t=>{const e=T(t.shape.slice(r));return o+=e,e}),l=e.map(t=>n.typedArrayFromHeap(t)),c=n.typedArrayFromHeap(a);for(let t=0;t<i;t++){let e=t*o;for(let n=0;n<l.length;n++){const r=u[n],s=t*r,a=l[n].subarray(s,s+r);c.set(a,e),e+=r}}return a}};let Ih;const Sh={kernelName:"Conv2D",backendName:"wasm",setupFunc:function(t){Ih=t.wasm.cwrap("Conv2D",null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(t){const{inputs:e,attrs:n,backend:r}=t,{x:s,filter:a}=e,i=r.dataIdMap.get(s.dataId).id,o=r.dataIdMap.get(a.dataId).id,{strides:u,dilations:l,pad:c,dimRoundingMode:h,dataFormat:p}=n,d=He(p),f=Me(s.shape,a.shape,u,l,c,h,!1,d),m=f.filterHeight,g=f.filterWidth,y=f.padInfo.top,b=f.padInfo.right,x=f.padInfo.bottom,w=f.padInfo.left,v=f.dilationHeight,k=f.dilationWidth,N=f.strideHeight,I=f.strideWidth,S=f.inChannels,C=f.outChannels,A="SAME"===f.padInfo.type?1:0;if("channelsLast"!==f.dataFormat)throw new Error("wasm backend Conv2D does not support dataFormat:'"+f.dataFormat+"'. Please use 'channelsLast'.");const E=r.makeOutput(f.outShape,"float32"),T=r.dataIdMap.get(E.dataId).id;return Ih(i,s.shape[0],s.shape[1],s.shape[2],o,m,g,y,b,x,w,A,v,k,N,I,S,C,T),E}};let Ch;const Ah={kernelName:"Conv2DBackpropInput",backendName:"wasm",setupFunc:function(t){Ch=t.wasm.cwrap("Conv2DBackpropInput",null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(t){const{backend:e,inputs:n,attrs:r}=t,{dy:s,filter:a}=n,{strides:i,pad:o,dataFormat:u,dimRoundingMode:l,inputShape:c}=r,h=He(u),p=Me(c,a.shape,i,1,o,l,!1,h),{batchSize:d,filterHeight:f,filterWidth:m,inChannels:g,inHeight:y,inWidth:b,outChannels:x,outHeight:w,outWidth:v,strideHeight:k,strideWidth:N}=p,I=f-1-p.padInfo.top,S=m-1-p.padInfo.left,C="channelsLast"===p.dataFormat,A=Q(p.inShape),E=Q(s.shape),[T,R,$]=Q(a.shape),_=A[0],D=C?A[1]:A[2],F=C?A[2]:1,O=C?1:A[1],M=E[0],L=C?E[1]:E[2],z=C?E[2]:1,B=C?1:E[1],P=e.makeOutput(p.inShape,"float32"),W=e.dataIdMap.get(P.dataId).id,V=e.dataIdMap.get(s.dataId).id,U=e.dataIdMap.get(a.dataId).id;return Ch(V,U,d,f,m,y,b,g,w,v,x,k,N,I,S,T,R,$,_,D,F,O,M,L,z,B,W),P}},Eh=eh("Cos");var Th;let Rh,$h,_h,Dh,Fh,Oh,Mh,Lh,zh,Bh,Ph,Wh,Vh,Uh,Gh,Hh,qh,jh,Kh,Xh,Yh,Jh,Zh,Qh,tp;function ep(t,e){const n=new Int32Array(t.wasm.HEAPU8.buffer,e,4),r=n[0],s=n[1],a=n[2],i=n[3];return t.wasm._free(e),{pSelectedIndices:r,selectedSize:s,pSelectedScores:a,pValidOutputs:i}}function np(t){const{inputs:e,attrs:n}=t,{x:r}=e,{shape:s}=n;return{dataId:r.dataId,shape:s,dtype:r.dtype}}function rp(t){const{inputs:{x:e},attrs:{begin:n,size:r},backend:s}=t,[a,i]=us(e,n,r),o=is(e.shape,a,i),u=s.typedArrayFromHeap(e),l=s.makeOutput(i,e.dtype),c=s.typedArrayFromHeap(l),h=Q(e.shape);if(o){const t=os(a,h);return c.set(u.subarray(t,t+T(i))),l}const p=e.shape.length;return 2===p?function(t,e,n,r,s){let a=0;const i=r[0],o=r[1],u=i+s[0];for(let r=i;r<u;r++){const i=r*e+o;n.set(t.subarray(i,i+s[1]),a),a+=s[1]}}(u,h[0],c,a,i):3===p?function(t,e,n,r,s,a){let i=0;const o=s[0],u=s[1],l=s[2],c=o+a[0],h=u+a[1];for(let s=o;s<c;s++)for(let o=u;o<h;o++){const u=s*e+o*n+l;r.set(t.subarray(u,u+a[2]),i),i+=a[2]}}(u,h[0],h[1],c,a,i):4===p?function(t,e,n,r,s,a,i){let o=0;const u=a[0],l=a[1],c=a[2],h=u+i[0],p=l+i[1],d=c+i[2],f=a[3];for(let a=u;a<h;a++)for(let u=l;u<p;u++)for(let l=c;l<d;l++){const c=a*e+u*n+l*r+f;s.set(t.subarray(c,c+i[3]),o),o+=i[3]}}(u,h[0],h[1],h[2],c,a,i):function(t,e,n,r,s){const a=Fi(s,e.dtype,n),i=Fi(e.shape,e.dtype,t);for(let t=0;t<a.size;++t){const e=a.indexToLoc(t).map((t,e)=>t+r[e]);n[t]=i.get(...e)}}(u,e,c,a,i),l}!function(t){t[t.bilinear=0]="bilinear",t[t.nearest=1]="nearest"}(Th||(Th={}));const sp=[nh,sh,ih,fh,gh,bh,wh,kh,Nh,Sh,Ah,Eh,{kernelName:"CropAndResize",backendName:"wasm",setupFunc:function(t){Rh=t.wasm.cwrap("CropAndResize",null,["number","number","number","number","array","number","number","number","number","number"])},kernelFunc:function(t){const{backend:e,inputs:n,attrs:r}=t,{method:s,extrapolationValue:a,cropSize:i}=r,{image:o,boxes:u,boxInd:l}=n,c=u.shape[0],[h,p]=i,d=[c,h,p,o.shape[3]];let f,m=e.dataIdMap.get(o.dataId);"float32"!==o.dtype&&(f=xh({backend:e,inputs:{x:o},attrs:{dtype:"float32"}}),m=e.dataIdMap.get(f.dataId));const g=m.id,y=e.dataIdMap.get(u.dataId).id,b=e.dataIdMap.get(l.dataId).id,x=e.makeOutput(d,"float32"),w=e.dataIdMap.get(x.dataId).id,v=new Uint8Array(new Int32Array(o.shape).buffer);return Rh(g,y,b,c,v,h,p,Th[s],a,w),null!=f&&e.disposeData(f.dataId),x}},{kernelName:"DepthwiseConv2dNative",backendName:"wasm",setupFunc:function(t){$h=t.wasm.cwrap("DepthwiseConv2dNative",null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(t){const{inputs:e,attrs:n,backend:r}=t,{x:s,filter:a}=e,i=r.dataIdMap.get(s.dataId).id,o=r.dataIdMap.get(a.dataId).id,{strides:u,dilations:l,pad:c,dimRoundingMode:h}=n,p=null==l?[1,1]:l,d=Me(s.shape,a.shape,u,p,c,h,!0),f=d.filterHeight,m=d.filterWidth,g=d.padInfo.top,y=d.padInfo.right,b=d.padInfo.bottom,x=d.padInfo.left,w=d.dilationHeight,v=d.dilationWidth,k=d.strideHeight,N=d.strideWidth,I=d.inChannels,S=d.outChannels,C="SAME"===d.padInfo.type?1:0;if("channelsLast"!==d.dataFormat)throw new Error("wasm backend DepthwiseConv2dNative does not support dataFormat:'"+d.dataFormat+"'. Please use 'channelsLast'.");const A=r.makeOutput(d.outShape,"float32"),E=r.dataIdMap.get(A.dataId).id;return $h(i,s.shape[0],s.shape[1],s.shape[2],o,f,m,g,y,b,x,C,w,v,k,N,I,S,E),A}},rh(Vt,!0),rh("Equal",!1,"bool"),eh("Exp"),{kernelName:"Fill",backendName:"wasm",kernelFunc:function(t){const{attrs:{shape:e,value:n,dtype:r},backend:s}=t,a=s.makeOutput(e,r);return s.typedArrayFromHeap(a).fill(n),a}},rh("FloorDiv",!1),th,{kernelName:"FusedBatchNorm",backendName:"wasm",setupFunc:function(t){_h=t.wasm.cwrap("FusedBatchNorm",null,["number","number","number","number","number","number","number"])},kernelFunc:function(t){const{backend:e,inputs:n,attrs:r}=t,{varianceEpsilon:s}=r,{x:a,mean:i,variance:o,offset:u,scale:l}=n,c=e.dataIdMap.get(a.dataId).id,h=e.dataIdMap.get(i.dataId).id,p=e.dataIdMap.get(o.dataId).id,d=null!=u?e.dataIdMap.get(u.dataId).id:0,f=null!=l?e.dataIdMap.get(l.dataId).id:0,m=e.makeOutput(a.shape,a.dtype);if(0===T(a.shape))return m;const g=e.dataIdMap.get(m.dataId).id;return _h(c,h,p,d,f,s,g),m}},{kernelName:"FusedConv2D",backendName:"wasm",setupFunc:function(t){Dh=t.wasm.cwrap("FusedConv2D",null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(t){const{inputs:e,attrs:n,backend:r}=t,{x:s,filter:a,bias:i,preluActivationWeights:o}=e,{strides:u,pad:l,dilations:c,dataFormat:h,dimRoundingMode:p,activation:d}=n,f=Me(s.shape,a.shape,u,c,l,p),m=Yc[d];if(null==m)throw new Error(d+" activation not yet supported for FusedConv2D in the wasm backend.");const g=r.dataIdMap.get(s.dataId).id,y=r.dataIdMap.get(a.dataId).id,b=f.outChannels;let x=0;if(null!=i){const t=r.dataIdMap.get(i.dataId);if(1!==t.shape.length)throw new Error(`FusedConv2D only supports rank-1 bias but got rank ${t.shape.length}.`);if(t.shape[0]!==b)throw new Error(`FusedConv2D bias shape (${t.shape}) does not match the number of output channels (${b})`);x=t.id}const w=f.filterHeight,v=f.filterWidth,k=f.padInfo.top,N=f.padInfo.right,I=f.padInfo.bottom,S=f.padInfo.left,C=f.dilationHeight,A=f.dilationWidth,E=f.strideHeight,T=f.strideWidth,R=f.inChannels,$="SAME"===f.padInfo.type?1:0,_=f.batchSize,D=f.inHeight,F=f.inWidth;if("NHWC"!==h)throw new Error("wasm backend FusedConv2D does not support dataFormat:'"+h+"'. Please use 'NHWC'.");const O=r.makeOutput(f.outShape,"float32"),M=r.dataIdMap.get(O.dataId).id,L=null==o?0:r.dataIdMap.get(o.dataId).id;return Dh(g,_,D,F,y,w,v,x,k,N,I,S,$,C,A,E,T,R,b,m,L,M),O}},{kernelName:"FusedDepthwiseConv2D",backendName:"wasm",setupFunc:function(t){Fh=t.wasm.cwrap("FusedDepthwiseConv2D",null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(t){const{inputs:e,attrs:n,backend:r}=t,{x:s,filter:a,bias:i,preluActivationWeights:o}=e,{strides:u,pad:l,dilations:c,dataFormat:h,dimRoundingMode:p,activation:d}=n,f=Me(s.shape,a.shape,u,c,l,p,!0),m=Yc[d];if(null==m)throw new Error(d+" activation not yet supported for FusedDepthwiseConv2D in the wasm backend.");const g=r.dataIdMap.get(s.dataId).id,y=r.dataIdMap.get(a.dataId).id,b=f.outChannels;let x=0;if(null!=i){const t=r.dataIdMap.get(i.dataId);if(1!==t.shape.length)throw new Error(`FusedDepthwiseConv2D only supports rank-1 bias but got rank ${t.shape.length}.`);if(t.shape[0]!==b)throw new Error(`FusedDepthwiseConv2D bias shape (${t.shape}) does not match the number of output channels (${b})`);x=t.id}const w=f.filterHeight,v=f.filterWidth,k=f.padInfo.top,N=f.padInfo.right,I=f.padInfo.bottom,S=f.padInfo.left,C=f.dilationHeight,A=f.dilationWidth,E=f.strideHeight,T=f.strideWidth,R=f.inChannels,$="SAME"===f.padInfo.type?1:0,_=f.batchSize,D=f.inHeight,F=f.inWidth;if("NHWC"!==h)throw new Error("wasm backend FusedDepthwiseConv2D does not support dataFormat:'"+h+"'. Please use 'NHWC'.");const O=r.makeOutput(f.outShape,"float32"),M=r.dataIdMap.get(O.dataId).id,L=null==o?0:r.dataIdMap.get(o.dataId).id;return Fh(g,_,D,F,y,w,v,x,k,N,I,S,$,C,A,E,T,R,b,m,L,M),O}},{kernelName:"GatherNd",backendName:"wasm",setupFunc:function(t){Oh=t.wasm.cwrap("GatherNd",null,["number","number","number","number","number","number","array","number"])},kernelFunc:function(t){const{backend:e,inputs:n}=t,{params:r,indices:s}=n,[a,i,o,u]=Ua(r,s),l=e.makeOutput(a,r.dtype);if(0===i)return l;const c=s.shape,h=c[c.length-1],p=e.dataIdMap.get(r.dataId).id,d=e.dataIdMap.get(s.dataId).id,f=new Uint8Array(new Int32Array(u).buffer),m=e.dataIdMap.get(l.dataId).id;return Oh(p,Xc[r.dtype],d,i,h,o,f,m),l}},{kernelName:"GatherV2",backendName:"wasm",setupFunc:function(t){Mh=t.wasm.cwrap("Gather",null,["number","number","array","number","number","number","array","number"])},kernelFunc:function(t){const{backend:e,inputs:n,attrs:r}=t,{x:s,indices:a}=n,{axis:i}=r,o=s.shape.slice();o[i]=T(a.shape);const u=s.shape.length-1,l=e.makeOutput(o,s.dtype);if(0===T(s.shape))return l;const c=e.dataIdMap.get(s.dataId).id,h=e.dataIdMap.get(a.dataId).id,p=e.dataIdMap.get(l.dataId).id,d=new Uint8Array(new Int32Array(Q(s.shape)).buffer),f=new Uint8Array(new Int32Array(Q(o)).buffer);Mh(c,Xc[s.dtype],d,u,h,i,f,p);const m=Ls(s,a,L(i,s.shape)[0]);return l.shape=m.outputShape,l}},rh("Greater",!1,"bool"),rh("GreaterEqual",!1,"bool"),uh,rh("Less",!1,"bool"),rh("LessEqual",!1,"bool"),eh("Log"),rh("LogicalAnd",!1,"bool"),{kernelName:Ut,backendName:"wasm",setupFunc:function(t){Lh=t.wasm.cwrap(Ut,null,["number, number, number"])},kernelFunc:function(t){const{backend:e,inputs:n,attrs:r}=t,{reductionIndices:s,keepDims:a}=r,{x:i}=n;let o=e.dataIdMap.get(i.dataId).id,u=i;const{transposed:l,axes:c,originalAxes:h,inputWasTransposed:p}=ph(i,s,e);p&&(u=l,o=e.dataIdMap.get(l.dataId).id);Se("max",c,u.shape.length);const[d,f]=Ne(u.shape,c),m=T(f),g=e.makeOutput(d,i.dtype);if(0!==T(u.shape)){const t=e.dataIdMap.get(g.dataId).id;Lh(o,m,t)}if(p&&e.disposeData(l.dataId),a){const t=Ie(g.shape,h);g.shape=t}return g}},rh("Maximum",!1),{kernelName:"MaxPool",backendName:"wasm",setupFunc:function(t){zh=t.wasm.cwrap("MaxPool",null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])},kernelFunc:function(t){const{inputs:e,attrs:n,backend:r}=t,s=e.x,a=r.dataIdMap.get(s.dataId).id,{filterSize:i,strides:o,pad:u,dimRoundingMode:l}=n,c=Fe(s.shape,i,o,1,u,l),h=c.filterHeight,p=c.filterWidth,d=c.padInfo.top,f=c.padInfo.right,m=c.padInfo.bottom,g=c.padInfo.left,y=c.dilationHeight,b=c.dilationWidth,x=c.strideHeight,w=c.strideWidth,v=c.inChannels,k=c.outChannels;if("channelsLast"!==c.dataFormat)throw new Error("wasm backend does not support dataFormat:'"+c.dataFormat+"'. Please use 'channelsLast'.");const N=r.makeOutput(c.outShape,"float32"),I=r.dataIdMap.get(N.dataId).id;return zh(a,s.shape[0],s.shape[1],s.shape[2],h,p,d,f,m,g,y,b,x,w,v,k,I),N}},{kernelName:"Min",backendName:"wasm",setupFunc:function(t){Bh=t.wasm.cwrap("Min",null,["number, number, number"])},kernelFunc:function(t){const{backend:e,inputs:n,attrs:r}=t,{axis:s,keepDims:a}=r,{x:i}=n,o=e.dataIdMap.get(i.dataId).id;let u=o,l=i;const{transposed:c,axes:h,originalAxes:p,inputWasTransposed:d}=ph(i,s,e);if(d){const t=e.dataIdMap.get(c.dataId).id;t!==o&&(l=c,u=t)}Se("min",h,l.shape.length);const[f,m]=Ne(l.shape,h),g=T(m),y=e.makeOutput(f,l.dtype);if(0!==T(l.shape)){const t=e.dataIdMap.get(y.dataId).id;Bh(u,g,t)}if(d&&e.disposeData(c.dataId),a){const t=Ie(y.shape,p);y.shape=t}return y}},rh("Minimum",!1),rh("Multiply",!0),eh("Negate"),{kernelName:"NonMaxSuppressionV3",backendName:"wasm",setupFunc:function(t){Ph=t.wasm.cwrap("NonMaxSuppressionV3","number",["number","number","number","number","number"])},kernelFunc:function(t){const{backend:e,inputs:n,attrs:r}=t,{iouThreshold:s,maxOutputSize:a,scoreThreshold:i}=r,{boxes:o,scores:u}=n,l=e.dataIdMap.get(o.dataId).id,c=e.dataIdMap.get(u.dataId).id,h=Ph(l,c,a,s,i),{pSelectedIndices:p,selectedSize:d,pSelectedScores:f,pValidOutputs:m}=ep(e,h);return e.wasm._free(f),e.wasm._free(m),e.makeOutput([d],"int32",p)}},{kernelName:"NonMaxSuppressionV4",backendName:"wasm",setupFunc:function(t){Wh=t.wasm.cwrap("NonMaxSuppressionV4","number",["number","number","number","number","number","bool"])},kernelFunc:function(t){const{backend:e,inputs:n,attrs:r}=t,{iouThreshold:s,maxOutputSize:a,scoreThreshold:i,padToMaxOutputSize:o}=r,{boxes:u,scores:l}=n,c=e.dataIdMap.get(u.dataId).id,h=e.dataIdMap.get(l.dataId).id,p=Wh(c,h,a,s,i,o),{pSelectedIndices:d,selectedSize:f,pSelectedScores:m,pValidOutputs:g}=ep(e,p);return e.wasm._free(m),[e.makeOutput([f],"int32",d),e.makeOutput([],"int32",g)]}},{kernelName:"NonMaxSuppressionV5",backendName:"wasm",setupFunc:function(t){Vh=t.wasm.cwrap("NonMaxSuppressionV5","number",["number","number","number","number","number","number"])},kernelFunc:function(t){const{backend:e,inputs:n,attrs:r}=t,{iouThreshold:s,maxOutputSize:a,scoreThreshold:i,softNmsSigma:o}=r,{boxes:u,scores:l}=n,c=e.dataIdMap.get(u.dataId).id,h=e.dataIdMap.get(l.dataId).id,p=Vh(c,h,a,s,i,o),{pSelectedIndices:d,selectedSize:f,pSelectedScores:m,pValidOutputs:g}=ep(e,p);return e.wasm._free(g),[e.makeOutput([f],"int32",d),e.makeOutput([f],"float32",m)]}},rh("NotEqual",!1,"bool"),{kernelName:"OneHot",backendName:"wasm",setupFunc:function(t){Uh=t.wasm.cwrap("OneHot",null,["number","number","number","number","number"])},kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{indices:s}=e,{depth:a,onValue:i,offValue:o}=r,u=n.makeOutput([...s.shape,a],"int32"),l=n.dataIdMap.get(u.dataId).id,c=n.dataIdMap.get(s.dataId).id;return Uh(c,a,i,o,l),u}},{kernelName:"OnesLike",backendName:"wasm",kernelFunc:function(t){const{inputs:{x:e},backend:n}=t,r=n.makeOutput(e.shape,e.dtype);return n.typedArrayFromHeap(r).fill(1),r}},{kernelName:"PadV2",backendName:"wasm",kernelFunc:function(t){const{inputs:{x:e},backend:n,attrs:{paddings:r,constantValue:s}}=t,a=r.map((t,n)=>t[0]+e.shape[n]+t[1]),i=n.dataIdMap.get(e.dataId).id,o=n.makeOutput(a,e.dtype),u=n.dataIdMap.get(o.dataId).id,l=new Uint8Array(new Int32Array(e.shape).buffer),c=r.map(t=>t[0]),h=r.map(t=>t[1]),p=new Uint8Array(new Int32Array(c).buffer),d=new Uint8Array(new Int32Array(h).buffer);return Gh(i,l,e.shape.length,Xc[e.dtype],p,d,s,u),o},setupFunc:function(t){Gh=t.wasm.cwrap("PadV2",null,["number","array","number","number","array","array","number","number"])}},rh("Pow",!1),{kernelName:"Prelu",backendName:"wasm",setupFunc:function(t){Hh=t.wasm.cwrap("Prelu",null,["number","number","number"])},kernelFunc:function(t){const{inputs:e,backend:n}=t,{x:r,alpha:s}=e,a=n.dataIdMap.get(r.dataId).id,i=n.dataIdMap.get(s.dataId).id,o=n.makeOutput(r.shape,"float32"),u=n.dataIdMap.get(o.dataId).id;return Hh(a,i,u),o}},eh("Relu"),eh("Relu6"),{kernelName:"Reshape",backendName:"wasm",kernelFunc:np},{kernelName:"ResizeBilinear",backendName:"wasm",setupFunc:function(t){qh=t.wasm.cwrap("ResizeBilinear",null,["number","number","number","number","number","number","number","number","number"])},kernelFunc:function(t){const{backend:e,inputs:n,attrs:r}=t,{images:s}=n,{alignCorners:a,size:i}=r,[o,u]=i,[l,c,h,p]=s.shape,d=[l,o,u,p];let f,m=e.dataIdMap.get(s.dataId);"float32"!==m.dtype&&(f=xh({backend:e,inputs:{x:s},attrs:{dtype:"float32"}}),m=e.dataIdMap.get(f.dataId));const g=m.id,y=e.makeOutput(d,"float32");if(0===T(s.shape))return y;const b=e.dataIdMap.get(y.dataId).id;return qh(g,l,c,h,p,o,u,a?1:0,b),null!=f&&e.disposeData(f.dataId),y}},{kernelName:"Reverse",backendName:"wasm",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{dims:a}=r,i=L(a,s.shape);if(0===s.shape.length)return oh({inputs:{x:s},backend:n});const o=n.makeOutput(s.shape,s.dtype),u=n.dataIdMap.get(s.dataId).id,l=n.dataIdMap.get(o.dataId).id,c=new Uint8Array(new Int32Array(i).buffer),h=new Uint8Array(new Int32Array(s.shape).buffer);return jh(u,c,i.length,h,s.shape.length,l),np({inputs:{x:o},attrs:{shape:s.shape},backend:n})},setupFunc:function(t){jh=t.wasm.cwrap("Reverse",null,["number","array","number","array","number","number"])}},{kernelName:"RotateWithOffset",backendName:"wasm",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{image:s}=e,{radians:a,fillValue:i,center:o}=r,u=n.makeOutput(s.shape,s.dtype),l=n.dataIdMap.get(s.dataId).id,c=n.dataIdMap.get(u.dataId).id,[h,p,d,f]=s.shape,[m,g]=Nc(o,p,d),y="number"==typeof i?[i,i,i,0===i?0:255]:[...i,255],b=new Uint8Array(new Int32Array(y).buffer);return Kh(l,h,p,d,f,a,m,g,b,y.length,c),u},setupFunc:function(t){Kh=t.wasm.cwrap("RotateWithOffset",null,["number","number","number","number","number","number","number","number","array","number","number"])}},eh("Rsqrt"),{kernelName:"ScatterNd",backendName:"wasm",setupFunc:function(t){Xh=t.wasm.cwrap("ScatterNd",null,["number","number","number","number","number","number","array","number","number"])},kernelFunc:function(t){const{backend:e,inputs:n,attrs:r}=t,{indices:s,updates:a}=n,{shape:i}=r,o=e.makeOutput(i,a.dtype);if(0===T(i))return o;const{sliceRank:u,numUpdates:l,sliceSize:c,strides:h,outputSize:p}=ja(0,s,i),d=e.dataIdMap.get(s.dataId).id,f=e.dataIdMap.get(a.dataId).id,m=new Uint8Array(new Int32Array(h).buffer),g=e.dataIdMap.get(o.dataId).id;return Xh(d,f,Xc[a.dtype],u,l,c,m,p,g),o}},{kernelName:"SelectV2",backendName:"wasm",kernelFunc:function(t){const{inputs:e,backend:n}=t,{condition:r,t:s,e:a}=e,i=n.dataIdMap.get(r.dataId).id,o=n.dataIdMap.get(s.dataId).id,u=n.dataIdMap.get(a.dataId).id,l=n.makeOutput(s.shape,s.dtype),c=n.dataIdMap.get(l.dataId).id,h=r.shape.length,p=s.shape.length,d=0===h||h>1||1===p?1:T(s.shape.slice(1));return Yh(i,o,u,d,c),l},setupFunc:function(t){Yh=t.wasm.cwrap("SelectV2",null,["number","number","number","number","number"])}},{kernelName:"Sigmoid",backendName:"wasm",setupFunc:function(t){Jh=t.wasm.cwrap("Sigmoid",null,["number","number"])},kernelFunc:function(t){const{backend:e,inputs:{x:n}}=t,r=e.dataIdMap.get(n.dataId).id,s=e.makeOutput(n.shape,n.dtype),a=e.dataIdMap.get(s.dataId).id;return 0===T(s.shape)||Jh(r,a),s}},eh("Sin"),{kernelName:"Slice",backendName:"wasm",kernelFunc:rp},{kernelName:"Softmax",backendName:"wasm",setupFunc:function(t){Zh=t.wasm.cwrap("Softmax",null,["number","number","number","number"])},kernelFunc:function(t){const{backend:e,inputs:{logits:n},attrs:{dim:r}}=t,s=e.dataIdMap.get(n.dataId).id,a=e.makeOutput(n.shape,n.dtype),i=e.dataIdMap.get(a.dataId).id,o=n.shape[r],u=T(n.shape)/o;return 0===T(a.shape)||Zh(s,i,o,u),a}},{kernelName:"SplitV",backendName:"wasm",kernelFunc:function(t){const{inputs:e,attrs:n,backend:r}=t,{x:s}=e,{numOrSizeSplits:a,axis:i}=n,o=L(i,s.shape)[0],u=ln(s,a,i),l=new Array(s.shape.length).fill(0),c=s.shape.slice();return u.map(t=>{const e=[...c];e[o]=t;const n=rp({inputs:{x:s},attrs:{begin:l,size:e},backend:r});return l[o]+=t,n})}},eh("Sqrt"),eh("Square"),rh("Sub",!0),{kernelName:"Sum",backendName:"wasm",setupFunc:function(t){Qh=t.wasm.cwrap("Sum",null,["number, number, number"])},kernelFunc:function(t){const{backend:e,inputs:n,attrs:r}=t,{axis:s,keepDims:a}=r,{x:i}=n,o=e.dataIdMap.get(i.dataId).id;let u=o,l=i;const{transposed:c,axes:h,originalAxes:p,inputWasTransposed:d}=ph(i,s,e);let f=h;if(d){const t=e.dataIdMap.get(c.dataId).id;t!==o&&(l=c,u=t,f=Ee(f.length,l.shape.length))}Se("sum",f,l.shape.length);const[m,g]=Ne(l.shape,f),y=T(g),b=e.makeOutput(m,l.dtype);if(0!==T(l.shape)){const t=e.dataIdMap.get(b.dataId).id;Qh(u,y,t)}if(d&&e.disposeData(c.dataId),a){const t=Ie(b.shape,p);b.shape=t}return b}},eh("Tanh"),{kernelName:"Tile",backendName:"wasm",setupFunc:function(t){tp=t.wasm.cwrap("Tile",null,["number","array","number","array","number","number"])},kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,a=n.dataIdMap.get(s.dataId).id,{reps:i}=r,o=new Array(s.shape.length);for(let t=0;t<o.length;t++)o[t]=s.shape[t]*i[t];const u=new Uint8Array(new Int32Array(s.shape).buffer),l=new Uint8Array(new Int32Array(o).buffer),c=n.makeOutput(o,s.dtype),h=n.dataIdMap.get(c.dataId).id;return tp(a,u,s.shape.length,l,o.length,Xc[c.dtype],h),c}},hh,{kernelName:"Unpack",backendName:"wasm",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{value:s}=e,{axis:a}=r,i=s.shape[a],o=s.shape.length,u=new Array(o-1);let l=0;for(let t=0;t<o;t++)t!==a&&(u[l++]=s.shape[t]);const c=new Array(i),h=new Array(o).fill(0),p=s.shape.slice();p[a]=1;for(let t=0;t<c.length;t++)h[a]=t,c[t]=rp({inputs:{x:s},attrs:{begin:h,size:p},backend:n});return c.map(({dataId:t,dtype:e})=>({dataId:t,dtype:e,shape:u}))}},{kernelName:"ZerosLike",backendName:"wasm",kernelFunc:function(t){const{inputs:{x:e},backend:n}=t,r=n.makeOutput(e.shape,e.dtype);return n.typedArrayFromHeap(r).fill(0),r}}];for(const t of sp)b(t);function ap(t,e){return t(e={exports:{}},e.exports),e.exports}u().registerFlag("WASM_HAS_SIMD_SUPPORT",async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,9,1,7,0,65,0,253,15,26,11])));var ip=ap((function(t,e){var n,r=(n="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0,"undefined"!=typeof __filename&&(n=n||__filename),function(t){var e,r=void 0!==(t=t||{})?t:{},s={};for(e in r)r.hasOwnProperty(e)&&(s[e]=r[e]);var o,u,l,c;o="object"==typeof window,u="function"==typeof importScripts,l="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node,c=!o&&!l&&!u;var h,p,d,f,m="";l?(m=u?a.default.dirname(m)+"/":__dirname+"/",h=function(t,e){return d||(d=i.default),f||(f=a.default),t=f.normalize(t),d.readFileSync(t,e?null:"utf8")},p=function(t){var e=h(t,!0);return e.buffer||(e=new Uint8Array(e)),k(e.buffer),e},process.argv.length>1&&process.argv[1].replace(/\\/g,"/"),process.argv.slice(2),process.on("uncaughtException",(function(t){if(!(t instanceof ot))throw t})),process.on("unhandledRejection",q),r.inspect=function(){return"[Emscripten Module object]"}):c?("undefined"!=typeof read&&(h=function(t){return read(t)}),p=function(t){var e;return"function"==typeof readbuffer?new Uint8Array(readbuffer(t)):(k("object"==typeof(e=read(t,"binary"))),e)},"undefined"!=typeof scriptArgs&&scriptArgs,"undefined"!=typeof print&&("undefined"==typeof console&&(console={}),console.log=print,console.warn=console.error="undefined"!=typeof printErr?printErr:print)):(o||u)&&(u?m=self.location.href:document.currentScript&&(m=document.currentScript.src),n&&(m=n),m=0!==m.indexOf("blob:")?m.substr(0,m.lastIndexOf("/")+1):"",h=function(t){var e=new XMLHttpRequest;return e.open("GET",t,!1),e.send(null),e.responseText},u&&(p=function(t){var e=new XMLHttpRequest;return e.open("GET",t,!1),e.responseType="arraybuffer",e.send(null),new Uint8Array(e.response)}));var g,y,b=r.print||console.log.bind(console),x=r.printErr||console.warn.bind(console);for(e in s)s.hasOwnProperty(e)&&(r[e]=s[e]);s=null,r.arguments&&r.arguments,r.thisProgram&&r.thisProgram,r.quit&&r.quit,r.wasmBinary&&(g=r.wasmBinary),r.noExitRuntime&&r.noExitRuntime,"object"!=typeof WebAssembly&&x("no native wasm support detected");var w=new WebAssembly.Table({initial:151,maximum:151,element:"anyfunc"}),v=!1;function k(t,e){t||q("Assertion failed: "+e)}function N(t){var e=r["_"+t];return k(e,"Cannot call unknown function "+t+", make sure it is exported"),e}function I(t,e,n,r,s){var a={string:function(t){var e=0;if(null!=t&&0!==t){var n=1+(t.length<<2);!function(t,e,n){(function(t,e,n,r){if(!(r>0))return 0;for(var s=n,a=n+r-1,i=0;i<t.length;++i){var o=t.charCodeAt(i);if(o>=55296&&o<=57343&&(o=65536+((1023&o)<<10)|1023&t.charCodeAt(++i)),o<=127){if(n>=a)break;e[n++]=o}else if(o<=2047){if(n+1>=a)break;e[n++]=192|o>>6,e[n++]=128|63&o}else if(o<=65535){if(n+2>=a)break;e[n++]=224|o>>12,e[n++]=128|o>>6&63,e[n++]=128|63&o}else{if(n+3>=a)break;e[n++]=240|o>>18,e[n++]=128|o>>12&63,e[n++]=128|o>>6&63,e[n++]=128|63&o}}e[n]=0})(t,R,e,n)}(t,e=at(n),n)}return e},array:function(t){var e=at(t.length);return function(t,e){T.set(t,e)}(t,e),e}},i=N(t),o=[],u=0;if(r)for(var l=0;l<r.length;l++){var c=a[n[l]];c?(0===u&&(u=st()),o[l]=c(r[l])):o[l]=r[l]}var h=i.apply(null,o);return h=function(t){return"string"===e?A(t):"boolean"===e?Boolean(t):t}(h),0!==u&&it(u),h}var S="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function C(t,e,n){for(var r=e+n,s=e;t[s]&&!(s>=r);)++s;if(s-e>16&&t.subarray&&S)return S.decode(t.subarray(e,s));for(var a="";e<s;){var i=t[e++];if(128&i){var o=63&t[e++];if(192!=(224&i)){var u=63&t[e++];if((i=224==(240&i)?(15&i)<<12|o<<6|u:(7&i)<<18|o<<12|u<<6|63&t[e++])<65536)a+=String.fromCharCode(i);else{var l=i-65536;a+=String.fromCharCode(55296|l>>10,56320|1023&l)}}else a+=String.fromCharCode((31&i)<<6|o)}else a+=String.fromCharCode(i)}return a}function A(t,e){return t?C(R,t,e):""}var E,T,R,$;function _(t,e){return t%e>0&&(t+=e-t%e),t}function D(t){E=t,r.HEAP8=T=new Int8Array(t),r.HEAP16=new Int16Array(t),r.HEAP32=$=new Int32Array(t),r.HEAPU8=R=new Uint8Array(t),r.HEAPU16=new Uint16Array(t),r.HEAPU32=new Uint32Array(t),r.HEAPF32=new Float32Array(t),r.HEAPF64=new Float64Array(t)}var F=r.INITIAL_MEMORY||16777216;function O(t){for(;t.length>0;){var e=t.shift();if("function"!=typeof e){var n=e.func;"number"==typeof n?void 0===e.arg?r.dynCall_v(n):r.dynCall_vi(n,e.arg):n(void 0===e.arg?null:e.arg)}else e(r)}}(y=r.wasmMemory?r.wasmMemory:new WebAssembly.Memory({initial:F/65536,maximum:32768}))&&(E=y.buffer),F=E.byteLength,D(E),$[2872]=5254528;var M=[],L=[],z=[],B=[];function P(t){M.unshift(t)}function W(t){B.unshift(t)}var V=Math.ceil,U=Math.floor,G=0,H=null;function q(t){throw r.onAbort&&r.onAbort(t),b(t+=""),x(t),v=!0,t="abort("+t+"). Build with -s ASSERTIONS=1 for more info.",new WebAssembly.RuntimeError(t)}function j(t,e){return String.prototype.startsWith?t.startsWith(e):0===t.indexOf(e)}r.preloadedImages={},r.preloadedAudios={};function K(t){return j(t,"data:application/octet-stream;base64,")}function X(t){return j(t,"file://")}var Y="tfjs-backend-wasm-simd.wasm";function J(){try{if(g)return new Uint8Array(g);if(p)return p(Y);throw"both async and sync fetching of the wasm failed"}catch(t){q(t)}}function Z(t){try{return y.grow(t-E.byteLength+65535>>>16),D(y.buffer),1}catch(t){}}K(Y)||(Y=function(t){return r.locateFile?r.locateFile(t,m):m+t}(Y)),L.push({func:function(){rt()}});var Q={mappings:{},buffers:[null,[],[]],printChar:function(t,e){var n=Q.buffers[t];0===e||10===e?((1===t?b:x)(C(n,0)),n.length=0):n.push(e)},varargs:void 0,get:function(){return Q.varargs+=4,$[Q.varargs-4>>2]},getStr:function(t){return A(t)},get64:function(t,e){return t}};var tt={a:function(){q()},e:function(t,e,n){R.copyWithin(t,e,e+n)},f:function(t){t>>>=0;var e=R.length;if(t>2147483648)return!1;for(var n=1;n<=4;n*=2){var r=e*(1+.2/n);if(r=Math.min(r,t+100663296),Z(Math.min(2147483648,_(Math.max(16777216,t,r),65536))))return!0}return!1},g:function(t){return 0},d:function(t,e,n,r,s){},c:function(t,e,n,r){for(var s=0,a=0;a<n;a++){for(var i=$[e+8*a>>2],o=$[e+(8*a+4)>>2],u=0;u<o;u++)Q.printChar(t,R[i+u]);s+=o}return $[r>>2]=s,0},memory:y,b:function(t){return(t=+t)>=0?+U(t+.5):+V(t-.5)},table:w},et=function(){var t={a:tt};function e(t,e){var n=t.exports;r.asm=n,function(t){if(G--,r.monitorRunDependencies&&r.monitorRunDependencies(G),0==G&&H){var e=H;H=null,e()}}()}function n(t){e(t.instance)}function s(e){return(g||!o&&!u||"function"!=typeof fetch||X(Y)?new Promise((function(t,e){t(J())})):fetch(Y,{credentials:"same-origin"}).then((function(t){if(!t.ok)throw"failed to load wasm binary file at '"+Y+"'";return t.arrayBuffer()})).catch((function(){return J()}))).then((function(e){return WebAssembly.instantiate(e,t)})).then(e,(function(t){x("failed to asynchronously prepare wasm: "+t),q(t)}))}if(G++,r.monitorRunDependencies&&r.monitorRunDependencies(G),r.instantiateWasm)try{return r.instantiateWasm(t,e)}catch(t){return x("Module.instantiateWasm callback failed with error: "+t),!1}return function(){if(g||"function"!=typeof WebAssembly.instantiateStreaming||K(Y)||X(Y)||"function"!=typeof fetch)return s(n);fetch(Y,{credentials:"same-origin"}).then((function(e){return WebAssembly.instantiateStreaming(e,t).then(n,(function(t){x("wasm streaming compile failed: "+t),x("falling back to ArrayBuffer instantiation"),s(n)}))}))}(),{}}();r.asm=et;var nt,rt=r.___wasm_call_ctors=function(){return(rt=r.___wasm_call_ctors=r.asm.h).apply(null,arguments)},st=(r._init=function(){return(r._init=r.asm.i).apply(null,arguments)},r._register_tensor=function(){return(r._register_tensor=r.asm.j).apply(null,arguments)},r._dispose_data=function(){return(r._dispose_data=r.asm.k).apply(null,arguments)},r._dispose=function(){return(r._dispose=r.asm.l).apply(null,arguments)},r._Abs=function(){return(r._Abs=r.asm.m).apply(null,arguments)},r._Add=function(){return(r._Add=r.asm.n).apply(null,arguments)},r._AddN=function(){return(r._AddN=r.asm.o).apply(null,arguments)},r._ArgMax=function(){return(r._ArgMax=r.asm.p).apply(null,arguments)},r._AvgPool=function(){return(r._AvgPool=r.asm.q).apply(null,arguments)},r._BatchMatMul=function(){return(r._BatchMatMul=r.asm.r).apply(null,arguments)},r._ClipByValue=function(){return(r._ClipByValue=r.asm.s).apply(null,arguments)},r._Conv2D=function(){return(r._Conv2D=r.asm.t).apply(null,arguments)},r._Conv2DBackpropInput=function(){return(r._Conv2DBackpropInput=r.asm.u).apply(null,arguments)},r._Cos=function(){return(r._Cos=r.asm.v).apply(null,arguments)},r._CropAndResize=function(){return(r._CropAndResize=r.asm.w).apply(null,arguments)},r._DepthwiseConv2dNative=function(){return(r._DepthwiseConv2dNative=r.asm.x).apply(null,arguments)},r._Div=function(){return(r._Div=r.asm.y).apply(null,arguments)},r._Equal=function(){return(r._Equal=r.asm.z).apply(null,arguments)},r._Exp=function(){return(r._Exp=r.asm.A).apply(null,arguments)},r._FloorDiv=function(){return(r._FloorDiv=r.asm.B).apply(null,arguments)},r._FusedBatchNorm=function(){return(r._FusedBatchNorm=r.asm.C).apply(null,arguments)},r._FusedConv2D=function(){return(r._FusedConv2D=r.asm.D).apply(null,arguments)},r._FusedDepthwiseConv2D=function(){return(r._FusedDepthwiseConv2D=r.asm.E).apply(null,arguments)},r._Gather=function(){return(r._Gather=r.asm.F).apply(null,arguments)},r._GatherNd=function(){return(r._GatherNd=r.asm.G).apply(null,arguments)},r._Greater=function(){return(r._Greater=r.asm.H).apply(null,arguments)},r._GreaterEqual=function(){return(r._GreaterEqual=r.asm.I).apply(null,arguments)},r._Less=function(){return(r._Less=r.asm.J).apply(null,arguments)},r._LessEqual=function(){return(r._LessEqual=r.asm.K).apply(null,arguments)},r._Log=function(){return(r._Log=r.asm.L).apply(null,arguments)},r._LogicalAnd=function(){return(r._LogicalAnd=r.asm.M).apply(null,arguments)},r._Max=function(){return(r._Max=r.asm.N).apply(null,arguments)},r._MaxPool=function(){return(r._MaxPool=r.asm.O).apply(null,arguments)},r._Maximum=function(){return(r._Maximum=r.asm.P).apply(null,arguments)},r._Min=function(){return(r._Min=r.asm.Q).apply(null,arguments)},r._Minimum=function(){return(r._Minimum=r.asm.R).apply(null,arguments)},r._Multiply=function(){return(r._Multiply=r.asm.S).apply(null,arguments)},r._Negate=function(){return(r._Negate=r.asm.T).apply(null,arguments)},r._NonMaxSuppressionV3=function(){return(r._NonMaxSuppressionV3=r.asm.U).apply(null,arguments)},r._NonMaxSuppressionV4=function(){return(r._NonMaxSuppressionV4=r.asm.V).apply(null,arguments)},r._NonMaxSuppressionV5=function(){return(r._NonMaxSuppressionV5=r.asm.W).apply(null,arguments)},r._NotEqual=function(){return(r._NotEqual=r.asm.X).apply(null,arguments)},r._OneHot=function(){return(r._OneHot=r.asm.Y).apply(null,arguments)},r._PadV2=function(){return(r._PadV2=r.asm.Z).apply(null,arguments)},r._Pow=function(){return(r._Pow=r.asm._).apply(null,arguments)},r._Prelu=function(){return(r._Prelu=r.asm.$).apply(null,arguments)},r._Relu=function(){return(r._Relu=r.asm.aa).apply(null,arguments)},r._Relu6=function(){return(r._Relu6=r.asm.ba).apply(null,arguments)},r._ResizeBilinear=function(){return(r._ResizeBilinear=r.asm.ca).apply(null,arguments)},r._Reverse=function(){return(r._Reverse=r.asm.da).apply(null,arguments)},r._RotateWithOffset=function(){return(r._RotateWithOffset=r.asm.ea).apply(null,arguments)},r._Rsqrt=function(){return(r._Rsqrt=r.asm.fa).apply(null,arguments)},r._ScatterNd=function(){return(r._ScatterNd=r.asm.ga).apply(null,arguments)},r._SelectV2=function(){return(r._SelectV2=r.asm.ha).apply(null,arguments)},r._Sigmoid=function(){return(r._Sigmoid=r.asm.ia).apply(null,arguments)},r._Sin=function(){return(r._Sin=r.asm.ja).apply(null,arguments)},r._Softmax=function(){return(r._Softmax=r.asm.ka).apply(null,arguments)},r._Sqrt=function(){return(r._Sqrt=r.asm.la).apply(null,arguments)},r._Square=function(){return(r._Square=r.asm.ma).apply(null,arguments)},r._Sub=function(){return(r._Sub=r.asm.na).apply(null,arguments)},r._Sum=function(){return(r._Sum=r.asm.oa).apply(null,arguments)},r._Tanh=function(){return(r._Tanh=r.asm.pa).apply(null,arguments)},r._Tile=function(){return(r._Tile=r.asm.qa).apply(null,arguments)},r._Transpose=function(){return(r._Transpose=r.asm.ra).apply(null,arguments)},r.__FusedMatMul=function(){return(r.__FusedMatMul=r.asm.sa).apply(null,arguments)},r._malloc=function(){return(r._malloc=r.asm.ta).apply(null,arguments)},r._free=function(){return(r._free=r.asm.ua).apply(null,arguments)},r.stackSave=function(){return(st=r.stackSave=r.asm.va).apply(null,arguments)}),at=r.stackAlloc=function(){return(at=r.stackAlloc=r.asm.wa).apply(null,arguments)},it=r.stackRestore=function(){return(it=r.stackRestore=r.asm.xa).apply(null,arguments)};function ot(t){this.name="ExitStatus",this.message="Program terminated with exit("+t+")",this.status=t}function ut(t){function e(){nt||(nt=!0,r.calledRun=!0,v||(O(L),O(z),r.onRuntimeInitialized&&r.onRuntimeInitialized(),function(){if(r.postRun)for("function"==typeof r.postRun&&(r.postRun=[r.postRun]);r.postRun.length;)W(r.postRun.shift());O(B)}()))}G>0||(function(){if(r.preRun)for("function"==typeof r.preRun&&(r.preRun=[r.preRun]);r.preRun.length;)P(r.preRun.shift());O(M)}(),G>0||(r.setStatus?(r.setStatus("Running..."),setTimeout((function(){setTimeout((function(){r.setStatus("")}),1),e()}),1)):e()))}if(r.dynCall_vi=function(){return(r.dynCall_vi=r.asm.ya).apply(null,arguments)},r.dynCall_v=function(){return(r.dynCall_v=r.asm.za).apply(null,arguments)},r.asm=et,r.cwrap=function(t,e,n,r){var s=(n=n||[]).every((function(t){return"number"===t}));return"string"!==e&&s&&!r?N(t):function(){return I(t,e,n,arguments)}},r.then=function(t){if(nt)t(r);else{var e=r.onRuntimeInitialized;r.onRuntimeInitialized=function(){e&&e(),t(r)}}return r},H=function t(){nt||ut(),nt||(H=t)},r.run=ut,r.preInit)for("function"==typeof r.preInit&&(r.preInit=[r.preInit]);r.preInit.length>0;)r.preInit.pop()();return ut(),t});t.exports=r})),op=ap((function(t,e){var n,r=(n="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0,"undefined"!=typeof __filename&&(n=n||__filename),function(t){var e,r=void 0!==(t=t||{})?t:{},s={};for(e in r)r.hasOwnProperty(e)&&(s[e]=r[e]);var o,u,l,c;o="object"==typeof window,u="function"==typeof importScripts,l="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node,c=!o&&!l&&!u;var h,p,d,f,m="";l?(m=u?a.default.dirname(m)+"/":__dirname+"/",h=function(t,e){return d||(d=i.default),f||(f=a.default),t=f.normalize(t),d.readFileSync(t,e?null:"utf8")},p=function(t){var e=h(t,!0);return e.buffer||(e=new Uint8Array(e)),k(e.buffer),e},process.argv.length>1&&process.argv[1].replace(/\\/g,"/"),process.argv.slice(2),process.on("uncaughtException",(function(t){if(!(t instanceof ot))throw t})),process.on("unhandledRejection",q),r.inspect=function(){return"[Emscripten Module object]"}):c?("undefined"!=typeof read&&(h=function(t){return read(t)}),p=function(t){var e;return"function"==typeof readbuffer?new Uint8Array(readbuffer(t)):(k("object"==typeof(e=read(t,"binary"))),e)},"undefined"!=typeof scriptArgs&&scriptArgs,"undefined"!=typeof print&&("undefined"==typeof console&&(console={}),console.log=print,console.warn=console.error="undefined"!=typeof printErr?printErr:print)):(o||u)&&(u?m=self.location.href:document.currentScript&&(m=document.currentScript.src),n&&(m=n),m=0!==m.indexOf("blob:")?m.substr(0,m.lastIndexOf("/")+1):"",h=function(t){var e=new XMLHttpRequest;return e.open("GET",t,!1),e.send(null),e.responseText},u&&(p=function(t){var e=new XMLHttpRequest;return e.open("GET",t,!1),e.responseType="arraybuffer",e.send(null),new Uint8Array(e.response)}));var g,y,b=r.print||console.log.bind(console),x=r.printErr||console.warn.bind(console);for(e in s)s.hasOwnProperty(e)&&(r[e]=s[e]);s=null,r.arguments&&r.arguments,r.thisProgram&&r.thisProgram,r.quit&&r.quit,r.wasmBinary&&(g=r.wasmBinary),r.noExitRuntime&&r.noExitRuntime,"object"!=typeof WebAssembly&&x("no native wasm support detected");var w=new WebAssembly.Table({initial:146,maximum:146,element:"anyfunc"}),v=!1;function k(t,e){t||q("Assertion failed: "+e)}function N(t){var e=r["_"+t];return k(e,"Cannot call unknown function "+t+", make sure it is exported"),e}function I(t,e,n,r,s){var a={string:function(t){var e=0;if(null!=t&&0!==t){var n=1+(t.length<<2);!function(t,e,n){(function(t,e,n,r){if(!(r>0))return 0;for(var s=n,a=n+r-1,i=0;i<t.length;++i){var o=t.charCodeAt(i);if(o>=55296&&o<=57343&&(o=65536+((1023&o)<<10)|1023&t.charCodeAt(++i)),o<=127){if(n>=a)break;e[n++]=o}else if(o<=2047){if(n+1>=a)break;e[n++]=192|o>>6,e[n++]=128|63&o}else if(o<=65535){if(n+2>=a)break;e[n++]=224|o>>12,e[n++]=128|o>>6&63,e[n++]=128|63&o}else{if(n+3>=a)break;e[n++]=240|o>>18,e[n++]=128|o>>12&63,e[n++]=128|o>>6&63,e[n++]=128|63&o}}e[n]=0})(t,R,e,n)}(t,e=at(n),n)}return e},array:function(t){var e=at(t.length);return function(t,e){T.set(t,e)}(t,e),e}},i=N(t),o=[],u=0;if(r)for(var l=0;l<r.length;l++){var c=a[n[l]];c?(0===u&&(u=st()),o[l]=c(r[l])):o[l]=r[l]}var h=i.apply(null,o);return h=function(t){return"string"===e?A(t):"boolean"===e?Boolean(t):t}(h),0!==u&&it(u),h}var S="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function C(t,e,n){for(var r=e+n,s=e;t[s]&&!(s>=r);)++s;if(s-e>16&&t.subarray&&S)return S.decode(t.subarray(e,s));for(var a="";e<s;){var i=t[e++];if(128&i){var o=63&t[e++];if(192!=(224&i)){var u=63&t[e++];if((i=224==(240&i)?(15&i)<<12|o<<6|u:(7&i)<<18|o<<12|u<<6|63&t[e++])<65536)a+=String.fromCharCode(i);else{var l=i-65536;a+=String.fromCharCode(55296|l>>10,56320|1023&l)}}else a+=String.fromCharCode((31&i)<<6|o)}else a+=String.fromCharCode(i)}return a}function A(t,e){return t?C(R,t,e):""}var E,T,R,$;function _(t,e){return t%e>0&&(t+=e-t%e),t}function D(t){E=t,r.HEAP8=T=new Int8Array(t),r.HEAP16=new Int16Array(t),r.HEAP32=$=new Int32Array(t),r.HEAPU8=R=new Uint8Array(t),r.HEAPU16=new Uint16Array(t),r.HEAPU32=new Uint32Array(t),r.HEAPF32=new Float32Array(t),r.HEAPF64=new Float64Array(t)}var F=r.INITIAL_MEMORY||16777216;function O(t){for(;t.length>0;){var e=t.shift();if("function"!=typeof e){var n=e.func;"number"==typeof n?void 0===e.arg?r.dynCall_v(n):r.dynCall_vi(n,e.arg):n(void 0===e.arg?null:e.arg)}else e(r)}}(y=r.wasmMemory?r.wasmMemory:new WebAssembly.Memory({initial:F/65536,maximum:32768}))&&(E=y.buffer),F=E.byteLength,D(E),$[2940]=5254800;var M=[],L=[],z=[],B=[];function P(t){M.unshift(t)}function W(t){B.unshift(t)}var V=Math.ceil,U=Math.floor,G=0,H=null;function q(t){throw r.onAbort&&r.onAbort(t),b(t+=""),x(t),v=!0,t="abort("+t+"). Build with -s ASSERTIONS=1 for more info.",new WebAssembly.RuntimeError(t)}function j(t,e){return String.prototype.startsWith?t.startsWith(e):0===t.indexOf(e)}r.preloadedImages={},r.preloadedAudios={};function K(t){return j(t,"data:application/octet-stream;base64,")}function X(t){return j(t,"file://")}var Y="tfjs-backend-wasm.wasm";function J(){try{if(g)return new Uint8Array(g);if(p)return p(Y);throw"both async and sync fetching of the wasm failed"}catch(t){q(t)}}function Z(t){try{return y.grow(t-E.byteLength+65535>>>16),D(y.buffer),1}catch(t){}}K(Y)||(Y=function(t){return r.locateFile?r.locateFile(t,m):m+t}(Y)),L.push({func:function(){rt()}});var Q={mappings:{},buffers:[null,[],[]],printChar:function(t,e){var n=Q.buffers[t];0===e||10===e?((1===t?b:x)(C(n,0)),n.length=0):n.push(e)},varargs:void 0,get:function(){return Q.varargs+=4,$[Q.varargs-4>>2]},getStr:function(t){return A(t)},get64:function(t,e){return t}};var tt={a:function(){q()},e:function(t,e,n){R.copyWithin(t,e,e+n)},f:function(t){t>>>=0;var e=R.length;if(t>2147483648)return!1;for(var n=1;n<=4;n*=2){var r=e*(1+.2/n);if(r=Math.min(r,t+100663296),Z(Math.min(2147483648,_(Math.max(16777216,t,r),65536))))return!0}return!1},g:function(t){return 0},d:function(t,e,n,r,s){},c:function(t,e,n,r){for(var s=0,a=0;a<n;a++){for(var i=$[e+8*a>>2],o=$[e+(8*a+4)>>2],u=0;u<o;u++)Q.printChar(t,R[i+u]);s+=o}return $[r>>2]=s,0},memory:y,b:function(t){return(t=+t)>=0?+U(t+.5):+V(t-.5)},table:w},et=function(){var t={a:tt};function e(t,e){var n=t.exports;r.asm=n,function(t){if(G--,r.monitorRunDependencies&&r.monitorRunDependencies(G),0==G&&H){var e=H;H=null,e()}}()}function n(t){e(t.instance)}function s(e){return(g||!o&&!u||"function"!=typeof fetch||X(Y)?new Promise((function(t,e){t(J())})):fetch(Y,{credentials:"same-origin"}).then((function(t){if(!t.ok)throw"failed to load wasm binary file at '"+Y+"'";return t.arrayBuffer()})).catch((function(){return J()}))).then((function(e){return WebAssembly.instantiate(e,t)})).then(e,(function(t){x("failed to asynchronously prepare wasm: "+t),q(t)}))}if(G++,r.monitorRunDependencies&&r.monitorRunDependencies(G),r.instantiateWasm)try{return r.instantiateWasm(t,e)}catch(t){return x("Module.instantiateWasm callback failed with error: "+t),!1}return function(){if(g||"function"!=typeof WebAssembly.instantiateStreaming||K(Y)||X(Y)||"function"!=typeof fetch)return s(n);fetch(Y,{credentials:"same-origin"}).then((function(e){return WebAssembly.instantiateStreaming(e,t).then(n,(function(t){x("wasm streaming compile failed: "+t),x("falling back to ArrayBuffer instantiation"),s(n)}))}))}(),{}}();r.asm=et;var nt,rt=r.___wasm_call_ctors=function(){return(rt=r.___wasm_call_ctors=r.asm.h).apply(null,arguments)},st=(r._init=function(){return(r._init=r.asm.i).apply(null,arguments)},r._register_tensor=function(){return(r._register_tensor=r.asm.j).apply(null,arguments)},r._dispose_data=function(){return(r._dispose_data=r.asm.k).apply(null,arguments)},r._dispose=function(){return(r._dispose=r.asm.l).apply(null,arguments)},r._Abs=function(){return(r._Abs=r.asm.m).apply(null,arguments)},r._Add=function(){return(r._Add=r.asm.n).apply(null,arguments)},r._AddN=function(){return(r._AddN=r.asm.o).apply(null,arguments)},r._ArgMax=function(){return(r._ArgMax=r.asm.p).apply(null,arguments)},r._AvgPool=function(){return(r._AvgPool=r.asm.q).apply(null,arguments)},r._BatchMatMul=function(){return(r._BatchMatMul=r.asm.r).apply(null,arguments)},r._ClipByValue=function(){return(r._ClipByValue=r.asm.s).apply(null,arguments)},r._Conv2D=function(){return(r._Conv2D=r.asm.t).apply(null,arguments)},r._Conv2DBackpropInput=function(){return(r._Conv2DBackpropInput=r.asm.u).apply(null,arguments)},r._Cos=function(){return(r._Cos=r.asm.v).apply(null,arguments)},r._CropAndResize=function(){return(r._CropAndResize=r.asm.w).apply(null,arguments)},r._DepthwiseConv2dNative=function(){return(r._DepthwiseConv2dNative=r.asm.x).apply(null,arguments)},r._Div=function(){return(r._Div=r.asm.y).apply(null,arguments)},r._Equal=function(){return(r._Equal=r.asm.z).apply(null,arguments)},r._Exp=function(){return(r._Exp=r.asm.A).apply(null,arguments)},r._FloorDiv=function(){return(r._FloorDiv=r.asm.B).apply(null,arguments)},r._FusedBatchNorm=function(){return(r._FusedBatchNorm=r.asm.C).apply(null,arguments)},r._FusedConv2D=function(){return(r._FusedConv2D=r.asm.D).apply(null,arguments)},r._FusedDepthwiseConv2D=function(){return(r._FusedDepthwiseConv2D=r.asm.E).apply(null,arguments)},r._Gather=function(){return(r._Gather=r.asm.F).apply(null,arguments)},r._GatherNd=function(){return(r._GatherNd=r.asm.G).apply(null,arguments)},r._Greater=function(){return(r._Greater=r.asm.H).apply(null,arguments)},r._GreaterEqual=function(){return(r._GreaterEqual=r.asm.I).apply(null,arguments)},r._Less=function(){return(r._Less=r.asm.J).apply(null,arguments)},r._LessEqual=function(){return(r._LessEqual=r.asm.K).apply(null,arguments)},r._Log=function(){return(r._Log=r.asm.L).apply(null,arguments)},r._LogicalAnd=function(){return(r._LogicalAnd=r.asm.M).apply(null,arguments)},r._Max=function(){return(r._Max=r.asm.N).apply(null,arguments)},r._MaxPool=function(){return(r._MaxPool=r.asm.O).apply(null,arguments)},r._Maximum=function(){return(r._Maximum=r.asm.P).apply(null,arguments)},r._Min=function(){return(r._Min=r.asm.Q).apply(null,arguments)},r._Minimum=function(){return(r._Minimum=r.asm.R).apply(null,arguments)},r._Multiply=function(){return(r._Multiply=r.asm.S).apply(null,arguments)},r._Negate=function(){return(r._Negate=r.asm.T).apply(null,arguments)},r._NonMaxSuppressionV3=function(){return(r._NonMaxSuppressionV3=r.asm.U).apply(null,arguments)},r._NonMaxSuppressionV4=function(){return(r._NonMaxSuppressionV4=r.asm.V).apply(null,arguments)},r._NonMaxSuppressionV5=function(){return(r._NonMaxSuppressionV5=r.asm.W).apply(null,arguments)},r._NotEqual=function(){return(r._NotEqual=r.asm.X).apply(null,arguments)},r._OneHot=function(){return(r._OneHot=r.asm.Y).apply(null,arguments)},r._PadV2=function(){return(r._PadV2=r.asm.Z).apply(null,arguments)},r._Pow=function(){return(r._Pow=r.asm._).apply(null,arguments)},r._Prelu=function(){return(r._Prelu=r.asm.$).apply(null,arguments)},r._Relu=function(){return(r._Relu=r.asm.aa).apply(null,arguments)},r._Relu6=function(){return(r._Relu6=r.asm.ba).apply(null,arguments)},r._ResizeBilinear=function(){return(r._ResizeBilinear=r.asm.ca).apply(null,arguments)},r._Reverse=function(){return(r._Reverse=r.asm.da).apply(null,arguments)},r._RotateWithOffset=function(){return(r._RotateWithOffset=r.asm.ea).apply(null,arguments)},r._Rsqrt=function(){return(r._Rsqrt=r.asm.fa).apply(null,arguments)},r._ScatterNd=function(){return(r._ScatterNd=r.asm.ga).apply(null,arguments)},r._SelectV2=function(){return(r._SelectV2=r.asm.ha).apply(null,arguments)},r._Sigmoid=function(){return(r._Sigmoid=r.asm.ia).apply(null,arguments)},r._Sin=function(){return(r._Sin=r.asm.ja).apply(null,arguments)},r._Softmax=function(){return(r._Softmax=r.asm.ka).apply(null,arguments)},r._Sqrt=function(){return(r._Sqrt=r.asm.la).apply(null,arguments)},r._Square=function(){return(r._Square=r.asm.ma).apply(null,arguments)},r._Sub=function(){return(r._Sub=r.asm.na).apply(null,arguments)},r._Sum=function(){return(r._Sum=r.asm.oa).apply(null,arguments)},r._Tanh=function(){return(r._Tanh=r.asm.pa).apply(null,arguments)},r._Tile=function(){return(r._Tile=r.asm.qa).apply(null,arguments)},r._Transpose=function(){return(r._Transpose=r.asm.ra).apply(null,arguments)},r.__FusedMatMul=function(){return(r.__FusedMatMul=r.asm.sa).apply(null,arguments)},r._malloc=function(){return(r._malloc=r.asm.ta).apply(null,arguments)},r._free=function(){return(r._free=r.asm.ua).apply(null,arguments)},r.stackSave=function(){return(st=r.stackSave=r.asm.va).apply(null,arguments)}),at=r.stackAlloc=function(){return(at=r.stackAlloc=r.asm.wa).apply(null,arguments)},it=r.stackRestore=function(){return(it=r.stackRestore=r.asm.xa).apply(null,arguments)};function ot(t){this.name="ExitStatus",this.message="Program terminated with exit("+t+")",this.status=t}function ut(t){function e(){nt||(nt=!0,r.calledRun=!0,v||(O(L),O(z),r.onRuntimeInitialized&&r.onRuntimeInitialized(),function(){if(r.postRun)for("function"==typeof r.postRun&&(r.postRun=[r.postRun]);r.postRun.length;)W(r.postRun.shift());O(B)}()))}G>0||(function(){if(r.preRun)for("function"==typeof r.preRun&&(r.preRun=[r.preRun]);r.preRun.length;)P(r.preRun.shift());O(M)}(),G>0||(r.setStatus?(r.setStatus("Running..."),setTimeout((function(){setTimeout((function(){r.setStatus("")}),1),e()}),1)):e()))}if(r.dynCall_vi=function(){return(r.dynCall_vi=r.asm.ya).apply(null,arguments)},r.dynCall_v=function(){return(r.dynCall_v=r.asm.za).apply(null,arguments)},r.asm=et,r.cwrap=function(t,e,n,r){var s=(n=n||[]).every((function(t){return"number"===t}));return"string"!==e&&s&&!r?N(t):function(){return I(t,e,n,arguments)}},r.then=function(t){if(nt)t(r);else{var e=r.onRuntimeInitialized;r.onRuntimeInitialized=function(){e&&e(),t(r)}}return r},H=function t(){nt||ut(),nt||(H=t)},r.run=ut,r.preInit)for("function"==typeof r.preInit&&(r.preInit=[r.preInit]);r.preInit.length>0;)r.preInit.pop()();return ut(),t});t.exports=r}));class up extends jc{constructor(t){super(),this.wasm=t,this.dataIdNextNumber=1,this.wasm.tfjs.init(),this.dataIdMap=new qc(this,si())}write(t,e,n){const r={};return this.move(r,t,e,n),r}numDataIds(){return this.dataIdMap.numDataIds()}async time(t){const e=at();return t(),{kernelMs:at()-e}}move(t,e,n,r){const s=this.dataIdNextNumber++;if("string"===r){const a=e;return void this.dataIdMap.set(t,{id:s,stringBytes:a,shape:n,dtype:r,memoryOffset:null})}const a=T(n),i=a*H(r),o=this.wasm._malloc(i);this.dataIdMap.set(t,{id:s,memoryOffset:o,shape:n,dtype:r}),this.wasm.tfjs.registerTensor(s,a,o),null!=e&&this.wasm.HEAPU8.set(new Uint8Array(e.buffer,e.byteOffset,i),o)}async read(t){return this.readSync(t)}readSync(t){const{memoryOffset:e,dtype:n,shape:r,stringBytes:s}=this.dataIdMap.get(t);return"string"===n?s:function(t,e){switch(e){case"float32":return new Float32Array(t);case"int32":return new Int32Array(t);case"bool":return new Uint8Array(t);default:throw new Error("Unknown dtype "+e)}}(this.wasm.HEAPU8.slice(e,e+T(r)*H(n)).buffer,n)}disposeData(t){const e=this.dataIdMap.get(t);this.wasm._free(e.memoryOffset),this.wasm.tfjs.disposeData(e.id),this.dataIdMap.delete(t)}floatPrecision(){return 32}getMemoryOffset(t){return this.dataIdMap.get(t).memoryOffset}dispose(){this.wasm.tfjs.dispose(),this.wasm=null}memory(){return{unreliable:!1}}makeOutput(t,e,n){let r;if(null==n)r=this.write(null,t,e);else{r={};const s=this.dataIdNextNumber++;this.dataIdMap.set(r,{id:s,memoryOffset:n,shape:t,dtype:e});const a=T(t);this.wasm.tfjs.registerTensor(s,a,n)}return{dataId:r,shape:t,dtype:e}}typedArrayFromHeap({shape:t,dtype:e,dataId:n}){const r=this.wasm.HEAPU8.buffer,{memoryOffset:s}=this.dataIdMap.get(n),a=T(t);switch(e){case"float32":return new Float32Array(r,s,a);case"int32":return new Int32Array(r,s,a);case"bool":return new Uint8Array(r,s,a);default:throw new Error("Uknown dtype "+e)}}}li("wasm",async()=>{const{wasm:t}=await async function(){const t=await u().getAsync("WASM_HAS_SIMD_SUPPORT");return new Promise((e,n)=>{const r={},s=t?ip(r):op(r);s.tfjs={init:s.cwrap("init",null,[]),registerTensor:s.cwrap("register_tensor",null,["number","number","number"]),disposeData:s.cwrap("dispose_data",null,["number"]),dispose:s.cwrap("dispose",null,[])};let a=!1;s.onRuntimeInitialized=()=>{a=!0,cp=!1,e({wasm:s})},s.onAbort=()=>{a||cp||(cp=!0,n({message:"Make sure the server can serve the `.wasm` file relative to the bundled js file. For more details see https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-wasm/README.md#using-bundlers"}))}})}();return new up(t)},2);let lp,cp=!1;function hp(){return null==lp&&(lp=ci().epsilon()),lp}class pp extends Error{constructor(t){super(t),Object.setPrototypeOf(this,pp.prototype)}}class dp extends Error{constructor(t){super(t),Object.setPrototypeOf(this,dp.prototype)}}class fp extends Error{constructor(t){super(t),Object.setPrototypeOf(this,fp.prototype)}}class mp extends Error{constructor(t){super(t),Object.setPrototypeOf(this,mp.prototype)}}class gp extends Error{constructor(t){super(t),Object.setPrototypeOf(this,gp.prototype)}}function yp(t,e){if(Array.isArray(t)){let n=[];for(let r=0;r<e;r++)n=n.concat(t);return n}{const n=new Array(e);return n.fill(t),n}}function bp(t,e){if(!t)throw new gp(e)}function xp(t,e){let n=0;for(const r of t)r===e&&n++;return n}function wp(t){return 1===t.length?t[0]:t}function vp(t){return Array.isArray(t)?t:[t]}function kp(t){const e=t.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==e[0]?e:"private"+e}function Np(t){return t.length<=1||-1===t.indexOf("_")?t:t.replace(/[_]+(\w|$)/g,(t,e)=>e.toUpperCase())}let Ip={};function Sp(t){if(null==t)return null;const e={};return e.className=t.getClassName(),e.config=t.getConfig(),e}function Cp(t,e={},n={},r="object",s=!1){if("string"==typeof t){const s=t;let a;if(s in n)a=n[s];else if(s in Ip)a=Ip[s];else if(a=e[s],null==a)throw new fp(`Unknown ${r}: ${t}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const a=t;if(null==a.className||null==a.config)throw new fp(r+": Improper config format: "+JSON.stringify(a)+".\n'className' and 'config' must set.");const i=a.className;let o,u;if(i in n?[o,u]=n[i]:i in Ip?[o,u]=Ip.className:i in e&&([o,u]=e[i]),null==o)throw new fp(`Unknown ${r}: ${i}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=u){const t={};for(const e of Object.keys(Ip))t[e]=Ip[e];for(const e of Object.keys(n))t[e]=n[e];a.config.customObjects=t;const e=Object.assign({},Ip);for(const t of Object.keys(n))Ip[t]=n[t];!function t(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach(e=>t(e));else{const n=Object.keys(e);for(const r of n){const n=e[r];null!=n&&"object"==typeof n&&(Array.isArray(n)||"ndarray"!==n.type||"number"!=typeof n.value?t(n):e[r]=n.value)}}}(a.config);const r=u(o,a.config,n,s);return Ip=Object.assign({},e),r}{const t=Object.assign({},Ip);for(const t of Object.keys(n))Ip[t]=n[t];const e=new o(a.config);return Ip=Object.assign({},t),e}}}function Ap(t,e){return-1*function(t,e){return t<e?-1:t>e?1:0}(t,e)}function Ep(t){if(null==t)return t;const e=[];for(const n of t)-1===e.indexOf(n)&&e.push(n);return e}function Tp(t){if(null==t)throw new fp("Invalid value in obj: "+JSON.stringify(t));for(const e in t)if(t.hasOwnProperty(e))return!1;return!0}function Rp(t,e,n){if(null!=n&&t.indexOf(n)<0)throw new fp(`${n} is not a valid ${e}.  Valid values are ${t} or null/undefined.`)}function $p(t,e,n=0,r=1/0){return bp(n>=0),bp(r>=n),Array.isArray(t)&&t.length>=n&&t.length<=r&&t.every(t=>typeof t===e)}function _p(t,e){Array.isArray(t)?(S(t.length>0,()=>e+" is unexpectedly an empty array."),t.forEach((t,n)=>_p(t,`element ${n+1} of ${e}`))):S(Number.isInteger(t)&&t>0,()=>`Expected ${e} to be a positive integer, but got `+function t(e){return null===e?"null":Array.isArray(e)?"["+e.map(e=>t(e)).join(",")+"]":"string"==typeof e?`"${e}"`:""+e}(t)+".")}function Dp(t){return"relu"===t?"relu":"linear"===t?"linear":"elu"===t?"elu":null}function Fp(t,e){return ii(()=>se(Te(Yt(t,t),e,!0)))}class Op extends Xa{getConfig(){return{}}}class Mp extends Op{constructor(t){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=t.maxValue?t.maxValue:this.defaultMaxValue,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return ii(()=>{const e=Fp(t,this.axis),n=Mi(e,0,this.maxValue);return Yt(t,te(n,be(hp(),e)))})}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}Mp.className="MaxNorm",Ja(Mp);class Lp extends Op{constructor(t){super(),this.defaultAxis=0,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return ii(()=>te(t,be(hp(),Fp(t,this.axis))))}getConfig(){return{axis:this.axis}}}Lp.className="UnitNorm",Ja(Lp);class zp extends Op{apply(t){return cu(t)}}zp.className="NonNeg",Ja(zp);class Bp extends Op{constructor(t){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=t.minValue?t.minValue:this.defaultMinValue,this.maxValue=null!=t.maxValue?t.maxValue:this.defaultMaxValue,this.rate=null!=t.rate?t.rate:this.defaultRate,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return ii(()=>{const e=Fp(t,this.axis),n=be(Yt(this.rate,Mi(e,this.minValue,this.maxValue)),Yt(1-this.rate,e));return Yt(t,te(n,be(hp(),e)))})}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}Bp.className="MinMaxNorm",Ja(Bp);const Pp={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function Wp(t){return Sp(t)}function Vp(t,e={}){return Cp(t,Ya.getMap().classNameMap,e,"constraint")}function Up(t){if(null==t)return null;if("string"==typeof t){return Vp({className:t in Pp?Pp[t]:t,config:{}})}return t instanceof Op?t:Vp(t)}const Gp=["channelsFirst","channelsLast"],Hp=["valid","same","causal"],qp=["max","avg"],jp=["sum","mul","concat","ave"],Kp=new Map;function Xp(t){Rp(Gp,"DataFormat",t)}function Yp(t){Rp(Hp,"PaddingMode",t)}function Jp(t){Rp(qp,"PoolMode",t)}const Zp=[];function Qp(t,e){Zp.push(t);try{const t=e();return Zp.pop(),t}catch(t){throw Zp.pop(),t}}function td(t){if(!rd(t))throw new Error("Not a valid tensor name: '"+t+"'");return(0===Zp.length?"":Zp.join("/")+"/")+t}function ed(t){if(!rd(t))throw new Error("Not a valid tensor name: '"+t+"'");Kp.has(t)||Kp.set(t,0);const e=Kp.get(t);if(Kp.set(t,Kp.get(t)+1),e>0){const n=`${t}_${e}`;return Kp.set(n,1),n}return t}const nd=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function rd(t){return!!t.match(nd)}function sd(t,e,n){null==e&&(e=0),null==n&&(n=t.length);let r=1;for(let s=e;s<n;++s)r*=t[s];return r}function ad(t){return ou(t=Array.isArray(t)?new Float32Array(t):t)}function id(t){return Eo(ad(t)).dataSync()[0]}function od(t){return xo(ad(t)).dataSync()[0]}function ud(t,e){if(e<t)throw new fp(`end (${e}) < begin (${t}) is forbidden.`);const n=[];for(let r=t;r<e;++r)n.push(r);return n}function ld(t,e){return t.asType(e)}function cd(t,e=-1){const n=t.shape.slice();return e<0&&(e=n.length+e+1),n.splice(e,0,1),t.reshape(n)}function hd(t,e,n){return ii(()=>{switch(t.rank){case 1:return ku(t,e,n);case 2:return Nu(t,[e,0],[n,t.shape[1]]);case 3:return Iu(t,[e,0,0],[n,t.shape[1],t.shape[2]]);case 4:return Su(t,[e,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3]]);case 5:return Rs(t,[e,0,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3],t.shape[4]]);case 6:return Rs(t,[e,0,0,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3],t.shape[4],t.shape[5]]);default:throw new fp("sliceAlongFirstAxis() received an unsupported tensor rank: "+t.rank)}})}function pd(t,e,n){return ii(()=>{switch(t.rank){case 1:return ku(t,e,n);case 2:return Nu(t,[0,e],[t.shape[0],n]);case 3:return Iu(t,[0,0,e],[t.shape[0],t.shape[1],n]);case 4:return Su(t,[0,0,0,e],[t.shape[0],t.shape[1],t.shape[2],n]);default:throw new fp("sliceAlongLastAxis() received an unsupported tensor rank: "+t.rank)}})}function dd(t,e,n,r){return ii(()=>{switch(t.rank){case 1:return ku(t,e,n);case 2:switch(r){case 1:return hd(t,e,n);case 2:return pd(t,e,n);default:throw new fp("The axis is not within the rank of the tensor "+r)}case 3:switch(r){case 1:return hd(t,e,n);case 2:return Iu(t,[0,e,0],[t.shape[0],n,t.shape[2]]);case 3:return pd(t,e,n);default:throw new fp("The axis is not within the rank of the tensor "+r)}case 4:switch(r){case 1:return hd(t,e,n);case 2:return Su(t,[0,e,0,0],[t.shape[0],n,t.shape[2],t.shape[3]]);case 3:return Su(t,[0,0,e,0],[t.shape[0],t.shape[1],n,t.shape[3]]);case 4:return pd(t,e,n);default:throw new fp("The axis is not within the rank of the tensor "+r)}default:throw new fp("sliceAlongLastAxis() received an unsupported tensor rank: "+t.rank)}})}function fd(t,e=-1){let n;return e<0&&(n=t[0].rank,e=0!==n?n:0),e===t[0].rank&&(e=-1),xs(t,e)}function md(t,e){switch(t.rank){case 1:return Li([t,e]);case 2:return zi([t,e],0);case 3:return Bi([t,e],0);case 4:return Pi([t,e],0);default:throw new fp("concatAlongFirstAxis() received an unsupported tensor rank: "+t.rank)}}function gd(t,e){if(Array.isArray(e)||(e=[e]),t.rank!==e.length)throw new fp(`The length of input n (${e.length}) does not match the number of dimensions in input x (${t.rank})`);return Pn(t,e)}function yd(t,e=0,n=1,r,s){return au(t,e,n,r,s)}function bd(t,e,n,r){if(t.rank<2||e.rank<2)throw new mp(`dot requires both inputs to be rank >= 2 but got x shape = ${t.shape} and y shape = ${e.shape}`);if(e.rank>=3){if(t.shape.slice(-1)[0]!==e.shape.slice(-2)[0])throw new mp(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${t.shape} and  y shape = `+e.shape)}if(2===t.rank&&2===e.rank){return xl({a:t,b:e,transposeA:!1,transposeB:!1,bias:r?vd(t.rank,r,"channelsLast"):null,activation:n})}{const s=t.shape.slice(),a=s.pop();t=t.reshape([-1,a]);const i=e.shape.slice(),o=i.pop(),u=i.pop(),l=[...i,o],c=Array.from({length:e.rank},(t,n)=>0===n?e.rank-2:n<=e.rank-2?n-1:n);e=e.transpose(c).reshape([u,-1]);const h=[...s,...l];return xl({a:t,b:e,transposeA:!1,transposeB:!1,bias:r?vd(t.rank,r,"channelsLast"):null,activation:n}).reshape(h)}}function xd(t,e,n){return ii(()=>(e=Array.isArray(e)?ou(e,"int32"):e.toInt(),Bs(t,e,n)))}function wd(t){return Yt(t,t)}function vd(t,e,n){const r=e.shape;if(1!==e.rank&&e.rank!==t)throw new fp("Unexpected bias dimensions: "+e.rank+"; expected it to be 1 or "+t);if(5===t){if("channelsFirst"===n)return 1===r.length?e.reshape([1,r[0],1,1,1]):e.reshape([1,r[3],r[0],r[1],r[2]]);if("channelsLast"===n)return 1===r.length?e.reshape([1,1,1,1,r[0]]):e.reshape([1].concat(r))}else if(4===t){if("channelsFirst"===n)return 1===r.length?e.reshape([1,r[0],1,1]):e.reshape([1,r[2],r[0],r[1]]);if("channelsLast"===n)return 1===r.length?e.reshape([1,1,1,r[0]]):e.reshape([1].concat(r))}else if(3===t){if("channelsFirst"===n)return 1===r.length?e.reshape([1,r[0],1]):e.reshape([1,r[1],r[0]]);if("channelsLast"===n)return 1===r.length?e.reshape([1,1,r[0]]):e.reshape([1].concat(r))}else if(t<3)return e;throw new fp("Unsupported input rank by biasAdd: "+e.rank)}function kd(t,e,n){return ii(()=>(null==n&&(n="channelsLast"),Xp(n),t.add(vd(t.rank,e,n))))}function Nd(t,e,n,r){return ii(()=>ll(t,e,n,r))}function Id(t,e,n=!1){return n?t():e()}const Sd=["fanIn","fanOut","fanAvg"],Cd=["normal","uniform","truncatedNormal"];class Ad extends Xa{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class Ed extends Ad{apply(t,e){return xr(t,e)}}Ed.className="Zeros",Ja(Ed);class Td extends Ad{apply(t,e){return Cs(t,e)}}Td.className="Ones",Ja(Td);class Rd extends Ad{constructor(t){if(super(),"object"!=typeof t)throw new fp("Expected argument of type ConstantConfig but got "+t);if(void 0===t.value)throw new fp("config must have value set but got "+t);this.value=t.value}apply(t,e){return ii(()=>Yt(re(this.value),Cs(t,e)))}getConfig(){return{value:this.value}}}Rd.className="Constant",Ja(Rd);class $d extends Ad{constructor(t){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=t.minval||this.DEFAULT_MINVAL,this.maxval=t.maxval||this.DEFAULT_MAXVAL,this.seed=t.seed}apply(t,e){return iu(t,this.minval,this.maxval,e)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}$d.className="RandomUniform",Ja($d);class _d extends Ad{constructor(t){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=t.mean||this.DEFAULT_MEAN,this.stddev=t.stddev||this.DEFAULT_STDDEV,this.seed=t.seed}apply(t,e){if("float32"!==(e=e||"float32")&&"int32"!==e)throw new mp(`randomNormal does not support dType ${e}.`);return yd(t,this.mean,this.stddev,e,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}_d.className="RandomNormal",Ja(_d);class Dd extends Ad{constructor(t){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=t.mean||this.DEFAULT_MEAN,this.stddev=t.stddev||this.DEFAULT_STDDEV,this.seed=t.seed}apply(t,e){if("float32"!==(e=e||"float32")&&"int32"!==e)throw new mp(`truncatedNormal does not support dType ${e}.`);return Lu(t,this.mean,this.stddev,e,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Dd.className="TruncatedNormal",Ja(Dd);class Fd extends Ad{constructor(t){super(),this.gain=null!=t.gain?t.gain:1}apply(t,e){return ii(()=>{if(2!==t.length||t[0]!==t[1])throw new fp("Identity matrix initializer can only be used for 2D square matrices.");return Yt(this.gain,to(t[0]))})}getConfig(){return{gain:this.gain}}}Fd.className="Identity",Ja(Fd);class Od extends Ad{constructor(t){if(super(),t.scale<0)throw new fp("scale must be a positive float. Got: "+t.scale);var e;this.scale=null==t.scale?1:t.scale,this.mode=null==t.mode?"fanIn":t.mode,e=this.mode,Rp(Sd,"FanMode",e),this.distribution=null==t.distribution?"normal":t.distribution,function(t){Rp(Cd,"Distribution",t)}(this.distribution),this.seed=t.seed}apply(t,e){const n=function(t,e="channelsLast"){let n,r;if(Xp(e),2===t.length)n=t[0],r=t[1];else if(-1!==[3,4,5].indexOf(t.length)){if("channelsFirst"===e){const e=sd(t,2);n=t[1]*e,r=t[0]*e}else if("channelsLast"===e){const e=sd(t,0,t.length-2);n=t[t.length-2]*e,r=t[t.length-1]*e}}else{const e=sd(t);n=Math.sqrt(e),r=Math.sqrt(e)}return[n,r]}(t),r=n[0],s=n[1];let a=this.scale;if("fanIn"===this.mode?a/=Math.max(1,r):"fanOut"===this.mode?a/=Math.max(1,s):a/=Math.max(1,(r+s)/2),"normal"===this.distribution){const n=Math.sqrt(a);if("float32"!==(e=e||"float32")&&"int32"!==e)throw new mp(`${this.getClassName()} does not support dType ${e}.`);return Lu(t,0,n,e,this.seed)}{const n=Math.sqrt(3*a);return iu(t,-n,n,e)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}Od.className="VarianceScaling",Ja(Od);class Md extends Od{constructor(t){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return Od.className}}Md.className="GlorotUniform",Ja(Md);class Ld extends Od{constructor(t){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return Od.className}}Ld.className="GlorotNormal",Ja(Ld);class zd extends Od{constructor(t){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return Od.className}}zd.className="HeNormal",Ja(zd);class Bd extends Od{constructor(t){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return Od.className}}Bd.className="HeUniform",Ja(Bd);class Pd extends Od{constructor(t){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return Od.className}}Pd.className="LeCunNormal",Ja(Pd);class Wd extends Od{constructor(t){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return Od.className}}Wd.className="LeCunNormal",Ja(Wd);class Vd extends Ad{constructor(t){if(super(),this.DEFAULT_GAIN=1,this.gain=null==t.gain?this.DEFAULT_GAIN:t.gain,this.seed=t.seed,null!=this.seed)throw new mp("Random seed is not implemented for Orthogonal Initializer yet.")}apply(t,e){return ii(()=>{if(2!==t.length)throw new mp("The Orthogonal Initializer does not support non-2D shapes yet.");t[0]*t[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${t[0]*t[1]}) elements: Slowness may result.`);const e=yd(t[0]>t[1]?[t[1],t[0]]:t,0,1,"float32");let n=uc.gramSchmidt(e);return t[0]>t[1]&&(n=n.transpose()),Yt(this.gain,n)})}getConfig(){return{gain:this.gain,seed:this.seed}}}Vd.className="Orthogonal",Ja(Vd);const Ud={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function Gd(t,e={}){return Cp(t,Ya.getMap().classNameMap,e,"initializer")}function Hd(t){return Sp(t)}function qd(t){if("string"==typeof t){const e=t in Ud?Ud[t]:t;if("GlorotNormal"===e)return new Ld;if("GlorotUniform"===e)return new Md;if("HeNormal"===e)return new zd;if("HeUniform"===e)return new Bd;if("LeCunNormal"===e)return new Pd;if("LeCunUniform"===e)return new Wd;{const t={};return t.className=e,t.config={},Gd(t)}}return t instanceof Ad?t:Gd(t)}let jd=0;function Kd(){return jd++}const Xd={};function Yd(t=""){return t in Xd||(Xd[t]=0),Xd[t]+=1,t+Xd[t].toString()}function Jd(t){return Array.isArray(t)&&Array.isArray(t[0])}function Zd(t){return 0===t.length?[]:Array.isArray(t[0])?t:[t]}function Qd(t){let e;if(Array.isArray(t)){if(1!==t.length)throw new fp("Expected Tensor length to be 1; got "+t.length);e=t[0]}else e=t;return e}function tf(t){if(Array.isArray(t)&&Array.isArray(t[0])){if(1===t.length)return(t=t)[0];throw new fp("Expected exactly 1 Shape; got "+t.length)}return t}function ef(t){let e=0;for(const n of t)0===n.shape.length?e+=1:e+=n.shape.reduce((t,e)=>t*e);return e}class nf{constructor(t,e="float32",n="Variable",r=!0,s=null){this.dtype=null==e?"float32":e,this.shape=t.shape,this.id=Kd(),n=null==n?"Variable":n,this.originalName=td(n),this.name=ed(this.originalName),this.trainable_=r,this.constraint=s,this.val=Bu(t,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(t){return this.assertNotDisposed(),function(t,e){if(t.shape.toString()!==e.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(t.shape)+" vs. "+JSON.stringify(e.shape))}(this.val,t),this.val.id!==t.id&&(this.val.assign(t),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(t){this.trainable_=t,this.val.trainable=t}}function rf(t){return t.map(t=>t.read())}function sf(t){t.forEach(t=>{t[0].write(t[1])})}class af{constructor(t){this.dtype=t.dtype,this.shape=t.shape,null!=t.shape?this.ndim=t.shape.length:this.ndim=t.ndim,this.maxNDim=t.maxNDim,this.minNDim=t.minNDim,this.axes=t.axes||{}}}class of{constructor(t,e,n,r,s,a,i){this.dtype=t,this.shape=e,this.sourceLayer=n,this.inputs=r,this.callArgs=s,this.outputTensorIndex=i,this.id=Kd(),null!=a&&(this.originalName=td(a),this.name=ed(this.originalName)),this.rank=e.length}}let uf=0;class lf{constructor(t,e){this.callArgs=e,this.id=uf++,this.outboundLayer=t.outboundLayer,this.inboundLayers=t.inboundLayers,this.nodeIndices=t.nodeIndices,this.tensorIndices=t.tensorIndices,this.inputTensors=t.inputTensors,this.outputTensors=t.outputTensors,this.inputMasks=t.inputMasks,this.outputMasks=t.outputMasks,this.inputShapes=t.inputShapes,this.outputShapes=t.outputShapes;for(const e of t.inboundLayers)null!=e&&e.outboundNodes.push(this);t.outboundLayer.inboundNodes.push(this)}getConfig(){const t=[];for(const e of this.inboundLayers)null!=e?t.push(e.name):t.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:t,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let cf=0;class hf extends Xa{constructor(t={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=cf++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let e=t.name;if(!e){const t=this.getClassName();e=kp(t)+"_"+Yd(t)}if(this.name=e,this.trainable_=null==t.trainable||t.trainable,null!=t.inputShape||null!=t.batchInputShape){let e;if(null!=t.batchInputShape)e=t.batchInputShape;else if(null!=t.inputShape){let n=null;null!=t.batchSize&&(n=t.batchSize),e=[n].concat(t.inputShape)}this.batchInputShape=e;let n=t.dtype;null==n&&(n=t.inputDType),null==n&&(n="float32"),this.dtype=n}null!=t.weights?this.initialWeights=t.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(t,e){return t.name+"_ib-"+e.toString()}getNodeAtIndex(t,e){if(0===this.inboundNodes.length)throw new dp(`The layer has never been called and thus has no defined ${e}.`);if(this.inboundNodes.length<=t)throw new fp(`Asked to get ${e} at node ${t}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[t]}getInputAt(t){return wp(this.getNodeAtIndex(t,"input").inputTensors)}getOutputAt(t){return wp(this.getNodeAtIndex(t,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new pp("Layer "+this.name+' has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use `getInputAt(nodeIndex)` instead.');if(0===this.inboundNodes.length)throw new pp("Layer "+this.name+" is not connected, no input to return.");return wp(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new pp("Layer "+this.name+" has no inbound nodes.");if(this.inboundNodes.length>1)throw new pp("Layer "+this.name+' has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use `getOutputAt(nodeIndex)` instead.');return wp(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map(t=>t())}get updates(){return this._updates}get built(){return this._built}set built(t){this._built=t}get trainable(){return this.trainable_}set trainable(t){this._trainableWeights.forEach(e=>e.trainable=t),this.trainable_=t}get trainableWeights(){return this.trainable_?this._trainableWeights.filter(t=>t.trainable):[]}set trainableWeights(t){this._trainableWeights=t}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter(t=>!t.trainable).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(t){this._nonTrainableWeights=t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(t){if(t=vp(t),null==this.inputSpec||0===this.inputSpec.length)return;const e=vp(this.inputSpec);if(t.length!==e.length)throw new fp(`Layer ${this.name} expects ${e.length} inputs, but it received ${t.length} input tensors. Input received: `+t);for(let n=0;n<t.length;n++){const r=t[n],s=e[n];if(null==s)continue;const a=r.rank;if(null!=s.ndim&&a!==s.ndim)throw new fp(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${s.ndim}, found ndim=${a}`);if(null!=s.maxNDim&&a>s.maxNDim)throw new fp(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${s.maxNDim}, found ndim=${a}`);if(null!=s.minNDim&&a<s.minNDim)throw new fp(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${s.minNDim}, found ndim=${a}.`);if(null!=s.dtype&&r.dtype!==s.dtype)throw new fp(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${s.dtype}, found dtype=${r.dtype}.`);if(s.axes){const t=r.shape;for(const e in s.axes){const r=Number(e),a=s.axes[e],i=r>=0?t[r]:t[t.length+r];if(null!=a&&-1===[a,null].indexOf(i))throw new fp(`Input ${n} is incompatible with layer ${this.name}: expected axis ${r} of input shape to have value ${a} but got shape ${t}.`)}}if(null!=s.shape)for(let t=0;t<s.shape.length;++t){const e=s.shape[t],a=r.shape[t];if(null!=e&&null!=a&&e!==a)throw new fp(`Input ${n} is incompatible with layer ${this.name}: expected shape=${s.shape}, found shape=${r.shape}.`)}}}call(t,e){return t}invokeCallHook(t,e){null!=this._callHook&&this._callHook(t,e)}setCallHook(t){this._callHook=t}clearCallHook(){this._callHook=null}apply(t,e){e=e||{},this.assertNotDisposed();const n=vp(t);let r=!0;for(const t of n)if(!(t instanceof of)){r=!1;break}let s=!0;for(const t of n)if(t instanceof of){s=!1;break}if(r===s)throw new fp("Arguments to apply() must be all SymbolicTensors or all Tensors");return Qp(this.name,()=>{if(!this.built){this.assertInputCompatibility(t);const e=[];for(const n of vp(t))e.push(n.shape);this.build(wp(e)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&s&&(this._refCount=1)}if(this.assertInputCompatibility(t),s){let r=this.call(t,e);const s=vp(r),a=[];for(let t of s)-1!==n.indexOf(t)&&(t=t.clone()),a.push(t);if(r=wp(a),null!=this.activityRegularizer)throw new mp("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}{const n=function(t){t=vp(t);const e=[];for(const n of t)e.push(n.shape);return wp(e)}(t),r=this.computeOutputShape(n);let s;const a="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(t)?n[0]:n),s=null!=r&&r.length>0&&Array.isArray(r[0])?r.map((n,r)=>new of(a,n,this,vp(t),e,this.name,r)):new of(a,r,this,vp(t),e,this.name),this.addInboundNode(t,s,null,null,n,r,e),this._refCount++,null!=this.activityRegularizer)throw new mp("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}})}warnOnIncompatibleInputShape(t){if(null!=this.batchInputShape)if(t.length!==this.batchInputShape.length)console.warn("The rank of the input tensor provided (shape: "+JSON.stringify(t)+") does not match that of the "+`batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer `+this.name);else{let e=!1;this.batchInputShape.forEach((n,r)=>{null!=n&&null!=t[r]&&t[r]!==n&&(e=!0)}),e&&console.warn(`The shape of the input tensor (${JSON.stringify(t)}) does not match the expectation of layer ${this.name}: `+JSON.stringify(this.batchInputShape))}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new pp(`The layer ${this.name} has never been called and thus has no defined output shape.`);const t=[];for(const e of this.inboundNodes){const n=JSON.stringify(e.outputShapes);-1===t.indexOf(n)&&t.push(n)}if(1===t.length){const t=this.inboundNodes[0].outputShapes;return Array.isArray(t)&&Array.isArray(t[0])&&1===t.length?t[0]:t}throw new pp(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new dp(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return ef(this.weights)}build(t){this.built=!0}getWeights(t=!1){return rf(t?this.trainableWeights:this.weights)}setWeights(t){ii(()=>{const e=this.weights;if(e.length!==t.length)throw new fp(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${t.length}, but the layer was expecting ${e.length} weights. Provided weights: ${t}...`);if(0===e.length)return;const n=[],r=rf(e);for(let s=0;s<r.length;++s){const a=r[s],i=e[s],o=t[s];if(!R(a.shape,o.shape))throw new fp(`Layer weight shape ${a.shape} not compatible with provided weight shape `+o.shape);n.push([i,o])}sf(n)})}addWeight(t,e,n,r,s,a,i){if(-1!==this._addedWeightNames.indexOf(t))throw new fp(`Duplicate weight name ${t} for layer ${this.name}`);this._addedWeightNames.push(t),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(r=qd("zeros"));const o=r.apply(e,n),u=new nf(o,n,t,a,i);return o.dispose(),null!=s&&this.addLoss(()=>s.apply(u.read())),null==a&&(a=!0),a?this._trainableWeights.push(u):this._nonTrainableWeights.push(u),u}setFastWeightInitDuringBuild(t){this.fastWeightInitDuringBuild=t}addLoss(t){null==t||Array.isArray(t)&&0===t.length||(t=vp(t),void 0!==this._losses&&null!==this._losses&&this.losses.push(...t))}computeOutputShape(t){return t}computeMask(t,e){if(!this.supportsMasking){if(null!=e){if(!Array.isArray(e))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);e.forEach(t=>{if(null!=t)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)})}return null}return e}addInboundNode(t,e,n,r,s,a,i=null){const o=vp(t);e=vp(e),n=vp(n),r=vp(r),s=Zd(s),a=Zd(a);const u=[],l=[],c=[];for(const t of o)u.push(t.sourceLayer),l.push(t.nodeIndex),c.push(t.tensorIndex);new lf({outboundLayer:this,inboundLayers:u,nodeIndices:l,tensorIndices:c,inputTensors:o,outputTensors:e,inputMasks:n,outputMasks:r,inputShapes:s,outputShapes:a},i);for(let t=0;t<e.length;t++)e[t].sourceLayer=this,e[t].nodeIndex=this.inboundNodes.length-1,e[t].tensorIndex=t}getConfig(){const t={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(t.batchInputShape=this.batchInputShape),null!=this.dtype&&(t.dtype=this.dtype),t}disposeWeights(){return this.weights.forEach(t=>t.dispose()),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let t=0;return 0==--this._refCount&&(t=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:t}}}class pf extends hf{constructor(t){if(super({dtype:t.dtype,name:null!=t.name?t.name:Yd("input").toString()}),null==t.batchSize&&(t.batchSize=null),null==t.sparse&&(t.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=t.sparse,null!=t.inputShape&&null!=t.batchInputShape)throw new fp("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let e=t.batchInputShape;if(null==e){if(null==t.inputShape)throw new fp("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");e=[t.batchSize].concat(t.inputShape)}else if(null!=t.batchSize)throw new fp("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=t.dtype||"float32";this.batchInputShape=e,this.dtype=n,this.inputSpec=[{shape:e}];const r=new of(this.dtype,this.batchInputShape,this,[],{},this.name);r.nodeIndex=0,r.tensorIndex=0,new lf({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[r],outputTensors:[r],inputMasks:[null],outputMasks:[null],inputShapes:[e],outputShapes:[e]})}apply(t,e){throw new fp("Cannot pass any input to an InputLayer's apply() method. InputLayer name: "+this.name)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}async function df(t){if(null==t)return;const e=[],n=[],r=[];for(const s in t){const a=t[s];if("number"!=typeof a){const t=a;e.push(t.data()),n.push(s),r.push(t)}}if(e.length>0){const s=await Promise.all(e);for(let e=0;e<s.length;++e)t[n[e]]=s[e][0];oi(r)}}function ff(t){if(null!=t)for(const e in t){const n=t[e];"number"!=typeof n&&n.dispose()}}var mf;pf.className="InputLayer",Ja(pf),function(t){t[t.SILENT=0]="SILENT",t[t.VERBOSE=1]="VERBOSE"}(mf||(mf={}));class gf{constructor(){this.validationData=null}setParams(t){this.params=t}async onEpochBegin(t,e){}async onEpochEnd(t,e){}async onBatchBegin(t,e){}async onBatchEnd(t,e){}async onTrainBegin(t){}async onTrainEnd(t){}setModel(t){}}class yf{constructor(t,e=10){null==t&&(t=[]),this.callbacks=t,this.queueLength=e}append(t){this.callbacks.push(t)}setParams(t){for(const e of this.callbacks)e.setParams(t)}setModel(t){for(const e of this.callbacks)e.setModel(t)}async onEpochBegin(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onEpochBegin(t,e)}async onEpochEnd(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onEpochEnd(t,e)}async onBatchBegin(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onBatchBegin(t,e)}async onBatchEnd(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onBatchEnd(t,e)}async onTrainBegin(t){null==t&&(t={});for(const e of this.callbacks)await e.onTrainBegin(t)}async onTrainEnd(t){null==t&&(t={});for(const e of this.callbacks)await e.onTrainEnd(t)}}class bf extends gf{constructor(){super()}async onEpochBegin(t){this.seen=0,this.totals={}}async onBatchEnd(t,e){null==e&&(e={});const n=null==e.size?0:e.size;this.seen+=n;for(const t in e){const r=e[t];if("number"==typeof r)this.totals.hasOwnProperty(t)||(this.totals[t]=0),this.totals[t]=this.totals[t]+r*n;else{let e;t in this.totals?e=this.totals[t]:this.totals[t]=0;const s=ii(()=>be(this.totals[t],Yt(r,n)));this.totals[t]=s,null!=e&&e.dispose()}}}async onEpochEnd(t,e){if(null!=e)for(const t of this.params.metrics)null!=this.totals[t]&&("number"==typeof this.totals[t]?e[t]=this.totals[t]/this.seen:ii(()=>{const n=Yt(te(1,this.seen),this.totals[t]);e[t]=n,this.totals[t].dispose(),ui(e[t])}))}}class xf extends gf{async onTrainBegin(t){this.epoch=[],this.history={}}async onEpochEnd(t,e){null==e&&(e={}),this.epoch.push(t);for(const t in e)null==this.history[t]&&(this.history[t]=[]),this.history[t].push(e[t])}async syncData(){const t=[],e=[],n=[];for(const r in this.history){const s=this.history[r];for(let a=0;a<s.length;++a)if("number"!=typeof s[a]){const i=s[a];t.push(i.data()),e.push(r),n.push(a)}}const r=await Promise.all(t);for(let t=0;t<r.length;++t){this.history[e[t]][n[t]].dispose(),this.history[e[t]][n[t]]=r[t][0]}}}class wf extends gf{constructor(t,e){if(super(),this.currentEpoch=0,this.yieldEvery=e||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=t.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");X(this.yieldEvery)&&(this.maybeWait=function(t,e){let n,r=at();return(...s)=>{const a=at();return a-r<e||(r=a,n=t(...s)),n}}(this.maybeWait.bind(this),this.yieldEvery)),this.trainBegin=t.onTrainBegin,this.trainEnd=t.onTrainEnd,this.epochBegin=t.onEpochBegin,this.epochEnd=t.onEpochEnd,this.batchBegin=t.onBatchBegin,this.batchEnd=t.onBatchEnd,this.yield=t.onYield}async maybeWait(t,e,n){const r=[];null!=this.yield&&(await df(n),r.push(this.yield(t,e,n))),r.push(kc()),await Promise.all(r)}async onEpochBegin(t,e){this.currentEpoch=t,null!=this.epochBegin&&(await df(e),await this.epochBegin(t,e))}async onEpochEnd(t,e){const n=[];null!=this.epochEnd&&(await df(e),n.push(this.epochEnd(t,e))),"epoch"===this.yieldEvery&&n.push(kc()),await Promise.all(n)}async onBatchBegin(t,e){null!=this.batchBegin&&(await df(e),await this.batchBegin(t,e))}async onBatchEnd(t,e){const n=[];null!=this.batchEnd&&(await df(e),n.push(this.batchEnd(t,e))),"batch"===this.yieldEvery?n.push(kc()):X(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,t,e)),await Promise.all(n)}async onTrainBegin(t){null!=this.trainBegin&&(await df(t),await this.trainBegin(t))}async onTrainEnd(t){null!=this.trainEnd&&(await df(t),await this.trainEnd(t))}}function vf(t,e){if(null==t&&(t={}),t instanceof gf)return[t];if(Array.isArray(t)&&t[0]instanceof gf)return t;return vp(t).map(t=>new wf(t,e))}class kf{constructor(){}static registerCallbackConstructor(t,e){S(t>=0&&Number.isInteger(t),()=>"Verbosity level is expected to be an integer >= 0, but got "+t),kf.checkForDuplicate(e),null==kf.constructors[t]&&(kf.constructors[t]=[]),kf.constructors[t].push(e)}static checkForDuplicate(t){for(const e in kf.constructors){kf.constructors[+e].forEach(e=>{if(e===t)throw new fp("Duplicate callback constructor.")})}}static clear(){kf.constructors={}}static createCallbacks(t){const e=[];for(const n in kf.constructors){const r=+n;t>=r&&e.push(...kf.constructors[r])}return e.map(t=>new t)}}function Nf(t,e,n,r,s,a,i,o,u){const l=new xf,c=[new bf,...kf.createCallbacks(e)];null!=t&&c.push(...t),c.push(l);const h=new yf(c);return h.setParams({epochs:n,initialEpoch:r,samples:s,steps:a,batchSize:i,verbose:e,doValidation:o,metrics:u}),{callbackList:h,history:l}}function If(t,e={},n=!1){return Cp(t,Ya.getMap().classNameMap,e,"layer",n)}function Sf(t,e){return ii(()=>{"float32"!==t.dtype&&(t=t.asType("float32"));const n=Te(wd(t),e,!0),r=no(n.shape,hp()),s=se(Ps(n,r));return te(t,s)})}function Cf(t,e){return ii(()=>Ao(wd(ie(e,t)),-1))}function Af(t,e){return ii(()=>Ao(hi(ie(e,t)),-1))}function Ef(t,e){return ii(()=>{const n=ie(t,e),r=Mi(hi(t),hp(),Number.MAX_VALUE),s=hi(te(n,r));return Yt(100,Ao(s,-1))})}function Tf(t,e,n=!1){return ii(()=>{if(n)e=Cu(e);else{const t=Te(e,e.shape.length-1,!0);e=te(e,t)}return e=Mi(e,hp(),1-hp()),ee(Te(Yt(t.toFloat(),Nr(e)),e.shape.length-1))})}function Rf(t,e,n=!1){return ii(()=>{const r=fr(function(t){const e=[sd(t.shape)];return t.reshape(e)}(t)).toInt(),s=(e=Mi(e,hp(),1-hp())).shape;return Tf(Ma(r,s[s.length-1]).reshape(s),e,n)})}function $f(t,e){return ii(()=>{let n;return n=Mi(e,hp(),1-hp()),n=Nr(te(n,ie(1,n))),Ao(function(t,e){if(!R(t.shape,e.shape))throw new fp(`logits and labels must have the same shape, but got shapes ${JSON.stringify(t.shape)} and ${JSON.stringify(e.shape)}`);return ii(()=>{const n=e.relu(),r=e.abs().neg();return n.sub(e.mul(t)).add(r.exp().log1p())})}(t,n),-1)})}function _f(t,e){return ii(()=>{const n=Sf(t,-1),r=Sf(e,-1),s=Yt(n,r);return ee(Te(s,-1))})}kf.constructors={};const Df={meanSquaredError:Cf,meanAbsoluteError:Af,meanAbsolutePercentageError:Ef,meanSquaredLogarithmicError:function(t,e){return ii(()=>{const n=Mi(e,hp(),Number.MAX_VALUE),r=Nr(be(1,n)),s=Mi(t,hp(),Number.MAX_VALUE),a=Nr(be(1,s));return Ao(wd(ie(r,a)),-1)})},squaredHinge:function(t,e){return ii(()=>{const n=Ps(0,ie(1,Yt(t,e)));return Ao(wd(n),-1)})},hinge:function(t,e){return ii(()=>{const n=Ps(0,ie(1,Yt(t,e)));return Ao(n,-1)})},categoricalHinge:function(t,e){return ii(()=>{const n=Te(Yt(t,e),-1),r=xo(Yt(ie(1,t),e),-1);return Ps(0,be(1,ie(r,n)))})},logcosh:function(t,e){return ii(()=>{const n=Math.log(2),r=ie(e,t),s=ie(be(r,Au(Yt(-2,r))),n);return Ao(s,-1)})},categoricalCrossentropy:Tf,sparseCategoricalCrossentropy:Rf,binaryCrossentropy:$f,kullbackLeiblerDivergence:function(t,e){return ii(()=>{const n=Mi(t,hp(),1),r=Mi(e,hp(),1);return Te(Yt(t,Nr(te(n,r))),-1)})},poisson:function(t,e){return ii(()=>{const n=Nr(be(hp(),e));return Ao(ie(e,Yt(t,n)),-1)})},cosineProximity:_f};function Ff(t){if("string"==typeof t){if(t in Df)return Df[t];let e="Unknown loss "+t;throw t.toLowerCase().includes("softmaxcrossentropy")&&(e=`Unknown loss ${t}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new fp(e)}return t}function Of(t,e){return ii(()=>{const n=Yt(.5,Oo(e)),r=ld(pr(e,n),t.dtype);return Ao(nr(t,r),-1)})}function Mf(t,e){return ii(()=>ld(nr(yi(t,-1),yi(e,-1)),"float32"))}function Lf(t,e){return $f(t,e)}function zf(t,e){return t.rank===e.rank&&(t=t.squeeze([t.rank-1])),(e=e.argMax(-1)).dtype!==t.dtype&&(e=e.asType(t.dtype)),nr(t,e).asType("float32")}const Bf=Tf,Pf=Rf,Wf={binaryAccuracy:Of,categoricalAccuracy:Mf,precision:function(t,e){return ii(()=>{const n=function(t,e){return ii(()=>an(t.equal(1),e.equal(1)).sum().cast("float32"))}(t,e),r=function(t,e){return ii(()=>an(t.equal(0),e.equal(1)).sum().cast("float32"))}(t,e),s=n.add(r);return on(pr(s,0),n.div(s),0).cast("float32")})},categoricalCrossentropy:Bf,sparseCategoricalCrossentropy:Pf,mse:Cf,MSE:Cf,mae:Af,MAE:Af,mape:Ef,MAPE:Ef,cosine:_f};function Vf(t){if("string"==typeof t&&t in Wf)return Wf[t];if("string"!=typeof t&&null!=t)return t;throw new fp("Unknown metric "+t)}function Uf(t){if(bp(null!==t,"Unknown LossOrMetricFn "+t),"string"==typeof t)return t;{let e;for(const n of Object.keys(Df))if(Df[n]===t){e=n;break}if(void 0!==e)return e;for(const n of Object.keys(Wf))if(Wf[n]===t){e=n;break}return void 0!==e?e:t.name}}function Gf(t,e,n=!1){if(null==t||"object"!=typeof t||Object.getPrototypeOf(t)!==Object.prototype||!function t(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){const n=Object.keys(e);for(const r of n){if("string"!=typeof r)return!1;if(!t(e[r]))return!1}return!0}if(Array.isArray(e)){for(const n of e)if(!t(n))return!1;return!0}return!1}{const t=typeof e;return"string"===t||"number"===t||"boolean"===t}}(t))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(t);n.length>1048576&&console.warn(`User-defined metadata of model "${e}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function Hf(t,e,n,r=console.log){const s=function(t){let e=!0;const n=[],r=[];for(const e in t.nodesByDepth)n.push(t.nodesByDepth[e]);for(const t of n){if(t.length>1||1===t.length&&t[0].inboundLayers.length>1){e=!1;break}r.push(...t)}if(e)for(const n of t.layers){let t=!1;for(const s of n.inboundNodes)if(-1!==r.indexOf(s)){if(t){e=!1;break}t=!0}if(!e)break}return e}(t),a=["Layer (type)","Output shape","Param #"];let i;if(s?(e=e||65,n=n||[.45,.85,1]):(e=e||98,n=n||[.33,.55,.67,1]),n[n.length-1]<=1&&(n=n.map(t=>Math.floor(e*t))),!s){a.push("Receives inputs"),i=[];for(const e in t.nodesByDepth)i.push(...t.nodesByDepth[e])}r("_".repeat(e)),qf(a,n,r),r("=".repeat(e));const o=t.layers;for(let t=0;t<o.length;++t)s?jf(o[t],n,r):Kf(o[t],n,i,r),r((t===o.length-1?"=":"_").repeat(e));t.checkTrainableWeightsConsistency();const u=function(t){let e;e=null!=t.collectedTrainableWeights?ef(t.collectedTrainableWeights):ef(t.trainableWeights);return e}(t),l=ef(t.nonTrainableWeights);r("Total params: "+(u+l)),r("Trainable params: "+u),r("Non-trainable params: "+l),r("_".repeat(e))}function qf(t,e,n=console.log){let r="";for(let n=0;n<t.length;++n)n>0&&(r=r.slice(0,r.length-1)+" "),r+=t[n],r=r.slice(0,e[n]),r+=" ".repeat(e[n]-r.length);n(r)}function jf(t,e,n){let r;try{r=JSON.stringify(t.outputShape)}catch(t){r="multiple"}qf([`${t.name} (${t.getClassName()})`,r,t.countParams().toString()],e,n)}function Kf(t,e,n,r){let s;try{s=JSON.stringify(t.outputShape)}catch(t){s="multiple"}const a=[];for(const e of t.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(e)))for(let t=0;t<e.inboundLayers.length;++t){const n=e.inboundLayers[t].name,r=e.nodeIndices[t],s=e.tensorIndices[t];a.push(`${n}[${r}][${s}]`)}const i=t.name,o=t.getClassName(),u=0===a.length?"":a[0];qf([`${i} (${o})`,s,t.countParams().toString(),u],e,r);for(let t=1;t<a.length;++t)qf(["","","",a[t]],e,r)}function Xf(t,e,n){return("inboundNodes"===t||"outputLayers"===t||"inputLayers"===t)&&0===e&&"string"==typeof n}class Yf{constructor(t){if(this.id2Value={},this.id2Mask={},this.name2Id={},t instanceof Yf)for(const e in t.id2Value)this.id2Value[e]=t.id2Value[e],e in t.id2Mask&&(this.id2Mask[e]=t.id2Mask[e]);else{if(null==t)return;for(const e of t)this.add(e.key,e.value)}}add(t,e,n){if(null!=this.id2Value[t.id])throw new fp(`Duplicate key: name=${t.name}, id=${t.id}`);return this.id2Value[t.id]=function(t,e){if(null==t.dtype||t.dtype===e.dtype)return e;try{return Xt(e,t.dtype)}catch(n){throw new fp(`The dtype of the feed (${e.dtype}) can not be cast to the dtype of the key '${t.name}' (${t.dtype}).`)}}(t,e),this.name2Id[t.name]=t.id,null!=n&&(this.id2Mask[t.id]=n),this}addFeed(t){this.add(t.key,t.value)}hasKey(t){return null!=this.id2Value[t.id]}names(){return Object.keys(this.name2Id)}getValue(t){if(t instanceof of){if(null==this.id2Value[t.id])throw new fp("Nonexistent key: "+t.name);return this.id2Value[t.id]}{const e=this.name2Id[t];if(null==e)throw new fp("Feed dict has no SymbolicTensor name: "+t);return this.id2Value[e]}}getMask(t){if(t instanceof of){if(null==this.id2Value[t.id])throw new fp("Nonexistent key: "+t.name);return this.id2Mask[t.id]}{const e=this.name2Id[t];if(null==e)throw new fp("Feed dict has no SymbolicTensor name: "+t);return this.id2Mask[e]}}disposeMasks(){null!=this.id2Mask&&oi(this.id2Mask)}}const Jf={},Zf={};function Qf(t,e,n,r){const s=null!=n&&n.training,a=Array.isArray(t),i=a?t:[t],o=i.map(t=>t.name),u=[],l=e.names();for(const t of o)-1!==l.indexOf(t)?u.push(e.getValue(t)):u.push(null);null!=r&&(r.maxNumTensors=-1/0,r.minNumTensors=1/0);const c=o.join(",")+"|"+e.names().join(",");let h,p;if(null==Jf[c]){const t=function(t,e){S(null!=t&&t.length>0,()=>"Expected at least one fetch, got none");let n=[],r={};if(1===t.length){const s=em(t[0],e);n=s.sorted,r=s.recipientMap}else{const s=new Set;for(const a of t){const{sorted:t,recipientMap:i}=em(a,e);for(const e of t)s.has(e.name)||(n.push(e),s.add(e.name));for(const t in i)null==r[t]&&(r[t]=new Set),i[t].forEach(e=>r[t].add(e))}}return{sorted:n,recipientCounts:tm(r)}}(i,e);h=t.sorted,p=t.recipientCounts,Jf[c]=h,Zf[c]=p}h=Jf[c],p={},s||Object.assign(p,Zf[c]);const d=new Yf(e);for(let t=0;t<h.length;++t){if(null!=r){const t=ai().numTensors;t>r.maxNumTensors&&(r.maxNumTensors=t),t<r.minNumTensors&&(r.minNumTensors=t)}const a=h[t],i=a.sourceLayer;if(i instanceof pf)continue;const l=[],c=[],f=[];let m=!1;for(const t of a.inputs){const n=d.getValue(t),r=d.getMask(t);l.push(n),c.push(r),null!=r&&(m=!0),s||(p[t.name]--,0!==p[t.name]||e.hasKey(t)||-1!==o.indexOf(t.name)||n.isDisposed||!0===t.sourceLayer.stateful||f.push(n))}m&&((n=n||{}).mask=c[0]);const g=vp(i.apply(l,n));let y=null;i.supportsMasking&&(y=i.computeMask(l,c));const b=nm(a),x=Array.isArray(b)?b:[b];for(let t=0;t<x.length;++t){d.hasKey(x[t])||d.add(x[t],g[t],Array.isArray(y)?y[0]:y);const e=o.indexOf(x[t].name);-1!==e&&(u[e]=g[t])}s||oi(f)}return d.disposeMasks(),a?u:u[0]}function tm(t){const e={};for(const n in t)e[n]=t[n].size;return e}function em(t,e){const n=new Set,r=[],s={};for(const t of e.names())n.add(t);const a=[],i=[];for(a.push(t);a.length>0;){const t=a[a.length-1];if(n.has(t.name)){a.pop();continue}const e=i[i.length-1]===a.length-1;if(0===t.inputs.length||e)a.pop(),r.push(t),n.add(t.name),e&&i.pop();else{i.push(a.length-1);for(const e of t.inputs)null==s[e.name]&&(s[e.name]=new Set),s[e.name].add(t.name),n.has(e.name)||a.push(e)}}return{sorted:r,recipientMap:s}}function nm(t){let e;if(1===t.sourceLayer.inboundNodes.length)e=t.sourceLayer.output;else{let n=null;for(let e=0;e<t.sourceLayer.inboundNodes.length;++e)for(const r of t.sourceLayer.inboundNodes[e].outputTensors)if(r.id===t.id){n=e;break}e=t.sourceLayer.getOutputAt(n)}return e}class rm extends hf{constructor(t){if(super({}),this.containerNodes=new Set,this.name=t.name,null==this.name){const t=this.getClassName().toLowerCase();this.name=Yd(t)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(t.inputs)?this.inputs=t.inputs.slice():this.inputs=[t.inputs],Array.isArray(t.outputs)?this.outputs=t.outputs.slice():this.outputs=[t.outputs],Ep(this.inputs).length!==this.inputs.length)throw new fp("The list of inputs passed to the model is redundant. All inputs should only appear once. Found: "+this.inputs.map(t=>t.name));Ep(this.outputs).length!==this.outputs.length&&console.warn("The list of outputs passed to the model is redundant. All outputs should only appear once. Found: "+this.outputs.map(t=>t.name)),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const t of this.outputs){const e=t.sourceLayer,n=t.nodeIndex,r=t.tensorIndex;this.outputLayers.push(e),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(r)}for(const t of this.inputs){const e=t.sourceLayer,n=t.nodeIndex,r=t.tensorIndex;bp(0===n,"input layer has >1 nodes"),bp(0===r,"input layer has >1 tensors"),this.inputLayers.push(e),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(r)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let e=0;e<this.inputLayers.length;e++){const n=this.inputLayers[e];if(!(n instanceof pf))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${t.inputs}. Input ${e} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(const t of this.outputLayers)this.outputNames.push(t.name);this.internalInputShapes=this.inputs.map(t=>t.shape),this.internalOutputShapes=this.outputs.map(t=>t.shape);const e={},n={},r={},s={},a={},i=[],o=(t,e,n,r,s,u)=>{null!=r&&null!=s&&null!=u||(r=t.sourceLayer,s=t.nodeIndex,u=t.tensorIndex);const l=r.inboundNodes[s];if(-1!==n.indexOf(l))throw new dp(`The tensor ${t.name} at layer "${r.name}" is part of a cycle.`);if(-1!==e.indexOf(l))return;this.containerNodes.add(rm.nodeKey(r,s)),r.id in a||(a[r.id]=Object.keys(a).length),-1===n.indexOf(l)&&n.push(l);const c=l.inboundLayers.length;for(let t=0;t<c;t++){const r=l.inputTensors[t],s=l.inboundLayers[t],a=l.nodeIndices[t],i=l.tensorIndices[t];o(r,e,n,s,a,i)}for(e.push(l);n.indexOf(l)>=0;)n.splice(n.indexOf(l),1);i.push(l)},u=[],l=[];for(const t of this.outputs)o(t,u,l);const c=i.slice().reverse();for(const t of c){n[t.id]=t,t.id in e||(e[t.id]=0);let a=e[t.id];const i=null==r[t.outboundLayer.id]?0:r[t.outboundLayer.id];a=Math.max(a,i),r[t.outboundLayer.id]=a,s[t.outboundLayer.id]=t.outboundLayer,e[t.id]=a;for(let r=0;r<t.inboundLayers.length;r++){const s=t.inboundLayers[r],i=t.nodeIndices[r],o=s.inboundNodes[i],u=null==e[o.id]?0:e[o.id];e[o.id]=Math.max(a+1,u),n[o.id]=o}}const h={};for(const t in e){const r=e[t];r in h||(h[r]=[]),h[r].push(n[t])}const p={};for(const t in r){const e=r[t];e in p||(p[e]=[]),p[e].push(s[t])}let d=Object.keys(p).map(t=>parseInt(t,10)).sort(Ap);this.layers=[];for(const t of d){const e=p[t];e.sort((t,e)=>{const n=a[t.id],r=a[e.id];return n<r?-1:n>r?1:0});for(const t of e)t instanceof rm&&this.internalContainerRefs.push(t),this.layers.push(t)}this.layersByDepth=p,d=Object.keys(h).map(t=>parseInt(t,10)).sort(Ap);const f=this.inputs.slice(),m=[];for(const t of d)for(const e of h[t]){const t=e.outboundLayer;if(null!=t){for(const n of e.inputTensors)if(-1===f.indexOf(n))throw new dp("Graph disconnected: cannot obtain value for tensor "+n+` at layer "${t.name}". The following previous layers were accessed without issue: `+m);for(const t of e.outputTensors)f.push(t);m.push(t.name)}}this.nodesByDepth=h;const g=this.layers.map(t=>t.name);for(const t of g){const e=g.filter(e=>e===t).length;if(1!==e)throw new dp(`The name "${t}" is used ${e} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new lf({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map(t=>null),outputMasks:this.outputs.map(t=>null),inputShapes:this.inputs.map(t=>t.shape),outputShapes:this.outputs.map(t=>t.shape)}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const t={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const e of this.layers)t.numDisposedVariables+=e.dispose().numDisposedVariables;for(const e of this.internalContainerRefs)t.numDisposedVariables+=e.dispose().numDisposedVariables}return t.refCountAfterDispose=this._refCount,t}get trainable(){return this.trainable_}set trainable(t){this.layers.forEach(e=>{e._trainableWeights.forEach(e=>e.trainable=t)}),this.trainable_=t}get trainableWeights(){if(this._trainableWeights.length>0)throw new fp("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let t=[];for(const e of this.layers)t=t.concat(e.trainableWeights);return t}get nonTrainableWeights(){const t=[];for(const e of this.layers)t.push(...e.nonTrainableWeights);if(!this.trainable){const e=[];for(const t of this.layers)e.push(...t.trainableWeights);return e.concat(t)}return t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(t,e=!0){const n={};let r=0;for(const t of this.layers)for(const e of t.weights){if(null!=n[e.originalName])throw new fp("Duplicate weight name: "+e.originalName);n[e.originalName]=e,r++}const s=[];for(const r in t){let a=r;if(null==n[r]){const t=r.split("/");a=t.slice(0,-2).concat([t[t.length-1]]).join("/")}if(null!=n[a])s.push([n[a],t[r]]);else if(e)throw new fp("Provided weight data has no target variable: "+r);delete n[a]}if(e){const t=[];for(const e in n)t.push(e);if(t.length>0)throw new fp(`${t.length} of ${r} weights are not set: `+t)}sf(s)}updatedConfig(){const t=this.getConfig(),e={};return e.className=this.getClassName(),e.config=t,e.kerasVersion="tfjs-layers 2.1.0",e.backend="TensorFlow.js",e}toJSON(t,e=!0){const n=function t(e,n){if(null==e)return null;if("string"==typeof e)return kp(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const r=[],s=e.length;for(let a=0;a<s;++a){const s=e[a];Xf(n,a,s)?r.push(s):r.push(t(s,n))}return r}{const n={};for(const r of Object.keys(e)){const s=e[r],a=kp(r);n[a]="name"!==r&&"className"!==r||"string"!=typeof s?t(s,r):s}return n}}(this.updatedConfig());return e?JSON.stringify(n):n}call(t,e){return ii(()=>{t=vp(t);const n=new Yf;for(let e=0;e<this.inputs.length;++e)n.add(this.inputs[e],t[e]);return Qf(this.outputs,n,e)})}computeMask(t,e){return ii(()=>{let n;return t=vp(t),n=null==e?yp(null,t.length):vp(e),this.runInternalGraph(t,n)[1]})}computeOutputShape(t){const e=Zd(t);if(e.length!==this.inputLayers.length)throw new fp(`Invalid inputShape argument ${t}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let t=0;t<e.length;t++){const r=this.inputLayers[t],s=e[t];n[r.name+"_0_0"]=s}const r=Object.keys(this.nodesByDepth).map(t=>parseInt(t,10)).sort(Ap);if(r.length>1)for(const t of r){const e=this.nodesByDepth[t];for(const t of e){const e=t.outboundLayer;if(-1!==this.inputLayers.map(t=>t.id).indexOf(e.id))continue;const r=[];for(let e=0;e<t.inboundLayers.length;e++){const s=t.inboundLayers[e],a=t.nodeIndices[e],i=t.tensorIndices[e],o=n[`${s.name}_${a}_${i}`];r.push(o)}const s=Zd(e.computeOutputShape(wp(r))),a=e.inboundNodes.indexOf(t);for(let t=0;t<s.length;t++){n[`${e.name}_${a}_${t}`]=s[t]}}}const s=[],a=[];for(let t=0;t<this.outputLayers.length;t++){const e=this.outputLayers[t],n=this.outputLayersNodeIndices[t],r=this.outputLayersTensorIndices[t],s=`${e.name}_${n}_${r}`;a.push(s)}for(let t=0;t<a.length;t++){const e=a[t];bp(e in n),s.push(n[e])}return wp(s)}runInternalGraph(t,e){null==e&&(e=yp(null,t.length));const n={};for(let r=0;r<this.inputs.length;++r){const s=this.inputs[r],a=t[r],i=e[r];n[s.id]=[a,i]}const r=Object.keys(this.nodesByDepth).map(t=>parseInt(t,10)).sort(Ap);for(const t of r){const e=this.nodesByDepth[t];for(const t of e){const e=t.outboundLayer,r=t.inputTensors,s=t.outputTensors,a=new Array;for(const t of r)t.id in n&&a.push(n[t.id]);if(a.length===r.length){let r,i,o,u,l={};if(null!=t.callArgs&&(l=t.callArgs),1===a.length){const[t,n]=a[0];null==l.mask&&(l.mask=n),o=vp(e.call(t,l)),u=vp(e.computeMask(t,n)),r=[t],i=[n]}else r=a.map(t=>t[0]),i=a.map(t=>t[1]),null==l.mask&&(l.mask=i),o=vp(e.call(r,l)),u=vp(e.computeMask(r,i));if(e.activityRegularizer)throw new mp("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let t=0;t<s.length;++t){const e=s[t],r=o[t],a=u[t];n[e.id]=[r,a]}}}}const s=[],a=[],i=[];for(const t of this.outputs){bp(t.id in n,`Could not compute output ${t.name} : ${t.id}`);const[e,r]=n[t.id];i.push(e.shape),s.push(e),a.push(r)}return[s,a,i]}buildNodeConversionMap(t){const e={};let n;for(const t of this.layers){n=t instanceof rm?1:0;for(let r=0;r<t.inboundNodes.length;r++){const s=rm.nodeKey(t,r);this.containerNodes.has(s)&&(e[s]=n,n+=1)}}return e}getLayer(t,e){if(null!=e){if(this.layers.length<=e)throw new fp(`Was asked to retrieve layer at index ${e}, but model only has ${this.layers.length} layer(s).`);return this.layers[e]}if(null==t)throw new fp("Provide either a layer name or layer index");for(const e of this.layers)if(e.name===t)return e;throw new fp("No such layer: "+t)}calculateLosses(){return ii(()=>{const t=[];for(const e of this.layers)for(let n=0;n<e.inboundNodes.length;++n){const r=rm.nodeKey(e,n);this.containerNodes.has(r)&&t.push(...e.calculateLosses())}return t})}getConfig(){const t={name:this.name},e=this.buildNodeConversionMap(this.layers),n=[];for(const t of this.layers){const r=t.getClassName(),s=t.getConfig(),a=[];for(let n=0;n<t.inboundNodes.length;n++){const r=t.inboundNodes[n],s=rm.nodeKey(t,n);let i={};if(this.containerNodes.has(s)){if(r.callArgs)try{JSON.stringify(r.callArgs),i=r.callArgs}catch(e){console.warn(`Layer ${t.name} was passed non-serializable keyword arguments: `+r.callArgs+". They will not be included in the serialized model (and thus will be missing at deserialization time)."),i={}}if(r.inboundLayers.length>0){const t=[];for(let n=0;n<r.inboundLayers.length;n++){const s=r.inboundLayers[n],a=r.nodeIndices[n],o=r.tensorIndices[n];let u=e[rm.nodeKey(s,a)];null==u&&(u=0),t.push([s.name,u,o,i])}a.push(t)}}}const i={};i.name=t.name,i.className=r,i.config=s,i.inboundNodes=a,n.push(i)}t.layers=n;const r=[];for(let t=0;t<this.inputLayers.length;t++){const n=this.inputLayers[t],s=this.inputLayersNodeIndices[t],a=rm.nodeKey(n,s);if(!this.containerNodes.has(a))continue;let i=e[a];null==i&&(i=0);const o=this.inputLayersTensorIndices[t];r.push([n.name,i,o])}t.inputLayers=r;const s=[];for(let t=0;t<this.outputLayers.length;t++){const n=this.outputLayers[t],r=this.outputLayersNodeIndices[t],a=rm.nodeKey(n,r);if(!this.containerNodes.has(a))continue;let i=e[a];null==i&&(i=0);const o=this.outputLayersTensorIndices[t];s.push([n.name,i,o])}return t.outputLayers=s,t}static fromConfig(t,e,n={},r=!1){const s={},a={};function i(t,e){t.name in a?a[t.name].push(e):a[t.name]=[e]}function o(t,e){const n=[];let r;for(const a of e){const o=a[0],u=a[1],l=a[2];if(r=null==a[3]?{}:a[3],!(o in s))return void i(t,e);const c=s[o];if(c.inboundNodes.length<=u)return void i(t,e);const h=c.inboundNodes[u];n.push(h.outputTensors[l])}n.length>0&&t.apply(wp(n),r)}function u(t){const n=t.name,a=If(t,null!=e.customObjects?e.customObjects:{});a.setFastWeightInitDuringBuild(r),s[n]=a;t.inboundNodes.forEach(t=>{if(!(t instanceof Array))throw new fp("Corrupted configuration, expected array for nodeData: "+t);i(a,t)})}const l=e.name,c=e.layers;for(const t of c)u(t);for(;!Tp(a);)for(const t of c){const e=s[t.name];if(e.name in a){const t=a[e.name];delete a[e.name];for(const n of t)o(e,n)}}const h=[],p=[],d=e.inputLayers;for(const t of d){const e=t[0],n=t[1],r=t[2];bp(e in s);const a=s[e].inboundNodes[n].outputTensors;h.push(a[r])}const f=e.outputLayers;for(const t of f){const e=t[0],n=t[1],r=t[2];bp(e in s);const a=s[e].inboundNodes[n].outputTensors;p.push(a[r])}return new t({inputs:h,outputs:p,name:l})}get stateful(){if(this._stateful)throw new fp("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const t of this.layers)if(t.stateful)return!0;return!1}resetStates(){ii(()=>{this.layers.forEach(t=>{t.stateful&&t.resetStates()})})}}function sm(t,e){return function(t,e,n){const r=e.length;if(null==t||Array.isArray(t)&&0===t.length)return e.map(t=>null);if(1===r)return Array.isArray(t)&&1===t.length?t:"object"==typeof t&&e[0]in t?[t[e[0]]]:[t];if(Array.isArray(t)){if(t.length!==r)throw new Error(`Provided ${n} is an array of ${t.length} element(s), but the model has ${r} outputs. Make sure a set of weights is provided for each model output.`);return t}if("object"==typeof t&&Object.keys(t).length>0&&"object"==typeof t[Object.keys(t)[0]]){const n=[];return e.forEach(e=>{e in t?n.push(t[e]):n.push(null)}),n}throw new Error(`The model has multiple (${r}) outputs, so ${n} must be either an array with ${r} elements or an object with ${e} keys. Provided ${n} not understood: ${JSON.stringify(t)}`)}(t,e,"classWeight")}async function am(t,e,n,r){if(null!=e||null!=r)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const e=ii(()=>{if(1===t.shape.length)return t.clone();if(2===t.shape.length){if(t.shape[1]>1){const e=1;return t.argMax(e)}if(1===t.shape[1])return t.reshape([t.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${t.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${t.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)}),r=Array.from(await e.data());oi(e);const s=[];return r.forEach(t=>{if(null==n[t])throw new Error(`classWeight must contain all classes in the training data. The class ${t} exists in the data but not in classWeight`);s.push(n[t])}),ou(s,"float32")}return null}function im(t,e){return Yt(t,e)}function om(t,e){let n,r;const s=e;n=s.xs,r=s.ys,S(null!=n&&null!=r,()=>"A Dataset iterator for fitDataset() is expected to generate objects of the form `{xs: xVal, ys: yVal}`, where the two values may be `tf.Tensor`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates "+e);const a=um("input",t.inputNames,n),i=um("output",t.outputNames,r),o=a[0].shape[0];S(a.length===t.inputs.length,()=>`LayersModel has ${t.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: `+JSON.stringify(t.inputNames)+")"),S(i.length===t.outputs.length,()=>`LayersModel has ${t.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: `+JSON.stringify(t.outputNames)+")");for(let e=0;e<a.length;e++)S(a[e].shape[0]===o,()=>`Batch size mismatch: input ${t.inputNames[e]} has ${a[e].shape[0]}; expected  ${o} based on input ${t.inputNames[0]}.`);for(let e=0;e<i.length;e++)S(i[e].shape[0]===o,()=>`Batch size mismatch: output ${t.outputNames[e]} has ${i[e].shape[0]}; expected  ${o} based on input ${t.inputNames[0]}.`);return{xs:a,ys:i}}function um(t,e,n){if(n instanceof vt)return[n];if(Array.isArray(n))return S(n.length===e.length,()=>`Received an array of ${n.length} Tensors, but expected ${e.length} to match the ${t} keys ${e}.`),n;{const r=[];for(const s of e){if(null==n[s])throw new fp(`The feature data generated by the dataset lacks the required ${t} key '${s}'.`);r.push(n[s])}return r}}async function lm(t,e,n){const r=null!=n.batchesPerEpoch;if(S(null!=t.optimizer,()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."),S(null!=n,()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."),S(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),()=>"For fitDataset(), config.epochs is expected to be a positive integer, but got "+n.epochs),S(!r||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),()=>"For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got "+n.batchesPerEpoch),S(null==n.validationSplit,()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead."),t.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");t.isTraining=!0;try{const s=null!=n.validationData;let a,i;if(s)if(cm(n.validationData))S(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),()=>"For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got "+n.validationBatches);else{const t=function(t){if(3===t.length)throw new mp("Validation with sample weights is not implemented yet.");return{xs:t[0],ys:t[1]}}(n.validationData);a=t.xs,i=t.ys}const o=t.makeTrainFunction(),u=t.getDedupedMetricsNames();let l;l=s?u.slice().concat(u.map(t=>"val_"+t)):u.slice();const c=vf(n.callbacks,n.yieldEvery),h=null==n.verbose?1:n.verbose,{callbackList:p,history:d}=Nf(c,h,n.epochs,null,null,function(t,e){let n=null;null!=e.batchesPerEpoch?n=e.batchesPerEpoch:Number.isFinite(t.size)&&(n=t.size);return n}(e,n),null,s,l);p.setModel(t),t.history=d,await p.onTrainBegin(),t.stopTraining_=!1;let f=null==n.initialEpoch?0:n.initialEpoch,m=await e.iterator();for(;f<n.epochs;){const l={};await p.onEpochBegin(f);let c=0,h=0;for(r||(m=await e.iterator());!r||c<n.batchesPerEpoch;){const e=await m.next();if(r&&e.done){console.warn("You provided `batchesPerEpoch` as "+n.batchesPerEpoch+", but your dataset iterator ran out of data after "+c+" batches; interrupting training. Make sure that your dataset can generate at least `batchesPerEpoch * epochs` batches (in this case, "+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=e.value){const{xs:r,ys:s}=om(t,e.value),a={};a.batch=h,a.size=r[0].shape[0],await p.onBatchBegin(h,a);const i=[];if(null!=n.classWeight){const e=sm(n.classWeight,t.outputNames);for(let t=0;t<e.length;++t)i.push(await am(s[t],null,e[t]))}const l=r.concat(s).concat(i),d=o(l);oi(l);for(let t=0;t<u.length;++t){const e=u[t],n=d[t];a[e]=n,ui(n)}await p.onBatchEnd(h,a),ff(a),h++,c++}if(r?c>=n.batchesPerEpoch:e.done){if(s){let e;e=cm(n.validationData)?vp(await t.evaluateDataset(n.validationData,{batches:n.validationBatches})):vp(t.evaluate(a,i,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<t.metricsNames.length;++n)l["val_"+t.metricsNames[n]]=e[n]}break}if(t.stopTraining_)break}if(await p.onEpochEnd(f,l),f++,t.stopTraining_)break}return await p.onTrainEnd(),await t.history.syncData(),t.history}finally{t.isTraining=!1}}function cm(t){return"function"==typeof t.iterator}function hm(t){S(t>0&&Number.isInteger(t),()=>"batchSize is required to be a positive integer, but got "+t)}function pm(t,e,n){return null==t?[null]:Array.isArray(t)?t.map(t=>hd(t,e,n-e)):hd(t,e,n-e)}function dm(t,e){return ii(()=>null==t?null:Array.isArray(t)?t.map(t=>dm(t,e)):xd(t,"int32"===e.dtype?e:e.toInt()))}function fm(t,e){const n=[];let r=0,s=null;for(;r<t;)s=r+e,s>=t&&(s=t),n.push([r,s]),r=s;return n}async function mm(t,e,n,r={}){if(t.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let s,a,i,o,u,l,c;t.isTraining=!0;try{const h=null==r.batchSize?32:r.batchSize;hm(h);const p=!1,d=await t.standardizeUserData(e,n,r.sampleWeight,r.classWeight,p,h);s=d[0],a=d[1],c=d[2];let f,m=!1;if(null!=r.validationData&&r.validationData.length>0){if(m=!0,2!==r.validationData.length)throw 3===r.validationData.length?new mp("validationData including sample weights is not supported yet."):new fp("When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; "+r.validationData+" is invalid.");i=r.validationData[0],o=r.validationData[1];const e=!0,n=await t.standardizeUserData(i,o,null,null,e,h);u=n[0],l=n[1],f=u.concat(l)}else if(null!=r.validationSplit&&r.validationSplit>0&&r.validationSplit<1){m=!0;const t=Math.floor(s[0].shape[0]*(1-r.validationSplit)),e=s[0].shape[0];u=pm(s,t,e),s=pm(s,0,t),l=pm(a,t,e),a=pm(a,0,t),f=u.concat(l)}else null!=r.validationSteps&&(m=!0);const g=s.concat(a).concat(c);t.checkTrainableWeightsConsistency();const y=t.makeTrainFunction(),b=t.getDedupedMetricsNames();let x,w;m?(t.makeTestFunction(),x=t.testFunction,w=b.slice().concat(b.map(t=>"val_"+t))):(x=null,f=[],w=b.slice());const k=vf(r.callbacks,r.yieldEvery);return await async function(t,e,n,r,s,a,i,o,u,l,c,h,p,d,f){null==s&&(s=32),null==a&&(a=1),null==c&&(c=!0),null==p&&(p=0);let m=!1;if(null!=u&&null!=l&&(m=!0),null!=f&&(m=!0,null==d))throw new fp("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const g=t.checkNumSamples(n,s,d,"steps_per_epoch");let y;null!=g&&(y=ud(0,g)),null==i&&(i=1);const{callbackList:b,history:x}=Nf(o,i,a,p,g,d,s,m,h);b.setModel(t),t.history=x,await b.onTrainBegin(),t.stopTraining_=!1;for(let i=p;i<a;++i){await b.onEpochBegin(i);const a={};if(null!=d)throw new mp("stepsPerEpoch mode is not implemented yet.");{if("batch"===c)throw new mp("batch shuffling is not implemneted yet");c&&v(y);const i=ou(y),o=fm(g,s);for(let c=0;c<o.length;++c){const h={};if(await b.onBatchBegin(c,h),ii(()=>{const p=o[c][0],d=o[c][1],f=hd(i,p,d-p);h.batch=c,h.size=d-p;const g=dm(n,f),y=e(g);for(let t=0;t<r.length;++t){const e=r[t],n=y[t];h[e]=n,ui(n)}if(c===o.length-1&&m){const e=t.testLoop(u,l,s);for(let t=0;t<r.length;++t){const n=r[t],s=e[t];ui(s),a["val_"+n]=s}}}),await b.onBatchEnd(c,h),ff(h),t.stopTraining_)break}i.dispose()}if(await b.onEpochEnd(i,a),t.stopTraining_)break}return await b.onTrainEnd(),await t.history.syncData(),t.history}(t,y,g,b,h,r.epochs,r.verbose,k,x,f,r.shuffle,w,r.initialEpoch,null,null)}finally{t.isTraining=!1,ym(s,e),ym(a,n),ym(u,i),ym(l,o),null!=c&&oi(c)}}function gm(t){const e=[];t instanceof vt&&(t=[t]);for(let n=0;n<t.length;++n){const r=t[n];if(1===r.rank)e.push(cd(r,1));else{if(0===r.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");e.push(r)}}return e}function ym(t,e){if(null==t)return;const n=[];if(e instanceof vt)n.push(e.id);else if(Array.isArray(e))e.forEach(t=>n.push(t.id));else if(null!=e)for(const t in e){const r=e[t];n.push(r.id)}const r=[];if(t instanceof vt)-1===n.indexOf(t.id)&&r.push(t);else if(Array.isArray(t))t.forEach(t=>{-1===n.indexOf(t.id)&&r.push(t)});else if(null!=t)for(const e in t){const s=t[e];-1===n.indexOf(s.id)&&r.push(s)}r.forEach(t=>{t.isDisposed||t.dispose()})}function bm(t){return Array.isArray(t)}function xm(t){return!function(t){return t instanceof vt}(t)&&!bm(t)}function wm(t,e,n,r=!0,s=""){if(null==e||0===e.length){if(null!=t){let e=!1;if(bm(t)&&t.length>0)e=!0;else if(xm(t)){for(const n in t)if(t.hasOwnProperty(n)){e=!0;break}}else e=!0;if(e)throw new fp(`Error when checking model ${s} expected no data, but got `+t)}return[]}if(null==t)return e.map(t=>null);let a;if(xm(t)){t=t,a=[];for(const n of e){if(null==t[n])throw new fp(`No data provided for "${n}". Need data for each key in: `+e);a.push(t[n])}}else if(bm(t)){if((t=t).length!==e.length)throw new fp(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${e.length} Tensor(s), but instead got the following list of Tensor(s): `+t);a=t}else{if(t=t,e.length>1)throw new fp(`The model ${s} expects ${e.length} Tensor(s), but only received one Tensor. Found: Tensor with shape `+t.shape);a=[t]}if(a=gm(a),null!=n)for(let t=0;t<e.length;++t){if(null==n[t])continue;const i=a[t];if(i.shape.length!==n[t].length)throw new fp(`Error when checking ${s}: expected ${e[t]} to have ${n[t].length} dimension(s). but got array with shape `+i.shape);for(let a=0;a<n[t].length;++a){if(0===a&&!r)continue;const o=i.shape[a],u=n[t][a];if(null!=u&&u>=0&&o!==u)throw new fp(`Error when checking ${s}: expected ${e[t]} to have shape [${n[t]}], but got array with shape [${i.shape}].`)}}return a}function vm(t,e,n,r=!0,s=""){let a;if(Array.isArray(t)){if(t.length!==e.length)throw new fp(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${e.length} Tensor(s), but instead got ${t.length} Tensors(s).`);a=t}else{if(e.length>1)throw new fp(`The model expects ${e.length} ${s} Tensors, but only received one Tensor. Found: array with shape `+JSON.stringify(t.shape)+".");a=[t]}if(null!=n)for(let t=0;t<e.length;++t){if(null==n[t])continue;const i=a[t];if(i.shape.length!==n[t].length)throw new fp(`Error when checking ${s}: expected ${e[t]} to have ${n[t].length} dimension(s), but got array with shape `+JSON.stringify(i.shape));for(let a=0;a<n[t].length;++a){if(0===a&&!r)continue;const o=i.shape[a],u=n[t][a];if(null!=u&&u!==o)throw new fp(`Error when checking ${s}: expected ${e[t]} to have shape ${JSON.stringify(n[t])} but got array with shape ${JSON.stringify(i.shape)}.`)}}}class km extends rm{constructor(t){super(t),this.isTraining=!1}summary(t,e,n=console.log){if(!this.built)throw new fp("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");Hf(this,t,e,n)}compile(t){if(null==t.loss&&(t.loss=[]),this.loss=t.loss,"string"==typeof t.optimizer)this.optimizer_=function(t){const e={Adagrad:()=>wc.adagrad(.01),Adadelta:()=>wc.adadelta(1,.95,hp()),Adam:()=>wc.adam(.001,.9,.999,hp()),Adamax:()=>wc.adamax(.002,.9,.999,hp(),0),RMSProp:()=>wc.rmsprop(.001,.9,0,hp()),SGD:()=>wc.sgd(.01)};if(e.adagrad=e.Adagrad,e.adadelta=e.Adadelta,e.adam=e.Adam,e.adamax=e.Adamax,e.rmsprop=e.RMSProp,e.sgd=e.SGD,t in e)return e[t]();throw new fp("Unknown Optimizer "+t)}(t.optimizer),this.isOptimizerOwned=!0;else{if(!(t.optimizer instanceof hc))throw new fp("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=t.optimizer,this.isOptimizerOwned=!1}let e=[];if(Array.isArray(t.loss)||"string"==typeof t.loss||"function"==typeof t.loss)if(Array.isArray(t.loss)){if(t.loss.length!==this.outputs.length)throw new fp(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${t.loss}.`);const n=t.loss;e=n.map(t=>Ff(t))}else{const n=Ff(t.loss);this.outputs.forEach(t=>{e.push(n)})}else{t.loss=t.loss;for(const e in t.loss)if(-1===this.outputNames.indexOf(e))throw new fp(`Unknown entry in loss dictionary: "${e}". Only expected the following keys: `+this.outputNames);for(const n of this.outputNames)null==t.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),e.push(Ff(t.loss[n]))}this.lossFunctions=e,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let t=0;t<this.outputs.length;++t){const e=this.internalOutputShapes[t],n=this.outputNames[t];this.feedOutputNames.push(n),this.feedOutputShapes.push(e),this.feedLossFns.push(this.lossFunctions[t])}const n=[];this.metrics=t.metrics,this.metricsNames=["loss"],this.metricsTensors=[],Qp("loss",()=>{for(let t=0;t<this.outputs.length;++t){if(-1!==n.indexOf(t))continue;const e=this.lossFunctions[t];this.outputs.length>1&&(this.metricsTensors.push([e,t]),this.metricsNames.push(this.outputNames[t]+"_loss"))}});const r=function(t,e){if(null==t||Array.isArray(t)&&0===t.length)return e.map(t=>[]);let n;if("string"==typeof t||"function"==typeof t)n=[t];else{if(!Array.isArray(t)&&"object"!=typeof t)throw new TypeError("Type of metrics argument not understood. Expected an string,function, Array, or Object, found: "+t);n=t}if(Array.isArray(n))return e.map(t=>n);{const t=[];for(const r of e){let e=n.hasOwnProperty(r)?n[r]:[];Array.isArray(e)||(e=[e]),t.push(e)}return t}}(t.metrics,this.outputNames),s=(t,e,n)=>{this.outputNames.length>1&&(e=this.outputNames[t]+"_"+e),this.metricsNames.push(e),this.metricsTensors.push([n,t])};Qp("metric",()=>{for(let t=0;t<this.outputs.length;++t){if(-1!==n.indexOf(t))continue;(e=>{let n,r,a;for(const i of e){if("string"==typeof i&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(i)){const e=this.internalOutputShapes[t];let s;1===e[e.length-1]||this.lossFunctions[t]===$f?-1!==["accuracy","acc"].indexOf(i)?r=Of:-1!==["crossentropy","ce"].indexOf(i)&&(r=Lf):this.lossFunctions[t]===Rf?-1!==["accuracy","acc"].indexOf(i)?r=zf:-1!==["crossentropy","ce"].indexOf(i)&&(r=Pf):-1!==["accuracy","acc"].indexOf(i)?r=Mf:-1!==["crossentropy","ce"].indexOf(i)&&(r=Bf),-1!==["accuracy","acc"].indexOf(i)?s="acc":-1!==["crossentropy","ce"].indexOf(i)&&(s="ce"),a=r,n=""+s}else{const t=Vf(i);a=t,n=""+Uf(i)}let e;Qp(n,()=>{e=a}),s(t,n,e)}})(r[t])}}),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(t,e,n={}){const r=null==n.batchSize?32:n.batchSize;hm(r);const s=this.standardizeUserDataXY(t,e,!0,r);try{const a=s[0].concat(s[1]);this.makeTestFunction();const i=this.testFunction;return wp(this.testLoop(i,a,r,n.verbose,n.steps))}finally{ym(s[0],t),ym(s[1],e)}}async evaluateDataset(t,e){return this.makeTestFunction(),async function(t,e,n){const r=null!=(n=n||{}).batches,s=t.testFunction;let a=[];if(n.verbose>0)throw new mp("Verbose mode is not implemented yet.");S(!r||n.batches>0&&Number.isInteger(n.batches),()=>"Test loop expects `batches` to be a positive integer, but received "+JSON.stringify(n.batches));const i="function"==typeof e.next?e:await e.iterator();let o=0,u=0;for(;!r||u<n.batches;){const e=await i.next();if(a=ii(()=>{if(e.value){const{xs:n,ys:r}=om(t,e.value),i=n.concat(r),l=ii(()=>s(i));if(oi(i),0===u)for(let t=0;t<l.length;++t)a.push(re(0));const c=i[0].shape[0];for(let t=0;t<l.length;++t){const e=l[t],n=a[t];a[t]=ii(()=>be(a[t],Yt(c,e))),u>0&&oi(n)}oi(l),o+=c,++u}return a}),e.done){r&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let t=0;t<a.length;++t){const e=a[t];a[t]=te(a[t],o),oi(e)}return wp(a)}(this,t,e)}checkNumSamples(t,e,n,r="steps"){let s;if(null!=n){if(s=null,null!=e)throw new fp(`If ${r} is set, batchSize must be null or undefined.Got batchSize = `+e)}else{if(null==t)throw new fp("Either the input data should have a defined shape, or "+r+" shoud be specified.");s=Array.isArray(t)?t[0].shape[0]:t.shape[0]}return s}execute(t,e){if(Array.isArray(e)&&0===e.length)throw new fp("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(e),r=n?e:[e],s=this.retrieveSymbolicTensors(r),a=new Yf;if(t instanceof vt&&(t=[t]),Array.isArray(t)){if(t.length!==this.inputs.length)throw new fp(`The number of inputs provided (${t.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let e=0;e<this.inputs.length;++e)a.add(this.inputs[e],t[e])}else for(const e of this.inputs){const n=t[e.name];if(null==n)throw new fp("No value is provided for the model's input "+e.name);a.add(e,n)}const i=Qf(s,a);return n?i:i[0]}retrieveSymbolicTensors(t){const e=yp(null,t.length);let n=t.length;for(const r of this.layers){const s=Array.isArray(r.output)?r.output:[r.output],a=s.map(t=>t.name);for(let r=0;r<t.length;++r){const i=a.indexOf(t[r]);if(-1!==i&&(e[r]=s[i],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw e.forEach((e,r)=>{null==e&&n.push(t[r])}),new fp("Cannot find SymbolicTensors for output name(s): "+JSON.stringify(n))}return e}predictLoop(t,e=32,n=!1){return ii(()=>{const r=this.checkNumSamples(t);if(n)throw new mp("Verbose predictLoop() is not implemented yet.");const s=fm(r,e),a=this.outputs.map(t=>[]);for(let e=0;e<s.length;++e){ii(()=>{const n=s[e][0],r=s[e][1],a=pm(t,n,r),i=[];if(Array.isArray(a))for(let t=0;t<a.length;++t)i.push({key:this.inputs[t],value:a[t]});else i.push({key:this.inputs[0],value:a});const o=new Yf(i);return Qf(this.outputs,o)}).forEach((t,e)=>a[e].push(t))}return wp(a.map(t=>xs(t,0)))})}predict(t,e={}){const n=gm(t);vm(n,this.inputNames,this.feedInputShapes,!1);try{const r=null==e.batchSize?32:e.batchSize;return hm(r),this.predictLoop(n,r)}finally{ym(n,t)}}predictOnBatch(t){vm(t,this.inputNames,this.feedInputShapes,!0);const e=(Array.isArray(t)?t[0]:t).shape[0];return this.predictLoop(t,e)}standardizeUserDataXY(t,e,n=!0,r){if(null==this.optimizer_)throw new dp("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const s=[];for(let t=0;t<this.feedOutputShapes.length;++t){const e=this.feedOutputShapes[t];this.feedLossFns[t]===Rf?s.push(e.slice(0,e.length-1).concat([1])):s.push(e)}if(function(t,e,n){const r=Ep(t.map(t=>t.shape[0]));r.sort();const s=Ep(e.map(t=>t.shape[0]));if(s.sort(),r.length>1)throw new fp("All input Tensors (x) should have the same number of samples. Got array shapes: "+JSON.stringify(t.map(t=>t.shape)));if(s.length>1)throw new fp("All target Tensors (y) should have the same number of samples. Got array shapes: "+JSON.stringify(e.map(t=>t.shape)));if(r.length>0&&s.length>0&&!R(r,s))throw new fp(`Input Tensors should have the same number of samples as target Tensors. Found ${r[0]} input sample(s) and ${s[0]} target sample(s).`)}(t=wm(t,this.feedInputNames,this.feedInputShapes,!1,"input"),e=wm(e,this.feedOutputNames,s,!1,"target")),function(t,e,n){const r=[Cf,$f,Tf];for(let s=0;s<t.length;++s){const a=t[s],i=e[s],o=n[s];if(null!=i){if(i===Tf&&1===a.shape[a.shape.length-1])throw new fp(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==r.indexOf(i)){const t=a.shape.slice(1),e=o.slice(1);for(let n=0;n<t.length;++n){const r=t[n],s=e[n];if(null!=s&&r!==s)throw new fp(`A target Tensor with shape ${a.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(e,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=r&&r>0&&t[0].shape[0]%r!=0)throw new fp(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${r}. Found: ${t[0].shape[0]} sample(s).`);return[t,e]}async standardizeUserData(t,e,n,r,s=!0,a){const[i,o]=this.standardizeUserDataXY(t,e,s,a);if(null!=n)throw new Error("sample weight is not supported yet.");let u=null;if(null!=r){const t=sm(r,this.outputNames);u=[];for(let e=0;e<t.length;++e)u.push(await am(o[e],null,t[e]))}return[i,o,u]}testLoop(t,e,n,r=0,s){return ii(()=>{const a=this.checkNumSamples(e,n,s,"steps"),i=[];if(r>0)throw new mp("Verbose mode is not implemented yet.");if(null!=s)throw new mp("steps mode in testLoop() is not implemented yet");{const r=fm(a,n),s=ou(ud(0,a));for(let n=0;n<r.length;++n){const a=r[n][0],o=r[n][1],u=hd(s,a,o-a),l=dm(e,u),c=t(l);if(0===n)for(let t=0;t<c.length;++t)i.push(re(0));for(let t=0;t<c.length;++t){const e=c[t];i[t]=be(i[t],Yt(o-a,e))}}for(let t=0;t<i.length;++t)i[t]=te(i[t],a)}return i})}getDedupedMetricsNames(){const t=this.metricsNames,e=[];for(let n=0;n<t.length;++n){const r=t[n];let s=r;if(xp(t,r)>1){s+="_"+xp(t.slice(0,n),r)}e.push(s)}return e}makeTrainFunction(){return t=>{const e=[],n=t.slice(0,this.inputs.length),r=t.slice(this.inputs.length,this.inputs.length+this.outputs.length),s=t.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),a=[],i=this.collectedTrainableWeights.map(t=>t.read());return[this.optimizer_.minimize(()=>{const t=[];for(let e=0;e<this.inputs.length;++e)t.push({key:this.inputs[e],value:n[e]});const i=new Yf(t),o=Qf(this.outputs,i,{training:!0});let u;for(let t=0;t<this.lossFunctions.length;++t){let n=(0,this.lossFunctions[t])(r[t],o[t]);null!=s[t]&&(n=im(n,s[t]));const a=Ao(n);e.push(a),u=0===t?n:be(u,n)}for(let t=0;t<this.metricsTensors.length;++t){let n;if(this.outputs.length>1&&t<this.outputs.length)n=e[t];else{const e=this.metricsTensors[t][0],s=this.metricsTensors[t][1];n=Ao(e(r[s],o[s]))}ui(n),a.push(n)}return u=Ao(u),this.calculateLosses().forEach(t=>{u=be(u,t)}),u},!0,i)].concat(a)}}makeTestFunction(){this.testFunction=t=>ii(()=>{const e=[];let n;const r=t.slice(0,this.inputs.length),s=t.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=[];for(let t=0;t<this.inputs.length;++t)a.push({key:this.inputs[t],value:r[t]});const i=new Yf(a),o=Qf(this.outputs,i);for(let t=0;t<this.lossFunctions.length;++t){const r=this.lossFunctions[t],a=Ao(r(s[t],o[t]));n=0===t?a:be(n,a),e.push(n)}for(let t=0;t<this.metricsTensors.length;++t){const n=this.metricsTensors[t][0],r=this.metricsTensors[t][1],a=Ao(n(s[r],o[r]));e.push(a)}return e})}async fit(t,e,n={}){return mm(this,t,e,n)}async fitDataset(t,e){return lm(this,t,e)}async trainOnBatch(t,e){const n=await this.standardizeUserData(t,e),r=n[0],s=n[1],a=this.makeTrainFunction()(r.concat(s)),i=[];for(const t of a){const e=await t.data();i.push(e[0])}return oi(a),wp(i)}getNamedWeights(t){const e=[],n=null!=t&&t.trainableOnly,r=n?this.trainableWeights:this.weights,s=this.getWeights(n);for(let t=0;t<r.length;++t)n&&!r[t].trainable||e.push({name:r[t].originalName,tensor:s[t]});return e}set stopTraining(t){this.stopTraining_=t}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(t){this.optimizer_!==t&&(this.optimizer_=t,this.isOptimizerOwned=!1)}dispose(){const t=super.dispose();if(0===t.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const e=ai().numTensors;this.optimizer_.dispose(),t.numDisposedVariables+=e-ai().numTensors}return t}getLossIdentifiers(){let t;if("string"==typeof this.loss)t=kp(this.loss);else if(Array.isArray(this.loss)){for(const t of this.loss)if("string"!=typeof t)throw new Error("Serialization of non-string loss is not supported.");t=this.loss.map(t=>kp(t))}else{const e=Object.keys(this.loss);t={};const n=this.loss;for(const r of e){if("string"!=typeof n[r])throw new Error("Serialization of non-string loss is not supported.");t[r]=kp(n[r])}}return t}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[kp(Uf(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map(t=>kp(Uf(t)));{const t={};for(const e in this.metrics)t[e]=kp(Uf(this.metrics[e]));return t}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(t){if(null!=t.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=t.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=t.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const e=If(function t(e,n){if(null===e)return null;if("string"==typeof e)return Np(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const r=[],s=e.length;for(let a=0;a<s;++a){const s=e[a];Xf(n,a,s)?r.push(s):r.push(t(s,n))}return r}{const n={};for(const r of Object.keys(e)){const s=e[r];if("name"===r&&"string"==typeof s)n[r]=s;else{const e=Np(r);n[e]=t(s,e)}}return n}}(t.optimizer_config));let n,r;if("string"==typeof t.loss)n=Np(t.loss);else if(Array.isArray(t.loss))n=t.loss.map(t=>Np(t));else if(null!=t.loss){n={};for(const e in t.loss)n[e]=Np(t.loss[e])}if(Array.isArray(t.metrics))r=t.metrics.map(t=>Np(t));else if(null!=t.metrics){r={};for(const e in t.metrics)r[e]=Np(t.metrics[e])}this.compile({loss:n,metrics:r,optimizer:e})}async save(t,e){if("string"==typeof t){const e=ra(t);if(0===e.length)throw new fp(`Cannot find any save handlers for URL '${t}'`);if(e.length>1)throw new fp(`Found more than one (${e.length}) save handlers for URL '${t}'`);t=e[0]}if(null==t.save)throw new fp("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await js(this.getNamedWeights(e)),r={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v2.1.0",convertedBy:null};if(null!=e&&e.includeOptimizer&&null!=this.optimizer){r.trainingConfig=this.getTrainingConfig();const t="optimizer",{data:e,specs:s}=await js(await this.optimizer.getWeights(),t);n.specs.push(...s),n.data=Zs([n.data,e])}if(null!=this.userDefinedMetadata){const t=!0;Gf(this.userDefinedMetadata,this.name,t),r.userDefinedMetadata=this.userDefinedMetadata}return r.weightData=n.data,r.weightSpecs=n.specs,t.save(r)}setUserDefinedMetadata(t){Gf(t,this.name),this.userDefinedMetadata=t}getUserDefinedMetadata(){return this.userDefinedMetadata}}km.className="Model",Ja(km);class Nm extends km{constructor(t){if(super({inputs:[],outputs:[]}),t=t||{},this.trainable=!0,this.built=!1,this.name=null!=t.name?t.name:Yd("sequential_"),null!=t.layers)for(const e of t.layers)this.add(e)}checkShape(t){if(t.inboundNodes[0].outputTensors[0].shape.some(t=>t<0))throw new fp("Negative dimension size caused by adding layer "+t.name+" with input shape ["+t.inboundNodes[0].inputTensors[0].shape+"]")}add(t){const e=t instanceof Nm||t instanceof km;let n;if(e){if(n=t,1!==n.outputs.length)throw new fp("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new fp("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===t.inboundNodes.length){if(null==t.batchInputShape)throw new fp("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const e=function(t){if(null==t.batchShape&&null==t.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=t.batchShape&&null!=t.shape)throw new fp("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let e=t.batchShape;null!=t.shape&&null==e&&(e=[null].concat(t.shape));let n=t.dtype;return null==n&&(n="float32"),new pf({batchInputShape:e,name:t.name,dtype:n,sparse:t.sparse}).inboundNodes[0].outputTensors[0]}({batchShape:t.batchInputShape,dtype:t.dtype,name:t.name+"_input"});t.apply(e)}if(e)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==t.inboundNodes.length)throw new fp(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${t.name} which has ${t.inboundNodes.length} pre-existing inbound connections.`);if(1!==t.inboundNodes[0].outputTensors.length)throw new fp("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(t),this.outputs=[t.inboundNodes[0].outputTensors[0]],this.inputs=function t(e,n,r){if((null==n||null!=r&&r>0)&&(n=e.sourceLayer,r=e.nodeIndex),0===n.inboundNodes.length)return[e];{const e=n.inboundNodes[r];if(0===e.inboundLayers.length)return e.inputTensors;{const n=[];for(let r=0;r<e.inboundLayers.length;r++){const s=t(e.inputTensors[r],e.inboundLayers[r],e.nodeIndices[r]);for(const t of s)-1===n.indexOf(t)&&n.push(t)}return n}}}(this.outputs[0])}this.inboundNodes=[],new lf({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:yp(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map(t=>t.shape),outputShapes:this.outputs[0].shape})}else{const e=t.apply(this.outputs[0]);if(Array.isArray(e))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(t),this.outputs=[e],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(t),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const t=this.layers.length-1;this.layers[t].outboundNodes=[],this.outputs=[this.layers[t].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(t,e){return null==this.model&&this.build(),this.model.call(t,e)}build(t){if(tf(t),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new km({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(t,e,n=console.log){this.built||this.build(),super.summary(t,e,n)}setWeights(t){null==this.model&&this.build(),this.model.setWeights(t)}evaluate(t,e,n={}){if(!this.built)throw new dp("The model needs to be compiled before being used.");return this.model.evaluate(t,e,n)}async evaluateDataset(t,e){if(!this.built)throw new dp("The model needs to be compiled before being used.");return this.model.evaluateDataset(t,e)}predict(t,e={}){return null==this.model&&this.build(),this.model.predict(t,e)}predictOnBatch(t){return null==this.model&&this.build(),this.model.predictOnBatch(t)}compile(t){this.build(),this.model.compile(t),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(t){this.model.optimizer=t}async fit(t,e,n={}){if(!this.built)throw new dp("The model needs to be compiled before being used.");return this.model.fit(t,e,n)}async fitDataset(t,e){if(!this.built)throw new dp("The model needs to be compiled before being used.");return this.model.fitDataset(t,e)}async trainOnBatch(t,e){return this.model.trainOnBatch(t,e)}static fromConfig(t,e,n={},r=!1){let s,a={};if(e instanceof Array){if(null==e[0].className||"Merge"===e[0].className)throw new fp("Legacy serialization format not supported yet.");s=e}else S(null!=e.layers,()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."),s=e.layers,delete e.layers,a=e;const i=new t(a);if(!(i instanceof Nm))throw new mp("Sequential.fromConfig called on non-Sequential input: "+i);for(const t of s){const e=If(t,void 0,r);r&&e.setFastWeightInitDuringBuild(!0),i.add(e)}return i}set stopTraining(t){if(null==this.model)throw new fp("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=t}get stopTraining(){if(null==this.model)throw new fp("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const t=[];for(const e of this.layers){const n={};n.className=e.getClassName(),n.config=e.getConfig(),t.push(n)}return{name:this.name,layers:t}}}Nm.className="Sequential",Ja(Nm);class Im extends Xa{getConfig(){return{}}}class Sm extends Im{apply(t,e=1){return function(t,e=1){if(1!==e)throw new mp(`Support for alpha values other than 1 (${e}) is not implemented yet.`);return Ji(t)}(t,e)}}Sm.className="elu",Ja(Sm);class Cm extends Im{apply(t){return bu(t)}}Cm.className="selu",Ja(Cm);class Am extends Im{apply(t){return cu(t)}}Am.className="relu",Ja(Am);class Em extends Im{apply(t){return ii(()=>To(6,cu(t)))}}Em.className="relu6",Ja(Em);class Tm extends Im{apply(t){return t}}Tm.className="linear",Ja(Tm);class Rm extends Im{apply(t){return ps(t)}}Rm.className="sigmoid",Ja(Rm);class $m extends Im{apply(t){return function(t){return ii(()=>{const e=be(.5,Yt(.2,t));return Mi(e,0,1)})}(t)}}$m.className="hardSigmoid",Ja($m);class _m extends Im{apply(t){return Au(t)}}_m.className="softplus",Ja(_m);class Dm extends Im{apply(t){return function(t){return ii(()=>te(t,hi(t).add(1)))}(t)}}Dm.className="softsign",Ja(Dm);class Fm extends Im{apply(t){return Ci(t)}}Fm.className="tanh",Ja(Fm);class Om extends Im{apply(t,e=-1){return Cu(t,e)}}Om.className="softmax",Ja(Om);class Mm extends Im{apply(t,e=-1){return wo(t,e)}}function Lm(t){return t.getClassName()}function zm(t,e={}){return Cp(t,Ya.getMap().classNameMap,e,"activation")}function Bm(t){if(null==t){const t={className:"linear",config:{}};return zm(t)}if("string"==typeof t){const e={};return e.className=t,e.config={},zm(e)}return t instanceof Im?t:zm(t)}Mm.className="logSoftmax",Ja(Mm);class Pm extends Xa{}class Wm extends Pm{constructor(t){super(),function(t){if(null!=t&&"object"!=typeof t)throw new Error("Argument to L1L2 regularizer's constructor is expected to be an object, but received: "+t)}(t),this.l1=null==t||null==t.l1?.01:t.l1,this.l2=null==t||null==t.l2?.01:t.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(t){return ii(()=>{let e=xr([1]);return this.hasL1&&(e=be(e,Te(Yt(this.l1,hi(t))))),this.hasL2&&(e=be(e,Te(Yt(this.l2,wd(t))))),e.asScalar()})}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(t,e){return new t({l1:e.l1,l2:e.l2})}}Wm.className="L1L2",Ja(Wm);const Vm={l1l2:"L1L2"};function Um(t){return Sp(t)}function Gm(t,e={}){return Cp(t,Ya.getMap().classNameMap,e,"regularizer")}function Hm(t){if(null==t)return null;if("string"==typeof t){return Gm({className:t in Vm?Vm[t]:t,config:{}})}return t instanceof Pm?t:Gm(t)}class qm extends hf{constructor(t){super(null==t?{}:t),this.supportsMasking=!0,null!=t&&(this.maxValue=t.maxValue)}call(t,e){t=Qd(t);let n=cu(t);return null!=this.maxValue&&(n=Mi(n,0,this.maxValue)),n}computeOutputShape(t){return t}getConfig(){const t={maxValue:this.maxValue},e=super.getConfig();return Object.assign(t,e),t}}qm.className="ReLU",Ja(qm);class jm extends hf{constructor(t){super(null==t?{}:t),this.DEFAULT_ALPHA=.3,null==t&&(t={}),this.alpha=null==t.alpha?this.DEFAULT_ALPHA:t.alpha}call(t,e){const n=Qd(t);return co(n,this.alpha)}computeOutputShape(t){return t}getConfig(){const t={alpha:this.alpha},e=super.getConfig();return Object.assign(t,e),t}}jm.className="LeakyReLU",Ja(jm);class Km extends hf{constructor(t){if(super(null==t?{}:t),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==t&&(t={}),this.supportsMasking=!0,this.alphaInitializer=qd(t.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=Hm(t.alphaRegularizer),this.alphaConstraint=Up(t.alphaConstraint),null==t.sharedAxes)this.sharedAxes=null;else if(Array.isArray(t.sharedAxes))this.sharedAxes=t.sharedAxes;else{if("number"!=typeof t.sharedAxes)throw new fp("Expected sharedAxes to be a number or an array of numbers, but got "+t.sharedAxes);this.sharedAxes=[t.sharedAxes]}}build(t){const e=(t=tf(t)).slice(1);if(null!=this.sharedAxes)for(const t of this.sharedAxes)e[t-1]=1;this.alpha=this.addWeight("alpha",e,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let e=1;e<t.length;++e)n[e]=t[e];this.inputSpec=[new af({ndim:t.length,axes:n})],this.built=!0}call(t,e){return t=Qd(t),Vo(t,this.alpha.read())}getConfig(){const t={alphaInitializer:Hd(this.alphaInitializer),alphaRegularizer:Um(this.alphaRegularizer),alphaConstraint:Wp(this.alphaConstraint),sharedAxes:this.sharedAxes},e=super.getConfig();return Object.assign(t,e),t}}Km.className="PReLU",Ja(Km);class Xm extends hf{constructor(t){if(super(null==t?{}:t),this.DEFAULT_ALPHA=1,null==t&&(t={}),null!=t.alpha&&t.alpha!==this.DEFAULT_ALPHA)throw new mp(`Non-default alpha value (${t.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==t.alpha?this.DEFAULT_ALPHA:t.alpha}call(t,e){const n=Qd(t);return Ji(n)}computeOutputShape(t){return t}getConfig(){const t={alpha:this.alpha},e=super.getConfig();return Object.assign(t,e),t}}Xm.className="ELU",Ja(Xm);class Ym extends hf{constructor(t){super(null==t?{}:t),this.DEFAULT_THETA=1,null==t&&(t={}),this.theta=null==t.theta?this.DEFAULT_THETA:t.theta}call(t,e){const n=Qd(t);return n.mul(ld(n.greater(this.theta),"float32"))}computeOutputShape(t){return t}getConfig(){const t={theta:this.theta},e=super.getConfig();return Object.assign(t,e),t}}Ym.className="ThresholdedReLU",Ja(Ym);class Jm extends hf{constructor(t){super(null==t?{}:t),this.DEFAULT_AXIS=1,null==t&&(t={}),this.softmax=(new Om).apply,this.axis=null==t.axis?this.DEFAULT_AXIS:t.axis}call(t,e){const n=Qd(t);return this.softmax(n,this.axis)}computeOutputShape(t){return t}getConfig(){const t={axis:this.axis},e=super.getConfig();return Object.assign(t,e),t}}function Zm(t,e,n){if("number"==typeof t)return yp(t,e);if(t.length!==e)throw new fp(`The ${n} argument must be an integer or tuple of ${e} integers. Received: ${t.length} elements.`);for(let s=0;s<e;++s){const a=t[s];if((r=a)!==parseInt(r.toString(),10))throw new fp(`The ${n} argument must be an integer or tuple of ${e} integers. Received: ${JSON.stringify(t)} including a non-integer number `+a)}return t;var r}function Qm(t,e,n,r,s=1){if(null==t)return t;let a;return a="same"===n?t:t-(e+(e-1)*(s-1))+1,Math.floor((a+r-1)/r)}function tg(t,e,n,r){if(null==t)return null;if("valid"===r)t=t*e+od([n-e,0]);else{if("same"!==r)throw new fp(`Unsupport padding mode: ${r}.`);t*=e}return t}function eg(t,e){return ii(()=>(Xp(e),"channelsFirst"===e?In(t,[0,2,3,1]):t))}function ng(t,e){return ii(()=>(Xp(e),"channelsFirst"===e?In(t,[0,2,3,4,1]):t))}function rg(t,e,n,r=[1,1],s="valid",a,i,o=null){return ii(()=>{if(null==a&&(a="channelsLast"),Xp(a),3!==t.rank&&4!==t.rank)throw new fp(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${t.rank}.`);if(3!==e.rank&&4!==e.rank)throw new fp(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${t.rank}.`);let u=eg(t,a);if("causal"===s)throw new mp("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return u=yl({x:u,filter:e,strides:r,pad:"same"===s?"same":"valid",dilations:i,dataFormat:"NHWC",bias:n,activation:o}),"channelsFirst"===a&&(u=In(u,[0,3,1,2])),u})}Jm.className="Softmax",Ja(Jm);class sg extends hf{constructor(t,e){if(super(e),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",sg.verifyArgs(e),this.rank=t,_p(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new mp(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=Zm(e.kernelSize,t,"kernelSize"),this.strides=Zm(null==e.strides?1:e.strides,t,"strides"),this.padding=null==e.padding?"valid":e.padding,Yp(this.padding),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Xp(this.dataFormat),this.activation=Bm(e.activation),this.useBias=null==e.useBias||e.useBias,this.biasInitializer=qd(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=Up(e.biasConstraint),this.biasRegularizer=Hm(e.biasRegularizer),this.activityRegularizer=Hm(e.activityRegularizer),this.dilationRate=Zm(null==e.dilationRate?1:e.dilationRate,t,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new fp("dilationRate must be a number or an array of a single number for 1D convolution, but received "+JSON.stringify(this.dilationRate));if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new fp("dilationRate must be a number or array of two numbers for 2D convolution, but received "+JSON.stringify(this.dilationRate))}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new fp("dilationRate must be a number or array of three numbers for 3D convolution, but received "+JSON.stringify(this.dilationRate))}static verifyArgs(t){if(bp("kernelSize"in t,"required key 'kernelSize' not in config"),"number"!=typeof t.kernelSize&&!$p(t.kernelSize,"number",1,3))throw new fp(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(t.kernelSize)}.`)}getConfig(){const t={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:Lm(this.activation),useBias:this.useBias,biasInitializer:Hd(this.biasInitializer),biasRegularizer:Um(this.biasRegularizer),activityRegularizer:Um(this.activityRegularizer),biasConstraint:Wp(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}}class ag extends sg{constructor(t,e){super(t,e),this.kernel=null,ag.verifyArgs(e),this.filters=e.filters,_p(this.filters,"filters"),this.kernelInitializer=qd(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=Up(e.kernelConstraint),this.kernelRegularizer=Hm(e.kernelRegularizer)}build(t){t=tf(t);const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e])throw new fp("The channel dimension of the input should be defined. Found "+t[e]);const n=t[e],r=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[e]:n}}],this.built=!0}call(t,e){return ii(()=>{let e;t=Qd(t);const n=null==this.bias?null:this.bias.read(),r=Dp(this.activation.getClassName());if(null!=r&&2===this.rank)e=rg(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,r);else{if(1===this.rank)e=function(t,e,n,r=1,s="valid",a,i=1){return ii(()=>{if(null==a&&(a="channelsLast"),Xp(a),3!==t.shape.length)throw new fp("The input of a conv1dWithBias operation should be 3, but is "+t.shape.length+" instead.");if(3!==e.shape.length)throw new fp("The kernel for a conv1dWithBias operation should be 3, but is "+e.shape.length+" instead");if(null!=n&&1!==n.shape.length)throw new fp("The bias for a conv1dWithBias operation should be 1, but is "+e.shape.length+" instead");if("channelsFirst"===a&&(t=In(t,[0,2,1])),"causal"===s)throw new mp("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let o=Wi(t,e,r,"same"===s?"same":"valid","NWC",i);return null!=n&&(o=kd(o,n)),o})}(t,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)e=rg(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new mp("convolutions greater than 3D are not implemented yet.");e=function(t,e,n,r=[1,1,1],s="valid",a,i){return ii(()=>{if(null==a&&(a="channelsLast"),Xp(a),4!==t.rank&&5!==t.rank)throw new fp("conv3dWithBias expects input to be of rank 4 or 5, but received "+t.rank+".");if(4!==e.rank&&5!==e.rank)throw new fp("conv3dWithBias expects kernel to be of rank 4 or 5, but received "+t.rank+".");let o=ng(t,a);if("causal"===s)throw new mp("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return o=Ui(o,e,r,"same"===s?"same":"valid","NDHWC",i),null!=n&&(o=kd(o,n)),"channelsFirst"===a&&(o=In(o,[0,4,1,2,3])),o})}(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(e=this.activation.apply(e))}return e})}computeOutputShape(t){t=tf(t);const e=[],n="channelsLast"===this.dataFormat?t.slice(1,t.length-1):t.slice(2);for(let t=0;t<n.length;++t){const r=Qm(n[t],this.kernelSize[t],this.padding,this.strides[t],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[t]);e.push(r)}let r=[t[0]];return"channelsLast"===this.dataFormat?(r=r.concat(e),r.push(this.filters)):(r.push(this.filters),r=r.concat(e)),r}getConfig(){const t={filters:this.filters,kernelInitializer:Hd(this.kernelInitializer),kernelRegularizer:Um(this.kernelRegularizer),kernelConstraint:Wp(this.kernelConstraint)},e=super.getConfig();return Object.assign(t,e),t}static verifyArgs(t){if(!("filters"in t)||"number"!=typeof t.filters||t.filters<1)throw new fp("Convolution layer expected config.filters to be a 'number' > 0 but got "+JSON.stringify(t.filters))}}class ig extends ag{constructor(t){super(2,t),ig.verifyArgs(t)}getConfig(){const t=super.getConfig();return delete t.rank,t}static verifyArgs(t){if("number"!=typeof t.kernelSize&&!$p(t.kernelSize,"number",1,2))throw new fp(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(t.kernelSize)}.`)}}ig.className="Conv2D",Ja(ig);class og extends ag{constructor(t){super(3,t),og.verifyArgs(t)}getConfig(){const t=super.getConfig();return delete t.rank,t}static verifyArgs(t){if("number"!=typeof t.kernelSize&&(!Array.isArray(t.kernelSize)||1!==t.kernelSize.length&&3!==t.kernelSize.length))throw new fp(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(t.kernelSize)}.`)}}og.className="Conv3D",Ja(og);class ug extends ig{constructor(t){if(super(t),this.inputSpec=[new af({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new fp("Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode "+this.padding)}build(t){if(4!==(t=tf(t)).length)throw new fp("Input should have rank 4; Received input shape: "+JSON.stringify(t));const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e])throw new fp("The channel dimension of the inputs should be defined. Found `None`.");const n=t[e],r=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",r,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new af({ndim:4,axes:{[e]:n}})],this.built=!0}call(t,e){return ii(()=>{let e=Qd(t);if(4!==e.shape.length)throw new fp("Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-"+e.shape.length);const n=e.shape,r=n[0];let s,a;"channelsFirst"===this.dataFormat?(s=2,a=3):(s=1,a=2);const i=n[s],o=n[a],u=this.kernelSize[0],l=this.kernelSize[1],c=this.strides[0],h=this.strides[1],p=[r,tg(i,c,u,this.padding),tg(o,h,l,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(e=In(e,[0,2,3,1]));let d=Vi(e,this.kernel.read(),p,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(d=In(d,[0,3,1,2])),null!=this.bias&&(d=kd(d,this.bias.read(),this.dataFormat)),null!=this.activation&&(d=this.activation.apply(d)),d})}computeOutputShape(t){const e=(t=tf(t)).slice();let n,r,s;"channelsFirst"===this.dataFormat?(n=1,r=2,s=3):(n=3,r=1,s=2);const a=this.kernelSize[0],i=this.kernelSize[1],o=this.strides[0],u=this.strides[1];return e[n]=this.filters,e[r]=tg(e[r],o,a,this.padding),e[s]=tg(e[s],u,i,this.padding),e}getConfig(){const t=super.getConfig();return delete t.dilationRate,t}}ug.className="Conv2DTranspose",Ja(ug);class lg extends ag{constructor(t,e){if(super(t,e),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==e.filters)throw new fp("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=e.kernelInitializer||null!=e.kernelRegularizer||null!=e.kernelConstraint)throw new fp("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=e.padding&&"same"!==e.padding&&"valid"!==e.padding)throw new fp(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received `+JSON.stringify(e.padding));this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=qd(e.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=Hm(e.depthwiseRegularizer),this.depthwiseConstraint=Up(e.depthwiseConstraint),this.pointwiseInitializer=qd(e.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=Hm(e.pointwiseRegularizer),this.pointwiseConstraint=Up(e.pointwiseConstraint)}build(t){if((t=tf(t)).length<this.rank+2)throw new fp(`Inputs to SeparableConv${this.rank}D should have rank `+(this.rank+2)+", but received input shape: "+JSON.stringify(t));const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e]||t[e]<0)throw new fp("The channel dimension of the inputs should be defined, but found "+JSON.stringify(t[e]));const n=t[e],r=this.kernelSize.concat([n,this.depthMultiplier]),s=[];for(let t=0;t<this.rank;++t)s.push(1);s.push(n*this.depthMultiplier,this.filters);this.depthwiseKernel=this.addWeight("depthwise_kernel",r,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",s,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,!0,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.inputSpec=[new af({ndim:this.rank+2,axes:{[e]:n}})],this.built=!0}call(t,e){return ii(()=>{let e;if(t=Qd(t),1===this.rank)throw new mp("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(t=In(t,[0,2,3,1])),e=xu(t,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(e=kd(e,this.bias.read(),this.dataFormat)),null!=this.activation&&(e=this.activation.apply(e)),"channelsFirst"===this.dataFormat&&(e=In(e,[0,3,1,2])),e})}getConfig(){const t=super.getConfig();return delete t.rank,delete t.kernelInitializer,delete t.kernelRegularizer,delete t.kernelConstraint,t.depthwiseInitializer=Hd(this.depthwiseInitializer),t.pointwiseInitializer=Hd(this.pointwiseInitializer),t.depthwiseRegularizer=Um(this.depthwiseRegularizer),t.pointwiseRegularizer=Um(this.pointwiseRegularizer),t.depthwiseConstraint=Wp(this.depthwiseConstraint),t.pointwiseConstraint=Wp(this.pointwiseConstraint),t}}lg.className="SeparableConv";class cg extends lg{constructor(t){super(2,t)}}cg.className="SeparableConv2D",Ja(cg);class hg extends ag{constructor(t){super(1,t),hg.verifyArgs(t),this.inputSpec=[{ndim:3}]}getConfig(){const t=super.getConfig();return delete t.rank,delete t.dataFormat,t}static verifyArgs(t){if("number"!=typeof t.kernelSize&&!$p(t.kernelSize,"number",1,1))throw new fp(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(t.kernelSize)}.`)}}hg.className="Conv1D",Ja(hg);class pg extends hf{constructor(t){super(t),"number"==typeof t.cropping?this.cropping=[[t.cropping,t.cropping],[t.cropping,t.cropping]]:"number"==typeof t.cropping[0]?this.cropping=[[t.cropping[0],t.cropping[0]],[t.cropping[1],t.cropping[1]]]:this.cropping=t.cropping,this.dataFormat=void 0===t.dataFormat?"channelsLast":t.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(t){return"channelsFirst"===this.dataFormat?[t[0],t[1],t[2]-this.cropping[0][0]-this.cropping[0][1],t[3]-this.cropping[1][0]-this.cropping[1][1]]:[t[0],t[1]-this.cropping[0][0]-this.cropping[0][1],t[2]-this.cropping[1][0]-this.cropping[1][1],t[3]]}call(t,e){return ii(()=>{if(t=Qd(t),"channelsLast"===this.dataFormat){const e=dd(t,this.cropping[0][0],t.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return dd(e,this.cropping[1][0],t.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const e=dd(t,this.cropping[0][0],t.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return dd(e,this.cropping[1][0],t.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}})}getConfig(){const t={cropping:this.cropping,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}pg.className="Cropping2D",Ja(pg);class dg extends hf{constructor(t){super(t),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==t.size?this.DEFAULT_SIZE:t.size,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat}computeOutputShape(t){if("channelsFirst"===this.dataFormat){const e=null==t[2]?null:this.size[0]*t[2],n=null==t[3]?null:this.size[1]*t[3];return[t[0],t[1],e,n]}{const e=null==t[1]?null:this.size[0]*t[1],n=null==t[2]?null:this.size[1]*t[2];return[t[0],e,n,t[3]]}}call(t,e){return ii(()=>{let e=Qd(t);const n=e.shape;if("channelsFirst"===this.dataFormat){e=In(e,[0,2,3,1]);const t=this.size[0]*n[2],r=this.size[1]*n[3],s=e.resizeNearestNeighbor([t,r]);return In(s,[0,3,1,2])}{const t=this.size[0]*n[1],r=this.size[1]*n[2];return e.resizeNearestNeighbor([t,r])}})}getConfig(){const t={size:this.size,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}dg.className="UpSampling2D",Ja(dg);class fg extends sg{constructor(t){super(2,t),this.depthwiseKernel=null,this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=qd(t.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=Up(t.depthwiseConstraint),this.depthwiseRegularizer=Hm(t.depthwiseRegularizer)}build(t){if((t=tf(t)).length<4)throw new fp(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(t)}.`);const e="channelsFirst"===this.dataFormat?1:3;if(null==t[e]||t[e]<0)throw new fp(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${t[e]}).`);const n=t[e],r=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",r,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return ii(()=>{let e=function(t,e,n=[1,1],r="valid",s,a){return ii(()=>{null==s&&(s="channelsLast"),Xp(s);let i=eg(t,s);if(4!==t.rank)throw new fp("Input for depthwiseConv2d is required to be 4-D, but is instead "+t.rank+"-D");if(4!==e.rank)throw new fp("depthwiseKernel is required to be 4-D, but is instead "+e.rank+"-D");return i=qi(i,e,n,"same"===r?"same":"valid","NHWC",a),"channelsFirst"===s&&(i=In(i,[0,3,1,2])),i})}(t=Qd(t),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(e=kd(e,this.bias.read(),this.dataFormat)),null!=this.activation&&(e=this.activation.apply(e)),e})}computeOutputShape(t){t=tf(t);const e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2],r="channelsFirst"===this.dataFormat?t[1]*this.depthMultiplier:t[3]*this.depthMultiplier,s=Qm(e,this.kernelSize[0],this.padding,this.strides[0]),a=Qm(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[t[0],r,s,a]:[t[0],s,a,r]}getConfig(){const t=super.getConfig();return t.depthMultiplier=this.depthMultiplier,t.depthwiseInitializer=Hd(this.depthwiseInitializer),t.depthwiseRegularizer=Um(this.depthwiseRegularizer),t.depthwiseConstraint=Wp(this.depthwiseRegularizer),t}}fg.className="DepthwiseConv2D",Ja(fg);class mg extends hf{constructor(t){super(t),this.rate=Math.max(Math.min(t.rate,1),0),this.noiseShape=t.noiseShape,this.seed=t.seed,this.supportsMasking=!0}getNoiseShape(t){if(null==this.noiseShape)return this.noiseShape;const e=t.shape,n=[];for(let t=0;t<this.noiseShape.length;++t)n.push(null==this.noiseShape[t]?e[t]:this.noiseShape[t]);return n}call(t,e){return ii(()=>{this.invokeCallHook(t,e);const n=Qd(t);if(0<this.rate&&this.rate<1){const t=null!=e.training&&e.training,r=this.getNoiseShape(n);return Id(()=>Nd(n,this.rate,r,this.seed),()=>n,t)}return t})}getConfig(){const t={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},e=super.getConfig();return Object.assign(t,e),t}dispose(){return super.dispose()}}mg.className="Dropout",Ja(mg);class gg extends mg{constructor(t){super(t),this.inputSpec=[{ndim:3}]}getNoiseShape(t){const e=t.shape;return[e[0],1,e[2]]}}gg.className="SpatialDropout1D",Ja(gg);class yg extends hf{constructor(t){if(super(t),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==t.batchInputShape&&null==t.inputShape&&null!=t.inputDim){let e=null;null!=t.batchSize&&(e=t.batchSize),this.batchInputShape=[e,t.inputDim]}this.units=t.units,_p(this.units,"units"),this.activation=Bm(t.activation),null!=t.useBias&&(this.useBias=t.useBias),this.kernelInitializer=qd(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=qd(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=Up(t.kernelConstraint),this.biasConstraint=Up(t.biasConstraint),this.kernelRegularizer=Hm(t.kernelRegularizer),this.biasRegularizer=Hm(t.biasRegularizer),this.activityRegularizer=Hm(t.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(t){const e=(t=tf(t))[t.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[e,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:e}}],this.built=!0}computeOutputShape(t){const e=(t=tf(t)).slice();return e[e.length-1]=this.units,e}call(t,e){return ii(()=>{this.invokeCallHook(t,e);const n=Qd(t),r=Dp(this.activation.getClassName());let s;return null!=r?s=bd(n,this.kernel.read(),r,this.bias?this.bias.read():null):(s=bd(n,this.kernel.read()),null!=this.bias&&(s=kd(s,this.bias.read())),null!=this.activation&&(s=this.activation.apply(s))),s})}getConfig(){const t={units:this.units,activation:Lm(this.activation),useBias:this.useBias,kernelInitializer:Hd(this.kernelInitializer),biasInitializer:Hd(this.biasInitializer),kernelRegularizer:Um(this.kernelRegularizer),biasRegularizer:Um(this.biasRegularizer),activityRegularizer:Um(this.activityRegularizer),kernelConstraint:Wp(this.kernelConstraint),biasConstraint:Wp(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}}yg.className="Dense",Ja(yg);class bg extends hf{constructor(t){super(t=t||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=t.dataFormat}computeOutputShape(t){t=tf(t);for(const e of t.slice(1))if(null==e)throw new fp(`The shape of the input to "Flatten" is not fully defined (got ${t.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[t[0],sd(t,1)]}call(t,e){return ii(()=>{this.invokeCallHook(t,e);let n=Qd(t);if("channelsFirst"===this.dataFormat&&n.rank>1){const t=[0];for(let e=2;e<n.rank;++e)t.push(e);t.push(1),n=n.transpose(t)}return function(t){if(t.rank<=1)throw new fp(`batchFlatten requires a minimum rank of 2. Got rank: ${t.rank}.`);const e=[t.shape[0],sd(t.shape,1)];return t.reshape(e)}(n)})}getConfig(){const t={};null!=this.dataFormat&&(t.dataFormat=this.dataFormat);const e=super.getConfig();return Object.assign(t,e),t}}bg.className="Flatten",Ja(bg);class xg extends hf{constructor(t){super(t),this.supportsMasking=!0,this.activation=Bm(t.activation)}call(t,e){return ii(()=>{this.invokeCallHook(t,e);const n=Qd(t);return this.activation.apply(n)})}getConfig(){const t={activation:Lm(this.activation)},e=super.getConfig();return Object.assign(t,e),t}}xg.className="Activation",Ja(xg);class wg extends hf{constructor(t){super(t),this.n=t.n,this.inputSpec=[{ndim:2}]}computeOutputShape(t){return[t[0],this.n,t[1]]}call(t,e){return ii(()=>function(t,e){return ii(()=>{if(2!==t.shape.length)throw new fp(`repeat() expects a rank-2 tensor, but received a rank-${t.shape.length} tensor.`);return gd(cd(t,1),[1,e,1])})}(t=Qd(t),this.n))}getConfig(){const t={n:this.n},e=super.getConfig();return Object.assign(t,e),t}}wg.className="RepeatVector",Ja(wg);class vg extends hf{constructor(t){super(t),this.targetShape=t.targetShape;for(let t=0;t<this.targetShape.length;++t)this.isUnknown(this.targetShape[t])&&(this.targetShape[t]=null)}isUnknown(t){return t<0||null==t}fixUnknownDimension(t,e){const n="Total size of new array must be unchanged.",r=e.slice();let s=1,a=null;for(let t=0;t<r.length;++t){const e=r[t];if(this.isUnknown(e)){if(null!==a)throw new fp("Can only specifiy one unknown dimension.");a=t}else s*=e}const i=sd(t);if(null!==a){if(0===s||i%s!=0)throw new fp(n);r[a]=i/s}else if(i!==s)throw new fp(n);return r}computeOutputShape(t){let e=!1;for(let n=0;n<t.length;++n)if(this.isUnknown(t[n])){e=!0;break}return e?t.slice(0,1).concat(this.targetShape):t.slice(0,1).concat(this.fixUnknownDimension(t.slice(1),this.targetShape))}call(t,e){return ii(()=>{this.invokeCallHook(t,e);const n=Qd(t),r=n.shape,s=r.slice(0,1).concat(this.fixUnknownDimension(r.slice(1),this.targetShape));return n.reshape(s)})}getConfig(){const t={targetShape:this.targetShape},e=super.getConfig();return Object.assign(t,e),t}}vg.className="Reshape",Ja(vg);class kg extends hf{constructor(t){if(super(t),null==t.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(t.dims))throw new Error("Permute constructor requires `dims` to be an Array, but received "+t.dims+" instead.");const e=ud(1,t.dims.length+1);if(!R(t.dims.slice().sort(),e))throw new Error("Invalid permutation `dims`: "+JSON.stringify(t.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=t.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new af({ndim:this.dims.length+1})]}computeOutputShape(t){const e=(t=tf(t)).slice();return this.dims.forEach((n,r)=>{e[r+1]=t[n]}),e}call(t,e){return In(Qd(t),this.dimsIncludingBatch)}getConfig(){const t={dims:this.dims},e=super.getConfig();return Object.assign(t,e),t}}kg.className="Permute",Ja(kg);class Ng extends hf{constructor(t){super(null==t?{}:t),this.supportsMasking=!0,this.maskValue=null!=t?null==t.maskValue?0:t.maskValue:0}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={maskValue:this.maskValue};return Object.assign(e,t),e}computeMask(t,e){const n=Qd(t);return gi(Fo(n,this.maskValue),-1)}call(t,e){return ii(()=>{this.invokeCallHook(t,e);const n=Qd(t),r=gi(Fo(n,this.maskValue),-1,!0);return n.mul(r.asType(n.dtype))})}}Ng.className="Masking",Ja(Ng);class Ig extends hf{constructor(t){if(super(t),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==t.batchInputShape&&null==t.inputShape){let e=null;null!=t.batchSize&&(e=t.batchSize),null==t.inputLength?this.batchInputShape=[e,null]:this.batchInputShape=[e].concat(vp(t.inputLength))}this.inputDim=t.inputDim,_p(this.inputDim,"inputDim"),this.outputDim=t.outputDim,_p(this.outputDim,"outputDim"),this.embeddingsInitializer=qd(t.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=Hm(t.embeddingsRegularizer),this.activityRegularizer=Hm(t.activityRegularizer),this.embeddingsConstraint=Up(t.embeddingsConstraint),this.maskZero=t.maskZero,this.supportsMasking=t.maskZero,this.inputLength=t.inputLength}build(t){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(t){}computeMask(t,e){return ii(()=>this.maskZero?(t=Qd(t),Fo(t,fe(t))):null)}computeOutputShape(t){if(t=tf(t),null==this.inputLength)return[...t,this.outputDim];const e=vp(this.inputLength);if(e.length!==t.length-1)throw new fp(`"inputLength" is ${this.inputLength}, but received input shape has shape `+t);{let n=0;for(let r=0;r<e.length;++r){const s=e[r],a=t[r+1];if(null!=s&&null!=a&&s!==a)throw new fp(`"inputLength" is ${this.inputLength}, but received input shape has shape `+t);null==s&&(e[n]=a),n++}}return[t[0],...e,this.outputDim]}call(t,e){return ii(()=>{this.invokeCallHook(t,e);let n=Qd(t);"int32"!==n.dtype&&(n=ld(n,"int32"));return xd(this.embeddings.read(),n.as1D()).reshape(tf(this.computeOutputShape(n.shape)))})}getConfig(){const t={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:Hd(this.embeddingsInitializer),embeddingsRegularizer:Um(this.embeddingsRegularizer),activityRegularizer:Um(this.activityRegularizer),embeddingsConstraint:Wp(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},e=super.getConfig();return Object.assign(t,e),t}}Ig.className="Embedding",Ja(Ig);class Sg extends hf{constructor(t){super(t||{}),this.supportsMasking=!0}mergeFunction(t){throw new mp}computeElementwiseOpOutputShape(t,e){if(null==t||null==e)return null;if(t.length<e.length)return this.computeElementwiseOpOutputShape(e,t);if(0===e.length)return t;const n=t.slice(0,t.length-e.length);for(let r=0;r<e.length;++r){const s=t[t.length-e.length+r],a=e[r];if(null==s||null==a||s<0||a<0)n.push(null);else if(1===s)n.push(a);else if(1===a)n.push(s);else{if(s!==a)throw new fp("Operands could not be broadcast together with shapes "+JSON.stringify(t)+" "+JSON.stringify(e));n.push(s)}}return n}build(t){if(Array.isArray(t)&&!Array.isArray(t[0])&&(t=[tf(t)]),(t=t).length<2)throw new fp(`A merge layer should be called on an Array of at least 2 inputs. Got ${t.length} input(s).`);let e=[];for(const n of t)null!=n&&null!==n[0]&&e.push(n[0]);if(e=Ep(e),e.length>1)throw new fp(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(t)}.`);let n=null==t[0]?null:t[0].slice(1);for(let e=1;e<t.length;++e){const r=null==t[e]?null:t[e].slice(1);n=this.computeElementwiseOpOutputShape(n,r)}const r=t.map(t=>t.length);-1===t.indexOf(null)&&1===Ep(r).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(t,e){return ii(()=>{if(t=t,this.reshapeRequired){const e=[],n=t.map(t=>t.rank);if(-1===n.indexOf(null)){const r=od(n);for(let n of t){const t=n.rank;for(let e=0;e<r-t;++e)n=cd(n,1);e.push(n)}return this.mergeFunction(e)}{let n=!1;for(const r of t){const t=r.rank;if(null==t){const t=r.shape,s=t[0],a=t.slice(1).concat([s]);let i=r.reshape([s].concat(sd(t.slice(1))));i=In(i,[1,0]),i=i.reshape(a),e.push(i),n=!0}else if(t>1){const s=ud(1,t).concat([0]);e.push(In(r,s)),n=!0}else e.push(r)}let r=this.mergeFunction(e);const s=r.rank;if(n)if(null==s){const t=r.shape,e=t[t.length-1],n=[e].concat(t.slice(0,t.length-1));r=In(r.reshape([-1,e]),[1,0]).reshape(n)}else if(s>1){const t=[s-1].concat(ud(0,s-1));r=In(r,t)}return r}}return this.mergeFunction(t)})}computeOutputShape(t){let e;e=null==(t=t)[0]?null:t[0].slice(1);for(let n=1;n<t.length;++n){const r=null==t[n]?null:t[n].slice(1);e=this.computeElementwiseOpOutputShape(e,r)}let n=[];for(const e of t)null!=e&&null!==e[0]&&n.push(e[0]);return n=Ep(n),e=1===n.length?n.concat(e):[null].concat(e),e}computeMask(t,e){return ii(()=>{if(null==e)return null;if(!Array.isArray(e))throw new fp("`mask` should be an Array");if(!Array.isArray(t))throw new fp("`inputs` should be an Array");if(e.length!==t.length)throw new fp(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${t.length} vs ${e.length})`);if(e.every(t=>null==t))return null;let n=(e=e.map(t=>null==t?t:Ds(t,0)))[0];for(let t=1;t<e.length-1;++t)n=an(n,e[t]);return n})}}class Cg extends Sg{constructor(t){super(t)}mergeFunction(t){return ii(()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=be(e,t[n]);return e})}}Cg.className="Add",Ja(Cg);class Ag extends Sg{constructor(t){super(t)}mergeFunction(t){return ii(()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=Yt(e,t[n]);return e})}}Ag.className="Multiply",Ja(Ag);class Eg extends Sg{constructor(t){super(t)}mergeFunction(t){return ii(()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=be(e,t[n]);return Yt(1/t.length,e)})}}Eg.className="Average",Ja(Eg);class Tg extends Sg{constructor(t){super(t)}mergeFunction(t){return ii(()=>{let e=t[0];for(let n=1;n<t.length;++n)e=Ps(e,t[n]);return e})}}Tg.className="Maximum",Ja(Tg);class Rg extends Sg{constructor(t){super(t)}mergeFunction(t){return ii(()=>{let e=t[0];for(let n=1;n<t.length;++n)e=To(e,t[n]);return e})}}Rg.className="Minimum",Ja(Rg);class $g extends Sg{constructor(t){super(t),this.DEFAULT_AXIS=-1,null==t&&(t={}),this.axis=null==t.axis?this.DEFAULT_AXIS:t.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(t){if(!Array.isArray(t)||!Array.isArray(t[0])||1===t.length)throw new fp("A `Concatenate` layer should be called on a list of at least 2 inputs");t=t;let e=!0;for(const n of t)if(null!=n){e=!1;break}if(e)return;const n=[];for(let e=0;e<t.length;++e){const r=t[e].slice();r.splice(this.axis,1);let s=!1;for(const t of n)if(R(t,r)){s=!0;break}s||n.push(r)}if(n.length>1)throw new fp("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(t))}mergeFunction(t){return ii(()=>fd(t,this.axis))}computeOutputShape(t){if(!Array.isArray(t)||!Array.isArray(t[0]))throw new fp("A `Concatenate` layer should be called on a list of inputs.");const e=t,n=e[0].slice(),r=this.axis<0?n.length+this.axis:this.axis;for(const t of e.slice(1)){if(null==n[r]||null==t[r]){n[r]=null;break}n[r]+=t[r]}return n}computeMask(t,e){if(null==e)return null;if(!Array.isArray(e))throw new fp("`mask` should be an array for Concatenate");if(!Array.isArray(t))throw new fp("`inputs` should be an array for Concatenate");if(e.length!==t.length)throw new fp(`Mismatch in the length of mask (${e.length}) and the legnth of inputs (${t.length})`);return ii(()=>{let n=!0;if(e.forEach(t=>{null==t||(n=!1)}),n)return null;const r=[];for(let n=0;n<t.length;++n)null==e[n]?r.push(Oo(t[n]).asType("bool")):e[n].rank<t[n].rank?r.push(Ds(e[n],-1)):r.push(e[n]);const s=xs(r,this.axis);return mi(s,-1,!1)})}getConfig(){const t={axis:this.axis},e=super.getConfig();return Object.assign(t,e),t}}function _g(t,e){for(;t<0;)t+=e;return t}$g.className="Concatenate",Ja($g);class Dg extends Sg{constructor(t){super(t),this.axes=t.axes,this.normalize=null!=t.normalize&&t.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(t){S(Array.isArray(t)&&2===t.length&&Array.isArray(t[0])&&Array.isArray(t[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const e=t[0],n=t[1];if(e.length>3||n.length>3)throw new mp("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(e,n);if(e[r[0]]!==n[r[1]])throw new fp(`Dimension incompatibility: ${e[r[0]]} !== ${n[r[1]]}`)}mergeFunction(t){if(2!==t.length)throw new fp(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${t.length} input(s).`);let e,n=t[0],r=t[1];return e=Array.isArray(this.axes)?this.axes.map((e,n)=>_g(e,t[n].shape.length)):[_g(this.axes,n.shape.length),_g(this.axes,r.shape.length)],this.normalize&&(n=Sf(n,e[0]),r=Sf(r,e[1])),function(t,e,n){if(t.shape.length>3||e.shape.length>3)throw new mp("batchDot is not implemented for tensors of 4D or higher rank yet");if(S(t.shape.length>=2,()=>"batchDot requires the rank of x to be >= 2, but got "+t.shape.length),S(t.shape.length>=2,()=>"batchDot requires the rank of y to be >= 2, but got "+e.shape.length),"number"==typeof n&&(n=[n,n]),"complex64"===t.dtype||"complex64"===e.dtype)throw new mp("batchDot is not implemented for complex64-type Tensors yet.");const r=t.shape.length,s=e.shape.length;null==n&&(n=[r-1,s-2]);const a=n;return ii(()=>{let n,i;if(r>s){n=r-s;const t=[];for(let e=0;e<n;++e)t.push(1);e=e.reshape(e.shape.concat(t))}else if(s>r){n=s-r;const e=[];for(let t=0;t<n;++t)e.push(1);t=t.reshape(t.shape.concat(e))}else n=0;if(2===t.shape.length&&2===e.shape.length)i=a[0]===a[1]?t.mul(e).sum(a[0]):t.transpose([1,0]).mul(e).sum(a[1]);else{const n=a[0]!==t.shape.length-1,r=a[1]===e.shape.length-1;i=t.matMul(e,n,r)}if(n>0){let t;t=r>s?r+s-3:r-1;const e=[];for(let r=t;r<t+n;++r)e.push(r);i=i.squeeze(e)}return 1===i.shape.length&&(i=i.expandDims(1)),i})}(n,r,e)}interpretAxes(t,e){let n;return n=Array.isArray(this.axes)?this.axes:[_g(this.axes,t.length),_g(this.axes,e.length)],n}computeOutputShape(t){S(Array.isArray(t)&&2===t.length&&Array.isArray(t[0])&&Array.isArray(t[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const e=t[0].slice(),n=t[1].slice();if(e.length>3||n.length>3)throw new mp("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(e,n);e.splice(r[0],1),n.splice(r[1],1),n.splice(0,1);const s=e.concat(n);return 1===s.length&&s.push(1),s}computeMask(t,e){return null}getConfig(){const t={axes:this.axes,normalize:this.normalize},e=super.getConfig();return Object.assign(t,e),t}}Dg.className="Dot",Ja(Dg);class Fg extends hf{constructor(t){super(t),this.supportsMasking=!0,this.stddev=t.stddev}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={stddev:this.stddev};return Object.assign(e,t),e}call(t,e){return ii(()=>{this.invokeCallHook(t,e);const n=Qd(t);return Id(()=>yd(n.shape,0,this.stddev).add(n),()=>n,e.training||!1)})}}Fg.className="GaussianNoise",Ja(Fg);class Og extends hf{constructor(t){super(t),this.supportsMasking=!0,this.rate=t.rate}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={rate:this.rate};return Object.assign(e,t),e}call(t,e){return ii(()=>{this.invokeCallHook(t,e);const n=Qd(t);if(this.rate>0&&this.rate<1){return Id(()=>{const t=Math.sqrt(this.rate/(1-this.rate));return n.mul(yd(n.shape,1,t))},()=>n,e.training||!1)}return n})}}Og.className="GaussianDropout",Ja(Og);class Mg extends hf{constructor(t){super(t),this.supportsMasking=!0,this.rate=t.rate,this.noiseShape=t.noiseShape}_getNoiseShape(t){return this.noiseShape||Qd(t).shape}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={rate:this.rate};return Object.assign(e,t),e}call(t,e){return ii(()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(t);return Id(()=>{const e=Qd(t),r=-1.7580993408473766;let s=rn(iu(n),this.rate);s=ld(s,"float32");const a=((1-this.rate)*(1+this.rate*r**2))**-.5,i=-a*r*this.rate;return e.mul(s).add(s.add(-1).mul(r)).mul(a).add(i)},()=>Qd(t),e.training||!1)}return t})}}function Lg(t,e,n,r,s,a=.001){let i;if(2===t.rank)i=Ri(t,e,n,r,s,a);else if(3===t.rank)i=$i(t,e,n,r,s,a);else{if(4!==t.rank)throw new mp(`batchNormalization is not implemented for array of rank ${t.rank} yet`);i=_i(t,e,n,r,s,a)}return i}function zg(t,e,n,r,s=.001){return R(r.slice().sort(),ud(0,t.rank-1))?function(t,e,n,r,s=.001){return ii(()=>{const a=$o(t,r),i=a.mean,o=a.variance;return[Lg(t,i,o,n,e,s),i,o]})}(t,e,n,r,s):function(t,e,n,r,s=.001){return ii(()=>{const a=$o(t,r),i=a.mean,o=a.variance,u=[];for(const e of ud(0,t.rank))-1!==r.indexOf(e)?u.push(1):u.push(t.shape[e]);const l=i.reshape(u),c=o.reshape(u),h=null==e?null:e.reshape(u),p=null==n?null:n.reshape(u);return[Lg(t,l,c,p,h,s),i,o]})}(t,e,n,r,s)}Mg.className="AlphaDropout",Ja(Mg);class Bg extends hf{constructor(t){null==t&&(t={}),super(t),this.supportsMasking=!0,this.axis=null==t.axis?-1:t.axis,this.momentum=null==t.momentum?.99:t.momentum,this.epsilon=null==t.epsilon?.001:t.epsilon,this.center=null==t.center||t.center,this.scale=null==t.scale||t.scale,this.betaInitializer=qd(t.betaInitializer||"zeros"),this.gammaInitializer=qd(t.gammaInitializer||"ones"),this.movingMeanInitializer=qd(t.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=qd(t.movingVarianceInitializer||"ones"),this.betaConstraint=Up(t.betaConstraint),this.gammaConstraint=Up(t.gammaConstraint),this.betaRegularizer=Hm(t.betaRegularizer),this.gammaRegularizer=Hm(t.gammaRegularizer)}build(t){t=tf(t);const e=this.axis>=0?this.axis:this.axis+t.length,n=t[e];if(null==n)throw new fp(`Axis ${e} of input tensor should have a defined dimension but the layer received an input with shape `+JSON.stringify(t)+".");this.inputSpec=[new af({ndim:t.length,axes:{[e]:n}})];const r=[n];this.scale&&(this.gamma=this.addWeight("gamma",r,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",r,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",r,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",r,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(t,e){return ii(()=>{const n=null!=e.training&&e.training,r=Qd(t),s=r.shape,a=s.length,i=ud(0,a),o=this.axis>=0?this.axis:this.axis+a;i.splice(o,1);const u=yp(1,a);u[o]=s[o];const l=i.slice();l.sort();const c=!R(l,ud(0,a).slice(0,a-1));if(!n)return(()=>{if(c){const t=this.movingMean.read().reshape(u),e=this.movingVariance.read().reshape(u),n=this.center?this.beta.read().reshape(u):null,s=this.scale?this.gamma.read().reshape(u):null;return Lg(r,t,e,n,s,this.epsilon)}return Lg(r,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[h,p,d]=zg(r,this.gamma.read(),this.beta.read(),i,this.epsilon),f=(t,e,n)=>{ii(()=>{const r=1-n,s=t.read(),a=s.sub(e).mul(r);t.write(s.sub(a))})};return(()=>{f(this.movingMean,p,this.momentum),f(this.movingVariance,d,this.momentum)})(),h})}getConfig(){const t={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Hd(this.betaInitializer),gammaInitializer:Hd(this.gammaInitializer),movingMeanInitializer:Hd(this.movingMeanInitializer),movingVarianceInitializer:Hd(this.movingVarianceInitializer),betaRegularizer:Um(this.betaRegularizer),gammaRegularizer:Um(this.gammaRegularizer),betaConstraint:Wp(this.betaConstraint),gammaConstraint:Wp(this.gammaConstraint)},e=super.getConfig();return Object.assign(t,e),t}}Bg.className="BatchNormalization",Ja(Bg);class Pg extends hf{constructor(t){if(null==t&&(t={}),super(t),this.axis=null==t.axis?-1:t.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error("Expected axis to be an integer, but received "+this.axis)}else{if(!Array.isArray(this.axis))throw new Error("Expected axis to be an integer or an array of integers, but received "+JSON.stringify(this.axis));for(const t of this.axis)if(!Number.isInteger(t))throw new Error("Expected axis to be an array of integers, but received "+JSON.stringify(this.axis))}this.epsilon=null==t.epsilon?.001:t.epsilon,this.center=null==t.center||t.center,this.scale=null==t.scale||t.scale,this.betaInitializer=qd(t.betaInitializer||"zeros"),this.gammaInitializer=qd(t.gammaInitializer||"ones"),this.betaRegularizer=Hm(t.betaRegularizer),this.gammaRegularizer=Hm(t.gammaRegularizer),this.supportsMasking=!0}build(t){const e=(t=tf(t)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let t=0;t<this.axis.length;++t)this.axis[t]<0&&(this.axis[t]+=e);for(const t of this.axis)if(t<0||t>=e)throw new Error("Invalid axis: "+t);if(this.axis.length!==Ep(this.axis).length)throw new Error("Found duplicate axes in: "+this.axis);const n=this.axis.map(e=>t[e]);this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,!0):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,!0):this.beta=null,this.built=!0}call(t,e){const n=Qd(t),r=n.shape,s=r.length;return ii(()=>{let{mean:t,variance:e}=$o(n,this.axis,!0);const a=yp(1,s);for(const t of this.axis)a[t]=r[t];const i=t=>null!=t&&t.shape.length!==s&&this.axis!==[s-1]?t.reshape(a):t;let o=i(this.gamma.read()),u=i(this.beta.read());const l=[],c=[];for(let t=0;t<s;++t)-1!==this.axis.indexOf(t)?(l.push(r[t]),c.push(1)):(l.push(1),c.push(r[t]));return t=t.tile(l),e=e.tile(l),o=o.tile(c),u=u.tile(c),Lg(n,t,e,u,o,this.epsilon)})}getConfig(){const t={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Hd(this.betaInitializer),gammaInitializer:Hd(this.gammaInitializer),betaRegularizer:Um(this.betaRegularizer),gammaRegularizer:Um(this.gammaRegularizer)},e=super.getConfig();return Object.assign(t,e),t}}Pg.className="LayerNormalization",Ja(Pg);class Wg extends hf{constructor(t){if(null==t&&(t={}),super(t),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,null==t.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof t.padding)this.padding=[[t.padding,t.padding],[t.padding,t.padding]];else{if(t.padding=t.padding,2!==t.padding.length)throw new fp(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${t.padding.length} array.`);let e,n;if("number"==typeof t.padding[0])e=[t.padding[0],t.padding[0]],n=[t.padding[1],t.padding[1]];else{if(t.padding=t.padding,2!==t.padding[0].length)throw new fp(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${t.padding[0].length} array.`);if(e=t.padding[0],2!==t.padding[1].length)throw new fp(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${t.padding[1].length} array.`);n=t.padding[1]}this.padding=[e,n]}this.inputSpec=[new af({ndim:4})]}computeOutputShape(t){let e,n;return t=tf(t),"channelsFirst"===this.dataFormat?(e=null!=t[2]&&t[2]>=0?t[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=t[3]&&t[3]>=0?t[3]+this.padding[1][0]+this.padding[1][1]:null,[t[0],t[1],e,n]):(e=null!=t[1]&&t[1]>=0?t[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=t[2]&&t[2]>=0?t[2]+this.padding[1][0]+this.padding[1][1]:null,[t[0],e,n,t[3]])}call(t,e){return ii(()=>{return e=Qd(t),n=this.padding,r=this.dataFormat,ii(()=>{if(4!==e.rank)throw new fp("temporalPadding expects input tensor to be 4-D, but received a "+e.rank+"-D tensor.");if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new fp("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==r&&(r="channelsLast"),"channelsLast"!==r&&"channelsFirst"!==r)throw new fp(`Unknown data format: ${r}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let t;return t="channelsFirst"===r?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],Kr(e,t)});var e,n,r})}getConfig(){const t={padding:this.padding,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}function Vg(t,e,n,r,s,a){return ii(()=>{let i;Xp(s),Jp(a),Yp(r),null==n&&(n=[1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==a&&(a="max"),t=eg(t,s);const o="same"===r?"same":"valid";return i="max"===a?Io(t,e,n,o):Ii(t,e,n,o),"channelsFirst"===s&&(i=In(i,[0,3,1,2])),i})}function Ug(t,e,n,r,s,a){return ii(()=>{let i;Xp(s),Jp(a),Yp(r),null==n&&(n=[1,1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==a&&(a="max"),t=ng(t,s);const o="same"===r?"same":"valid";return i="max"===a?So(t,e,n,o):Si(t,e,n,o),"channelsFirst"===s&&(i=In(i,[0,4,1,2,3])),i})}Wg.className="ZeroPadding2D",Ja(Wg);class Gg extends hf{constructor(t){if(null==t.poolSize&&(t.poolSize=2),super(t),"number"==typeof t.poolSize)this.poolSize=[t.poolSize];else{if(!Array.isArray(t.poolSize)||1!==t.poolSize.length||"number"!=typeof t.poolSize[0])throw new fp("poolSize for 1D convolutional layer must be a number or an Array of a single number, but received "+JSON.stringify(t.poolSize));this.poolSize=t.poolSize}if(_p(this.poolSize,"poolSize"),null==t.strides)this.strides=this.poolSize;else if("number"==typeof t.strides)this.strides=[t.strides];else{if(!Array.isArray(t.strides)||1!==t.strides.length||"number"!=typeof t.strides[0])throw new fp("strides for 1D convolutional layer must be a number or an Array of a single number, but received "+JSON.stringify(t.strides));this.strides=t.strides}_p(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,Yp(this.padding),this.inputSpec=[new af({ndim:3})]}computeOutputShape(t){const e=Qm((t=tf(t))[1],this.poolSize[0],this.padding,this.strides[0]);return[t[0],e,t[2]]}call(t,e){return ii(()=>{this.invokeCallHook(t,e),t=cd(Qd(t),2);const n=this.poolingFunction(Qd(t),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return Tu(n,[2])})}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides},e=super.getConfig();return Object.assign(t,e),t}}class Hg extends Gg{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return Xp(s),Yp(r),Vg(t,e,n,r,s,"max")}}Hg.className="MaxPooling1D",Ja(Hg);class qg extends Gg{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return Xp(s),Yp(r),Vg(t,e,n,r,s,"avg")}}qg.className="AveragePooling1D",Ja(qg);class jg extends hf{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(2!==t.strides.length)throw new fp("If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length "+t.strides.length+".");this.strides=t.strides}else this.strides=[t.strides,t.strides];_p(this.poolSize,"poolSize"),_p(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Xp(this.dataFormat),Yp(this.padding),this.inputSpec=[new af({ndim:4})]}computeOutputShape(t){t=tf(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2];return e=Qm(e,this.poolSize[0],this.padding,this.strides[0]),n=Qm(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,n]:[t[0],e,n,t[3]]}call(t,e){return ii(()=>(this.invokeCallHook(t,e),this.poolingFunction(Qd(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class Kg extends jg{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return Xp(s),Yp(r),Vg(t,e,n,r,s,"max")}}Kg.className="MaxPooling2D",Ja(Kg);class Xg extends jg{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return Xp(s),Yp(r),Vg(t,e,n,r,s,"avg")}}Xg.className="AveragePooling2D",Ja(Xg);class Yg extends hf{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(3!==t.strides.length)throw new fp("If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length "+t.strides.length+".");this.strides=t.strides}else this.strides=[t.strides,t.strides,t.strides];_p(this.poolSize,"poolSize"),_p(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Xp(this.dataFormat),Yp(this.padding),this.inputSpec=[new af({ndim:5})]}computeOutputShape(t){t=tf(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2],r="channelsFirst"===this.dataFormat?t[4]:t[3];return e=Qm(e,this.poolSize[0],this.padding,this.strides[0]),n=Qm(n,this.poolSize[1],this.padding,this.strides[1]),r=Qm(r,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,n,r]:[t[0],e,n,r,t[4]]}call(t,e){return ii(()=>(this.invokeCallHook(t,e),this.poolingFunction(Qd(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class Jg extends Yg{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return Xp(s),Yp(r),Ug(t,e,n,r,s,"max")}}Jg.className="MaxPooling3D",Ja(Jg);class Zg extends Yg{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return Xp(s),Yp(r),Ug(t,e,n,r,s,"avg")}}Zg.className="AveragePooling3D",Ja(Zg);class Qg extends hf{constructor(t){super(t),this.inputSpec=[new af({ndim:3})]}computeOutputShape(t){return[t[0],t[2]]}call(t,e){throw new mp}}class ty extends Qg{constructor(t){super(t||{})}call(t,e){return ii(()=>{const e=Qd(t);return Ao(e,1)})}}ty.className="GlobalAveragePooling1D",Ja(ty);class ey extends Qg{constructor(t){super(t||{})}call(t,e){return ii(()=>{const e=Qd(t);return xo(e,1)})}}ey.className="GlobalMaxPooling1D",Ja(ey);class ny extends hf{constructor(t){super(t),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Xp(this.dataFormat),this.inputSpec=[new af({ndim:4})]}computeOutputShape(t){return t=t,"channelsLast"===this.dataFormat?[t[0],t[3]]:[t[0],t[1]]}call(t,e){throw new mp}getConfig(){const t={dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class ry extends ny{call(t,e){return ii(()=>{const e=Qd(t);return"channelsLast"===this.dataFormat?Ao(e,[1,2]):Ao(e,[2,3])})}}ry.className="GlobalAveragePooling2D",Ja(ry);class sy extends ny{call(t,e){return ii(()=>{const e=Qd(t);return"channelsLast"===this.dataFormat?xo(e,[1,2]):xo(e,[2,3])})}}function ay(t,e,n,r){if(Array.isArray(t)){if(null!=e||null!=n)throw new fp("When inputs is an array, neither initialState or constants should be provided");null!=r&&(n=t.slice(t.length-r,t.length),t=t.slice(0,t.length-r)),t.length>1&&(e=t.slice(1,t.length)),t=t[0]}function s(t){return null==t||Array.isArray(t)?t:[t]}return{inputs:t,initialState:e=s(e),constants:n=s(n)}}function iy(t,e,n,r=!1,s,a,i=!1,o=!1){return ii(()=>{const u=e.shape.length;if(u<3)throw new fp(`Input should be at least 3D, but is ${u}D.`);const l=[1,0].concat(ud(2,u));if(e=In(e,l),null!=a)throw new mp("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=s&&((s=s.asType("bool").asType("float32")).rank===u-1&&(s=Ds(s,-1)),s=In(s,l)),r&&(e=Fr(e,0),null!=s&&(s=Fr(s,0)));const c=[];let h,p=n;const d=e.shape[0],f=zu(e);let m,g;null!=s&&(m=zu(s));for(let e=0;e<d;++e){const n=f[e],r=ii(()=>t(n,p));if(null==s)h=r[0],p=r[1];else{const t=ii(()=>{const t=m[e],n=Oo(t).sub(t);return{output:r[0].mul(t).add(p[0].mul(n)),newStates:p.map((e,s)=>r[1][s].mul(t).add(e.mul(n)))}});h=t.output,p=t.newStates}o&&c.push(h)}if(o){g=Fs(c,1)}return[h,g,p]})}sy.className="GlobalMaxPooling2D",Ja(sy);class oy extends hf{constructor(t){let e;if(super(t),null==t.cell)throw new fp("cell property is missing for the constructor of RNN.");if(e=Array.isArray(t.cell)?new my({cells:t.cell}):t.cell,null==e.stateSize)throw new fp("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=e,this.returnSequences=null!=t.returnSequences&&t.returnSequences,this.returnState=null!=t.returnState&&t.returnState,this.goBackwards=null!=t.goBackwards&&t.goBackwards,this._stateful=null!=t.stateful&&t.stateful,this.unroll=null!=t.unroll&&t.unroll,this.supportsMasking=!0,this.inputSpec=[new af({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){if(null==this.states_){return ud(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map(t=>null)}return this.states_}setStates(t){this.states_=t}computeOutputShape(t){Jd(t)&&(t=t[0]),t=t;let e=this.cell.stateSize;Array.isArray(e)||(e=[e]);const n=e[0];let r;if(r=this.returnSequences?[t[0],t[1],n]:[t[0],n],this.returnState){const n=[];for(const r of e)n.push([t[0],r]);return[r].concat(n)}return r}computeMask(t,e){return ii(()=>{Array.isArray(e)&&(e=e[0]);const t=this.returnSequences?e:null;if(this.returnState){const e=this.states.map(t=>null);return[t].concat(e)}return t})}get states(){if(null==this.states_){const t=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,e=[];for(let n=0;n<t;++n)e.push(null);return e}return this.states_}set states(t){this.states_=t}build(t){if(null!=this.numConstants)throw new mp("Constants support is not implemented in RNN yet.");Jd(t)&&(t=t[0]),t=t;const e=this.stateful?t[0]:null,n=t[t.length-1];this.inputSpec[0]=new af({shape:[e,null,n]});const r=[t[0]].concat(t.slice(2));let s;if(this.cell.build(r),s=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!R(this.stateSpec.map(t=>t.shape[t.shape.length-1]),s))throw new fp(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is `+this.cell.stateSize)}else this.stateSpec=s.map(t=>new af({shape:[null,t]}));this.stateful&&this.resetStates()}resetStates(t,e=!1){ii(()=>{if(!this.stateful)throw new pp("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new fp("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(t=>xr([n,t])):this.states_=[xr([n,this.cell.stateSize])];else if(null==t)oi(this.states_),null!=this.keptStates&&(oi(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(t=>xr([n,t])):this.states_[0]=xr([n,this.cell.stateSize]);else{if(Array.isArray(t)||(t=[t]),t.length!==this.states_.length)throw new fp(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: `+t);!0===e?this.keptStates.push(this.states_.slice()):oi(this.states_);for(let e=0;e<this.states_.length;++e){const r=t[e],s=Array.isArray(this.cell.stateSize)?this.cell.stateSize[e]:this.cell.stateSize,a=[n,s];if(!R(r.shape,a))throw new fp(`State ${e} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${r.shape}`);this.states_[e]=r}}this.states_=this.states_.map(t=>ui(t.clone()))})}apply(t,e){let n=null==e?null:e.initialState,r=null==e?null:e.constants;null==e&&(e={});const s=ay(t,n,r,this.numConstants);t=s.inputs,n=s.initialState,r=s.constants;let a=[],i=[];if(null!=n){e.initialState=n,a=a.concat(n),this.stateSpec=[];for(const t of n)this.stateSpec.push(new af({shape:t.shape}));i=i.concat(this.stateSpec)}null!=r&&(e.constants=r,a=a.concat(r),this.numConstants=r.length);if(a[0]instanceof of){const n=[t].concat(a),r=this.inputSpec.concat(i),s=this.inputSpec;this.inputSpec=r;const o=super.apply(n,e);return this.inputSpec=s,o}return super.apply(t,e)}call(t,e){return ii(()=>{const n=null==e?null:e.mask,r=null==e?null:e.training;let s=null==e?null:e.initialState;t=Qd(t),null==s&&(s=this.stateful?this.states_:this.getInitialState(t));const a=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(s.length!==a)throw new fp(`RNN Layer has ${a} state(s) but was passed `+s.length+" initial state(s).");this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const i={training:r},o=iy((t,e)=>{const n=this.cell.call([t].concat(e),i);return[n[0],n.slice(1)]},t,s,this.goBackwards,n,null,this.unroll,this.returnSequences),u=o[0],l=o[1],c=o[2];this.stateful&&this.resetStates(c,r);const h=this.returnSequences?l:u;return this.returnState?[h].concat(c):h})}getInitialState(t){return ii(()=>{let e=xr(t.shape);return e=Te(e,[1,2]),e=cd(e),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(t=>t>1?gd(e,[1,t]):e):this.cell.stateSize>1?[gd(e,[1,this.cell.stateSize])]:[e]})}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(t)}getConfig(){const t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const e=this.cell.getConfig();t.cell={className:this.cell.getClassName(),config:e};const n=super.getConfig();return Object.assign(t,n),t}static fromConfig(t,e,n={}){const r=If(e.cell,n);return new t(Object.assign(e,{cell:r}))}}oy.className="RNN",Ja(oy);class uy extends hf{}class ly extends uy{constructor(t){super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=t.units,_p(this.units,"units"),this.activation=Bm(null==t.activation?this.DEFAULT_ACTIVATION:t.activation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=qd(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=qd(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=qd(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Hm(t.kernelRegularizer),this.recurrentRegularizer=Hm(t.recurrentRegularizer),this.biasRegularizer=Hm(t.biasRegularizer),this.kernelConstraint=Up(t.kernelConstraint),this.recurrentConstraint=Up(t.recurrentConstraint),this.biasConstraint=Up(t.biasConstraint),this.dropout=id([1,od([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=id([1,od([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){t=tf(t),this.kernel=this.addWeight("kernel",[t[t.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return ii(()=>{if(2!==(t=t).length)throw new fp(`SimpleRNNCell expects 2 input Tensors, got ${t.length}.`);let n=t[1];t=t[0];const r=null!=e.training&&e.training;let s;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=gy(()=>Oo(t),this.dropout,r)),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=gy(()=>Oo(n),this.recurrentDropout,r));const a=this.dropoutMask,i=this.recurrentDropoutMask;s=bd(null!=a?Yt(t,a):t,this.kernel.read()),null!=this.bias&&(s=kd(s,this.bias.read())),null!=i&&(n=Yt(n,i));let o=be(s,bd(n,this.recurrentKernel.read()));return null!=this.activation&&(o=this.activation.apply(o)),[o,o]})}getConfig(){const t={units:this.units,activation:Lm(this.activation),useBias:this.useBias,kernelInitializer:Hd(this.kernelInitializer),recurrentInitializer:Hd(this.recurrentInitializer),biasInitializer:Hd(this.biasInitializer),kernelRegularizer:Um(this.kernelRegularizer),recurrentRegularizer:Um(this.recurrentRegularizer),biasRegularizer:Um(this.biasRegularizer),activityRegularizer:Um(this.activityRegularizer),kernelConstraint:Wp(this.kernelConstraint),recurrentConstraint:Wp(this.recurrentConstraint),biasConstraint:Wp(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout},e=super.getConfig();return Object.assign(t,e),t}}ly.className="SimpleRNNCell",Ja(ly);class cy extends oy{constructor(t){t.cell=new ly(t),super(t)}call(t,e){return ii(()=>{null!=this.cell.dropoutMask&&(oi(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(oi(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==e?null:e.mask,r=null==e?null:e.training,s=null==e?null:e.initialState;return super.call(t,{mask:n,training:r,initialState:s})})}get units(){return this.cell.units}get activation(){return this.cell.activation}get useBias(){return this.cell.useBias}get kernelInitializer(){return this.cell.kernelInitializer}get recurrentInitializer(){return this.cell.recurrentInitializer}get biasInitializer(){return this.cell.biasInitializer}get kernelRegularizer(){return this.cell.kernelRegularizer}get recurrentRegularizer(){return this.cell.recurrentRegularizer}get biasRegularizer(){return this.cell.biasRegularizer}get kernelConstraint(){return this.cell.kernelConstraint}get recurrentConstraint(){return this.cell.recurrentConstraint}get biasConstraint(){return this.cell.biasConstraint}get dropout(){return this.cell.dropout}get recurrentDropout(){return this.cell.recurrentDropout}getConfig(){const t={units:this.units,activation:Lm(this.activation),useBias:this.useBias,kernelInitializer:Hd(this.kernelInitializer),recurrentInitializer:Hd(this.recurrentInitializer),biasInitializer:Hd(this.biasInitializer),kernelRegularizer:Um(this.kernelRegularizer),recurrentRegularizer:Um(this.recurrentRegularizer),biasRegularizer:Um(this.biasRegularizer),activityRegularizer:Um(this.activityRegularizer),kernelConstraint:Wp(this.kernelConstraint),recurrentConstraint:Wp(this.recurrentConstraint),biasConstraint:Wp(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout},e=super.getConfig();return delete e.cell,Object.assign(t,e),t}static fromConfig(t,e){return new t(e)}}cy.className="SimpleRNN",Ja(cy);class hy extends uy{constructor(t){if(super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",t.resetAfter)throw new fp("GRUCell does not support reset_after parameter set to true.");this.units=t.units,_p(this.units,"units"),this.activation=Bm(void 0===t.activation?this.DEFAULT_ACTIVATION:t.activation),this.recurrentActivation=Bm(void 0===t.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:t.recurrentActivation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=qd(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=qd(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=qd(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Hm(t.kernelRegularizer),this.recurrentRegularizer=Hm(t.recurrentRegularizer),this.biasRegularizer=Hm(t.biasRegularizer),this.kernelConstraint=Up(t.kernelConstraint),this.recurrentConstraint=Up(t.recurrentConstraint),this.biasConstraint=Up(t.biasConstraint),this.dropout=id([1,od([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=id([1,od([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.implementation=t.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){const e=(t=tf(t))[t.length-1];this.kernel=this.addWeight("kernel",[e,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return ii(()=>{if(2!==(t=t).length)throw new fp("GRUCell expects 2 input Tensors (inputs, h, c), got "+t.length+".");const n=null!=e.training&&e.training;let r=t[1];t=t[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=gy(()=>Oo(t),this.dropout,n,3)),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=gy(()=>Oo(r),this.recurrentDropout,n,3));const s=this.dropoutMask,a=this.recurrentDropoutMask;let i,o,u;0<this.dropout&&this.dropout<1&&(t=Yt(t,s[0]));let l=bd(t,this.kernel.read());this.useBias&&(l=kd(l,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(r=Yt(r,a[0]));const c=this.recurrentKernel.read(),[h,p]=cn(c,[2*this.units,this.units],c.rank-1),d=bd(r,h),[f,m,g]=cn(l,3,l.rank-1),[y,b]=cn(d,2,d.rank-1);i=this.recurrentActivation.apply(be(f,y)),o=this.recurrentActivation.apply(be(m,b));const x=bd(Yt(o,r),p);u=this.activation.apply(be(g,x));const w=be(Yt(i,r),Yt(be(1,ee(i)),u));return[w,w]})}getConfig(){const t={units:this.units,activation:Lm(this.activation),recurrentActivation:Lm(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Hd(this.kernelInitializer),recurrentInitializer:Hd(this.recurrentInitializer),biasInitializer:Hd(this.biasInitializer),kernelRegularizer:Um(this.kernelRegularizer),recurrentRegularizer:Um(this.recurrentRegularizer),biasRegularizer:Um(this.biasRegularizer),activityRegularizer:Um(this.activityRegularizer),kernelConstraint:Wp(this.kernelConstraint),recurrentConstraint:Wp(this.recurrentConstraint),biasConstraint:Wp(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1},e=super.getConfig();return Object.assign(t,e),t}}hy.className="GRUCell",Ja(hy);class py extends oy{constructor(t){0===t.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),t.cell=new hy(t),super(t)}call(t,e){return ii(()=>{null!=this.cell.dropoutMask&&(oi(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(oi(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==e?null:e.mask,r=null==e?null:e.training,s=null==e?null:e.initialState;return super.call(t,{mask:n,training:r,initialState:s})})}get units(){return this.cell.units}get activation(){return this.cell.activation}get recurrentActivation(){return this.cell.recurrentActivation}get useBias(){return this.cell.useBias}get kernelInitializer(){return this.cell.kernelInitializer}get recurrentInitializer(){return this.cell.recurrentInitializer}get biasInitializer(){return this.cell.biasInitializer}get kernelRegularizer(){return this.cell.kernelRegularizer}get recurrentRegularizer(){return this.cell.recurrentRegularizer}get biasRegularizer(){return this.cell.biasRegularizer}get kernelConstraint(){return this.cell.kernelConstraint}get recurrentConstraint(){return this.cell.recurrentConstraint}get biasConstraint(){return this.cell.biasConstraint}get dropout(){return this.cell.dropout}get recurrentDropout(){return this.cell.recurrentDropout}get implementation(){return this.cell.implementation}getConfig(){const t={units:this.units,activation:Lm(this.activation),recurrentActivation:Lm(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Hd(this.kernelInitializer),recurrentInitializer:Hd(this.recurrentInitializer),biasInitializer:Hd(this.biasInitializer),kernelRegularizer:Um(this.kernelRegularizer),recurrentRegularizer:Um(this.recurrentRegularizer),biasRegularizer:Um(this.biasRegularizer),activityRegularizer:Um(this.activityRegularizer),kernelConstraint:Wp(this.kernelConstraint),recurrentConstraint:Wp(this.recurrentConstraint),biasConstraint:Wp(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1},e=super.getConfig();return delete e.cell,Object.assign(t,e),t}static fromConfig(t,e){return 0===e.implmentation&&(e.implementation=1),new t(e)}}py.className="GRU",Ja(py);class dy extends uy{constructor(t){super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=t.units,_p(this.units,"units"),this.activation=Bm(void 0===t.activation?this.DEFAULT_ACTIVATION:t.activation),this.recurrentActivation=Bm(void 0===t.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:t.recurrentActivation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=qd(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=qd(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=qd(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=t.unitForgetBias,this.kernelRegularizer=Hm(t.kernelRegularizer),this.recurrentRegularizer=Hm(t.recurrentRegularizer),this.biasRegularizer=Hm(t.biasRegularizer),this.kernelConstraint=Up(t.kernelConstraint),this.recurrentConstraint=Up(t.recurrentConstraint),this.biasConstraint=Up(t.biasConstraint),this.dropout=id([1,od([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=id([1,od([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.implementation=t.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){var e;const n=(t=tf(t))[t.length-1];let r;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const t=this.biasInitializer,n=this.units;r=new((e=class extends Ad{apply(e,r){const s=t.apply([n]),a=(new Td).apply([n]),i=t.apply([2*n]);return md(md(s,a),i)}}).className="CustomInit",e)}else r=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,r,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(t,e){return ii(()=>{const n=null!=e.training&&e.training;if(3!==(t=t).length)throw new fp("LSTMCell expects 3 input Tensors (inputs, h, c), got "+t.length+".");let r=t[1];const s=t[2];t=t[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=gy(()=>Oo(t),this.dropout,n,4)),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=gy(()=>Oo(r),this.recurrentDropout,n,4));const a=this.dropoutMask,i=this.recurrentDropoutMask;let o,u,l,c;0<this.dropout&&this.dropout<1&&(t=Yt(t,a[0]));let h=bd(t,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(r=Yt(r,i[0])),h=be(h,bd(r,this.recurrentKernel.read())),this.useBias&&(h=kd(h,this.bias.read()));const[p,d,f,m]=cn(h,4,h.rank-1);o=this.recurrentActivation.apply(p),u=this.recurrentActivation.apply(d),l=be(Yt(u,s),Yt(o,this.activation.apply(f))),c=this.recurrentActivation.apply(m);const g=Yt(c,this.activation.apply(l));return[g,g,l]})}getConfig(){const t={units:this.units,activation:Lm(this.activation),recurrentActivation:Lm(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Hd(this.kernelInitializer),recurrentInitializer:Hd(this.recurrentInitializer),biasInitializer:Hd(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:Um(this.kernelRegularizer),recurrentRegularizer:Um(this.recurrentRegularizer),biasRegularizer:Um(this.biasRegularizer),activityRegularizer:Um(this.activityRegularizer),kernelConstraint:Wp(this.kernelConstraint),recurrentConstraint:Wp(this.recurrentConstraint),biasConstraint:Wp(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation},e=super.getConfig();return Object.assign(t,e),t}}dy.className="LSTMCell",Ja(dy);class fy extends oy{constructor(t){0===t.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),t.cell=new dy(t),super(t)}call(t,e){return ii(()=>{null!=this.cell.dropoutMask&&(oi(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(oi(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==e?null:e.mask,r=null==e?null:e.training,s=null==e?null:e.initialState;return super.call(t,{mask:n,training:r,initialState:s})})}get units(){return this.cell.units}get activation(){return this.cell.activation}get recurrentActivation(){return this.cell.recurrentActivation}get useBias(){return this.cell.useBias}get kernelInitializer(){return this.cell.kernelInitializer}get recurrentInitializer(){return this.cell.recurrentInitializer}get biasInitializer(){return this.cell.biasInitializer}get unitForgetBias(){return this.cell.unitForgetBias}get kernelRegularizer(){return this.cell.kernelRegularizer}get recurrentRegularizer(){return this.cell.recurrentRegularizer}get biasRegularizer(){return this.cell.biasRegularizer}get kernelConstraint(){return this.cell.kernelConstraint}get recurrentConstraint(){return this.cell.recurrentConstraint}get biasConstraint(){return this.cell.biasConstraint}get dropout(){return this.cell.dropout}get recurrentDropout(){return this.cell.recurrentDropout}get implementation(){return this.cell.implementation}getConfig(){const t={units:this.units,activation:Lm(this.activation),recurrentActivation:Lm(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Hd(this.kernelInitializer),recurrentInitializer:Hd(this.recurrentInitializer),biasInitializer:Hd(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:Um(this.kernelRegularizer),recurrentRegularizer:Um(this.recurrentRegularizer),biasRegularizer:Um(this.biasRegularizer),activityRegularizer:Um(this.activityRegularizer),kernelConstraint:Wp(this.kernelConstraint),recurrentConstraint:Wp(this.recurrentConstraint),biasConstraint:Wp(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation},e=super.getConfig();return delete e.cell,Object.assign(t,e),t}static fromConfig(t,e){return 0===e.implmentation&&(e.implementation=1),new t(e)}}fy.className="LSTM",Ja(fy);class my extends uy{constructor(t){super(t),this.cells=t.cells}get stateSize(){const t=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?t.push(...e.stateSize):t.push(e.stateSize);return t}call(t,e){return ii(()=>{let n=(t=t).slice(1);const r=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?r.push(n.splice(0,t.stateSize.length)):r.push(n.splice(0,1));r.reverse();const s=[];let a;for(let i=0;i<this.cells.length;++i){const o=this.cells[i];n=r[i],a=0===i?[t[0]].concat(n):[a[0]].concat(n),a=o.call(a,e),s.push(a.slice(1))}n=[];for(const t of s.slice().reverse())n.push(...t);return[a[0]].concat(n)})}build(t){let e;Jd(t)&&(t=t[0]),t=t,this.cells.forEach((n,r)=>{Qp("RNNCell_"+r,()=>{n.build(t),e=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,t=[t[0],e]})}),this.built=!0}getConfig(){const t=[];for(const e of this.cells)t.push({className:e.getClassName(),config:e.getConfig()});const e={cells:t},n=super.getConfig();return Object.assign(e,n),e}static fromConfig(t,e,n={}){const r=[];for(const t of e.cells)r.push(If(t,n));return new t({cells:r})}get trainableWeights(){if(!this.trainable)return[];const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t}get nonTrainableWeights(){const t=[];for(const e of this.cells)t.push(...e.nonTrainableWeights);if(!this.trainable){const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e.concat(t)}return t}getWeights(){const t=[];for(const e of this.cells)t.push(...e.weights);return rf(t)}setWeights(t){const e=[];for(const n of this.cells){const r=n.weights.length,s=t.splice(r);for(let t=0;t<n.weights.length;++t)e.push([n.weights[t],s[t]])}sf(e)}}function gy(t,e,n=null,r=1){function s(){return Nd(t(),e)}if(r>1){const e=[];for(let a=0;a<r;a++)e.push(Id(s,t,n));return e.map(t=>ui(t.clone()))}return ui(Id(s,t,n).clone())}my.className="StackedRNNCells",Ja(my);class yy extends hf{constructor(t){super(t),this.layer=t.layer}build(t){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(t){null!=this.layer&&(this.layer.trainable=t)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(t){this.layer.setWeights(t)}getConfig(){const t={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},e=super.getConfig();return Object.assign(t,e),t}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(t)}static fromConfig(t,e,n={}){const r=If(e.layer,n);delete e.layer;const s={layer:r};return Object.assign(s,e),new t(s)}}class by extends yy{constructor(t){super(t),this.supportsMasking=!0}build(t){if((t=tf(t)).length<3)throw new fp("TimeDistributed layer expects an input shape >= 3D, but received input shape "+JSON.stringify(t));this.inputSpec=[{shape:t}];const e=[t[0]].concat(t.slice(2));this.layer.built||(this.layer.build(e),this.layer.built=!0),super.build(t)}computeOutputShape(t){const e=[(t=tf(t))[0]].concat(t.slice(2)),n=this.layer.computeOutputShape(e),r=t[1];return[n[0],r].concat(n.slice(1))}call(t,e){return ii(()=>iy((t,n)=>[Qd(this.layer.call(t,e)),[]],t=Qd(t),[],!1,null,null,!1,!0)[1])}}by.className="TimeDistributed",Ja(by);class xy extends yy{constructor(t){super(t);const e=t.layer.getConfig(),n={};n.className=t.layer.getClassName(),n.config=e,this.forwardLayer=If(n),e.goBackwards=!0!==e.goBackwards;const r={};var s;if(r.className=t.layer.getClassName(),r.config=e,this.backwardLayer=If(r),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===t.mergeMode?"concat":t.mergeMode,s=this.mergeMode,Rp(jp,"BidirectionalMergeMode",s),t.weights)throw new mp("weights support is not implemented for Bidirectional layer yet.");this._stateful=t.layer.stateful,this.returnSequences=t.layer.returnSequences,this.returnState=t.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=t.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(t){this._trainable=t,null!=this.forwardLayer&&(this.forwardLayer.trainable=t),null!=this.backwardLayer&&(this.backwardLayer.trainable=t)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(t){const e=t.length,n=Math.floor(e/2);this.forwardLayer.setWeights(t.slice(0,n)),this.backwardLayer.setWeights(t.slice(n))}computeOutputShape(t){let e,n,r,s=this.forwardLayer.computeOutputShape(t);return Array.isArray(s)&&Array.isArray(s[0])||(s=[s]),s=s,this.returnState?(r=s.slice(1),e=s[0]):e=s[0],e=e,"concat"===this.mergeMode?(e[e.length-1]*=2,n=[e]):n=null==this.mergeMode?[e,e.slice()]:[e],this.returnState?null==this.mergeMode?n.concat(r).concat(r.slice()):[e].concat(r).concat(r.slice()):wp(n)}apply(t,e){let n=null==e?null:e.initialState,r=null==e?null:e.constants;null==e&&(e={});const s=ay(t,n,r,this.numConstants);if(t=s.inputs,n=s.initialState,r=s.constants,Array.isArray(t)&&(n=t.slice(1),t=t[0]),(null==n||0===n.length)&&null==r)return super.apply(t,e);const a=[],i=[];if(null!=n){const t=n.length;if(t%2>0)throw new fp("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");e.initialState=n,a.push(...n);const r=n.map(t=>new af({shape:t.shape}));this.forwardLayer.stateSpec=r.slice(0,t/2),this.backwardLayer.stateSpec=r.slice(t/2),i.push(...r)}if(null!=r)throw new mp("Support for constants in Bidirectional layers is not implemented yet.");const o=a[0]instanceof of;for(const t of a)if(t instanceof of!==o)throw new fp("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(o){const n=[t].concat(a),r=this.inputSpec.concat(i),s=this.inputSpec;this.inputSpec=r;const o=super.apply(n,e);return this.inputSpec=s,o}return super.apply(t,e)}call(t,e){return ii(()=>{const n=e.initialState;let r,s,a,i;if(null==n)r=this.forwardLayer.call(t,e),s=this.backwardLayer.call(t,e);else{const a=n.slice(0,n.length/2),i=n.slice(n.length/2);r=this.forwardLayer.call(t,Object.assign(e,{initialState:a})),s=this.backwardLayer.call(t,Object.assign(e,{initialState:i}))}return this.returnState&&(Array.isArray(r)&&(a=r.slice(1).concat(s.slice(1))),r=r[0],s=s[0]),this.returnSequences&&(s=Fr(s,1)),"concat"===this.mergeMode?i=fd([r,s]):"sum"===this.mergeMode?i=be(r,s):"ave"===this.mergeMode?i=Yt(.5,be(r,s)):"mul"===this.mergeMode?i=Yt(r,s):null==this.mergeMode&&(i=[r,s]),this.returnState?null==this.mergeMode?i.concat(a):[i].concat(a):i})}resetStates(t){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(t){Qp(this.forwardLayer.name,()=>{this.forwardLayer.build(t)}),Qp(this.backwardLayer.name,()=>{this.backwardLayer.build(t)}),this.built=!0}computeMask(t,e){let n;if(Array.isArray(e)&&(e=e[0]),n=this.returnSequences?null==this.mergeMode?[e,e]:e:null==this.mergeMode?[null,null]:null,this.returnState){const t=this.forwardLayer.states.map(t=>null);return Array.isArray(n)?n.concat(t).concat(t):[n].concat(t).concat(t)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(t),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(t)}getConfig(){const t={mergeMode:this.mergeMode},e=super.getConfig();return Object.assign(t,e),t}static fromConfig(t,e){const n=If(e.layer);if(delete e.layer,null!=e.numConstants)throw new mp("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const r=e;return r.layer=n,new t(r)}}xy.className="Bidirectional",Ja(xy);var wy;qo((function(t,e){Object.defineProperty(e,"__esModule",{value:!0});var n,r,s=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var s in e=arguments[n])Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s]);return t};function a(t,e,n,r){return new(n||(n=Promise))((function(s,a){function i(t){try{u(r.next(t))}catch(t){a(t)}}function o(t){try{u(r.throw(t))}catch(t){a(t)}}function u(t){t.done?s(t.value):new n((function(e){e(t.value)})).then(i,o)}u((r=r.apply(t,e||[])).next())}))}function i(t,e){var n,r,s,a,i={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return a={next:o(0),throw:o(1),return:o(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function o(a){return function(o){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(s=r[2&a[0]?"return":a[0]?"throw":"next"])&&!(s=s.call(r,a[1])).done)return s;switch(r=0,s&&(a=[0,s.value]),a[0]){case 0:case 1:s=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!(s=i.trys,(s=s.length>0&&s[s.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!s||a[1]>s[0]&&a[1]<s[3])){i.label=a[1];break}if(6===a[0]&&i.label<s[1]){i.label=s[1],s=a;break}if(s&&i.label<s[2]){i.label=s[2],i.ops.push(a);break}s[2]&&i.ops.pop(),i.trys.pop();continue}a=e.call(t,i)}catch(t){a=[6,t],r=0}finally{n=s=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,o])}}}!function(t){t[t.DT_INVALID=0]="DT_INVALID",t[t.DT_FLOAT=1]="DT_FLOAT",t[t.DT_DOUBLE=2]="DT_DOUBLE",t[t.DT_INT32=3]="DT_INT32",t[t.DT_UINT8=4]="DT_UINT8",t[t.DT_INT16=5]="DT_INT16",t[t.DT_INT8=6]="DT_INT8",t[t.DT_STRING=7]="DT_STRING",t[t.DT_COMPLEX64=8]="DT_COMPLEX64",t[t.DT_INT64=9]="DT_INT64",t[t.DT_BOOL=10]="DT_BOOL",t[t.DT_QINT8=11]="DT_QINT8",t[t.DT_QUINT8=12]="DT_QUINT8",t[t.DT_QINT32=13]="DT_QINT32",t[t.DT_BFLOAT16=14]="DT_BFLOAT16",t[t.DT_FLOAT_REF=101]="DT_FLOAT_REF",t[t.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",t[t.DT_INT32_REF=103]="DT_INT32_REF",t[t.DT_UINT8_REF=104]="DT_UINT8_REF",t[t.DT_INT16_REF=105]="DT_INT16_REF",t[t.DT_INT8_REF=106]="DT_INT8_REF",t[t.DT_STRING_REF=107]="DT_STRING_REF",t[t.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",t[t.DT_INT64_REF=109]="DT_INT64_REF",t[t.DT_BOOL_REF=110]="DT_BOOL_REF",t[t.DT_QINT8_REF=111]="DT_QINT8_REF",t[t.DT_QUINT8_REF=112]="DT_QUINT8_REF",t[t.DT_QINT32_REF=113]="DT_QINT32_REF",t[t.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF"}(n||(n={})),function(t){!function(t){t[t.LEGACY=0]="LEGACY",t[t.V1=1]="V1",t[t.V2=2]="V2"}(t.CheckpointFormatVersion||(t.CheckpointFormatVersion={}))}(r||(r={}));var o={};function u(t){return o[t]}function l(t,e,n,r){var s=e.inputParams[t];if(s&&void 0!==s.inputIndexStart){var a=s.inputIndexStart,i=0===s.inputIndexEnd?void 0:void 0===s.inputIndexEnd?a+1:s.inputIndexEnd;if("tensor"===s.type)return c(e.inputNames[s.inputIndexStart],n,r);if("tensors"===s.type)return e.inputNames.slice(a,i).map((function(t){return c(t,n,r)}));var o=c(e.inputNames.slice(a)[0],n,r),u=o.dataSync();return"number"===s.type?u[0]:Jc.util.toNestedArray(o.shape,u)}var l=e.attrParams[t];return l&&l.value}function c(t,e,n){var r=d(t),s=r[0],a=r[1],i=n.currentContextIds.find((function(t){return!!e[p(s,t)]}));return void 0!==i?e[p(s,i)][a]:void 0}function h(t,e){var n=d(t),r=n[0],s=n[1];return[p(r,e&&e.currentContextId),s]}function p(t,e){return e?t+"-"+e:t}function d(t){var e=t.split(":");return 1===e.length?[t,0]:[e[0],Number(e[e.length-1])]}function f(t,e,n){var r=l("pad",t,e,n);if("explicit"===r){r=l("explicitPaddings",t,e,n);for(var s=[[0,0],[0,0],[0,0],[0,0]],a=0;a<4;a++)s[a][0]=r[2*a],s[a][1]=r[2*a+1];return s}return r}var m={__proto__:null,json:[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},g={__proto__:null,json:[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"clip_value_min",name:"clipValueMin",type:"number"},{tfName:"clip_value_max",name:"clipValueMax",type:"number"}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"clipValueMin",name:"clipValueMin",type:"number",defaultValue:0},{tfName:"clipValueMax",name:"clipValueMax",type:"number",defaultValue:6}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},y={__proto__:null,json:[{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]}]},b={__proto__:null,json:[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}]},x={__proto__:null,json:[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}]},w={__proto__:null,json:[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},v={__proto__:null,json:[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]}]},k={__proto__:null,json:[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}]},N={__proto__:null,json:[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}]},I={__proto__:null,json:[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},S={__proto__:null,json:[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},C={__proto__:null,json:[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}]},A={__proto__:null,json:[{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}]},E={__proto__:null,json:[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool",notSupported:!0}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}]},T={__proto__:null,json:[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}]},R={__proto__:null,json:[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]}]},$=function(){function t(){var t=[m,g,y,b,x,w,v,I,N,k,S,C,A,E,T,R],e=[].concat.apply([],t.map((function(t){return t.json})));this.opMappers=e.reduce((function(t,e){return t[e.tfOpName]=e,t}),{})}return Object.defineProperty(t,"Instance",{get:function(){return this._instance||(this._instance=new this)},enumerable:!0,configurable:!0}),t.prototype.transformGraph=function(t,e){var n=this;void 0===e&&(e={});var r=t.node,s=[],a=[],i=r.reduce((function(t,e){return t[e.name]=n.mapNode(e),e.op.startsWith("Placeholder")&&s.push(t[e.name]),"Const"===e.op&&a.push(t[e.name]),t}),{}),o=[],u=[],l={},c={};null!=e&&(l=this.mapSignatureEntries(e.inputs),c=this.mapSignatureEntries(e.outputs));var p=Object.keys(i);p.forEach((function(t){var e=i[t];e.inputNames.forEach((function(t){var n=h(t)[0];e.inputs.push(i[n]),i[n].children.push(e)}))})),0===Object.keys(c).length?p.forEach((function(t){var e=i[t];0===e.children.length&&u.push(e)})):Object.keys(c).forEach((function(t){var e=h(t)[0],n=i[e];null!=n&&(n.signatureKey=c[t],u.push(n))})),Object.keys(l).length>0?Object.keys(l).forEach((function(t){var e=h(t)[0],n=i[e];n&&(n.signatureKey=l[t],o.push(n))})):o=s;var d={};return null!=t.library&&null!=t.library.function&&(d=t.library.function.reduce((function(t,e){return t[e.signature.name]=n.mapFunction(e),t}),{})),{nodes:i,inputs:o,outputs:u,weights:a,placeholders:s,signature:e,functions:d}},t.prototype.mapSignatureEntries=function(t){return Object.keys(t||{}).reduce((function(e,n){return e[t[n].name]=n,e}),{})},t.prototype.mapNode=function(t){var e=u(t.op)||this.opMappers[t.op]||{};null==t.attr&&(t.attr={});var n={name:t.name,op:t.op,category:e.category,inputNames:(t.input||[]).map((function(t){return t.startsWith("^")?t.substr(1):t})),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:t.attr};return null!=e.inputs&&(n.inputParams=e.inputs.reduce((function(t,e){return t[e.name]={type:e.type,inputIndexStart:e.start,inputIndexEnd:e.end},t}),{})),null!=e.attrs&&(n.attrParams=e.attrs.reduce((function(e,n){var r=n.type,s=void 0;switch(n.type){case"string":void 0===(s=D(t.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(s=D(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":void 0===(s=U(t.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(s=U(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":void 0===(s=O(t.attr,n.tfName,n.defaultValue||0))&&n.tfDeprecatedName&&(s=O(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":void 0===(s=V(t.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(s=V(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":void 0===(s=F(t.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(s=F(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":void 0===(s=H(t.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(s=H(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":void 0===(s=W(t.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(s=W(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":void 0===(s=G(t.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(s=G(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":void 0===(s=z(t.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(s=z(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":void 0===(s=B(t.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(s=B(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":void 0===(s=L(t.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(s=L(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error("Unsupported param type: "+n.type+" for op: "+t.op)}return e[n.name]={value:s,type:r},e}),{})),n},t.prototype.mapFunction=function(t){var e=this,n=t.nodeDef,r=[],s={};null!=n&&(s=n.reduce((function(t,n){return t[n.name]=e.mapNode(n),"Const"===n.op&&r.push(t[n.name]),t}),{}));var a=[],i=[];t.signature.inputArg.forEach((function(t){var e=h(t.name)[0],n={name:e,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:M(t.type),type:"dtype"}},children:[]};n.signatureKey=t.name,a.push(n),s[e]=n})),Object.keys(s).forEach((function(t){var e=s[t];e.inputNames.forEach((function(t){var n=h(t)[0];e.inputs.push(s[n]),s[n].children.push(e)}))}));var o=t.ret;t.signature.outputArg.forEach((function(t){var e=h(o[t.name]),n=e[0],r=e[1],a=s[n];null!=a&&(a.defaultOutput=r,i.push(a))}));var u=this.mapArgsToSignature(t);return{nodes:s,inputs:a,outputs:i,weights:r,placeholders:[],signature:u}},t.prototype.mapArgsToSignature=function(t){var e=this;return{methodName:t.signature.name,inputs:t.signature.inputArg.reduce((function(t,n){return t[n.name]=e.mapArgToTensorInfo(n),t}),{}),outputs:t.signature.outputArg.reduce((function(n,r){return n[r.name]=e.mapArgToTensorInfo(r,t.ret),n}),{})}},t.prototype.mapArgToTensorInfo=function(t,e){var n=t.name;return null!=e&&(n=e[n]),{name:n,dtype:t.type}},t}();function _(t,e){var n=Array.isArray(t)?String.fromCharCode.apply(null,t):function(t){var e=Jc.env().global;if(void 0!==e.atob)return e.atob(t);if("undefined"!=typeof Buffer)return new Buffer(t,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(t);return e?n:n.toLowerCase()}function D(t,e,n,r){void 0===r&&(r=!1);var s=t[e];return null!=s?_(s.s,r):n}function F(t,e,n){var r=t[e];return r?r.b:n}function O(t,e,n){var r=t[e]||{},s=null!=r.i?r.i:null!=r.f?r.f:n;return"number"==typeof s?s:parseInt(s,10)}function M(t){switch("string"==typeof t&&(t=n[t]),t){case n.DT_FLOAT:return"float32";case n.DT_INT32:case n.DT_INT64:case n.DT_INT8:case n.DT_UINT8:return"int32";case n.DT_BOOL:return"bool";case n.DT_DOUBLE:return"float32";case n.DT_STRING:return"string";default:return null}}function L(t,e,n){var r=t[e];return r&&r.func?r.func.name:n}function z(t,e,n){var r=t[e];return r&&r.type?M(r.type):n}function B(t,e,n){var r=t[e];return r&&r.list&&r.list.type?r.list.type.map((function(t){return M(t)})):n}function P(t){if(!t.unknownRank)return null!=t.dim?t.dim.map((function(t){return"number"==typeof t.size?t.size:parseInt(t.size,10)})):[]}function W(t,e,n){var r=t[e];return r&&r.shape?P(r.shape):n}function V(t,e,n){var r=t[e];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map((function(t){return"number"==typeof t?t:parseInt(t,10)})):n}function U(t,e,n,r){void 0===r&&(r=!1);var s=t[e];return s&&s.list&&s.list.s?s.list.s.map((function(t){return _(t,r)})):n}function G(t,e,n){var r=t[e];return r&&r.list&&r.list.shape?r.list.shape.map((function(t){return P(t)})):n}function H(t,e,n){var r=t[e];return r&&r.list&&r.list.b?r.list.b:n}var q=function(){function t(t,e,n){var r=this;this.node=t,this.tensorMap=e,this.context=n,this.inputs=[],this.attrs={},this.inputs=t.inputNames.map((function(t){return r.getInput(t)})),null!=t.rawAttrs&&(this.attrs=Object.keys(t.rawAttrs).reduce((function(t,e){return t[e]=r.getAttr(e),t}),{}))}return t.prototype.getInput=function(t){return c(t,this.tensorMap,this.context)},t.prototype.getAttr=function(t,e){var n=this.node.rawAttrs[t];if(null!=n.tensor)return c(t,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return O(this.node.rawAttrs,t,e);if(null!=n.s)return D(this.node.rawAttrs,t,e);if(null!=n.b)return F(this.node.rawAttrs,t,e);if(null!=n.shape)return W(this.node.rawAttrs,t,e);if(null!=n.type)return z(this.node.rawAttrs,t,e);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return V(this.node.rawAttrs,t,e);if(null!=n.list.s)return U(this.node.rawAttrs,t,e);if(null!=n.list.shape)return G(this.node.rawAttrs,t,e);if(null!=n.list.b)return H(this.node.rawAttrs,t,e);if(null!=n.list.type)return B(this.node.rawAttrs,t,e)}return e},t}();function j(t,e,n){void 0===n&&(n=""),Jc.util.assert(function(t,e){if(t.length!==e.length)return!1;for(var n=0;n<t.length;n++)if(-1!==t[n]&&-1!==e[n]&&t[n]!==e[n])return!1;return!0}(t,e),(function(){return n+" Shapes "+t+" and "+e+" must match"}))}var K=function(){function t(t,e,n,r,s,a,i){this.name=t,this.dtype=e,this.maxSize=n,this.elementShape=r,this.identicalElementShapes=s,this.dynamicSize=a,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.idTensor=Jc.scalar(0),Jc.keep(this.idTensor)}return Object.defineProperty(t.prototype,"id",{get:function(){return this.idTensor.id},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"closed",{get:function(){return this.closed_},enumerable:!0,configurable:!0}),t.prototype.clearAndClose=function(){this.tensors.forEach((function(t){return t.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()},t.prototype.size=function(){return this.tensors.length},t.prototype.read=function(t){if(this.closed_)throw new Error("TensorArray "+this.name+" has already been closed.");if(t<0||t>=this.size())throw new Error("Tried to read from index "+t+", but array size is: "+this.size());var e=this.tensors[t];if(e.cleared)throw new Error("TensorArray "+this.name+": Could not read index "+t+" twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).");return this.clearAfterRead&&(e.cleared=!0),e.read=!0,e.tensor},t.prototype.readMany=function(t){var e=this;return t.map((function(t){return e.read(t)}))},t.prototype.write=function(t,e){if(this.closed_)throw new Error("TensorArray "+this.name+" has already been closed.");if(t<0||!this.dynamicSize&&t>=this.maxSize)throw new Error("Tried to write to index "+t+", but array is not resizeable and size is: "+this.maxSize);var n=this.tensors[t]||{};if(e.dtype!==this.dtype)throw new Error("TensorArray "+this.name+": Could not write to TensorArray index "+t+",\n          because the value dtype is "+e.dtype+", but TensorArray dtype is "+this.dtype+".");if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=e.shape),j(this.elementShape,e.shape,"TensorArray "+this.name+": Could not write to TensorArray index "+t+"."),n.read)throw new Error("TensorArray "+this.name+": Could not write to TensorArray index "+t+", because it has already been read.");if(n.written)throw new Error("TensorArray "+this.name+": Could not write to TensorArray index "+t+", because it has already been written.");n.tensor=e,Jc.keep(e),n.written=!0,this.tensors[t]=n},t.prototype.writeMany=function(t,e){var n=this;if(t.length!==e.length)throw new Error("TensorArray "+this.name+": could not write multiple tensors,because the index size: "+t.length+" is not the same as tensors size: "+e.length+".");t.forEach((function(t,r){return n.write(t,e[r])}))},t.prototype.gather=function(t,e){if(e&&e!==this.dtype)throw new Error("TensorArray dtype is "+this.dtype+" but gather requested dtype "+e);if(t)t=t.slice(0,this.size());else{t=[];for(var n=0;n<this.size();n++)t.push(n)}if(0===t.length)return Jc.tensor([],[0].concat(this.elementShape));var r=this.readMany(t);return j(this.elementShape,r[0].shape,"TensorArray shape mismatch: "),Jc.stack(r,0)},t.prototype.concat=function(t){if(t&&t!==this.dtype)throw new Error("TensorArray dtype is "+this.dtype+" but concat requested dtype "+t);if(0===this.size())return Jc.tensor([],[0].concat(this.elementShape));for(var e=[],n=0;n<this.size();n++)e.push(n);var r=this.readMany(e);return j(this.elementShape,r[0].shape,"TensorArray shape mismatch: tensor array shape ("+this.elementShape+") vs first tensor shape ("+r[0].shape+")"),Jc.concat(r,0)},t.prototype.scatter=function(t,e){if(e.dtype!==this.dtype)throw new Error("TensorArray dtype is "+this.dtype+" but tensor has dtype "+e.dtype);if(t.length!==e.shape[0])throw new Error("Expected len(indices) == tensor.shape[0], but saw: "+t.length+" vs. "+e.shape[0]);var n=Math.max.apply(Math,t);if(!this.dynamicSize&&n>=this.maxSize)throw new Error("Max index must be < array size ("+n+"  vs. "+this.maxSize+")");this.writeMany(t,Jc.unstack(e,0))},t.prototype.split=function(t,e){var n=this;if(e.dtype!==this.dtype)throw new Error("TensorArray dtype is "+this.dtype+" but tensor has dtype "+e.dtype);var r=0,s=t.map((function(t){return r+=t}));if(r!==e.shape[0])throw new Error("Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        "+r+", and tensor's shape is: "+e.shape);if(!this.dynamicSize&&t.length!==this.maxSize)throw new Error("TensorArray's size is not equal to the size of lengths ("+this.maxSize+" vs. "+t.length+"), and the TensorArray is not marked as dynamically resizeable");var a=0===r?0:e.size/r,i=[];Jc.tidy((function(){e=e.reshape([1,r,a]);for(var o=0;o<t.length;++o){var u=[0,0===o?0:s[o-1],0],l=[1,t[o],a];i[o]=Jc.slice(e,u,l).reshape(n.elementShape)}return i}));for(var o=[],u=0;u<t.length;u++)o[u]=u;this.writeMany(o,i)},t}(),X=function(){function t(t,e,n,r){void 0===r&&(r=-1),this.tensors=t,this.elementShape=e,this.elementDtype=n,null!=t&&t.forEach((function(t){if(n!==t.dtype)throw new Error("Invalid data types; op elements "+n+", but list elements "+t.dtype);j(e,t.shape,"TensorList shape mismatch: "),Jc.keep(t)})),this.idTensor=Jc.scalar(0),this.maxNumElements=r,Jc.keep(this.idTensor)}return Object.defineProperty(t.prototype,"id",{get:function(){return this.idTensor.id},enumerable:!0,configurable:!0}),t.prototype.copy=function(){return new t(this.tensors.slice(),this.elementShape,this.elementDtype)},t.prototype.clearAndClose=function(){this.tensors.forEach((function(t){return t.dispose()})),this.tensors.length=0,this.idTensor.dispose()},t.prototype.size=function(){return this.tensors.length},t.prototype.stack=function(t,e,n){var r=this;if(void 0===n&&(n=-1),e!==this.elementDtype)throw new Error("Invalid data types; op elements "+e+", but list elements "+this.elementDtype);if(-1!==n&&this.tensors.length!==n)throw new Error("Operation expected a list with "+n+" elements but got a list with "+this.tensors.length+" elements.");return j(t,this.elementShape,"TensorList shape mismatch: "),Jc.tidy((function(){var e=r.tensors.map((function(e){return e.reshape(t)}));return Jc.stack(e,0)}))},t.prototype.popBack=function(t,e){if(e!==this.elementDtype)throw new Error("Invalid data types; op elements "+e+", but list elements "+this.elementDtype);if(0===this.size())throw new Error("Trying to pop from an empty list.");var n=this.tensors.pop();return j(n.shape,t,"TensorList shape mismatch: "),n.reshape(t)},t.prototype.pushBack=function(t){if(t.dtype!==this.elementDtype)throw new Error("Invalid data types; op elements "+t.dtype+", but list elements "+this.elementDtype);if(j(t.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");Jc.keep(t),this.tensors.push(t)},t.prototype.resize=function(t){if(t<0)throw new Error("TensorListResize expects size to be non-negative. Got: "+t);if(-1!==this.maxNumElements&&t>this.maxNumElements)throw new Error("TensorListResize input size "+t+" is greater maxNumElement "+this.maxNumElements+".");this.tensors.length=t},t.prototype.getItem=function(t,e,n){if(n!==this.elementDtype)throw new Error("Invalid data types; op elements "+n+", but list elements "+this.elementDtype);if(t<0||t>this.tensors.length)throw new Error("Trying to access element "+t+" in a list with "+this.tensors.length+" elements.");if(null==this.tensors[t])throw new Error("element at index "+t+" is null.");return j(this.tensors[t].shape,e,"TensorList shape mismatch: "),this.tensors[t]},t.prototype.setItem=function(t,e){if(e.dtype!==this.elementDtype)throw new Error("Invalid data types; op elements "+e.dtype+", but list elements "+this.elementDtype);if(t<0||-1!==this.maxNumElements&&t>=this.maxNumElements)throw new Error("Trying to set element "+t+" in a list with max "+this.maxNumElements+" elements.");j(this.elementShape,e.shape,"TensorList shape mismatch: "),Jc.keep(e),this.tensors[t]=e},t.prototype.gather=function(t,e,n){var r=this;if(e!==this.elementDtype)throw new Error("Invalid data types; op elements "+e+", but list elements "+this.elementDtype);return j(this.elementShape,n,"TensorList shape mismatch: "),0===(t=t.slice(0,this.size())).length?Jc.tensor([],[0].concat(this.elementShape)):Jc.tidy((function(){var e=t.map((function(t){return r.tensors[t].reshape(n)}));return Jc.stack(e,0)}))},t.prototype.concat=function(t,e){var n=this;if(t&&t!==this.elementDtype)throw new Error("TensorList dtype is "+this.elementDtype+" but concat requested dtype "+t);return j(this.elementShape,e,"TensorList shape mismatch: "),0===this.size()?Jc.tensor([],[0].concat(this.elementShape)):Jc.tidy((function(){var t=n.tensors.map((function(t){return t.reshape(e)}));return Jc.concat(t,0)}))},t}();var Y=function(t,e,n){return a(void 0,void 0,void 0,(function(){var r,s,a,o,u,h,p,d,f,m,g,y,b,x,w,v,k,N,I,S,C,A,E,T,R,$,_,D,F,O,M,L,z,B,P,W,V,U,G,H,q,Y,J,Z,Q,tt,et,nt,rt,st,at,it,ot,ut;return i(this,(function(lt){switch(lt.label){case 0:switch(t.op){case"If":case"StatelessIf":return[3,1];case"While":case"StatelessWhile":return[3,3];case"LoopCond":return[3,9];case"Switch":return[3,10];case"Merge":return[3,12];case"Enter":return[3,13];case"Exit":return[3,14];case"NextIteration":return[3,15];case"TensorArrayV3":return[3,16];case"TensorArrayWriteV3":return[3,17];case"TensorArrayReadV3":return[3,18];case"TensorArrayGatherV3":return[3,19];case"TensorArrayScatterV3":return[3,20];case"TensorArrayConcatV3":return[3,21];case"TensorArraySplitV3":return[3,22];case"TensorArraySizeV3":return[3,23];case"TensorArrayCloseV3":return[3,24];case"TensorListSetItem":return[3,25];case"TensorListGetItem":return[3,26];case"TensorListScatterV2":case"TensorListScatter":return[3,27];case"TensorListReserve":return[3,28];case"TensorListGather":return[3,29];case"TensorListStack":return[3,30];case"TensorListFromTensor":return[3,31];case"TensorListConcat":return[3,32];case"TensorListPushBack":return[3,33];case"TensorListPopBack":return[3,34];case"TensorListSplit":return[3,35]}return[3,36];case 1:return r=l("thenBranch",t,e,n),s=l("elseBranch",t,e,n),a=l("cond",t,e,n),h=l("args",t,e,n),[4,a.data()];case 2:return(f=lt.sent())[0]?[2,n.functionMap[r].executeFunctionAsync(h,n.tensorArrayMap,n.tensorListMap)]:[2,n.functionMap[s].executeFunctionAsync(h,n.tensorArrayMap,n.tensorListMap)];case 3:return o=l("body",t,e,n),u=l("cond",t,e,n),h=l("args",t,e,n),[4,n.functionMap[u].executeFunctionAsync(h,n.tensorArrayMap,n.tensorListMap)];case 4:return p=lt.sent(),d=h.map((function(t){return t.id})),[4,p[0].data()];case 5:f=lt.sent(),p.forEach((function(t){t.kept||-1!==d.indexOf(t.id)||t.dispose()})),m=h,g=function(){var t,e,r;return i(this,(function(s){switch(s.label){case 0:return t=m,[4,n.functionMap[o].executeFunctionAsync(m,n.tensorArrayMap,n.tensorListMap)];case 1:return m=s.sent(),e=m.map((function(t){return t.id})),t.forEach((function(t){t.kept||-1!==d.indexOf(t.id)||-1!==e.indexOf(t.id)||t.dispose()})),[4,n.functionMap[u].executeFunctionAsync(m,n.tensorArrayMap,n.tensorListMap)];case 2:return[4,(r=s.sent())[0].data()];case 3:return f=s.sent(),r.forEach((function(t){t.kept||-1!==d.indexOf(t.id)||-1!==e.indexOf(t.id)||t.dispose()})),[2]}}))},lt.label=6;case 6:return f[0]?[5,g()]:[3,8];case 7:return lt.sent(),[3,6];case 8:return[2,m];case 9:return[2,[l("pred",t,e,n).clone()]];case 10:return y=l("pred",t,e,n),w=l("data",t,e,n),[4,y.data()];case 11:return[2,lt.sent()[0]?[void 0,w.clone()]:[w.clone(),void 0]];case 12:return[2,(b=t.inputNames.find((function(t){return void 0!==c(t,e,n)})))?[c(b,e,n).clone()]:void 0];case 13:return x=l("frameName",t,e,n),w=l("tensor",t,e,n),n.enterFrame(x),[2,[w.clone()]];case 14:return Z=l("tensor",t,e,n),n.exitFrame(),[2,[Z.clone()]];case 15:return v=l("tensor",t,e,n),n.nextIteration(),[2,[v.clone()]];case 16:return k=l("size",t,e,n),N=l("dtype",t,e,n),it=l("elementShape",t,e,n),I=l("dynamicSize",t,e,n),S=l("clearAfterRead",t,e,n),C=l("identicalElementShapes",t,e,n),A=l("name",t,e,n),E=new K(A,N,k,it,C,I,S),n.addTensorArray(E),[2,[E.idTensor,Jc.scalar(1)]];case 17:return T=l("tensorArrayId",t,e,n),V=l("index",t,e,n),nt=l("tensor",t,e,n),(R=n.getTensorArray(T.id)).write(V,nt),[2,[R.idTensor]];case 18:return $=l("tensorArrayId",t,e,n),U=l("index",t,e,n),[2,[n.getTensorArray($.id).read(U)]];case 19:return q=l("tensorArrayId",t,e,n),Y=l("indices",t,e,n),_=l("dtype",t,e,n),[2,[n.getTensorArray(q.id).gather(Y,_)]];case 20:return D=l("tensorArrayId",t,e,n),G=l("indices",t,e,n),H=l("tensor",t,e,n),(F=n.getTensorArray(D.id)).scatter(G,H),[2,[F.idTensor]];case 21:return tt=l("tensorArrayId",t,e,n),O=n.getTensorArray(tt.id),et=l("dtype",t,e,n),[2,[O.concat(et)]];case 22:return M=l("tensorArrayId",t,e,n),at=l("tensor",t,e,n),ot=l("lengths",t,e,n),(L=n.getTensorArray(M.id)).split(ot,at),[2,[L.idTensor]];case 23:return z=l("tensorArrayId",t,e,n),B=n.getTensorArray(z.id),[2,[Jc.scalar(B.size(),"int32")]];case 24:return P=l("tensorArrayId",t,e,n),(W=n.getTensorArray(P.id)).clearAndClose(),[2,[W.idTensor]];case 25:return rt=l("tensorListId",t,e,n),V=l("index",t,e,n),nt=l("tensor",t,e,n),(ut=n.getTensorList(rt.id)).setItem(V,nt),[2,[ut.idTensor]];case 26:return rt=l("tensorListId",t,e,n),U=l("index",t,e,n),it=l("elementShape",t,e,n),st=l("elementDType",t,e,n),[2,[(ut=n.getTensorList(rt.id)).getItem(U,it,st)]];case 27:return G=l("indices",t,e,n),H=l("tensor",t,e,n),it=l("elementShape",t,e,n),J=l("numElements",t,e,n),ut=function(t,e,n,r){if(e.length!==t.shape[0])throw new Error("Expected len(indices) == tensor.shape[0], but saw: "+e.length+" vs. "+t.shape[0]);var s=Math.max.apply(Math,e);if(null!=r&&-1!==r&&s>=r)throw new Error("Max index must be < array size ("+s+"  vs. "+r+")");var a=new X([],n,t.dtype,r),i=Jc.unstack(t,0);return e.forEach((function(t,e){a.setItem(t,i[e])})),a}(H,G,it,J),n.addTensorList(ut),[2,[ut.idTensor]];case 28:return it=l("elementShape",t,e,n),Q=l("elementDType",t,e,n),J=l("numElements",t,e,n),ut=function(t,e,n){return new X([],t,e,n)}(it,Q,J),n.addTensorList(ut),[2,[ut.idTensor]];case 29:return q=l("tensorListId",t,e,n),Y=l("indices",t,e,n),it=l("elementShape",t,e,n),Q=l("elementDType",t,e,n),[2,[(ut=n.getTensorList(q.id)).gather(Y,Q,it)]];case 30:return rt=l("tensorListId",t,e,n),it=l("elementShape",t,e,n),Q=l("elementDType",t,e,n),J=l("numElements",t,e,n),[2,[(ut=n.getTensorList(rt.id)).stack(it,Q,J)]];case 31:return Z=l("tensor",t,e,n),it=l("elementShape",t,e,n),Q=l("elementDType",t,e,n),ut=function(t,e,n){var r=t.dtype;if(t.shape.length<1)throw new Error("Tensor must be at least a vector, but saw shape: "+t.shape);if(t.dtype!==n)throw new Error("Invalid data types; op elements "+t.dtype+", but list elements "+n);j(t.shape.slice(1),e,"TensorList shape mismatch: ");var s=t.unstack();return new X(s,e,r)}(Z,it,Q),n.addTensorList(ut),[2,[ut.idTensor]];case 32:return tt=l("tensorListId",t,e,n),ut=n.getTensorList(tt.id),et=l("dtype",t,e,n),it=l("elementShape",t,e,n),[2,[ut.concat(et,it)]];case 33:return rt=l("tensorListId",t,e,n),nt=l("tensor",t,e,n),(ut=n.getTensorList(rt.id)).pushBack(nt),[2,[ut.idTensor]];case 34:return rt=l("tensorListId",t,e,n),it=l("elementShape",t,e,n),st=l("elementDType",t,e,n),[2,[(ut=n.getTensorList(rt.id)).popBack(it,st)]];case 35:return at=l("tensor",t,e,n),it=l("elementShape",t,e,n),ot=l("lengths",t,e,n),ut=function(t,e,n){var r=0,s=e.map((function(t){return r+=t}));if(r!==t.shape[0])throw new Error("Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        "+r+", and tensor's shape is: "+t.shape);for(var a=0===r?0:t.size/r,i=Jc.tidy((function(){var i=[];t=t.reshape([1,r,a]);for(var o=0;o<e.length;++o){var u=[0,0===o?0:s[o-1],0],l=[1,e[o],a];i[o]=Jc.slice(t,u,l).reshape(n)}return t.dispose(),i})),o=new X([],n,t.dtype,e.length),u=0;u<i.length;u++)o.setItem(u,i[u]);return o}(at,ot,it),n.addTensorList(ut),[2,[ut.idTensor]];case 36:throw TypeError("Node type "+t.op+" is not implemented")}}))}))};function J(t,e,n){var r=function(t,e,n){switch(t.category){case"arithmetic":return Jc.tidy((function(){return function(t,e,n){switch(t.op){case"BiasAdd":case"AddV2":case"Add":return[Jc.add(l("a",t,e,n),l("b",t,e,n))];case"AddN":return[Jc.addN(l("tensors",t,e,n))];case"FloorMod":case"Mod":return[Jc.mod(l("a",t,e,n),l("b",t,e,n))];case"Mul":return[Jc.mul(l("a",t,e,n),l("b",t,e,n))];case"RealDiv":case"Div":return[Jc.div(l("a",t,e,n),l("b",t,e,n))];case"DivNoNan":return[Jc.divNoNan(l("a",t,e,n),l("b",t,e,n))];case"FloorDiv":return[Jc.floorDiv(l("a",t,e,n),l("b",t,e,n))];case"Sub":return[Jc.sub(l("a",t,e,n),l("b",t,e,n))];case"Minimum":return[Jc.minimum(l("a",t,e,n),l("b",t,e,n))];case"Maximum":return[Jc.maximum(l("a",t,e,n),l("b",t,e,n))];case"Pow":return[Jc.pow(l("a",t,e,n),l("b",t,e,n))];case"SquaredDifference":return[Jc.squaredDifference(l("a",t,e,n),l("b",t,e,n))];default:throw TypeError("Node type "+t.op+" is not implemented")}}(t,e,n)}));case"basic_math":return Jc.tidy((function(){return function(t,e,n){switch(t.op){case"Abs":case"ComplexAbs":return[Jc.abs(l("x",t,e,n))];case"Acos":return[Jc.acos(l("x",t,e,n))];case"Acosh":return[Jc.acosh(l("x",t,e,n))];case"Asin":return[Jc.asin(l("x",t,e,n))];case"Asinh":return[Jc.asinh(l("x",t,e,n))];case"Atan":return[Jc.atan(l("x",t,e,n))];case"Atan2":return[Jc.atan2(l("x",t,e,n),l("y",t,e,n))];case"Atanh":return[Jc.atanh(l("x",t,e,n))];case"Ceil":return[Jc.ceil(l("x",t,e,n))];case"Complex":return[Jc.complex(l("real",t,e,n),l("imag",t,e,n))];case"Cos":return[Jc.cos(l("x",t,e,n))];case"Cosh":return[Jc.cosh(l("x",t,e,n))];case"Elu":return[Jc.elu(l("x",t,e,n))];case"Erf":return[Jc.erf(l("x",t,e,n))];case"Exp":return[Jc.exp(l("x",t,e,n))];case"Expm1":return[Jc.expm1(l("x",t,e,n))];case"Floor":return[Jc.floor(l("x",t,e,n))];case"Log":return[Jc.log(l("x",t,e,n))];case"Log1p":return[Jc.log1p(l("x",t,e,n))];case"Imag":return[Jc.imag(l("x",t,e,n))];case"Neg":return[Jc.neg(l("x",t,e,n))];case"Reciprocal":return[Jc.reciprocal(l("x",t,e,n))];case"Real":return[Jc.real(l("x",t,e,n))];case"Relu":return[Jc.relu(l("x",t,e,n))];case"Round":return[Jc.round(l("x",t,e,n))];case"Selu":return[Jc.selu(l("x",t,e,n))];case"Sigmoid":return[Jc.sigmoid(l("x",t,e,n))];case"Sin":return[Jc.sin(l("x",t,e,n))];case"Sign":return[Jc.sign(l("x",t,e,n))];case"Sinh":return[Jc.sinh(l("x",t,e,n))];case"Softplus":return[Jc.softplus(l("x",t,e,n))];case"Sqrt":return[Jc.sqrt(l("x",t,e,n))];case"Square":return[Jc.square(l("x",t,e,n))];case"Tanh":return[Jc.tanh(l("x",t,e,n))];case"Tan":return[Jc.tan(l("x",t,e,n))];case"Relu6":case"ClipByValue":return[Jc.clipByValue(l("x",t,e,n),l("clipValueMin",t,e,n),l("clipValueMax",t,e,n))];case"Rsqrt":return[Jc.rsqrt(c(t.inputNames[0],e,n))];case"Prod":return[Jc.prod(l("x",t,e,n),l("axes",t,e,n))];case"LeakyRelu":return[Jc.leakyRelu(l("x",t,e,n),l("alpha",t,e,n))];case"Prelu":return[Jc.prelu(l("x",t,e,n),l("alpha",t,e,n))];default:throw TypeError("Node type "+t.op+" is not implemented")}}(t,e,n)}));case"control":return Y(t,e,n);case"convolution":return Jc.tidy((function(){return function(t,e,n){switch(t.op){case"Conv1D":var r=l("stride",t,e,n),s=l("pad",t,e,n),a=l("dataFormat",t,e,n).toUpperCase(),i=l("dilation",t,e,n);return[Jc.conv1d(l("x",t,e,n),l("filter",t,e,n),r,s,a,i)];case"Conv2D":r=l("strides",t,e,n),s=f(t,e,n),a=l("dataFormat",t,e,n).toUpperCase();var o=l("dilations",t,e,n);return[Jc.conv2d(l("x",t,e,n),l("filter",t,e,n),[r[1],r[2]],s,a,[o[1],o[2]])];case"_FusedConv2D":case"FusedDepthwiseConv2dNative":var u=l("fusedOps",t,e,n),c=u[0],h=u[1],p="biasadd"===c,d="prelu"===h,m="fusedbatchnorm"===c,g=l("numArgs",t,e,n);if(p){if(d&&2!==g)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!d&&1!==g)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(m)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.");r=l("strides",t,e,n),s=f(t,e,n),a=l("dataFormat",t,e,n).toUpperCase(),o=l("dilations",t,e,n);var y=l("args",t,e,n),b=y[0],x=y[1];return[("_FusedConv2D"===t.op?Jc.fused.conv2d:Jc.fused.depthwiseConv2d)({x:l("x",t,e,n),filter:l("filter",t,e,n),strides:[r[1],r[2]],pad:s,dataFormat:a,dilations:[o[1],o[2]],bias:b,activation:h,preluActivationWeights:x})];case"Conv2DBackpropInput":case"Conv2dTranspose":var w=l("outputShape",t,e,n);r=l("strides",t,e,n),s=f(t,e,n);return[Jc.conv2dTranspose(l("x",t,e,n),l("filter",t,e,n),w,[r[1],r[2]],s)];case"DepthwiseConv2dNative":case"DepthwiseConv2d":r=l("strides",t,e,n),s=f(t,e,n),o=l("dilations",t,e,n),a=l("dataFormat",t,e,n).toUpperCase();return[Jc.depthwiseConv2d(l("input",t,e,n),l("filter",t,e,n),[r[1],r[2]],s,a,[o[1],o[2]])];case"Conv3D":r=l("strides",t,e,n),s=l("pad",t,e,n),a=l("dataFormat",t,e,n).toUpperCase(),o=l("dilations",t,e,n);return[Jc.conv3d(l("x",t,e,n),l("filter",t,e,n),[r[1],r[2],r[3]],s,a,[o[1],o[2],o[3]])];case"AvgPool":r=l("strides",t,e,n),s=l("pad",t,e,n);var v=l("kernelSize",t,e,n);return[Jc.avgPool(l("x",t,e,n),[v[1],v[2]],[r[1],r[2]],s)];case"MaxPool":r=l("strides",t,e,n),s=l("pad",t,e,n),v=l("kernelSize",t,e,n);return[Jc.maxPool(l("x",t,e,n),[v[1],v[2]],[r[1],r[2]],s)];case"MaxPoolWithArgmax":r=l("strides",t,e,n),s=l("pad",t,e,n),v=l("kernelSize",t,e,n);var k=l("includeBatchInIndex",t,e,n),N=Jc.maxPoolWithArgmax(l("x",t,e,n),[v[1],v[2]],[r[1],r[2]],s,k);return[N.result,N.indexes];case"AvgPool3D":r=l("strides",t,e,n),s=l("pad",t,e,n),v=l("kernelSize",t,e,n);return[Jc.avgPool3d(l("x",t,e,n),[v[1],v[2],v[3]],[r[1],r[2],r[3]],s)];case"MaxPool3D":r=l("strides",t,e,n),s=l("pad",t,e,n),v=l("kernelSize",t,e,n);return[Jc.maxPool3d(l("x",t,e,n),[v[1],v[2],v[3]],[r[1],r[2],r[3]],s)];case"Dilation2D":var I=l("strides",t,e,n),S=(s=l("pad",t,e,n),o=l("dilations",t,e,n),I[1]),C=I[2],A=o[1],E=o[2];return[Jc.dilation2d(l("x",t,e,n),l("filter",t,e,n),[S,C],s,[A,E],"NHWC")];default:throw TypeError("Node type "+t.op+" is not implemented")}}(t,e,n)}));case"creation":return Jc.tidy((function(){return function(t,e,n){switch(t.op){case"Fill":var r=l("shape",t,e,n),s=l("dtype",t,e,n),a=l("value",t,e,n);return[Jc.fill(r,a,s)];case"LinSpace":var i=l("start",t,e,n),o=l("stop",t,e,n),u=l("num",t,e,n);return[Jc.linspace(i,o,u)];case"Multinomial":var c=l("logits",t,e,n),h=l("numSamples",t,e,n),p=l("seed",t,e,n);return[Jc.multinomial(c,h,p)];case"OneHot":var d=l("indices",t,e,n),f=l("depth",t,e,n),m=l("onValue",t,e,n),g=l("offValue",t,e,n);return[Jc.oneHot(d,f,m,g)];case"Ones":return[Jc.ones(l("shape",t,e,n),l("dtype",t,e,n))];case"OnesLike":return[Jc.onesLike(l("x",t,e,n))];case"RandomUniform":return[Jc.randomUniform(l("shape",t,e,n),l("minval",t,e,n),l("maxval",t,e,n),l("dtype",t,e,n))];case"Range":i=l("start",t,e,n);var y=l("stop",t,e,n),b=l("step",t,e,n);return[Jc.range(i,y,b,l("dtype",t,e,n))];case"TruncatedNormal":r=l("shape",t,e,n);var x=l("mean",t,e,n),w=l("stdDev",t,e,n);p=l("seed",t,e,n);return[Jc.truncatedNormal(r,x,w,l("dtype",t,e,n),p)];case"Zeros":return[Jc.zeros(l("shape",t,e,n),l("dtype",t,e,n))];case"ZerosLike":return[Jc.zerosLike(l("x",t,e,n))];default:throw TypeError("Node type "+t.op+" is not implemented")}}(t,e,n)}));case"dynamic":return function(t,e,n){return a(void 0,void 0,void 0,(function(){var r,s,a,o,u,c,h,p,d;return i(this,(function(i){switch(i.label){case 0:switch(t.op){case"NonMaxSuppressionV5":case"NonMaxSuppressionV4":case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":return[3,1];case"Where":return[3,7];case"ListDiff":return[3,9]}return[3,10];case 1:return r=l("boxes",t,e,n),s=l("scores",t,e,n),a=l("maxOutputSize",t,e,n),o=l("iouThreshold",t,e,n),u=l("scoreThreshold",t,e,n),"NonMaxSuppressionV5"!==t.op?[3,3]:(c=l("softNmsSigma",t,e,n),[4,Jc.image.nonMaxSuppressionWithScoreAsync(r,s,a,o,u,c)]);case 2:return[2,[(d=i.sent()).selectedIndices,d.selectedScores]];case 3:return"NonMaxSuppressionV4"!==t.op?[3,5]:(h=l("padToMaxOutputSize",t,e,n),[4,Jc.image.nonMaxSuppressionPaddedAsync(r,s,a,o,u,h)]);case 4:return[2,[(d=i.sent()).selectedIndices,d.validOutputs]];case 5:return[4,Jc.image.nonMaxSuppressionAsync(r,s,a,o,u)];case 6:return[2,[i.sent()]];case 7:return p=l("condition",t,e,n).asType("bool"),[4,Jc.whereAsync(p)];case 8:return d=[i.sent()],p.dispose(),[2,d];case 9:return[2,Jc.setdiff1dAsync(l("x",t,e,n),l("y",t,e,n))];case 10:throw TypeError("Node type "+t.op+" is not implemented")}}))}))}(t,e,n);case"evaluation":return Jc.tidy((function(){return function(t,e,n){switch(t.op){case"TopKV2":var r=l("x",t,e,n),s=l("k",t,e,n),a=l("sorted",t,e,n),i=Jc.topk(r,s,a);return[i.values,i.indices];default:throw TypeError("Node type "+t.op+" is not implemented")}}(t,e,n)}));case"image":return Jc.tidy((function(){return function(t,e,n){switch(t.op){case"ResizeBilinear":var r=l("images",t,e,n),s=l("size",t,e,n),a=l("alignCorners",t,e,n);return[Jc.image.resizeBilinear(r,[s[0],s[1]],a)];case"ResizeNearestNeighbor":r=l("images",t,e,n),s=l("size",t,e,n),a=l("alignCorners",t,e,n);return[Jc.image.resizeNearestNeighbor(r,[s[0],s[1]],a)];case"CropAndResize":var i=l("image",t,e,n),o=l("boxes",t,e,n),u=l("boxInd",t,e,n),c=l("cropSize",t,e,n),h=l("method",t,e,n),p=l("extrapolationValue",t,e,n);return[Jc.image.cropAndResize(i,o,u,c,h,p)];default:throw TypeError("Node type "+t.op+" is not implemented")}}(t,e,n)}));case"graph":return Jc.tidy((function(){return function(t,e,n){switch(t.op){case"Const":return e[t.name];case"PlaceholderWithDefault":var r=l("default",t,e,n);return[c(t.name,e,n)||r];case"Placeholder":return[c(t.name,e,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":return[l("x",t,e,n).clone()];case"IdentityN":return l("x",t,e,n).map((function(t){return t.clone()}));case"Snapshot":return[l("x",t,e,n).clone()];case"Shape":return[Jc.tensor1d(l("x",t,e,n).shape,"int32")];case"ShapeN":return l("x",t,e,n).map((function(t){return Jc.tensor1d(t.shape)}));case"Size":return[Jc.scalar(l("x",t,e,n).size,"int32")];case"Rank":return[Jc.scalar(l("x",t,e,n).rank,"int32")];case"NoOp":return[Jc.scalar(1)];case"Print":var s=l("x",t,e,n),a=l("data",t,e,n),i=l("message",t,e,n),o=l("summarize",t,e,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(i);for(var u=0;u<a.length;u++)console.log(Array.prototype.slice.call(a[u].dataSync()).slice(0,o));return[s];default:throw TypeError("Node type "+t.op+" is not implemented")}}(t,e,n)}));case"logical":return Jc.tidy((function(){return function(t,e,n){switch(t.op){case"Equal":return[Jc.equal(l("a",t,e,n),l("b",t,e,n))];case"NotEqual":return[Jc.notEqual(l("a",t,e,n),l("b",t,e,n))];case"Greater":return[Jc.greater(l("a",t,e,n),l("b",t,e,n))];case"GreaterEqual":return[Jc.greaterEqual(l("a",t,e,n),l("b",t,e,n))];case"Less":return[Jc.less(l("a",t,e,n),l("b",t,e,n))];case"LessEqual":return[Jc.lessEqual(l("a",t,e,n),l("b",t,e,n))];case"LogicalAnd":return[Jc.logicalAnd(l("a",t,e,n),l("b",t,e,n))];case"LogicalNot":return[Jc.logicalNot(l("a",t,e,n))];case"LogicalOr":return[Jc.logicalOr(l("a",t,e,n),l("b",t,e,n))];case"Select":case"SelectV2":return[Jc.where(l("condition",t,e,n),l("a",t,e,n),l("b",t,e,n))];default:throw TypeError("Node type "+t.op+" is not implemented")}}(t,e,n)}));case"matrices":return Jc.tidy((function(){return function(t,e,n){switch(t.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[Jc.matMul(l("a",t,e,n),l("b",t,e,n),l("transposeA",t,e,n),l("transposeB",t,e,n))];case"Transpose":return[Jc.transpose(l("x",t,e,n),l("perm",t,e,n))];case"_FusedMatMul":var r=l("fusedOps",t,e,n),s=r[0],a=r[1],i="biasadd"===s,o="prelu"===a,u=l("numArgs",t,e,n);if(i){if(o&&2!==u)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!o&&1!==u)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}var c=l("args",t,e,n),h=c[0],p=c[1];return[Jc.fused.matMul({a:l("a",t,e,n),b:l("b",t,e,n),transposeA:l("transposeA",t,e,n),transposeB:l("transposeB",t,e,n),bias:h,activation:a,preluActivationWeights:p})];default:throw TypeError("Node type "+t.op+" is not implemented")}}(t,e,n)}));case"normalization":return Jc.tidy((function(){return function(t,e,n){switch(t.op){case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[Jc.batchNorm(l("x",t,e,n),l("mean",t,e,n),l("variance",t,e,n),l("offset",t,e,n),l("scale",t,e,n),l("epsilon",t,e,n))];case"LRN":return[Jc.localResponseNormalization(l("x",t,e,n),l("radius",t,e,n),l("bias",t,e,n),l("alpha",t,e,n),l("beta",t,e,n))];case"Softmax":return[Jc.softmax(l("x",t,e,n))];case"LogSoftmax":return[Jc.logSoftmax(l("x",t,e,n))];case"SparseToDense":return[Jc.sparseToDense(l("sparseIndices",t,e,n),l("outputShape",t,e,n),l("sparseValues",t,e,n),l("defaultValue",t,e,n))];default:throw TypeError("Node type "+t.op+" is not implemented")}}(t,e,n)}));case"reduction":return Jc.tidy((function(){return function(t,e,n){switch(t.op){case"Max":var r=l("axis",t,e,n),s=l("keepDims",t,e,n);return[Jc.max(l("x",t,e,n),r,s)];case"Mean":r=l("axis",t,e,n),s=l("keepDims",t,e,n);return[Jc.mean(l("x",t,e,n),r,s)];case"Min":r=l("axis",t,e,n),s=l("keepDims",t,e,n);return[Jc.min(l("x",t,e,n),r,s)];case"Sum":r=l("axis",t,e,n),s=l("keepDims",t,e,n);return[Jc.sum(l("x",t,e,n),r,s)];case"All":r=l("axis",t,e,n),s=l("keepDims",t,e,n);return[Jc.all(l("x",t,e,n),r,s)];case"Any":r=l("axis",t,e,n),s=l("keepDims",t,e,n);return[Jc.any(l("x",t,e,n),r,s)];case"ArgMax":r=l("axis",t,e,n);return[Jc.argMax(l("x",t,e,n),r)];case"ArgMin":r=l("axis",t,e,n);return[Jc.argMin(l("x",t,e,n),r)];case"Prod":r=l("axis",t,e,n),s=l("keepDims",t,e,n);return[Jc.prod(l("x",t,e,n),r,s)];case"Cumsum":r=l("axis",t,e,n);var a=l("exclusive",t,e,n),i=l("reverse",t,e,n);return[Jc.cumsum(l("x",t,e,n),r,a,i)];default:throw TypeError("Node type "+t.op+" is not implemented")}}(t,e,n)}));case"slice_join":return Jc.tidy((function(){return function(t,e,n){switch(t.op){case"ConcatV2":case"Concat":var r=l("n",t,e,n),s=l("axis",t,e,n),a=l("tensors",t,e,n);return a=a.slice(0,r),[Jc.concat(a,s)];case"GatherV2":case"Gather":s=l("axis",t,e,n);var i=l("x",t,e,n),o=l("indices",t,e,n);return[Jc.gather(i,o.asType("int32"),s)];case"ReverseV2":case"Reverse":s=l("axis",t,e,n),i=l("x",t,e,n);return[Jc.reverse(i,s)];case"Slice":var u=l("begin",t,e,n),c=l("size",t,e,n);return[Jc.slice(l("x",t,e,n),u,c)];case"StridedSlice":u=l("begin",t,e,n);var h=l("end",t,e,n),p=l("strides",t,e,n),d=l("beginMask",t,e,n),f=l("endMask",t,e,n),m=l("ellipsisMask",t,e,n),g=l("newAxisMask",t,e,n),y=l("shrinkAxisMask",t,e,n),b=l("x",t,e,n);return[Jc.stridedSlice(b,u,h,p,d,f,m,g,y)];case"Pack":return Jc.tidy((function(){var r=l("axis",t,e,n),s=l("tensors",t,e,n),a=s[0].shape,i=s[0].squeeze().shape,o=s.map((function(t){var e=Jc.util.arraysEqual(t.shape,a);if(!e&&!Jc.util.arraysEqual(t.squeeze().shape,i))throw new Error("the input tensors shape does not match");return e?t:t.reshape(a)}));return[Jc.stack(o,r)]}));case"Unpack":return Jc.tidy((function(){var r=l("axis",t,e,n),s=l("tensor",t,e,n);return Jc.unstack(s,r)}));case"Tile":var x=l("reps",t,e,n);return[Jc.tile(l("x",t,e,n),x)];case"Split":case"SplitV":s=l("axis",t,e,n);var w=l("numOrSizeSplits",t,e,n);b=l("x",t,e,n);return Jc.split(b,w,s);case"ScatterNd":o=l("indices",t,e,n);var v=l("values",t,e,n),k=l("shape",t,e,n);return[Jc.scatterND(o,v,k)];case"GatherNd":var N=l("x",t,e,n);o=l("indices",t,e,n);return[Jc.gatherND(N,o)];case"SparseToDense":o=l("sparseIndices",t,e,n),k=l("outputShape",t,e,n);var I=l("sparseValues",t,e,n),S=l("defaultValue",t,e,n);return[Jc.sparseToDense(o,I,k,I.dtype===S.dtype?S:S.asType(I.dtype))];default:throw TypeError("Node type "+t.op+" is not implemented")}}(t,e,n)}));case"spectral":return Jc.tidy((function(){return function(t,e,n){switch(t.op){case"FFT":return[Jc.fft(l("x",t,e,n))];case"IFFT":return[Jc.ifft(l("x",t,e,n))];case"RFFT":return[Jc.rfft(l("x",t,e,n))];case"IRFFT":return[Jc.irfft(l("x",t,e,n))];default:throw TypeError("Node type "+t.op+" is not implemented")}}(t,e,n)}));case"transformation":return Jc.tidy((function(){return function(t,e,n){switch(t.op){case"Cast":return[Jc.cast(l("x",t,e,n),l("dtype",t,e,n))];case"ExpandDims":var r=l("axis",t,e,n);return[Jc.expandDims(l("x",t,e,n),r)];case"Squeeze":r=l("axis",t,e,n);return[Jc.squeeze(l("x",t,e,n),r)];case"Reshape":return[Jc.reshape(l("x",t,e,n),l("shape",t,e,n))];case"PadV2":case"Pad":return[Jc.pad(l("x",t,e,n),l("padding",t,e,n),l("constantValue",t,e,n))];case"SpaceToBatchND":var s=l("blockShape",t,e,n),a=l("paddings",t,e,n);return[Jc.spaceToBatchND(l("x",t,e,n),s,a)];case"BatchToSpaceND":s=l("blockShape",t,e,n);var i=l("crops",t,e,n);return[Jc.batchToSpaceND(l("x",t,e,n),s,i)];case"DepthToSpace":var o=l("blockSize",t,e,n),u=l("dataFormat",t,e,n).toUpperCase();return[Jc.depthToSpace(l("x",t,e,n),o,u)];case"BroadcastTo":return[Jc.broadcastTo(l("x",t,e,n),l("shape",t,e,n))];default:throw TypeError("Node type "+t.op+" is not implemented")}}(t,e,n)}));case"custom":var r=u(t.op);if(r&&r.customExecutor)return r.customExecutor(new q(t,e,n));throw TypeError("Custom op "+t.op+" is not registered.");default:throw TypeError("Unknown op '"+t.op+"'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()")}}(t,e,n);return r instanceof Promise?r.then((function(t){return[].concat(t)})):[].concat(r)}var Z=function(){function t(t,e,n,r){void 0===t&&(t={}),void 0===e&&(e={}),void 0===n&&(n={}),void 0===r&&(r={}),this.weightMap=t,this.tensorArrayMap=e,this.tensorListMap=n,this.functionMap=r,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}return t.prototype.newFrame=function(t,e){return{id:t,frameName:e,iterationId:0}},Object.defineProperty(t.prototype,"currentContext",{get:function(){return this.contexts},set:function(t){this.contexts!==t&&(this.contexts=t,this.generateCurrentContextIds())},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"currentContextId",{get:function(){return this._currentContextIds[0]},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"currentContextIds",{get:function(){return this._currentContextIds},enumerable:!0,configurable:!0}),t.prototype.generateCurrentContextIds=function(){for(var t=[],e=0;e<this.contexts.length-1;e++){var n=this.contexts.slice(0,this.contexts.length-e);t.push(this.contextIdforContexts(n))}t.push(""),this._currentContextIds=t},t.prototype.contextIdforContexts=function(t){return t?t.map((function(t){return 0===t.id&&0===t.iterationId?"":t.frameName+"-"+t.iterationId})).join("/"):""},t.prototype.enterFrame=function(t){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,t)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))},t.prototype.exitFrame=function(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()},t.prototype.nextIteration=function(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");this.contexts=this.contexts.slice(),this.lastId++;var t=Object.assign({},this.contexts[this.contexts.length-1]);t.iterationId+=1,t.id=this.lastId,this.contexts.splice(-1,1,t),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))},t.prototype.getWeight=function(t){return this.weightMap[t]},t.prototype.addTensorArray=function(t){this.tensorArrayMap[t.id]=t},t.prototype.getTensorArray=function(t){return this.tensorArrayMap[t]},t.prototype.addTensorList=function(t){this.tensorListMap[t.id]=t},t.prototype.getTensorList=function(t){return this.tensorListMap[t]},t.prototype.dispose=function(){for(var t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose();for(var t in this.tensorListMap)this.tensorListMap[t].clearAndClose()},t}();function Q(t,e,n){for(var r=new Set,s=[],a=null,i=null,o=new Set,u=Object.keys(t).map((function(t){return d(t)[0]})),l=e.slice();l.length>0;){var c=l.pop();(nt(c)||rt(c))&&null==a&&(i=(a=c).children.map((function(t){return t.name})).filter((function(t){return r.has(t)}))),r.add(c.name),null==n[c.name]&&(-1===u.indexOf(c.name)&&(0!==c.inputs.length?c.inputs.forEach((function(t){o.has(t.name)||(o.add(t.name),l.push(t))})):s.push(c.name)))}return{inputs:t,outputs:e,usedNodes:r,missingInputs:s,dynamicNode:a,syncInputs:i}}var tt=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],et=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"];function nt(t){return tt.indexOf(t.op)>=0}function rt(t){return et.indexOf(t.op)>=0}var st=function(){function t(e,n){var r=this;this.graph=e,this.parent=n,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this._outputs=e.outputs,this._inputs=e.inputs,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach((function(n){r._functionExecutorMap[n]=new t(e.functions[n],r)}))}return Object.defineProperty(t.prototype,"weightIds",{get:function(){return this.parent?this.parent.weightIds:this._weightIds},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"functionExecutorMap",{get:function(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"weightMap",{get:function(){return this.parent?this.parent.weightMap:this._weightMap},set:function(t){var e=Object.keys(t).map((function(e){return t[e].map((function(t){return t.id}))}));this._weightIds=[].concat.apply([],e),this._weightMap=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"inputs",{get:function(){return this._inputs.map((function(t){return{name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}}))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"outputs",{get:function(){return this._outputs.map((function(t){return{name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}}))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"inputNodes",{get:function(){return this._inputs.map((function(t){return t.signatureKey||t.name}))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"outputNodes",{get:function(){return this._outputs.map((function(t){var e=t.signatureKey||t.name;return t.defaultOutput?e+":"+t.defaultOutput:e}))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"functions",{get:function(){var t=this;return Object.keys(this._functions).reduce((function(e,n){return e[n]=t._functions[n].signature,e}),{})},enumerable:!0,configurable:!0}),t.prototype.getCompilationKey=function(t,e){var n=t.map((function(t){return t.name})).sort(),r=e.map((function(t){return t.name})).sort();return n.join(this.SEPERATOR)+"--"+r.join(this.SEPERATOR)},t.prototype.compile=function(t,e){var n=Q(t,e,this.weightMap),r=n.missingInputs,s=n.dynamicNode,a=n.syncInputs;if(null!=s)throw new Error("This execution contains the node '"+s.name+"', which has the dynamic op '"+s.op+"'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs ["+a+"]");if(r.length>0){var i=e.map((function(t){return t.name})),o=Object.keys(t);throw new Error("Cannot compute the outputs ["+i+"] from the provided inputs ["+o+"]. Missing the following inputs: ["+r+"]")}return function(t,e,n){var r=n.usedNodes,s=n.inputs,a=[];Object.keys(s).map((function(t){return d(t)[0]})).map((function(e){return t.nodes[e]})).forEach((function(t){r.has(t.name)&&a.push(t)})),t.weights.forEach((function(t){r.has(t.name)&&a.push(t)}));for(var i=new Set,o=[];a.length>0;){var u=a.pop();i.add(u.name),e[u.name]||o.push(u),u.children.forEach((function(t){!i.has(t.name)&&r.has(t.name)&&t.inputs.every((function(t){return i.has(t.name)}))&&a.push(t)}))}return o}(this.graph,this.weightMap,n)},t.prototype.execute=function(t,e){var n=this;t=this.mapInputs(t);var r=Object.keys(t).sort();this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e);var a=r.map((function(t){return n.graph.nodes[d(t)[0]]})),i=e.map((function(t){return n.graph.nodes[d(t)[0]]})),o=this.getCompilationKey(a,i),u=this.compiledMap.get(o);null==u&&(u=this.compile(t,i),this.compiledMap.set(o,u));var l={},h={};return Jc.tidy((function(){var r=new Z(n.weightMap,l,h,n.functionExecutorMap),a=s({},n.weightMap);Object.keys(t).forEach((function(e){var n=d(e),r=n[0],s=[];s[n[1]]=t[e],a[r]=s}));for(var i=n.getFrozenTensorIds(a),o={},p=0;p<u.length;p++){var f=u[p];if(!a[f.name]){var m=J(f,a,r);if(m instanceof Promise)throw new Error("The execution of the op '"+f.op+"' returned a promise. Please use model.executeAsync() instead.");a[f.name]=m,n.checkTensorForDisposal(f.name,f,a,r,i,e,o)}}return null==n.parent&&r.dispose(),e.map((function(t){return c(t,a,r)}))}))},t.prototype.getFrozenTensorIds=function(t){var e=[].concat.apply([],Object.keys(t).map((function(e){return t[e]})).map((function(t){return t.map((function(t){return t.id}))})));return new Set(e)},t.prototype.checkTensorForDisposal=function(t,e,n,r,s,a,i){"control"!==e.category&&-1===a.indexOf(t)&&(n[t].forEach((function(t){null!=t&&(i[t.id]=(i[t.id]||0)+e.children.length)})),e.inputs.forEach((function(t){if("control"!==t.category){var e=function(t,e,n){return e[p(t,n.currentContextId)]}(t.name,n,r);null!=e&&e.forEach((function(t){if(t&&!s.has(t.id)){var e=i[t.id];1===e?(t.dispose(),delete i[t.id]):null!=e&&i[t.id]--}}))}})))},t.prototype.executeAsync=function(t,e){return a(this,void 0,void 0,(function(){return i(this,(function(n){return[2,this._executeAsync(t,e)]}))}))},t.prototype._executeAsync=function(t,e,n,r,s){return void 0===n&&(n=!1),void 0===r&&(r={}),void 0===s&&(s={}),a(this,void 0,void 0,(function(){var a,o,u,l,h,p=this;return i(this,(function(i){switch(i.label){case 0:return n||(t=this.mapInputs(t),this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e)),a=new Z(this.weightMap,r,s,this.functionExecutorMap),[4,this.executeWithControlFlow(t,a,e,n)];case 1:return o=i.sent(),u=e.map((function(t){return c(t,o,a)})),l=new Set(u.map((function(t){return t.id}))),h=new Set(Object.keys(t).map((function(e){return t[e].id}))),Object.keys(o).forEach((function(t){o[t].forEach((function(t){!t||t.isDisposed||l.has(t.id)||h.has(t.id)||-1!==p.weightIds.indexOf(t.id)||t.dispose()}))})),null==this.parent&&a.dispose(),[2,u]}}))}))},t.prototype.executeFunctionAsync=function(t,e,n){return a(this,void 0,void 0,(function(){var r,s=this;return i(this,(function(a){return r=t.reduce((function(t,e,n){return t[s.inputs[n].name]=e,t}),{}),[2,this._executeAsync(r,this.outputNodes,!0,e,n)]}))}))},t.prototype.executeWithControlFlow=function(t,e,n,r){return a(this,void 0,void 0,(function(){var a,o,u,l,h,p,f,m,g,y,b,x,w,v,k,N,I=this;return i(this,(function(i){switch(i.label){case 0:a=Object.keys(t),o=a.map((function(t){return I.graph.nodes[d(t)[0]]})),u=n.map((function(t){return I.graph.nodes[d(t)[0]]})),l=Q(t,u,this.weightMap),h=l.usedNodes,p=l.missingInputs,f=l.dynamicNode,m=l.syncInputs,g=o.concat(this.graph.weights).map((function(t){return{node:t,contexts:e.currentContext}})),y=s({},this.weightMap),Object.keys(t).forEach((function(e){var n=d(e),r=n[0],s=[];s[n[1]]=t[e],y[r]=s})),b={},x=this.getFrozenTensorIds(y),w={},i.label=1;case 1:return g.length>0?(v=this.processStack(o,g,e,y,w,x,n,b,h),[4,Promise.all(v)]):[3,3];case 2:return i.sent(),[3,1];case 3:if(null!=f||r||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead."),(k=u.filter((function(t){return!nt(t)&&!c(t.name,y,e)})).map((function(t){return t.name}))).length>0)throw N="",null!=f&&(N="Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs ["+m+"]"),new Error("Cannot compute the outputs ["+k+"] from the provided inputs ["+a+"]. Consider providing the following inputs: ["+p+"]. "+N);return[2,y]}}))}))},t.prototype.processStack=function(t,e,n,r,s,a,i,o,u){for(var c=this,p=[],d=function(){var d=e.pop();n.currentContext=d.contexts;var m="";if("Enter"===d.node.op&&l("isConstant",d.node,r,n)&&(m=h(d.node.name,n)[0]),-1===t.indexOf(d.node)){var g=J(d.node,r,n);m||(m=h(d.node.name,n)[0]);var y=n.currentContext;g instanceof Promise?p.push(g.then((function(t){return r[m]=t,n.currentContext=y,c.checkTensorForDisposal(m,d.node,r,n,a,i,o),c.processChildNodes(d.node,e,n,r,s,u),t}))):(r[m]=g,f.checkTensorForDisposal(m,d.node,r,n,a,i,o),f.processChildNodes(d.node,e,n,r,s,u))}else f.processChildNodes(d.node,e,n,r,s,u)},f=this;e.length>0;)d();return p},t.prototype.processChildNodes=function(t,e,n,r,s,a){t.children.forEach((function(t){var i=h(t.name,n)[0];!s[i]&&a.has(t.name)&&("Merge"===t.op?t.inputNames.some((function(t){return!!c(t,r,n)}))&&(s[i]=!0,e.push({contexts:n.currentContext,node:t})):t.inputNames.every((function(t){return!!c(t,r,n)}))&&(s[i]=!0,e.push({contexts:n.currentContext,node:t})))}))},t.prototype.dispose=function(){var t=this;Object.keys(this.weightMap).forEach((function(e){return t.weightMap[e].forEach((function(t){return t.dispose()}))}))},t.prototype.checkInputShapeAndType=function(t){var e=this;Object.keys(t).forEach((function(n){var r=t[n],s=d(n)[0],a=e.graph.nodes[s];if(a.attrParams.shape&&a.attrParams.shape.value){var i=a.attrParams.shape.value,o=i.length===r.shape.length&&r.shape.every((function(t,e){return-1===i[e]||i[e]===t}));Jc.util.assert(o,(function(){return"The shape of dict['"+a.name+"'] provided in model.execute(dict) must be ["+i+"], but was ["+r.shape+"]"}))}a.attrParams.dtype&&a.attrParams.dtype.value&&Jc.util.assert(r.dtype===a.attrParams.dtype.value,(function(){return"The dtype of dict['"+a.name+"'] provided in model.execute(dict) must be "+a.attrParams.dtype.value+", but was "+r.dtype}))}))},t.prototype.mapInputs=function(t){var e={};for(var n in t){if(null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n])e[this._signature.inputs[n].name]=t[n];else e[n]=t[n]}return e},t.prototype.checkInputs=function(t){var e=this,n=Object.keys(t).filter((function(t){var n=d(t)[0];return null==e.graph.nodes[n]}));if(n.length>0)throw new Error("The dict provided in model.execute(dict) has keys: ["+n+"] that are not part of graph")},t.prototype.mapOutputs=function(t){var e=this;return t.map((function(t){return null!=e._signature&&null!=e._signature.outputs&&null!=e._signature.outputs[t]?e._signature.outputs[t].name:t}),{})},t.prototype.checkOutputs=function(t){var e=this;t.forEach((function(t){var n=d(t)[0];if(!e.graph.nodes[n])throw new Error("The output '"+t+"' is not found in the graph")}))},t}(),at=function(){function t(t,e){void 0===e&&(e={}),this.modelUrl=t,this.loadOptions=e,this.version="n/a",null==e&&(this.loadOptions={})}return Object.defineProperty(t.prototype,"modelVersion",{get:function(){return this.version},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"inputNodes",{get:function(){return this.executor.inputNodes},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"outputNodes",{get:function(){return this.executor.outputNodes},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"inputs",{get:function(){return this.executor.inputs},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"outputs",{get:function(){return this.executor.outputs},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"weights",{get:function(){return this.executor.weightMap},enumerable:!0,configurable:!0}),t.prototype.findIOHandler=function(){var t=this.modelUrl;if(null!=t.load)this.handler=t;else if(null!=this.loadOptions.requestInit)this.handler=Jc.io.browserHTTPRequest(t,this.loadOptions);else{var e=Jc.io.getLoadHandlers(t,this.loadOptions);if(0===e.length)e.push(Jc.io.browserHTTPRequest(t,this.loadOptions));else if(e.length>1)throw new Error("Found more than one ("+e.length+") load handlers for URL '"+[t]+"'");this.handler=e[0]}},t.prototype.load=function(){return a(this,void 0,void 0,(function(){var t;return i(this,(function(e){switch(e.label){case 0:if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");return[4,this.handler.load()];case 1:return t=e.sent(),[2,this.loadSync(t)]}}))}))},t.prototype.loadSync=function(t){this.artifacts=t;var e=this.artifacts.modelTopology,n={};null!=this.artifacts.userDefinedMetadata&&(n=this.artifacts.userDefinedMetadata.signature),this.version=e.versions.producer+"."+e.versions.minConsumer;var r=Jc.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);return this.executor=new st($.Instance.transformGraph(e,n)),this.executor.weightMap=this.convertTensorMapToTensorsMap(r),!0},t.prototype.save=function(t,e){return a(this,void 0,void 0,(function(){var e;return i(this,(function(n){if("string"==typeof t){if(0===(e=Jc.io.getSaveHandlers(t)).length)throw new Error("Cannot find any save handlers for URL '"+t+"'");if(e.length>1)throw new Error("Found more than one ("+e.length+") save handlers for URL '"+t+"'");t=e[0]}if(null==t.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return[2,t.save(this.artifacts)]}))}))},t.prototype.predict=function(t,e){return this.execute(t,this.outputNodes)},t.prototype.normalizeInputs=function(t){if(!(t instanceof Jc.Tensor||Array.isArray(t)))return t;if((t=Array.isArray(t)?t:[t]).length!==this.inputNodes.length)throw new Error("Input tensor count mismatch,the graph model has "+this.inputNodes.length+" placeholders, while there are "+t.length+" input tensors.");return this.inputNodes.reduce((function(e,n,r){return e[n]=t[r],e}),{})},t.prototype.normalizeOutputs=function(t){return t=t||this.outputNodes,Array.isArray(t)?t:[t]},t.prototype.execute=function(t,e){t=this.normalizeInputs(t),e=this.normalizeOutputs(e);var n=this.executor.execute(t,e);return n.length>1?n:n[0]},t.prototype.executeAsync=function(t,e){return a(this,void 0,void 0,(function(){var n;return i(this,(function(r){switch(r.label){case 0:return t=this.normalizeInputs(t),e=this.normalizeOutputs(e),[4,this.executor.executeAsync(t,e)];case 1:return[2,(n=r.sent()).length>1?n:n[0]]}}))}))},t.prototype.convertTensorMapToTensorsMap=function(t){return Object.keys(t).reduce((function(e,n){return e[n]=[t[n]],e}),{})},t.prototype.dispose=function(){this.executor.dispose()},t}();e.GraphModel=at,e.deregisterOp=function(t){delete o[t]},e.loadGraphModel=function(t,e){return void 0===e&&(e={}),a(this,void 0,void 0,(function(){var n;return i(this,(function(r){switch(r.label){case 0:if(null==t)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");return null==e&&(e={}),e.fromTFHub&&null==t.load&&(t.endsWith("/")||(t+="/"),t+="model.json?tfjs-format=file"),[4,(n=new at(t,e)).load()];case 1:return r.sent(),[2,n]}}))}))},e.registerOp=function(t,e){var n={tfOpName:t,category:"custom",inputs:[],attrs:[],customExecutor:e};o[t]=n},e.version_converter="2.1.0"}));function vy(t,e,n,r){const s=B(r,T(n));for(let n=0;n<s.length;++n){const r=n*e;let a=t[r];for(let n=0;n<e;++n){const e=t[r+n];e>a&&(a=e)}s[n]=a}return s}function ky(t,e,n,r,s){const a=e.length,i=T(e),o=Q(e),u=Q(s),l=B(n,T(s));for(let e=0;e<i;++e){const n=ct(e,a,o),s=new Array(n.length);for(let t=0;t<s.length;t++)s[t]=n[r[t]];l[lt(s,a,u)]=t[e]}return l}!function(t){t[t.FAIL=0]="FAIL",t[t.SHORTEST=1]="SHORTEST",t[t.LONGEST=2]="LONGEST"}(wy||(wy={}));var Ny=Object.freeze({__proto__:null,maxImpl:vy,transposeImpl:ky});function Iy(t,e){Array.isArray(t)||(t=[t]),t.forEach(t=>{null!=t&&S("complex64"!==t.dtype,()=>e+" does not support complex64 tensors in the CPU backend.")})}function Sy(t,e,n,r,s,a){const i=s.strideHeight,o=s.strideWidth,u=s.dilationHeight,l=s.dilationWidth,c=s.effectiveFilterHeight,h=s.effectiveFilterWidth,p=s.padInfo.top,d=s.padInfo.left,f="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=Fi(s.outShape,n),g=m.values,y=s.outShape[1]*s.outShape[2]*s.outShape[3],b=s.outShape[2]*s.outShape[3],x=s.outShape[3];for(let e=0;e<s.batchSize;++e){const n=e*y,m=e*r[0];for(let e=0;e<s.inChannels;++e)for(let y=0;y<s.outHeight;++y){const w=y*i-p,v=Math.max(0,w),k=Math.min(s.inHeight,c+w),N=n+y*b;for(let n=0;n<s.outWidth;++n){const i=n*o-d,c=Math.max(0,i),p=Math.min(s.inWidth,h+i);let y=f,b=0,w=0;for(let n=v;n<k;n+=u){const s=m+n*r[1];for(let n=c;n<p;n+=l){const i=t[s+n*r[2]+e];"max"===a&&i>y?y=i:"avg"===a&&(b+=i,w++)}if(isNaN(y))break}g[N+n*x+e]="avg"===a?b/w:y}}}return m}function Cy(t,e,n,r,s=!1,a=!1){const i=Fi(r.outShape,"int32"),o=r.strideHeight,u=r.strideWidth,l=r.dilationHeight,c=r.dilationWidth,h=r.effectiveFilterHeight,p=r.effectiveFilterWidth,d=r.padInfo.top,f=r.padInfo.left,m=Fi(e,n,t);for(let t=0;t<r.batchSize;++t)for(let e=0;e<r.inChannels;++e)for(let n=0;n<r.outHeight;++n){const g=n*o-d;let y=g;for(;y<0;)y+=l;const b=Math.min(r.inHeight,h+g);for(let o=0;o<r.outWidth;++o){const h=o*u-f;let d=h;for(;d<0;)d+=c;const x=Math.min(r.inWidth,p+h);let w=Number.NEGATIVE_INFINITY,v=-1;for(let n=y;n<b;n+=l){const i=n-g;for(let o=d;o<x;o+=c){const u=o-h,l=m.get(t,n,o,e);l>w&&(w=l,v=s?a?((t*r.inHeight+n)*r.inWidth+o)*r.inChannels+e:(n*r.inWidth+o)*r.inChannels+e:i*p+u)}}i.set(v,t,n,o,e)}}return i}const Ay=$l,Ey=Vc,Ty=Uc,Ry=Gc,$y=Pu;function _y(t,e,n,r){if("linear"===n)return t.linear(e);if("relu"===n)return t.relu(e);if("elu"===n)return t.elu(e);if("relu6"===n)return t.relu6(e);if("prelu"===n)return t.prelu(e,r);throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}class Dy extends jc{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new qc(this,si())}write(t,e,n){this.firstUse&&(this.firstUse=!1,u().get("IS_NODE")&&Tc("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));const r={};return this.data.set(r,{values:t,dtype:n}),r}move(t,e,n,r){this.data.set(t,{values:e,dtype:r})}numDataIds(){return this.data.numDataIds()}async read(t){return this.readSync(t)}readSync(t){const{dtype:e,complexTensors:n}=this.data.get(t);if("complex64"===e){return Rc(this.readSync(n.real.dataId),this.readSync(n.imag.dataId))}return this.data.get(t).values}bufferSync(t){const e=this.readSync(t.dataId);let n=e;if("string"===t.dtype)try{n=e.map(t=>ut(t))}catch(t){throw new Error("Failed to decode encoded string bytes into utf-8")}return Fi(t.shape,t.dtype,n)}makeOutput(t,e,n){const r=this.write(t,e,n);return si().makeTensorFromDataId(r,e,n,this)}disposeData(t){if(this.data.has(t)){const{complexTensors:e}=this.data.get(t);null!=e&&(e.real.dispose(),e.imag.dispose()),this.data.delete(t)}}async time(t){const e=at();t();return{kernelMs:at()-e}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}complex(t,e){const n=this.makeOutput(null,t.shape,"complex64");return this.data.get(n.dataId).complexTensors={real:si().keep(t.clone()),imag:si().keep(e.clone())},n}real(t){return this.data.get(t.dataId).complexTensors.real.clone()}imag(t){return this.data.get(t.dataId).complexTensors.imag.clone()}slice(t,e,n){Iy(t,"slice");if(is(t.shape,e,n)){const r=os(e,t.strides),s=T(n);return bs(this.readSync(t.dataId).subarray(r,r+s),n,t.dtype)}const r=Fi(n,t.dtype),s=this.bufferSync(t);for(let t=0;t<r.size;++t){const n=r.indexToLoc(t).map((t,n)=>t+e[n]);r.values[t]=s.get(...n)}return r.toTensor()}stridedSlice(t,e,n,r){Iy(t,"stridedSlice");const s=Jr(e,n,r);if(s.some(t=>0===t))return bs([],s);const a=Fi(s,t.dtype),i=this.bufferSync(t);for(let t=0;t<a.size;t++){const n=a.indexToLoc(t),s=new Array(n.length);for(let t=0;t<s.length;t++)s[t]=n[t]*r[t]+e[t];a.set(i.get(...s),...n)}return a.toTensor()}diag(t){const e=this.readSync(t.dataId),n=Fi([t.size,t.size],t.dtype),r=n.values;for(let n=0;n<e.length;n++)r[n*t.size+n]=e[n];return n.toTensor()}unstack(t,e){const n=t.shape[e],r=new Array(t.rank-1);let s=0;for(let n=0;n<t.rank;n++)n!==e&&(r[s++]=t.shape[n]);const a=new Array(t.rank).fill(0),i=t.shape.slice();i[e]=1;const o=new Array(n);for(let n=0;n<o.length;n++)a[e]=n,o[n]=this.slice(t,a,i).reshape(r);return o}reverse(t,e){Iy(t,"reverse");const n=Fi(t.shape,t.dtype),r=this.bufferSync(t);for(let s=0;s<n.size;s++){const a=n.indexToLoc(s),i=a.slice();e.forEach(e=>i[e]=t.shape[e]-1-i[e]),n.set(r.get(...i),...a)}return n.toTensor()}concat(t,e){if("complex64"===t[0].dtype){const n=t.map(t=>ao(t)),r=t.map(t=>so(t));return br(this.concat(n,e),this.concat(r,e))}const n=t.map(t=>{const n=T(t.shape.slice(e));return t.as2D(-1,n)}),r=ys(n.map(t=>t.shape),1),s=Fi(r,t[0].dtype).values;if(1===n[0].shape[0]){let t=0;n.forEach(e=>{s.set(this.readSync(e.dataId),t),t+=e.size})}else{let t=0;n.forEach(e=>{const n=this.readSync(e.dataId);let a=0;for(let i=0;i<e.shape[0];++i){const o=i*r[1]+t;for(let t=0;t<e.shape[1];++t)s[o+t]=n[a++]}t+=e.shape[1]})}const a=ys(t.map(t=>t.shape),e);return bs(s,a,t[0].dtype)}neg(t){return Iy(t,"neg"),this.multiply(re(-1),t)}add(t,e){return"complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),(t,e,n,r)=>({real:t+n,imag:e+r})):this.broadcastedBinaryOp(t,e,Tt(t.dtype,e.dtype),(t,e)=>t+e)}addN(t){Iy(t,"addN");const e=t.map(t=>this.readSync(t.dataId)),n=Fi(t[0].shape,t[0].dtype),r=n.values;for(let n=0;n<t.length;n++){const t=e[n];for(let e=0;e<r.length;e++)r[e]+=t[e]}return n.toTensor()}softmax(t,e){const n=L([e],t.shape),r=xo(t,n),s=Ie(r.shape,n),a=this.subtract(t,r.reshape(s)),i=this.exp(a),o=this.sum(i,n).reshape(s);return te(i,o)}subtract(t,e){return"complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),(t,e,n,r)=>({real:t-n,imag:e-r})):this.broadcastedBinaryOp(t,e,Tt(t.dtype,e.dtype),(t,e)=>t-e)}pow(t,e){return Iy([t,e],"pow"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>Math.pow(t,e))}batchMatMul(t,e,n,r){Iy([t,e],"matMul");const s=n?t.shape[1]:t.shape[2],a=n?t.shape[2]:t.shape[1],i=r?e.shape[1]:e.shape[2],o=t.shape[0],u=this.readSync(t.dataId),l=this.readSync(e.dataId),[c,h,p]=n?[t.strides[0],1,t.strides[1]]:[t.strides[0],t.strides[1],1],[d,f,m]=r?[1,e.strides[1],e.strides[0]]:[e.strides[1],1,e.strides[0]],g=a*i,y=Fi([o,a,i],t.dtype),b=y.values,x=this.blockSize;for(let t=0;t<o;t++)for(let e=0;e<a;e+=x)for(let n=0;n<i;n+=x)for(let r=0;r<s;r+=x){const o=Math.min(e+x,a),y=Math.min(n+x,i),w=Math.min(r+x,s);for(let s=e;s<o;s++)for(let e=n;e<y;e++){let n=0;for(let a=r;a<w;a++)n+=u[t*c+s*h+a*p]*l[a*d+e*f+t*m];b[t*g+(s*i+e)]+=n}}return y.toTensor()}fusedBatchMatMul({a:t,b:e,transposeA:n,transposeB:r,bias:s,activation:a,preluActivationWeights:i}){let o=this.batchMatMul(t,e,n,r);return s&&(o=this.add(o,s)),a&&(o=_y(this,o,a,i)),o}multiply(t,e){return"complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),(t,e,n,r)=>({real:t*n-e*r,imag:t*r+e*n})):this.broadcastedBinaryOp(t,e,Tt(t.dtype,e.dtype),(t,e)=>t*e)}floorDiv(t,e){Iy([t,e],"floorDiv");return this.broadcastedBinaryOp(t,e,"int32",(t,e)=>Math.floor(t/e))}sum(t,e){Iy(t,"sum"),Se("sum",e,t.rank);const[n,r]=Ne(t.shape,e),s=xr(n,Tt(t.dtype,"int32")),a=T(r),i=this.readSync(s.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=0;for(let t=0;t<a;++t)n+=o[e+t];i[t]=n}return s}prod(t,e){Iy(t,"sum");const[n,r]=Ne(t.shape,e),s=xr(n,Tt(t.dtype,"int32")),a=T(r),i=this.readSync(s.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=1;for(let t=0;t<a;++t)n*=o[e+t];i[t]=n}return s}unsortedSegmentSum(t,e,n){Iy(t,"unsortedSegmentSum");const r=[],s=t.rank-e.rank;for(let t=0;t<s;++t)e=e.expandDims(t+1);for(let s=0;s<n;++s){const n=re(s,"int32"),a=nr(n,e).asType("float32").mul(t).sum(0);r.push(a)}return Fs(r)}argMin(t,e){Iy(t,"argMin");const n=[e];Se("argMin",n,t.rank);const[r,s]=Ne(t.shape,n),a=xr(r,"int32"),i=T(s),o=this.readSync(a.dataId),u=this.readSync(t.dataId);for(let t=0;t<o.length;++t){const e=t*i;let n=u[e],r=0;for(let t=0;t<i;++t){const s=u[e+t];s<n&&(n=s,r=t)}o[t]=r}return a}argMax(t,e){Iy(t,"argMax");const n=[e];Se("argMax",n,t.rank);const[r,s]=Ne(t.shape,n),a=xr(r,"int32"),i=T(s),o=this.readSync(a.dataId),u=this.readSync(t.dataId);for(let t=0;t<o.length;++t){const e=t*i;let n=u[e],r=0;for(let t=0;t<i;++t){const s=u[e+t];s>n&&(n=s,r=t)}o[t]=r}return a}cumsum(t,e,n,r){if(Iy(t,"cumsum"),e!==t.rank-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${t.rank-1} but got axis=`+e);const s=Tt(t.dtype,"int32"),a=xr(t.shape,s),i=this.readSync(a.dataId),o=this.readSync(t.dataId),u=t.shape[t.rank-1],l=r?(t,e)=>t+u-e-1:(t,e)=>t+e;for(let t=0;t<o.length;t+=u)for(let e=0;e<u;e++){const r=l(t,e);if(0===e)i[r]=n?0:o[r];else{const s=l(t,e-1);i[r]=n?o[s]+i[s]:o[r]+i[s]}}return a}equal(t,e){return Iy([t,e],"equal"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t===e?1:0)}notEqual(t,e){return Iy([t,e],"notEqual"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t!==e?1:0)}less(t,e){return Iy([t,e],"less"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t<e?1:0)}lessEqual(t,e){return Iy([t,e],"lessEqual"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t<=e?1:0)}greater(t,e){return Iy([t,e],"greater"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t>e?1:0)}greaterEqual(t,e){return Iy([t,e],"greaterEqual"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t>=e?1:0)}logicalNot(t){Iy(t,"logicalNot");const e=this.readSync(t.dataId),n=new Uint8Array(e.length);for(let t=0;t<e.length;++t)n[t]=e[t]?0:1;return this.makeOutput(n,t.shape,"bool")}logicalAnd(t,e){return Iy([t,e],"logicalAnd"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t&&e)}logicalOr(t,e){return Iy([t,e],"logicalOr"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t||e)}select(t,e,n){Iy([t,e,n],"select");const r=this.readSync(t.dataId),s=this.readSync(e.dataId),a=this.readSync(n.dataId),i=xr(e.shape,Tt(e.dtype,n.dtype)),o=this.readSync(i.dataId);let u=0;const l=0===t.rank||t.rank>1||1===e.rank?1:T(e.shape.slice(1));for(let t=0;t<r.length;t++)for(let e=0;e<l;e++)1===r[t]?o[u++]=s[t]:o[u++]=a[t];return i}where(t){Iy([t],"where");const e=this.readSync(t.dataId);return $y(t.shape,e)}topk(t,e,n){Iy(t,"topk");const r=this.readSync(t.dataId);return Ry(r,t.shape,t.dtype,e)}min(t,e){Iy(t,"min"),Se("min",e,t.rank);const[n,r]=Ne(t.shape,e),s=xr(n,t.dtype),a=T(r),i=this.readSync(s.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=o[e];for(let t=0;t<a;++t){const r=o[e+t];r<n&&(n=r)}i[t]=n}return s}minimum(t,e){return Iy([t,e],"minimum"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>Math.min(t,e))}mod(t,e){return Iy([t,e],"mod"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>{const n=t%e;return t<0&&e<0||t>=0&&e>=0?n:(n+e)%e})}maximum(t,e){return Iy([t,e],"maximum"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>Math.max(t,e))}all(t,e){Iy(t,"all"),Se("all",e,t.rank);const[n,r]=Ne(t.shape,e),s=xr(n,t.dtype),a=T(r),i=this.readSync(s.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=o[e];for(let t=0;t<a;++t){const r=o[e+t];n=n&&r}i[t]=n}return s}any(t,e){Iy(t,"any"),Se("any",e,t.rank);const[n,r]=Ne(t.shape,e),s=xr(n,t.dtype),a=T(r),i=this.readSync(s.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=o[e];for(let t=0;t<a;++t){const r=o[e+t];n=n||r}i[t]=n}return s}squaredDifference(t,e){return Iy([t,e],"squaredDifference"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>{const n=t-e;return n*n})}ceil(t){Iy(t,"ceil");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)n[t]=Math.ceil(e[t]);return this.makeOutput(n,t.shape,"float32")}floor(t){Iy(t,"floor");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)n[t]=Math.floor(e[t]);return this.makeOutput(n,t.shape,"float32")}sign(t){Iy(t,"x");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)e[t]<0?n[t]=-1:e[t]>0?n[t]=1:n[t]=0;return this.makeOutput(n,t.shape,"float32")}isNaN(t){Iy(t,"x");const e=this.readSync(t.dataId),n=new Uint8Array(e.length);for(let t=0;t<e.length;++t)Number.isNaN(e[t])&&(n[t]=1);return this.makeOutput(n,t.shape,"bool")}isInf(t){Iy(t,"x");const e=this.readSync(t.dataId),n=new Uint8Array(e.length);for(let t=0;t<e.length;++t)Math.abs(e[t])===1/0&&(n[t]=1);return this.makeOutput(n,t.shape,"bool")}isFinite(t){Iy(t,"x");const e=this.readSync(t.dataId),n=new Uint8Array(e.length);for(let t=0;t<e.length;++t)Number.isFinite(e[t])&&(n[t]=1);return this.makeOutput(n,t.shape,"bool")}round(t){Iy(t,"round");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t){const r=Math.floor(e[t]);e[t]-r<.5?n[t]=Math.floor(e[t]):e[t]-r>.5?n[t]=Math.ceil(e[t]):n[t]=r%2==0?r:r+1}return this.makeOutput(n,t.shape,"float32")}exp(t){Iy(t,"exp");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)n[t]=Math.exp(e[t]);return this.makeOutput(n,t.shape,"float32")}expm1(t){Iy(t,"expm1");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)n[t]=Math.expm1(e[t]);return this.makeOutput(n,t.shape,"float32")}log(t){Iy(t,"log");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t){const r=e[t];n[t]=Math.log(r)}return this.makeOutput(n,t.shape,"float32")}log1p(t){Iy(t,"log1p");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t){const r=e[t];n[t]=Math.log1p(r)}return this.makeOutput(n,t.shape,"float32")}sqrt(t){Iy(t,"sqrt");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t){const r=e[t];n[t]=Math.sqrt(r)}return this.makeOutput(n,t.shape,"float32")}rsqrt(t){Iy(t,"rsqrt");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t){const r=e[t];n[t]=1/Math.sqrt(r)}return this.makeOutput(n,t.shape,"float32")}reciprocal(t){Iy(t,"reciprocal");const e=this.readSync(t.dataId),n=new Float32Array(e.length);for(let t=0;t<e.length;++t)n[t]=1/e[t];return this.makeOutput(n,t.shape,"float32")}linear(t){return t}relu(t){Iy(t,"relu");const e=xr(t.shape,t.dtype),n=this.readSync(e.dataId),r=this.readSync(t.dataId);for(let t=0;t<r.length;++t)n[t]=Math.max(0,r[t]);return e}relu6(t){Iy(t,"relu");const e=xr(t.shape,t.dtype),n=this.readSync(e.dataId),r=this.readSync(t.dataId);for(let t=0;t<r.length;++t)n[t]=Math.min(Math.max(0,r[t]),6);return e}prelu(t,e){return Iy([t,e],"prelu"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>t<0?e*t:t)}elu(t){Iy(t,"elu");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t){const r=n[t];e[t]=r>=0?r:Math.exp(r)-1}return this.makeOutput(e,t.shape,"float32")}eluDer(t,e){Iy([t,e],"eluDer");const n=new Float32Array(e.size),r=this.readSync(e.dataId),s=this.readSync(t.dataId);for(let t=0;t<r.length;++t){const e=r[t];n[t]=e>=1?s[t]:s[t]*(e+1)}return this.makeOutput(n,e.shape,"float32")}selu(t){Iy(t,"selu");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t){const r=n[t];e[t]=r>=0?1.0507009873554805*r:1.7580993408473768*(Math.exp(r)-1)}return this.makeOutput(e,t.shape,"float32")}clip(t,e,n){Iy(t,"clip");const r=new Float32Array(t.size),s=this.readSync(t.dataId);for(let t=0;t<s.length;++t){const a=s[t];r[t]=a>n?n:a<e?e:a}return this.makeOutput(r,t.shape,"float32")}abs(t){const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.abs(n[t]);return this.makeOutput(e,t.shape,"float32")}complexAbs(t){const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let r=0;r<t.size;++r){const t=n[2*r],s=n[2*r+1];e[r]=Math.hypot(t,s)}return this.makeOutput(e,t.shape,"float32")}int(t){Iy(t,"int");const e=new Int32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=n[t];return this.makeOutput(e,t.shape,"int32")}sigmoid(t){Iy(t,"sigmoid");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=1/(1+Math.exp(-n[t]));return this.makeOutput(e,t.shape,"float32")}softplus(t){Iy(t,"softplus");const e=Math.log(1.1920928955078125e-7)+2,n=new Float32Array(t.size),r=this.readSync(t.dataId);for(let t=0;t<r.length;++t){const s=r[t]>-e,a=r[t]<e,i=Math.exp(r[t]);let o;o=a?i:s?r[t]:Math.log(1+i),n[t]=o}return this.makeOutput(n,t.shape,"float32")}sin(t){Iy(t,"sin");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.sin(n[t]);return this.makeOutput(e,t.shape,"float32")}cos(t){Iy(t,"cos");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.cos(n[t]);return this.makeOutput(e,t.shape,"float32")}tan(t){Iy(t,"tan");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.tan(n[t]);return this.makeOutput(e,t.shape,"float32")}asin(t){Iy(t,"asin");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.asin(n[t]);return this.makeOutput(e,t.shape,"float32")}acos(t){Iy(t,"acos");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.acos(n[t]);return this.makeOutput(e,t.shape,"float32")}atan(t){Iy(t,"atan");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.atan(n[t]);return this.makeOutput(e,t.shape,"float32")}atan2(t,e){return Iy([t,e],"atan2"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>Math.atan2(t,e))}sinh(t){Iy(t,"sinh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.sinh(n[t]);return this.makeOutput(e,t.shape,"float32")}cosh(t){Iy(t,"cosh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.cosh(n[t]);return this.makeOutput(e,t.shape,"float32")}tanh(t){Iy(t,"tanh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=_(n[t]);return this.makeOutput(e,t.shape,"float32")}asinh(t){Iy(t,"asinh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.asinh(n[t]);return this.makeOutput(e,t.shape,"float32")}acosh(t){Iy(t,"acosh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.acosh(n[t]);return this.makeOutput(e,t.shape,"float32")}atanh(t){Iy(t,"atanh");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t)e[t]=Math.atanh(n[t]);return this.makeOutput(e,t.shape,"float32")}erf(t){Iy(t,"erf");const e=new Float32Array(t.size),n=this.readSync(t.dataId);for(let t=0;t<n.length;++t){const r=Math.sign(n[t]),s=Math.abs(n[t]),a=1/(1+.3275911*s);e[t]=r*(1-((((1.061405429*a-1.453152027)*a+1.421413741)*a-.284496736)*a+.254829592)*a*Math.exp(-s*s))}return this.makeOutput(e,t.shape,"float32")}step(t,e=0){Iy(t,"step");const n=new Float32Array(t.size),r=this.readSync(t.dataId);for(let t=0;t<r.length;++t){const s=r[t];isNaN(s)?n[t]=NaN:n[t]=s>0?1:e}return this.makeOutput(n,t.shape,"float32")}fusedConv2d({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){let i=this.conv2d(t,e,n);return r&&(i=this.add(i,r)),s&&(i=_y(this,i,s,a)),i}conv2d(t,e,n){Iy([t,e],"conv2d");const r=n.filterHeight,s=n.filterWidth,a=n.dilationHeight,i=n.dilationWidth,o=n.padInfo.left,u=n.padInfo.top,l="channelsLast"===n.dataFormat,c=Fi(n.outShape,t.dtype),h=t.strides[0],p=l?t.strides[1]:t.strides[2],d=l?t.strides[2]:1,f=l?1:t.strides[1],m=c.strides[0],g=l?c.strides[1]:c.strides[2],y=l?c.strides[2]:1,b=l?1:c.strides[1],x=this.readSync(t.dataId),w=this.readSync(e.dataId),v=c.values;for(let t=0;t<n.batchSize;++t){const l=t*h,c=t*m;for(let t=0;t<n.outHeight;++t){const h=c+t*g,m=t*n.strideHeight-u;for(let t=0;t<r;t++){const r=m+t*a;if(r<0||r>=n.inHeight)continue;const u=t*e.strides[0],c=l+r*p;for(let t=0;t<n.outWidth;++t){const r=h+t*y,a=t*n.strideWidth-o;for(let t=0;t<s;t++){const s=a+t*i;if(s<0||s>=n.inWidth)continue;const o=c+s*d;let l=u+t*e.strides[1];for(let t=0;t<n.inChannels;++t){const e=x[o+t*f];for(let t=0;t<n.outChannels;++t)v[r+t*b]+=e*w[l+t];l+=n.outChannels}}}}}}return c.toTensor()}conv3d(t,e,n){const r=n.filterDepth,s=n.filterHeight,a=n.filterWidth,i=n.dilationDepth,o=n.dilationHeight,u=n.dilationWidth,l=n.padInfo.front,c=n.padInfo.left,h=n.padInfo.top,p=Fi(n.outShape,t.dtype),d=this.readSync(t.dataId),f=this.readSync(e.dataId),m=p.values;for(let g=0;g<n.batchSize;++g){const y=g*t.strides[0],b=g*p.strides[0];for(let g=0;g<n.outDepth;++g){const x=b+g*p.strides[1],w=g*n.strideDepth-l;for(let l=0;l<r;l++){const r=w+l*i;if(r<0||r>=n.inDepth)continue;const g=l*e.strides[0],b=y+r*t.strides[1];for(let r=0;r<n.outHeight;++r){const i=x+r*p.strides[2],l=r*n.strideHeight-h;for(let r=0;r<s;r++){const s=l+r*o;if(s<0||s>=n.inHeight)continue;const h=g+r*e.strides[1],p=b+s*t.strides[2];for(let t=0;t<n.outWidth;++t){const r=i+t*n.outChannels,s=t*n.strideWidth-c;for(let t=0;t<a;t++){const a=s+t*u;if(a<0||a>=n.inWidth)continue;const i=h+t*e.strides[2],o=p+a*n.inChannels;let l=i;for(let t=0;t<n.inChannels;++t){const e=d[o+t];for(let t=0;t<n.outChannels;++t)m[r+t]+=e*f[l+t];l+=n.outChannels}}}}}}}}return p.toTensor()}conv2dDerInput(t,e,n){Iy([t,e],"conv2dDerInput");const r=Fi(n.inShape,"float32"),s=r.values,a=this.readSync(t.dataId),i=this.readSync(e.dataId),[o,u,l]=e.strides,{batchSize:c,filterHeight:h,filterWidth:p,inChannels:d,inHeight:f,inWidth:m,outChannels:g,outHeight:y,outWidth:b,strideHeight:x,strideWidth:w,dataFormat:v}=n,k=h-1-n.padInfo.top,N=p-1-n.padInfo.left,I="channelsLast"===v,S=r.strides[0],C=I?r.strides[1]:r.strides[2],A=I?r.strides[2]:1,E=I?1:r.strides[1],T=t.strides[0],R=I?t.strides[1]:t.strides[2],$=I?t.strides[2]:1,_=I?1:t.strides[1];for(let t=0;t<c;++t)for(let e=0;e<d;++e)for(let n=0;n<f;++n){const r=n-k,c=Math.max(0,Math.ceil(r/x)),d=Math.min(y,(h+r)/x);for(let f=0;f<m;++f){const m=f-N,y=Math.max(0,Math.ceil(m/w)),v=Math.min(b,(p+m)/w);let k=0;for(let n=c;n<d;++n){const s=n*x-r;for(let r=y;r<v;++r){const c=T*t+R*n+$*r,d=o*(h-1-s)+u*(p-1-(r*w-m))+l*e;for(let t=0;t<g;++t){k+=a[c+_*t]*i[d+t]}}}s[S*t+C*n+A*f+E*e]=k}}return r.toTensor()}conv3dDerInput(t,e,n){const r=Fi(n.inShape,"float32"),s=r.values,[a,i,o,u]=r.strides,l=this.readSync(t.dataId),[c,h,p,d]=t.strides,f=this.readSync(e.dataId),[m,g,y,b]=e.strides,{batchSize:x,filterDepth:w,filterHeight:v,filterWidth:k,inChannels:N,inDepth:I,inHeight:S,inWidth:C,outChannels:A,outDepth:E,outHeight:T,outWidth:R,strideDepth:$,strideHeight:_,strideWidth:D}=n,F=w-1-n.padInfo.front,O=v-1-n.padInfo.top,M=k-1-n.padInfo.left;for(let t=0;t<x;++t)for(let e=0;e<N;++e)for(let n=0;n<I;++n){const r=n-F,x=Math.max(0,Math.ceil(r/$)),N=Math.min(E,(w+r)/$);for(let I=0;I<S;++I){const S=I-O,E=Math.max(0,Math.ceil(S/_)),F=Math.min(T,(v+S)/_);for(let T=0;T<C;++T){const C=T-M,O=Math.max(0,Math.ceil(C/D)),L=Math.min(R,(k+C)/D);let z=0;for(let n=x;n<N;++n){const s=n*$-r;for(let r=E;r<F;++r){const a=r*_-S;for(let i=O;i<L;++i){const o=c*t+h*n+p*r+d*i,u=m*(w-1-s)+g*(v-1-a)+y*(k-1-(i*D-C))+b*e;for(let t=0;t<A;++t){z+=l[o+t]*f[u+t]}}}}s[a*t+i*n+o*I+u*T+e]=z}}}return r.toTensor()}conv2dDerFilter(t,e,n){Iy([t,e],"conv2dDerFilter");const r=n.strideHeight,s=n.strideWidth,a=n.filterHeight,i=n.filterWidth,o="channelsLast"===n.dataFormat,u=Fi(n.filterShape,"float32"),l=n.padInfo.left,c=n.padInfo.top,h=this.bufferSync(t),p=this.bufferSync(e);for(let t=0;t<a;++t){const e=Math.max(0,Math.ceil((c-t)/r)),a=Math.min(n.outHeight,(n.inHeight+c-t)/r);for(let d=0;d<i;++d){const i=Math.max(0,Math.ceil((l-d)/s)),f=Math.min(n.outWidth,(n.inWidth+l-d)/s);for(let m=0;m<n.inChannels;++m)for(let g=0;g<n.outChannels;++g){let y=0;for(let u=0;u<n.batchSize;++u)for(let n=e;n<a;++n){const e=t+n*r-c;for(let t=i;t<f;++t){const r=d+t*s-l;y+=o?h.get(u,e,r,m)*p.get(u,n,t,g):h.get(u,m,e,r)*p.get(u,g,n,t)}}u.set(y,t,d,m,g)}}}return u.toTensor()}conv3dDerFilter(t,e,n){const r=n.strideDepth,s=n.strideHeight,a=n.strideWidth,i=n.filterDepth,o=n.filterHeight,u=n.filterWidth,l=Fi(n.filterShape,"float32"),c=l.values,[h,p,d,f]=l.strides,m=this.readSync(e.dataId),[g,y,b,x]=e.strides,w=this.readSync(t.dataId),[v,k,N,I]=t.strides,S=n.padInfo.front,C=n.padInfo.left,A=n.padInfo.top;for(let t=0;t<i;++t){const e=Math.max(0,Math.ceil((S-t)/r)),i=Math.min(n.outDepth,(n.inDepth+S-t)/r),l=t*h;for(let h=0;h<o;++h){const o=Math.max(0,Math.ceil((A-h)/s)),E=Math.min(n.outHeight,(n.inHeight+A-h)/s),T=h*p+l;for(let l=0;l<u;++l){const u=Math.max(0,Math.ceil((C-l)/a)),p=Math.min(n.outWidth,(n.inWidth+C-l)/a),R=l*d+T;for(let d=0;d<n.inChannels;++d){const T=d*f+R;for(let f=0;f<n.outChannels;++f){let R=0;for(let c=0;c<n.batchSize;++c){const n=c*v,T=c*g;for(let c=e;c<i;++c){const e=(t+c*r-S)*k+n,i=c*y+T;for(let t=o;t<E;++t){const n=(h+t*s-A)*N+e,r=t*b+i;for(let t=u;t<p;++t){const e=t*x+r;R+=w[(l+t*a-C)*I+n+d]*m[e+f]}}}}c[T+f]=R}}}}}return l.toTensor()}fusedDepthwiseConv2D({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){let i=this.depthwiseConv2D(t,e,n);return r&&(i=this.add(i,r)),s&&(i=_y(this,i,s,a)),i}depthwiseConv2D(t,e,n){Iy([t,e],"depthwiseConv2D");const r=n.filterHeight,s=n.filterWidth,a=n.dilationHeight,i=n.dilationWidth,o=n.padInfo.left,u=n.padInfo.top,l=n.outChannels/n.inChannels,c=Fi(n.outShape,t.dtype),h=this.readSync(t.dataId),p=this.readSync(e.dataId),d=c.values;for(let f=0;f<n.batchSize;++f){const m=f*t.strides[0],g=f*c.strides[0];for(let f=0;f<n.outHeight;++f){const y=g+f*c.strides[1],b=f*n.strideHeight-o;for(let o=0;o<r;++o){const r=b+o*a;if(r<0||r>=n.inHeight)continue;const f=o*e.strides[0],g=m+r*t.strides[1];for(let t=0;t<n.outWidth;++t){const r=y+t*c.strides[2],a=t*n.strideWidth-u;for(let t=0;t<s;++t){const s=a+t*i;if(s<0||s>=n.inWidth)continue;const o=f+t*e.strides[1],u=g+s*n.inChannels;let c=r,m=o;for(let t=0;t<n.inChannels;++t){const e=h[u+t];for(let t=0;t<l;++t)d[c+t]+=e*p[m+t];c+=l,m+=l}}}}}}return c.toTensor()}depthwiseConv2DDerInput(t,e,n){Iy([t,e],"depthwiseConv2DDerInput");const r=Fi(n.inShape,"float32"),s=r.values,[a,i,o]=r.strides,u=this.readSync(t.dataId),[l,c,h]=t.strides,p=this.readSync(e.dataId),[d,f,m]=e.strides,{batchSize:g,filterHeight:y,filterWidth:b,inChannels:x,inHeight:w,inWidth:v,outChannels:k,outHeight:N,outWidth:I,strideHeight:S,strideWidth:C}=n,A=y-1-n.padInfo.top,E=b-1-n.padInfo.left,T=k/x;for(let t=0;t<g;++t)for(let e=0;e<x;++e)for(let n=0;n<w;++n){const r=n-A,g=Math.max(0,Math.ceil(r/S)),x=Math.min(N,(y+r)/S);for(let w=0;w<v;++w){const v=w-E,k=Math.max(0,Math.ceil(v/C)),N=Math.min(I,(b+v)/C);let A=0;for(let n=g;n<x;++n){const s=n*S-r;for(let r=k;r<N;++r){const a=l*t+c*n+h*r,i=d*(y-1-s)+f*(b-1-(r*C-v))+m*e;for(let t=0;t<T;++t){A+=u[a+(e*T+t)]*p[i+t]}}}s[a*t+i*n+o*w+e]=A}}return r.toTensor()}depthwiseConv2DDerFilter(t,e,n){Iy([t,e],"depthwiseConv2DDerFilter");const r=n.strideHeight,s=n.strideWidth,a=n.filterHeight,i=n.filterWidth,o=Fi(n.filterShape,"float32"),u=n.padInfo.left,l=n.padInfo.top,c=n.outChannels/n.inChannels,h=this.bufferSync(t),p=this.bufferSync(e);for(let t=0;t<a;++t){const e=Math.max(0,Math.ceil((l-t)/r)),a=Math.min(n.outHeight,(n.inHeight+l-t)/r);for(let d=0;d<i;++d){const i=Math.max(0,Math.ceil((u-d)/s)),f=Math.min(n.outWidth,(n.inWidth+u-d)/s);for(let m=0;m<n.outChannels;++m){const g=Math.trunc(m/c),y=m%c;let b=0;for(let o=0;o<n.batchSize;++o)for(let n=e;n<a;++n){const e=t+n*r-l;for(let t=i;t<f;++t){const r=d+t*s-u;b+=h.get(o,e,r,g)*p.get(o,n,t,m)}}o.set(b,t,d,g,y)}}}return o.toTensor()}tile(t,e){return Iy(t,"tile"),Ty(this.bufferSync(t),e)}pad(t,e,n){Iy(t,"pad");const r=e.map((e,n)=>e[0]+t.shape[n]+e[1]),s=e.map(t=>t[0]),a=this.bufferSync(t),i=Fi(r,t.dtype);0!==n&&i.values.fill(n);for(let e=0;e<t.size;e++){const t=a.indexToLoc(e),n=t.map((t,e)=>t+s[e]);i.set(a.get(...t),...n)}return i.toTensor()}gather(t,e,n){Iy([t,e],"gather");const r=t.shape.slice(),s=this.readSync(e.dataId);r[n]=s.length;const a=Fi(r,t.dtype),i=this.bufferSync(t);for(let t=0;t<a.size;++t){const e=a.indexToLoc(t),r=e.slice();r[n]=s[e[n]];const o=i.locToIndex(r);a.values[t]=i.values[o]}return a.toTensor()}batchToSpaceND(t,e,n){Iy([t],"batchToSpaceND");const r=e.reduce((t,e)=>t*e),s=Ic(t.shape,e,r),a=Sc(s.length,e.length),i=Cc(t.shape,e,r),o=Ac(n,e.length),u=Ec(i,n,e.length);return In(t.reshape(s),a).reshape(i).slice(o,u)}spaceToBatchND(t,e,n){Iy([t],"spaceToBatchND");const r=e.reduce((t,e)=>t*e),s=[[0,0]];s.push(...n);for(let n=1+e.length;n<t.shape.length;++n)s.push([0,0]);const a=t.pad(s),i=Ic(a.shape,e,r,!1),o=Sc(i.length,e.length,!1),u=Cc(a.shape,e,r,!1),l=In(a.reshape(i),o);return we(l,u)}maxPool(t,e){Iy(t,"maxPool");return Sy(this.readSync(t.dataId),t.shape,t.dtype,t.strides,e,"max").toTensor()}maxPoolBackprop(t,e,n,r){Iy([e,n],"maxPoolBackprop");const s=this.readSync(e.dataId),a=Fi(r.outShape,e.dtype,Cy(s,e.shape,e.dtype,r).values),i=r.strideHeight,o=r.strideWidth,u=r.dilationHeight,l=r.dilationWidth,c=r.effectiveFilterHeight,h=r.effectiveFilterWidth,p=h-1-r.padInfo.left,d=c-1-r.padInfo.top,f=Fi(e.shape,"float32"),m=this.bufferSync(t);for(let t=0;t<r.batchSize;++t)for(let e=0;e<r.inChannels;++e)for(let n=0;n<r.inHeight;++n)for(let s=0;s<r.inWidth;++s){const g=n-d,y=s-p;let b=0;for(let n=0;n<c;n+=u){const s=(g+n)/i;if(!(s<0||s>=r.outHeight||Math.floor(s)!==s))for(let i=0;i<h;i+=l){const u=(y+i)/o;if(u<0||u>=r.outWidth||Math.floor(u)!==u)continue;const l=c*h-1-a.get(t,s,u,e)===n*h+i?1:0;if(0===l)continue;b+=m.get(t,s,u,e)*l}}f.set(b,t,n,s,e)}return f.toTensor()}avgPoolBackprop(t,e,n){Iy([t,e],"avgPoolBackprop");const r=n.strideHeight,s=n.strideWidth,a=n.filterHeight,i=n.filterWidth,o=n.dilationHeight,u=n.dilationWidth,l=n.effectiveFilterHeight,c=n.effectiveFilterWidth,h=c-1-n.padInfo.left,p=l-1-n.padInfo.top,d=Fi(e.shape,"float32"),f=1/(a*i),m=this.bufferSync(t);for(let t=0;t<n.batchSize;++t)for(let e=0;e<n.inChannels;++e)for(let a=0;a<n.inHeight;++a)for(let i=0;i<n.inWidth;++i){const g=a-p,y=i-h;let b=0;for(let a=0;a<l;a+=o){const i=(g+a)/r;if(!(i<0||i>=n.outHeight||Math.floor(i)!==i))for(let r=0;r<c;r+=u){const a=(y+r)/s;if(a<0||a>=n.outWidth||Math.floor(a)!==a)continue;b+=m.get(t,i,a,e)}}d.set(b*f,t,a,i,e)}return d.toTensor()}pool3d(t,e,n){Iy(t,"pool3d");const r=e.strideDepth,s=e.strideHeight,a=e.strideWidth,i=e.dilationDepth,o=e.dilationHeight,u=e.dilationWidth,l=e.effectiveFilterDepth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,p=e.padInfo.front,d=e.padInfo.top,f=e.padInfo.left,m="max"===n?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,g=this.readSync(t.dataId),y=Fi(e.outShape,t.dtype),b=y.values,x=e.outShape[1]*e.outShape[2]*e.outShape[3]*e.outShape[4],w=e.outShape[2]*e.outShape[3]*e.outShape[4],v=e.outShape[3]*e.outShape[4],k=e.outShape[4];for(let y=0;y<e.batchSize;++y){const N=y*x,I=y*t.strides[0];for(let y=0;y<e.inChannels;++y)for(let x=0;x<e.outDepth;++x){const S=x*r-p;let C=S;for(;C<0;)C+=i;const A=Math.min(e.inDepth,l+S),E=N+x*w;for(let r=0;r<e.outHeight;++r){const l=r*s-d;let p=l;for(;p<0;)p+=o;const x=Math.min(e.inHeight,c+l),w=E+r*v;for(let r=0;r<e.outWidth;++r){const s=r*a-f;let l=s;for(;l<0;)l+=u;const c=Math.min(e.inWidth,h+s),d=w+r*k;let v=m,N=0,S=0;for(let e=C;e<A;e+=i){const r=I+e*t.strides[1];for(let e=p;e<x;e+=o){const s=r+e*t.strides[2];for(let e=l;e<c;e+=u){const r=g[s+e*t.strides[3]+y];if("max"===n&&r>v?v=r:"avg"===n&&(N+=r,S++),isNaN(v))break}if(isNaN(v))break}if(isNaN(v))break}b[d+y]="avg"===n?N/S:v}}}}return y.toTensor()}avgPool3d(t,e){return Iy(t,"avgPool3d"),this.pool3d(t,e,"avg").toFloat()}avgPool3dBackprop(t,e,n){Iy([t,e],"avgPool3dBackprop");const r=n.strideDepth,s=n.strideHeight,a=n.strideWidth,i=n.filterDepth,o=n.filterHeight,u=n.filterWidth,l=n.dilationDepth,c=n.dilationHeight,h=n.dilationWidth,p=n.effectiveFilterDepth,d=n.effectiveFilterHeight,f=n.effectiveFilterWidth,m=p-1-n.padInfo.front,g=f-1-n.padInfo.left,y=d-1-n.padInfo.top,b=Fi(e.shape,"float32"),x=1/(i*o*u),w=this.bufferSync(t);for(let t=0;t<n.batchSize;++t)for(let e=0;e<n.inChannels;++e)for(let i=0;i<n.inDepth;++i)for(let o=0;o<n.inHeight;++o)for(let u=0;u<n.inWidth;++u){const v=i-m,k=o-y,N=u-g;let I=0;for(let i=0;i<p;i+=l){const o=(v+i)/r;if(!(o<0||o>=n.outDepth||Math.floor(o)!==o))for(let r=0;r<d;r+=c){const i=(k+r)/s;if(!(i<0||i>=n.outHeight||Math.floor(i)!==i))for(let r=0;r<f;r+=h){const s=(N+r)/a;if(s<0||s>=n.outWidth||Math.floor(s)!==s)continue;I+=w.get(t,o,i,s,e)}}}b.set(I*x,t,i,o,u,e)}return b.toTensor()}maxPool3d(t,e){return Iy(t,"maxPool3d"),this.pool3d(t,e,"max").toFloat()}maxPool3dPositions(t,e){const n=Fi(e.outShape,"int32"),r=e.strideDepth,s=e.strideHeight,a=e.strideWidth,i=e.dilationDepth,o=e.dilationHeight,u=e.dilationWidth,l=e.effectiveFilterDepth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,p=e.padInfo.front,d=e.padInfo.top,f=e.padInfo.left,m=this.bufferSync(t);for(let t=0;t<e.batchSize;++t)for(let g=0;g<e.inChannels;++g)for(let y=0;y<e.outDepth;++y){const b=y*r-p;let x=b;for(;x<0;)x+=i;const w=Math.min(e.inDepth,l+b);for(let r=0;r<e.outHeight;++r){const l=r*s-d;let p=l;for(;p<0;)p+=o;const v=Math.min(e.inHeight,c+l);for(let s=0;s<e.outWidth;++s){const d=s*a-f;let k=d;for(;k<0;)k+=u;const N=Math.min(e.inWidth,h+d);let I=Number.NEGATIVE_INFINITY,S=-1;for(let e=x;e<w;e+=i){const n=e-b;for(let r=p;r<v;r+=o){const s=r-l;for(let a=k;a<N;a+=u){const i=a-d,o=m.get(t,e,r,a,g);o>=I&&(I=o,S=n*c*h+s*c+i)}}}n.set(S,t,y,r,s,g)}}}return n.toTensor()}maxPool3dBackprop(t,e,n,r){Iy([e,n],"maxPool3dBackprop");const s=this.maxPool3dPositions(e,r),a=r.strideDepth,i=r.strideHeight,o=r.strideWidth,u=r.dilationDepth,l=r.dilationHeight,c=r.dilationWidth,h=r.effectiveFilterDepth,p=r.effectiveFilterHeight,d=r.effectiveFilterWidth,f=h-1-r.padInfo.front,m=d-1-r.padInfo.left,g=p-1-r.padInfo.top,y=Fi(e.shape,"float32"),b=this.bufferSync(s),x=this.bufferSync(t);for(let t=0;t<r.batchSize;++t)for(let e=0;e<r.inChannels;++e)for(let n=0;n<r.inDepth;++n)for(let s=0;s<r.inHeight;++s)for(let w=0;w<r.inWidth;++w){const v=n-f,k=s-g,N=w-m;let I=0;for(let n=0;n<h;n+=u){const s=(v+n)/a;if(!(s<0||s>=r.outDepth||Math.floor(s)!==s))for(let a=0;a<p;a+=l){const u=(k+a)/i;if(!(u<0||u>=r.outHeight||Math.floor(u)!==u))for(let i=0;i<d;i+=c){const l=(N+i)/o;if(l<0||l>=r.outWidth||Math.floor(l)!==l)continue;const c=h*p*d-1-b.get(t,s,u,l,e)===n*p*d+a*d+i?1:0;if(0===c)continue;I+=x.get(t,s,u,l,e)*c}}}y.set(I,t,n,s,w,e)}return y.toTensor()}cast(t,e){return zc(t,e,this)}reshape(t,e){return Bc(t,e)}avgPool(t,e){Iy(t,"avgPool"),Iy(t,"maxPool");return Sy(this.readSync(t.dataId),t.shape,t.dtype,t.strides,e,"avg").toTensor().toFloat()}resizeBilinear(t,e,n,r){Iy(t,"resizeBilinear");const[s,a,i,o]=t.shape,u=this.readSync(t.dataId),l=new Float32Array(T([s,e,n,o])),c=[r&&e>1?a-1:a,r&&n>1?i-1:i],h=[r&&e>1?e-1:e,r&&n>1?n-1:n];let p=0;const d=c[0]/h[0],f=c[1]/h[1];for(let r=0;r<s;r++)for(let s=0;s<e;s++){const e=d*s,c=Math.floor(e),h=e-c,m=Math.min(a-1,Math.ceil(e)),g=r*t.strides[0]+c*t.strides[1],y=r*t.strides[0]+m*t.strides[1];for(let e=0;e<n;e++){const n=f*e,r=Math.floor(n),s=n-r,a=Math.min(i-1,Math.ceil(n)),c=g+r*t.strides[2],d=y+r*t.strides[2],m=g+a*t.strides[2],b=y+a*t.strides[2];for(let t=0;t<o;t++){const e=u[c+t],n=u[d+t],r=e+(u[m+t]-e)*s,a=r+(n+(u[b+t]-n)*s-r)*h;l[p++]=a}}}return bs(l,[s,e,n,o])}resizeBilinearBackprop(t,e,n){Iy([t,e],"resizeBilinearBackprop");const[r,s,a,i]=e.shape,[,o,u]=t.shape,l=new Float32Array(r*s*a*i),c=[n&&o>1?s-1:s,n&&u>1?a-1:a],h=[n&&o>1?o-1:o,n&&u>1?u-1:u],p=c[0]/h[0],d=c[1]/h[1],f=this.readSync(t.dataId);let m=0;for(let t=0;t<r;t++){const n=t*e.strides[0];for(let t=0;t<o;t++){const r=t*p,o=Math.floor(r),c=Math.min(Math.ceil(r),s-1),h=n+o*e.strides[1],g=n+c*e.strides[1],y=r-o,b=1-y;for(let t=0;t<u;t++){const n=t*d,r=Math.floor(n),s=Math.min(Math.ceil(n),a-1),o=n-r,u=1-o,c=h+r*e.strides[2],p=h+s*e.strides[2],x=g+r*e.strides[2],w=g+s*e.strides[2],v=b*u,k=b*o,N=y*u,I=y*o;for(let t=0;t<i;t++){const e=f[m++];l[c+t]+=e*v,l[p+t]+=e*k,l[x+t]+=e*N,l[w+t]+=e*I}}}}return Du(l,[r,a,s,i],e.dtype)}resizeNearestNeighbor(t,e,n,r){Iy(t,"resizeNearestNeighbor");const[s,a,i,o]=t.shape,u=this.readSync(t.dataId),l=new Float32Array(s*e*n*o),c=[r&&e>1?a-1:a,r&&n>1?i-1:i],h=[r&&e>1?e-1:e,r&&n>1?n-1:n],p=c[0]/h[0],d=c[1]/h[1];let f=0;for(let c=0;c<s;c++){const s=c*t.strides[0];for(let c=0;c<e;c++){const e=p*c,h=s+Math.min(a-1,r?Math.round(e):Math.floor(e))*t.strides[1];for(let e=0;e<n;e++){const n=d*e,s=h+Math.min(i-1,r?Math.round(n):Math.floor(n))*t.strides[2];for(let t=0;t<o;t++){const e=u[s+t];l[f++]=e}}}}return bs(l,[s,e,n,o],t.dtype)}resizeNearestNeighborBackprop(t,e,n){Iy([t,e],"resizeNearestNeighborBackprop");const[r,s,a,i]=e.shape,[,o,u]=t.shape,l=new Float32Array(r*s*a*i),c=this.readSync(t.dataId),h=[n&&o>1?s-1:s,n&&u>1?a-1:a],p=[n&&o>1?o-1:o,n&&u>1?u-1:u],d=h[0]/p[0],f=h[1]/p[1],m=1/d,g=1/f,y=2*Math.ceil(m)+2,b=2*Math.ceil(g)+2;for(let h=0;h<r;h++){const r=h*e.strides[0];for(let h=0;h<s;h++){const p=r+h*e.strides[1],x=Math.floor(h*m),w=Math.floor(x-y/2);for(let m=0;m<a;m++){const x=p+m*e.strides[2],v=Math.floor(m*g),k=Math.floor(v-b/2);for(let e=0;e<i;e++){let i=0;for(let l=0;l<y;l++){const p=l+w;if(p<0||p>=o)continue;const g=r+p*t.strides[1],y=p*d;if(h===Math.min(s-1,n?Math.round(y):Math.floor(y)))for(let r=0;r<b;r++){const s=r+k;if(s<0||s>=u)continue;const o=g+s*t.strides[2],l=s*f;m===Math.min(a-1,n?Math.round(l):Math.floor(l))&&(i+=c[o+e])}}l[x+e]=i}}}}return Du(l,e.shape,e.dtype)}batchNorm(t,e,n,r,s,a){Iy([t,e,n,s,r],"batchNorm");const i=this.readSync(t.dataId),o=this.readSync(e.dataId),u=this.readSync(n.dataId),l=s?this.readSync(s.dataId):new Float32Array([1]),c=r?this.readSync(r.dataId):new Float32Array([0]),h=new Float32Array(i.length),p=c.length,d=l.length,f=u.length,m=o.length;let g=0,y=0,b=0,x=0;for(let t=0;t<i.length;++t)h[t]=c[g++]+(i[t]-o[y++])*l[b++]/Math.sqrt(u[x++]+a),g>=p&&(g=0),y>=m&&(y=0),b>=d&&(b=0),x>=f&&(x=0);return Du(h,t.shape)}localResponseNormalization4D(t,e,n,r,s){Iy(t,"localResponseNormalization4D");const a=t.shape[3],i=a-1,o=this.readSync(t.dataId),u=t.size,l=new Float32Array(u);function c(t){const n=t%a;let r=t-n+Math.max(0,n-e);const s=t-n+Math.min(n+e,i);let u=0;for(;r<=s;r++){const t=o[r];u+=t*t}return u}for(let t=0;t<u;t++){const e=c(t),a=o[t]*Math.pow(n+r*e,-s);l[t]=a}return Du(l,t.shape)}LRNGrad(t,e,n,r,s,a,i){Iy(t,"LRNGrad");const o=t.shape[3],u=this.readSync(t.dataId),l=this.readSync(e.dataId),c=this.readSync(n.dataId),h=new Float32Array(t.size),p=t.size;for(let t=0;t<p;t++){const e=t%o,n=t-e+Math.max(0,e-r),p=t-e+Math.min(o,e+r+1);let d=0;for(let t=n;t<p;t++)d+=Math.pow(l[t],2);d=a*d+s;for(let e=n;e<p;e++){let n=-2*a*i*l[e]*c[t]/d;t===e&&(n+=Math.pow(d,-i)),n*=u[t],h[e]+=n}}return Du(h,t.shape)}multinomial(t,e,n,r){Iy(t,"multinomial");const s=e?t:Cu(t),a=s.shape[0],i=s.shape[1],o=xr([a,n],"int32"),u=this.readSync(o.dataId),l=this.readSync(s.dataId);for(let t=0;t<a;++t){const e=t*i,s=new Float32Array(i-1);s[0]=l[e];for(let t=1;t<s.length;++t)s[t]=s[t-1]+l[e+t];const a=tu.alea(r.toString()),o=t*n;for(let t=0;t<n;++t){const e=a();u[o+t]=s.length;for(let n=0;n<s.length;n++)if(e<s[n]){u[o+t]=n;break}}}return o}oneHot(t,e,n,r){Iy(t,"oneHot");const s=new Float32Array(t.size*e);s.fill(r);const a=this.readSync(t.dataId);for(let r=0;r<t.size;++r)a[r]>=0&&a[r]<e&&(s[r*e+a[r]]=n);return _u(s,[t.size,e],"int32")}nonMaxSuppression(t,e,n,r,s){Iy(t,"nonMaxSuppression");const a=this.readSync(t.dataId),i=this.readSync(e.dataId);return Ay(a,i,n,r,s)}fft(t){return this.fftBatch(t,!1)}ifft(t){return this.fftBatch(t,!0)}fftBatch(t,e){const n=t.shape[0],r=t.shape[1],s=Fi(t.shape,"float32"),a=Fi(t.shape,"float32"),i=ao(t).as2D(n,r),o=so(t).as2D(n,r);for(let t=0;t<n;t++){const n=i.slice([t,0],[1,r]),u=o.slice([t,0],[1,r]),l=br(n,u),c=this.readSync(this.fftImpl(l,e).dataId);for(let e=0;e<r;e++){const n=Fc(c,e);s.values[t*r+e]=n.real,a.values[t*r+e]=n.imag}}return br(s.toTensor(),a.toTensor()).as2D(n,r)}fftImpl(t,e){const n=t.as1D(),r=n.size;if(this.isExponentOf2(r)){let s=this.fftRadix2(n,r,e).as2D(t.shape[0],t.shape[1]);return e&&(s=br(ao(s).div(re(r)),so(s).div(re(r)))),s}{const n=this.readSync(t.dataId),s=$c(this.fourierTransformByMatmul(n,r,e));return br(s.real,s.imag).as2D(t.shape[0],t.shape[1])}}isExponentOf2(t){return 0==(t&t-1)}fftRadix2(t,e,n){if(1===e)return t;const r=this.readSync(t.dataId),s=e/2,a=_c(r);let i=br(a.real,a.imag).as1D();const o=Dc(r);let u=br(o.real,o.imag).as1D();i=this.fftRadix2(i,s,n),u=this.fftRadix2(u,s,n);const l=Mc(e,n),c=br(l.real,l.imag).mul(u),h=i.add(c),p=i.sub(c),d=ao(h).concat(ao(p)),f=so(h).concat(so(p));return br(d,f).as1D()}fourierTransformByMatmul(t,e,n){const r=new Float32Array(2*e);for(let s=0;s<e;s++){let a=0,i=0;for(let r=0;r<e;r++){const o=Lc(s*r,e,n),u=Fc(t,r);a+=u.real*o.real-u.imag*o.imag,i+=u.real*o.imag+u.imag*o.real}n&&(a/=e,i/=e),Oc(r,a,i,s)}return r}depthToSpace(t,e,n){S("NHWC"===n,()=>"Only NHWC dataFormat supported on CPU for depthToSpace. Got "+n),S(e>1,()=>"blockSize should be > 1 for depthToSpace, but was: "+e);const r=t.shape[0],s=t.shape[1],a=t.shape[2],i=t.shape[3],o=s*e,u=a*e,l=i/(e*e),c=this.readSync(t.dataId),h=new Float32Array(r*o*u*l);let p=0;for(let t=0;t<r;++t)for(let n=0;n<o;++n){const r=Math.floor(n/e),o=n%e;for(let n=0;n<u;++n){const u=Math.floor(n/e),d=(o*e+n%e)*l;for(let e=0;e<l;++e){const n=e+d+i*(u+a*(r+s*t));h[p++]=c[n]}}}return Du(h,[r,o,u,l])}broadcastedBinaryOp(t,e,n,r){const s=he(t.shape,e.shape),a=Fi(s,n),i=this.readSync(t.dataId),o=this.readSync(e.dataId),u=le(t.shape,s),l=le(e.shape,s),c=a.values;if(u.length+l.length===0)for(let t=0;t<c.length;++t)c[t]=r(i[t%i.length],o[t%o.length]);else{const n=this.bufferSync(t),s=this.bufferSync(e);for(let h=0;h<c.length;++h){const p=a.indexToLoc(h),d=p.slice(-t.rank);u.forEach(t=>d[t]=0);const f=n.locToIndex(d),m=p.slice(-e.rank);l.forEach(t=>m[t]=0);const g=s.locToIndex(m);c[h]=r(i[f],o[g])}}return a.toTensor()}broadcastedBinaryComplexOp(t,e,n){const r=he(t.shape,e.shape),s=Fi(r,"float32"),a=Fi(r,"float32"),i=this.readSync(t.dataId),o=this.readSync(e.dataId),u=le(t.shape,r),l=le(e.shape,r),c=s.values,h=a.values;if(u.length+l.length===0)for(let t=0;t<c.length;t++){const e=t%i.length,r=t%o.length,s=n(i[2*e],i[2*e+1],o[2*r],o[2*r+1]);c[t]=s.real,h[t]=s.imag}else{const r=this.bufferSync(this.data.get(t.dataId).complexTensors.real),a=this.bufferSync(this.data.get(e.dataId).complexTensors.real);for(let p=0;p<c.length;p++){const d=s.indexToLoc(p),f=d.slice(-t.rank);u.forEach(t=>f[t]=0);const m=r.locToIndex(f),g=d.slice(-e.rank);l.forEach(t=>g[t]=0);const y=a.locToIndex(g),b=n(i[2*m],i[2*m+1],o[2*y],o[2*y+1]);c[p]=b.real,h[p]=b.imag}}return this.complex(s.toTensor(),a.toTensor())}split(t,e,n){return Ey(t,e,n)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}cropAndResize(t,e,n,r,s,a){const[i,o,u,l]=t.shape,c=e.shape[0],[h,p]=r,d=Fi([c,h,p,l],"float32"),f=this.readSync(e.dataId),m=this.readSync(n.dataId),g=this.readSync(t.dataId),y=t.strides,b=d.strides;for(let t=0;t<c;t++){const e=4*t,n=f[e],r=f[e+1],c=f[e+2],x=f[e+3],w=m[t];if(w>=i)continue;const v=h>1?(c-n)*(o-1)/(h-1):0,k=p>1?(x-r)*(u-1)/(p-1):0;for(let e=0;e<h;e++){const i=h>1?n*(o-1)+e*v:.5*(n+c)*(o-1);if(i<0||i>o-1)for(let n=0;n<p;n++)for(let r=0;r<l;r++){const s=r+n*b[2]+e*b[1]+t*b[0];d.values[s]=a}else if("bilinear"===s){const n=Math.floor(i),s=Math.ceil(i),o=i-n;for(let i=0;i<p;i++){const c=p>1?r*(u-1)+i*k:.5*(r+x)*(u-1);if(c<0||c>u-1){for(let n=0;n<l;n++){const r=n+i*b[2]+e*b[1]+t*b[0];d.values[r]=a}continue}const h=Math.floor(c),f=Math.ceil(c),m=c-h;for(let r=0;r<l;r++){let a=r+h*y[2]+n*y[1]+w*y[0];const u=g[a];a=r+f*y[2]+n*y[1]+w*y[0];const l=g[a];a=r+h*y[2]+s*y[1]+w*y[0];const c=g[a];a=r+f*y[2]+s*y[1]+w*y[0];const p=u+(l-u)*m,x=c+(g[a]-c)*m;a=r+i*b[2]+e*b[1]+t*b[0],d.values[a]=p+(x-p)*o}}}else for(let n=0;n<p;++n){const s=p>1?r*(u-1)+n*k:.5*(r+x)*(u-1);if(s<0||s>u-1){for(let r=0;r<l;r++){const s=r+n*b[2]+e*b[1]+t*b[0];d.values[s]=a}continue}const o=Math.round(s),c=Math.round(i);for(let r=0;r<l;r++){const s=r+o*y[2]+c*y[1]+w*y[0],a=r+n*b[2]+e*b[1]+t*b[0];d.values[a]=g[s]}}}}return d.toTensor()}sparseToDense(t,e,n,r){const{sliceRank:s,numUpdates:a,sliceSize:i,strides:o,outputSize:u}=ja(0,t,n);return this.scatter(t,e,n,u,i,a,s,o,r,!1)}gatherND(t,e){const n=e.shape,r=n[n.length-1],[s,a,i,o]=Ua(t,e);if(0===a)return bs([],s,t.dtype);const u=new bt([a,i],t.dtype),l=this.readSync(e.dataId),c=this.readSync(t.dataId);for(let e=0;e<a;e++){const n=[];let s=0;for(let t=0;t<r;t++){const a=l[e*r+t];s+=a*o[t],n.push(a)}if(s<0||s>=t.size/i)throw new Error(`Invalid indices: ${n} does not index into ${t.shape}`);for(let t=0;t<i;t++)u.values[e*i+t]=c[s*i+t]}return u.toTensor().reshape(s)}scatterND(t,e,n){const{sliceRank:r,numUpdates:s,sliceSize:a,strides:i,outputSize:o}=ja(0,t,n),u=re(0);return this.scatter(t,e,n,o,a,s,r,i,u,!0)}fill(t,e,n){const r=P(n=n||Y(e),T(t));return r.fill(e),si().makeTensor(r,t,n,this)}onesLike(t){if("string"===t.dtype)throw new Error("onesLike is not supported for string tensors");return this.fill(t.shape,1,t.dtype)}zerosLike(t){const e=P(t.dtype,T(t.shape));return this.makeOutput(e,t.shape,t.dtype)}linspace(t,e,n){return Pc(t,e,n)}scatter(t,e,n,r,s,a,i,o,u,l){const c=[r/s,s],h=this.readSync(t.dataId),p=this.readSync(e.dataId);if(0===r)return bs([],n,e.dtype);const d=new bt(c,e.dtype);d.values.fill(this.readSync(u.dataId)[0]);for(let t=0;t<a;t++){const a=[];let u=0;for(let e=0;e<i;e++){const n=h[t*i+e];a.push(n),u+=n*o[e]}if(u<0||u>=r/s)throw new Error(`Invalid indices: ${a} does not index into ${n}`);for(let n=0;n<s;n++)l?d.values[u*s+n]+=p[t*s+n]:d.values[u*s+n]=0===e.rank?p[0]:p[t*s+n]}return d.toTensor().reshape(n)}}const Fy={kernelName:"Dilation2D",backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:r,filter:s}=t,{strides:a,pad:i,dilations:o}=n,u=e,l=et(r.shape,u.data.get(r.dataId).values),c=et(s.shape,u.data.get(s.dataId).values),{batchSize:h,inHeight:p,inWidth:d,inChannels:f,outHeight:m,outWidth:g,padInfo:y,strideHeight:b,strideWidth:x,filterHeight:w,filterWidth:v,dilationHeight:k,dilationWidth:N,outShape:I}=De(r.shape,s.shape,a,i,"NHWC",o),S=st(I,r.dtype);for(let t=0;t<h;++t)for(let e=0;e<m;++e){const n=e*b-y.top;for(let r=0;r<g;++r){const s=r*x-y.left;for(let a=0;a<f;++a){let i=Number.MIN_SAFE_INTEGER;for(let e=0;e<w;++e){const r=n+e*k;if(r>=0&&r<p)for(let n=0;n<v;++n){const o=s+n*N;if(o>=0&&o<d){const s=l[t][r][o][a]+c[e][n][a];s>i&&(i=s)}}}S[t][e][r][a]=i}}}return{dataId:u.write(tt(S,r.dtype),I,r.dtype),shape:I,dtype:r.dtype}}},Oy={kernelName:"Dilation2DBackpropFilter",backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:r,filter:s,dy:a}=t,{strides:i,pad:o,dilations:u}=n,l=e,c=et(r.shape,l.data.get(r.dataId).values),h=et(s.shape,l.data.get(s.dataId).values),{batchSize:p,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:v,filterWidth:k,dilationHeight:N,dilationWidth:I,outShape:C}=De(r.shape,s.shape,i,o,"NHWC",u);S(a.rank===C.length,()=>`Error in Dilation2DBackpropFilter, dy must have the same rank as output ${C.length}, but got `+a.rank);const A=et(C,l.data.get(a.dataId).values),E=st(s.shape,s.dtype);for(let t=0;t<p;++t)for(let e=0;e<g;++e){const n=e*x-b.top;for(let r=0;r<y;++r){const s=r*w-b.left;for(let a=0;a<m;++a){let i=Number.MIN_SAFE_INTEGER,o=0,u=0;for(let e=0;e<v;++e){const r=n+e*N;if(r>=0&&r<d)for(let n=0;n<k;++n){const l=s+n*I;if(l>=0&&l<f){const s=c[t][r][l][a]+h[e][n][a];s>i&&(i=s,o=e,u=n)}}}E[o][u][a]+=A[t][e][r][a]}}}return{dataId:l.write(tt(E,r.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},My={kernelName:"Dilation2DBackpropInput",backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:r,filter:s,dy:a}=t,{strides:i,pad:o,dilations:u}=n,l=e,c=et(r.shape,l.data.get(r.dataId).values),h=et(s.shape,l.data.get(s.dataId).values),{batchSize:p,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:v,filterWidth:k,dilationHeight:N,dilationWidth:I,outShape:C}=De(r.shape,s.shape,i,o,"NHWC",u);S(a.rank===C.length,()=>`Error in Dilation2DBackpropInput, dy must have the same rank as output ${C.length}, but got `+a.rank);const A=et(C,l.data.get(a.dataId).values),E=st(r.shape,r.dtype);for(let t=0;t<p;++t)for(let e=0;e<g;++e){const n=e*x-b.top;for(let r=0;r<y;++r){const s=r*w-b.left;for(let a=0;a<m;++a){let i=Number.MIN_SAFE_INTEGER,o=n<0?0:n,u=s<0?0:s;for(let e=0;e<v;++e){const r=n+e*N;if(r>=0&&r<d)for(let n=0;n<k;++n){const l=s+n*I;if(l>=0&&l<f){const s=c[t][r][l][a]+h[e][n][a];s>i&&(i=s,o=r,u=l)}}}E[t][o][u][a]+=A[t][e][r][a]}}}return{dataId:l.write(tt(E,r.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}};function Ly(t,e){return{kernelName:t,backendName:"cpu",kernelFunc:({inputs:n,backend:r})=>{const{a:s,b:a}=n,i=r;Iy([s,a],t);const o=i.data.get(s.dataId).values,u=i.data.get(a.dataId).values,[l,c]=e(s.shape,a.shape,o,u,s.dtype);return{dataId:i.write(l,c,s.dtype),shape:c,dtype:s.dtype}}}}function zy(t){return(e,n,r,s,a)=>{const i=he(e,n),o=i.length,u=Q(i),l=B(a,T(i)),c=e.length,h=n.length,p=Q(e),d=Q(n),f=le(e,i),m=le(n,i);if(f.length+m.length===0)for(let e=0;e<l.length;++e)l[e]=t(r[e%r.length],s[e%s.length]);else for(let e=0;e<l.length;++e){const n=ct(e,o,u),a=n.slice(-c);f.forEach(t=>a[t]=0);const i=lt(a,c,p),g=n.slice(-h);m.forEach(t=>g[t]=0);const y=lt(g,h,d);l[e]=t(r[i],s[y])}return[l,i]}}const By=zy((t,e)=>t/e),Py=Ly(Vt,By);const Wy=_l,Vy=Dl,Uy=[Fy,My,Oy,Py,{kernelName:"MaxPoolWithArgmax",backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{filterSize:s,strides:a,pad:i,includeBatchInIndex:o}=e,u=n;Iy(r,"MaxPoolWithArgmax");const l=u.data.get(r.dataId).values,c=Fe(r.shape,s,a,[1,1],i),[h,p]=function(t,e,n,r,s){const a=Sy(t,0,n,Q(e),s,"max"),i=Cy(t,e,n,s,!0,r);return[a.values,i.values]}(l,r.shape,r.dtype,o,c),d=u.write(h,c.outShape,r.dtype),f=u.write(p,c.outShape,r.dtype);return[{dataId:d,shape:c.outShape,dtype:r.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}},{kernelName:Ut,backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{reductionIndices:s,keepDims:a}=e,i=n;let o=r.shape;const u=o.length,l=L(s,o);let c=l;const h=Ce(c,u);let p=i.data.get(r.dataId).values;if(null!=h){const t=new Array(u);for(let e=0;e<t.length;e++)t[e]=o[h[e]];p=ky(p,o,r.dtype,h,t),c=Ee(c.length,u),o=t}Iy(r,"max"),Se("max",c,u);const[d,f]=Ne(o,c),m=vy(p,T(f),d,r.dtype),g=i.write(m,d,r.dtype);let y=d;if(a){y=Ie(d,l)}return{dataId:g,shape:y,dtype:r.dtype}}},{kernelName:"NonMaxSuppressionV4",backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{boxes:r,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o,padToMaxOutputSize:u}=n,l=e;Iy(r,"NonMaxSuppressionPadded");const c=l.data.get(r.dataId).values,h=l.data.get(s.dataId).values,{selectedIndices:p,validOutputs:d}=Wy(c,h,a,i,o,u);return[p,d]}},{kernelName:"NonMaxSuppressionV5",backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{boxes:r,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o,softNmsSigma:u}=n,l=e;Iy(r,"NonMaxSuppressionWithScore");const c=l.data.get(r.dataId).values,h=l.data.get(s.dataId).values,p=a,d=i,f=o,m=u,{selectedIndices:g,selectedScores:y}=Vy(c,h,p,d,f,m);return[g,y]}},{kernelName:"RotateWithOffset",backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{image:r}=t,{radians:s,fillValue:a,center:i}=e,o=n,u=B(r.dtype,T(r.shape)),[l,c,h,p]=r.shape,[d,f]=Nc(i,c,h),m=Math.sin(s),g=Math.cos(s),y=o.data.get(r.dataId).values;for(let t=0;t<l;t++){const e=t*h*c*p;for(let t=0;t<c;t++){const n=t*(h*p);for(let r=0;r<h;r++){const s=r*p;for(let i=0;i<p;i++){const o=[l,t,r,i],b=o[2],x=o[1];let w=(b-d)*g-(x-f)*m,v=(b-d)*m+(x-f)*g;w=Math.round(w+d),v=Math.round(v+f);let k=a;if("number"!=typeof a&&(k=3===i?255:a[i]),w>=0&&w<h&&v>=0&&v<c){k=y[e+v*(h*p)+w*p+i]}u[e+n+s+i]=k}}}}return{dataId:o.write(u,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},{kernelName:"Square",backendName:"cpu",kernelFunc:({inputs:t,backend:e})=>{const{x:n}=t,r=e;Iy(n,"square");const s=r.data.get(n.dataId).values,a=new Float32Array(s.length);for(let t=0;t<s.length;++t){const e=s[t];a[t]=e*e}return{dataId:r.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},Ly("SquaredDifference",zy((t,e)=>{const n=t-e;return n*n})),{kernelName:"Transpose",backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{perm:s}=e,a=n;Iy(r,"transpose");const i=r.shape.length,o=new Array(i);for(let t=0;t<o.length;t++)o[t]=r.shape[s[t]];const u=ky(a.data.get(r.dataId).values,r.shape,r.dtype,s,o);return{dataId:a.write(u,o,r.dtype),shape:o,dtype:r.dtype}}}];for(const t of Uy)b(t);li("cpu",()=>new Dy,1);const Gy={},Hy={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function qy(t){t in Gy||(Gy[t]=function(t){if(1!==t&&2!==t)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const e=function(t){if("undefined"!=typeof OffscreenCanvas&&2===t)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(t);if(e.addEventListener("webglcontextlost",e=>{e.preventDefault(),delete Gy[t]},!1),1===t)return e.getContext("webgl",Hy)||e.getContext("experimental-webgl",Hy);return e.getContext("webgl2",Hy)}(t));const e=Gy[t];return e.isContextLost()?(delete Gy[t],qy(t)):(e.disable(e.DEPTH_TEST),e.disable(e.STENCIL_TEST),e.disable(e.BLEND),e.disable(e.DITHER),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SAMPLE_COVERAGE),e.enable(e.SCISSOR_TEST),e.enable(e.CULL_FACE),e.cullFace(e.BACK),Gy[t])}var jy,Ky,Xy;function Yy(t,e){return[e,t]}function Jy(t){const e=T(t);return D(Math.ceil(e/4))}function Zy(t,e){return[Math.max(1,Math.ceil(e/2)),Math.max(1,Math.ceil(t/2))]}function Qy(t,e){const n=t;let r,s,a,i,o,l,c,h,p,d;return 2===u().getNumber("WEBGL_VERSION")?(r=n.R32F,s=n.R16F,a=n.RGBA16F,i=n.RGBA32F,o=n.RED,c=4,h=1,p=n.HALF_FLOAT,d=n.FLOAT):(r=t.RGBA,s=t.RGBA,a=t.RGBA,i=n.RGBA,o=t.RGBA,c=4,h=4,p=null!=e?e.HALF_FLOAT_OES:null,d=t.FLOAT),l=t.RGBA,{internalFormatFloat:r,internalFormatHalfFloat:s,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:i,textureFormatFloat:o,downloadTextureFormat:l,downloadUnpackNumChannels:c,defaultNumChannels:h,textureTypeHalfFloat:p,textureTypeFloat:d}}function tb(t,e){const n=e();return u().getBool("DEBUG")&&function(t){const e=t.getError();if(e!==t.NO_ERROR)throw new Error("WebGL Error: "+function(t,e){switch(e){case t.NO_ERROR:return"NO_ERROR";case t.INVALID_ENUM:return"INVALID_ENUM";case t.INVALID_VALUE:return"INVALID_VALUE";case t.INVALID_OPERATION:return"INVALID_OPERATION";case t.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case t.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case t.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return"Unknown error code "+e}}(t,e))}(t),n}!function(t){t[t.DENSE=0]="DENSE",t[t.SHARED_BATCH=1]="SHARED_BATCH"}(jy||(jy={})),function(t){t[t.RENDER=0]="RENDER",t[t.UPLOAD=1]="UPLOAD",t[t.PIXELS=2]="PIXELS",t[t.DOWNLOAD=3]="DOWNLOAD"}(Ky||(Ky={})),function(t){t[t.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",t[t.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",t[t.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",t[t.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",t[t.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(Xy||(Xy={}));function eb(t){return!!(u().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===t||5.96e-8<Math.abs(t)&&Math.abs(t)<65504)}function nb(t,e){return hb(t,()=>t.getExtension(e),'Extension "'+e+'" not supported on this browser.')}function rb(t,e){const n=hb(t,()=>t.createShader(t.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(tb(t,()=>t.shaderSource(n,e)),tb(t,()=>t.compileShader(n)),!1===t.getShaderParameter(n,t.COMPILE_STATUS))throw function(t,e){const n=sb.exec(e);if(null==n)return console.log("Couldn't parse line number in error: "+e),void console.log(t);const r=+n[1],s=t.split("\n"),a=s.length.toString().length+2,i=s.map((t,e)=>F((e+1).toString(),a)+t);let o=0;for(let t=0;t<i.length;t++)o=Math.max(i[t].length,o);const u=i.slice(0,r-1),l=i.slice(r-1,r),c=i.slice(r);console.log(u.join("\n")),console.log(e.split("\n")[0]),console.log("%c "+F(l[0],o),"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}(e,t.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}const sb=/ERROR: [0-9]+:([0-9]+):/g;function ab(t,e){if(tb(t,()=>t.validateProgram(e)),!1===t.getProgramParameter(e,t.VALIDATE_STATUS))throw console.log(t.getProgramInfoLog(e)),new Error("Shader program validation failed.")}function ib(t,e,n,r,s,a,i){const o=t.getAttribLocation(e,n);return-1!==o&&(tb(t,()=>t.bindBuffer(t.ARRAY_BUFFER,r)),tb(t,()=>t.vertexAttribPointer(o,s,t.FLOAT,!1,a,i)),tb(t,()=>t.enableVertexAttribArray(o)),!0)}function ob(t,e,n){!function(t,e){const n=t.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=e+t.TEXTURE0;if(r<t.TEXTURE0||r>n){throw new Error(`textureUnit must be in ${`[gl.TEXTURE0, gl.TEXTURE${n}]`}.`)}}(t,n),tb(t,()=>t.activeTexture(t.TEXTURE0+n)),tb(t,()=>t.bindTexture(t.TEXTURE_2D,e))}function ub(t,e,n){tb(t,()=>t.bindFramebuffer(t.FRAMEBUFFER,n)),tb(t,()=>t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,e,0))}function lb(t,e){tb(t,()=>t.bindFramebuffer(t.FRAMEBUFFER,e)),tb(t,()=>t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,null,0))}function cb(t){const e=t.checkFramebufferStatus(t.FRAMEBUFFER);if(e!==t.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(t,e){switch(e){case t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case t.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return"unknown error "+e}}(t,e))}function hb(t,e,n){const r=tb(t,()=>e());if(null==r)throw new Error(n);return r}function pb(t,e=2){return T(t.slice(0,t.length-e))}function db(t){if(0===t.length)throw Error("Cannot get rows and columns of an empty shape array.");return[t.length>1?t[t.length-2]:1,t[t.length-1]]}function fb(t){let e=[1,1,1];return 0===t.length||1===t.length&&1===t[0]||(e=[pb(t),...db(t)]),e}function mb(t){return t%2==0}function gb(t,e){if(R(t=t.slice(-2),e=e.slice(-2)))return!0;if(!t.length||!e.length)return!0;if(0===t[0]||0===t[1]||0===e[0]||0===e[1])return!0;if(t.length!==e.length){const n=t.slice(-1)[0],r=e.slice(-1)[0];if(n===r)return!0;if(mb(n)&&mb(r)&&(1===t[0]||1===e[0]))return!0}return t[1]===e[1]&&mb(t[0])&&mb(e[0])}let yb,bb;function xb(t,e){return null!=t.getExtension(e)}function wb(t){try{if(null!=qy(t))return!0}catch(t){return!1}return!1}function vb(t){if(0===t)return!1;const e=qy(t);if(1!==t){if(xb(e,"EXT_color_buffer_float"))return kb(e);const t="EXT_color_buffer_half_float";if(xb(e,t)){const n=e.getExtension(t);return function(t,e){const n=Qy(t,e),r=t.createTexture();t.bindTexture(t.TEXTURE_2D,r);t.texImage2D(t.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const s=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,s),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,r,0);const a=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(r),t.deleteFramebuffer(s),a}(e,n)}return!1}if(!xb(e,"OES_texture_float"))return!1;if(!xb(e,"WEBGL_color_buffer_float"))return!1;return kb(e)}function kb(t){const e=Qy(t),n=t.createTexture();t.bindTexture(t.TEXTURE_2D,n);t.texImage2D(t.TEXTURE_2D,0,e.internalFormatFloat,1,1,0,e.textureFormatFloat,e.textureTypeFloat,null);const r=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,r),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,n,0);const s=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(n),t.deleteFramebuffer(r),s}const Nb=u();Nb.registerFlag("HAS_WEBGL",()=>Nb.getNumber("WEBGL_VERSION")>0),Nb.registerFlag("WEBGL_VERSION",()=>wb(2)?2:wb(1)?1:0),Nb.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1),Nb.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>2===Nb.get("WEBGL_VERSION")),Nb.registerFlag("WEBGL_CPU_FORWARD",()=>!0),Nb.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1),Nb.registerFlag("WEBGL_PACK",()=>Nb.getBool("HAS_WEBGL")),Nb.registerFlag("WEBGL_PACK_NORMALIZATION",()=>Nb.getBool("WEBGL_PACK")),Nb.registerFlag("WEBGL_PACK_CLIP",()=>Nb.getBool("WEBGL_PACK")),Nb.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>!1),Nb.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>Nb.getBool("WEBGL_PACK")),Nb.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>Nb.getBool("WEBGL_PACK")),Nb.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>Nb.getBool("WEBGL_PACK")),Nb.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>Nb.getBool("WEBGL_PACK")),Nb.registerFlag("WEBGL_PACK_REDUCE",()=>Nb.getBool("WEBGL_PACK")),Nb.registerFlag("WEBGL_LAZILY_UNPACK",()=>Nb.getBool("WEBGL_PACK")),Nb.registerFlag("WEBGL_CONV_IM2COL",()=>Nb.getBool("WEBGL_PACK")),Nb.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>function(t){if(null==yb){const e=qy(t);yb=e.getParameter(e.MAX_TEXTURE_SIZE)}return yb}(Nb.getNumber("WEBGL_VERSION"))),Nb.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>function(t){if(null==bb){const e=qy(t);bb=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,bb)}(Nb.getNumber("WEBGL_VERSION"))),Nb.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{const t=Nb.getNumber("WEBGL_VERSION");return 0===t?0:function(t){if(0===t)return 0;let e;const n=qy(t);return e=xb(n,"EXT_disjoint_timer_query_webgl2")&&2===t?2:xb(n,"EXT_disjoint_timer_query")?1:0,e}(t)}),Nb.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>Nb.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!zt()),Nb.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>function(t){if(0===t)return!1;const e=qy(t);if(1===t){if(!xb(e,"OES_texture_float"))return!1}else if(!xb(e,"EXT_color_buffer_float"))return!1;return kb(e)}(Nb.getNumber("WEBGL_VERSION"))),Nb.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>!Nb.getBool("WEBGL_FORCE_F16_TEXTURES")&&Nb.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")),Nb.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>vb(Nb.getNumber("WEBGL_VERSION"))),Nb.registerFlag("WEBGL_FENCE_API_ENABLED",()=>{return 2===(t=Nb.getNumber("WEBGL_VERSION"))&&null!=qy(t).fenceSync;var t}),Nb.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>Nb.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0),Nb.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,t=>{if(t<0&&-1!==t)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${t}.`)});class Ib{constructor(t,e){this.outputShape=[],this.outputShape=t,this.variableNames=e.map((t,e)=>"T"+e);const n=[];this.variableNames.forEach(t=>{n.push(`float v${t} = get${t}AtOutCoords();`)});const r=this.variableNames.map(t=>"v"+t).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `}}class Sb{constructor(t,e){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.variableNames=e.map((t,e)=>"T"+e);const n=[];this.variableNames.forEach(t=>{n.push(`vec4 v${t} = get${t}AtOutCoords();`)});const r=this.variableNames.map(t=>"v"+t).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `}}class Cb{constructor(t,e,n){this.variableNames=["A"];const r=t.windowSize,s=t.batchSize,a=t.inSize,i=Math.ceil(a/r);n||this.variableNames.push("bestIndicesA"),this.outputShape=[s,i];const o="max"===e?">":"<",u=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${u};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${o} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}function Ab(t,e){return["x","y","z","w","u","v"].slice(0,e).map(e=>`${t}.${e}`)}function Eb(t,e){return 1===e?[t]:Ab(t,e)}function Tb(){let t,e,n,r,s,a,i,o,l,c;return 2===u().getNumber("WEBGL_VERSION")?(t="#version 300 es",e="in",n="out",r="in",s="texture",a="outputColor",i="out vec4 outputColor;",o="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",l="",c="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(t="",e="attribute",n="varying",r="varying",s="texture2D",a="gl_FragColor",i="",o="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",c="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:t,attribute:e,varyingVs:n,varyingFs:r,texture2D:s,output:a,defineOutput:i,defineSpecialNaN:o,defineSpecialInf:l,defineRound:c}}function Rb(t,e,n="index"){const r=Q(e);return r.map((e,s)=>`${`int ${t[s]} = ${n} / ${e}`}; ${s===r.length-1?`int ${t[s+1]} = ${n} - ${t[s]} * ${e}`:`index -= ${t[s]} * ${e}`};`).join("")}function $b(t){const e=Q(t).map(t=>t.toString());return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${e[0]} + coords.y * ${e[1]} + coords.z;\n  }\n`}const _b="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:Db}=Wc;function Fb(t,e,n,r){const s=[];t.forEach(t=>{const e=T(t.shapeInfo.logicalShape);t.shapeInfo.isUniform?s.push(`uniform float ${t.name}${e>1?`[${e}]`:""};`):(s.push(`uniform sampler2D ${t.name};`),s.push(`uniform int offset${t.name};`))});const a=s.join("\n"),i=t.map(t=>function(t,e,n=!1){let r="";r+=n?Mb(t):Ob(t);const s=t.shapeInfo.logicalShape,a=e.logicalShape;s.length<=a.length&&(r+=n?function(t,e){const n=t.name,r=n.charAt(0).toUpperCase()+n.slice(1),s="get"+r+"AtOutCoords",a=t.shapeInfo.logicalShape.length,i=e.logicalShape.length,o=Db(t.shapeInfo.logicalShape,e.logicalShape),u=Gb(i),l=i-a;let c;const h=["x","y","z","w","u","v"];c=0===a?"":i<2&&o.length>=1?"coords = 0;":o.map(t=>`coords.${h[t+l]} = 0;`).join("\n");let p="";p=i<2&&a>0?"coords":t.shapeInfo.logicalShape.map((t,e)=>"coords."+h[e+l]).join(", ");let d="return outputValue;";const f=1===T(t.shapeInfo.logicalShape),m=1===T(e.logicalShape);if(1!==a||f||m){if(f&&!m)d=1===i?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(o.length){const t=a-2,e=a-1;o.indexOf(t)>-1&&o.indexOf(e)>-1?d="return vec4(outputValue.x);":o.indexOf(t)>-1?d="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":o.indexOf(e)>-1&&(d="return vec4(outputValue.xx, outputValue.zz);")}}else d="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${s}() {\n      ${u} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${r}(${p});\n      ${d}\n    }\n  `}(t,e):function(t,e){const n=t.name,r=n.charAt(0).toUpperCase()+n.slice(1),s="get"+r+"AtOutCoords",a=e.texShape,i=t.shapeInfo.texShape,o=t.shapeInfo.logicalShape.length,u=e.logicalShape.length;if(!t.shapeInfo.isUniform&&o===u&&null==t.shapeInfo.flatOffset&&R(i,a))return`\n      float ${s}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const l=Gb(u),c=Db(t.shapeInfo.logicalShape,e.logicalShape),h=u-o;let p;const d=["x","y","z","w","u","v"];p=0===o?"":u<2&&c.length>=1?"coords = 0;":c.map(t=>`coords.${d[t+h]} = 0;`).join("\n");let f="";f=u<2&&o>0?"coords":t.shapeInfo.logicalShape.map((t,e)=>"coords."+d[e+h]).join(", ");return`\n    float ${s}() {\n      ${l} coords = getOutputCoords();\n      ${p}\n      return get${r}(${f});\n    }\n  `}(t,e));return r}(t,e,r)).join("\n"),o=e.texShape,u=Tb(),l=function(t){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${t.texture2D}(textureSampler, uv).r;\n    }\n  `}(u);let c,h,p=function(t){return`${t.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${t.varyingFs} vec2 resultUV;\n    ${t.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${t.defineSpecialNaN}\n    ${t.defineSpecialInf}\n    ${t.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${Lb}\n    ${zb}\n    ${Bb}\n  `}(u);e.isPacked?(c=function(t,e){switch(t.length){case 0:return Wb();case 1:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(1===n[0])return`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${n[1]}.0);\n      }\n    `;if(1===n[1])return`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${n[0]}.0);\n      }\n    `;return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return 2 * (resTexRC.x * ${n[1]} + resTexRC.y);\n    }\n  `}(0,e);case 2:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(R(t,e))return`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${n[0]}, ${n[1]}));\n      }\n    `;const r=Math.ceil(t[1]/2);return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(t,e);case 3:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],r=Math.ceil(t[2]/2),s=r*Math.ceil(t[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      int b = index / ${s};\n      index -= b * ${s};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(t,e);default:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],r=Math.ceil(t[t.length-1]/2),s=r*Math.ceil(t[t.length-2]/2);let a=s,i="",o="b, r, c";for(let e=2;e<t.length-1;e++)a*=t[t.length-e-1],i=`\n      int b${e} = index / ${a};\n      index -= b${e} * ${a};\n    `+i,o=`b${e}, `+o;return`\n    ivec${t.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${s};\n      index -= b * ${s};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec${t.length}(${o});\n    }\n  `}(t,e)}}(e.logicalShape,o),h=function(t){return`\n    void setOutput(vec4 val) {\n      ${t.output} = val;\n    }\n  `}(u)):(c=function(t,e){switch(t.length){case 0:return Wb();case 1:return function(t,e){if(1===e[0])return`\n      int getOutputCoords() {\n        return int(resultUV.x * ${e[1]}.0);\n      }\n    `;if(1===e[1])return`\n      int getOutputCoords() {\n        return int(resultUV.y * ${e[0]}.0);\n      }\n    `;return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      return resTexRC.x * ${e[1]} + resTexRC.y;\n    }\n  `}(0,e);case 2:return function(t,e){if(R(t,e))return`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${e[0]}, ${e[1]}));\n      }\n    `;if(1===t[1])return`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${e[0]}, ${e[1]}));\n        int index = resTexRC.x * ${e[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;if(1===t[0])return`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${e[0]}, ${e[1]}));\n        int index = resTexRC.x * ${e[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      int r = index / ${t[1]};\n      int c = index - r * ${t[1]};\n      return ivec2(r, c);\n    }\n  `}(t,e);case 3:return function(t,e){const n=Rb(["r","c","d"],t);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      ${n}\n      return ivec3(r, c, d);\n    }\n  `}(t,e);case 4:return function(t,e){const n=Rb(["r","c","d","d2"],t);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      ${n}\n      return ivec4(r, c, d, d2);\n    }\n  `}(t,e);case 5:return function(t,e){const n=Rb(["r","c","d","d2","d3"],t);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${e[0]},\n                             ${e[1]}));\n\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(t,e);case 6:return function(t,e){const n=Rb(["r","c","d","d2","d3","d4"],t);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(t,e);default:throw new Error(t.length+"-D output sampling is not yet supported")}}(e.logicalShape,o),h=function(t){return`\n    void setOutput(float val) {\n      ${t.output} = vec4(val, 0, 0, 0);\n    }\n  `}(u)),r&&(p+=Pb);return[p,l,h,a,c,i,n].join("\n")}function Ob(t){const e=t.shapeInfo.logicalShape;switch(e.length){case 0:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return`float ${n}() {return ${e};}`;const[r,s]=t.shapeInfo.texShape;if(1===r&&1===s)return`\n      float ${n}() {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const[a,i]=t.shapeInfo.texShape,o=Vb(e);return`\n    float ${n}() {\n      vec2 uv = uvFromFlat(${a}, ${i}, ${o});\n      return sampleTexture(${e}, uv);\n    }\n  `}(t);case 1:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return`\n      float ${n}(int index) {\n        ${Ub(t)}\n      }\n    `;const r=t.shapeInfo.texShape,s=r[0],a=r[1];if(1===a&&1===s)return`\n      float ${n}(int index) {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const i=Vb(e);if(1===a)return`\n      float ${n}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${s}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;if(1===s)return`\n      float ${n}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${a}.0, 0.5);\n        return sampleTexture(${e}, uv);\n      }\n    `;return`\n    float ${n}(int index) {\n      vec2 uv = uvFromFlat(${s}, ${a}, index + ${i});\n      return sampleTexture(${e}, uv);\n    }\n  `}(t);case 2:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t.shapeInfo.texShape;if(null!=s&&R(e,s)){const t=s[0],e=s[1];return`\n    float ${r}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${e}.0, ${t}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `}const{newShape:a,keptDims:i}=z(e),o=a;if(o.length<e.length){const e=Hb(t,o),n=["row","col"];return`\n      ${Ob(e)}\n      float ${r}(int row, int col) {\n        return ${r}(${qb(n,i)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${e[1]}, 1)));\n        ${Ub(t)}\n      }\n    `;const u=s[0],l=s[1],c=Vb(n);if(1===l)return`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;if(1===u)return`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${l}.0, 0.5);\n      return sampleTexture(${n}, uv);\n    }\n  `;return`\n  float ${r}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${e[1]} + col + ${c};\n    vec2 uv = uvFromFlat(${u}, ${l}, index);\n    return sampleTexture(${n}, uv);\n  }\n`}(t);case 3:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e[1]*e[2],a=e[2],{newShape:i,keptDims:o}=z(e),u=i;if(u.length<e.length){const e=Hb(t,u),n=["row","col","depth"];return`\n        ${Ob(e)}\n        float ${r}(int row, int col, int depth) {\n          return ${r}(${qb(n,o)});\n        }\n      `}if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${s}, ${a}, 1)));\n        ${Ub(t)}\n      }\n    `;const l=t.shapeInfo.texShape,c=l[0],h=l[1],p=t.shapeInfo.flatOffset;if(h===s&&null==p)return`\n        float ${r}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${a}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${h}.0, ${c}.0);\n          return sampleTexture(${n}, uv);\n        }\n      `;if(h===a&&null==p)return`\n    float ${r}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${e[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}.0, ${c}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;const d=Vb(n);return`\n      float ${r}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${s} + col * ${a} + depth + ${d};\n        vec2 uv = uvFromFlat(${c}, ${h}, index);\n        return sampleTexture(${n}, uv);\n      }\n  `}(t);case 4:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e[3],a=e[2]*s,i=e[1]*a,{newShape:o,keptDims:u}=z(e);if(o.length<e.length){const e=Hb(t,o),n=["row","col","depth","depth2"];return`\n      ${Ob(e)}\n      float ${r}(int row, int col, int depth, int depth2) {\n        return ${r}(${qb(n,u)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${i}, ${a}, ${s}, 1)));\n        ${Ub(t)}\n      }\n    `;const l=t.shapeInfo.flatOffset,c=t.shapeInfo.texShape,h=c[0],p=c[1];if(p===i&&null==l)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${a}, ${s}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(p===s&&null==l)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${e[1]*e[2]}, ${e[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const d=Vb(n);return`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${a} +\n          depth * ${s} + depth2;\n      vec2 uv = uvFromFlat(${h}, ${p}, index + ${d});\n      return sampleTexture(${n}, uv);\n    }\n  `}(t);case 5:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e[4],a=e[3]*s,i=e[2]*a,o=e[1]*i,{newShape:u,keptDims:l}=z(e);if(u.length<e.length){const e=Hb(t,u),n=["row","col","depth","depth2","depth3"];return`\n      ${Ob(e)}\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        return ${r}(${qb(n,l)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${o}, ${i}, ${a}, ${s})) +\n          depth3;\n        ${Ub(t)}\n      }\n    `;const c=t.shapeInfo.flatOffset,h=t.shapeInfo.texShape,p=h[0],d=h[1];if(d===o&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${i}, ${a}, ${s}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(d===s&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${e[1]*e[2]*e[3]},\n               ${e[2]*e[3]}, ${e[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const f=Vb(n);return`\n    float ${r}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} + depth * ${a} +\n          depth2 * ${s} + depth3 + ${f};\n      vec2 uv = uvFromFlat(${p}, ${d}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(t);case 6:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:s,keptDims:a}=z(e);if(s.length<e.length){const e=Hb(t,s),n=["row","col","depth","depth2","depth3","depth4"];return`\n      ${Ob(e)}\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${r}(${qb(n,a)});\n      }\n    `}const i=e[5],o=e[4]*i,u=e[3]*o,l=e[2]*u,c=e[1]*l;if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${l}, ${u}, ${o})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${i}, 1)));\n        ${Ub(t)}\n      }\n    `;const h=t.shapeInfo.flatOffset,p=t.shapeInfo.texShape,d=p[0],f=p[1];if(f===c&&null==h)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${l}, ${u}, ${o}, ${i})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===i&&null==h)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${e[1]*e[2]*e[3]*e[4]},\n               ${e[2]*e[3]*e[4]},\n               ${e[3]*e[4]},\n               ${e[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const m=Vb(n);return`\n    float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${l} + depth * ${u} +\n          depth2 * ${o} + depth3 * ${i} + depth4 + ${m};\n      vec2 uv = uvFromFlat(${d}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(t);default:throw new Error(e.length+"-D input sampling is not yet supported")}}function Mb(t){switch(t.shapeInfo.logicalShape.length){case 0:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1),r=Tb();return`\n    vec4 ${n}() {\n      return ${r.texture2D}(${e}, halfCR);\n    }\n  `}(t);case 1:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1),r=t.shapeInfo.texShape,s=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],a=Tb();return`\n    vec4 ${n}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${s[0]}, ${s[1]}, index);\n      return ${a.texture2D}(${e}, uv);\n    }\n  `}(t);case 2:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t.shapeInfo.texShape,a=s[0],i=s[1],o=Tb();if(null!=s&&R(e,s))return`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${a}.0);\n\n        return ${o.texture2D}(${n}, uv);\n      }\n    `;const u=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)],l=Math.ceil(e[1]/2);return`\n    vec4 ${r}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${l}, ${u[0]}, ${u[1]}, row, col);\n      return ${o.texture2D}(${n}, uv);\n    }\n  `}(t);case 3:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t.shapeInfo.texShape,a=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];if(1===e[0]){const n=e.slice(1),s=[1,2],a=Hb(t,n),i=["b","row","col"];return`\n        ${Mb(a)}\n        vec4 ${r}(int b, int row, int col) {\n          return ${r}(${qb(i,s)});\n        }\n      `}const i=a[0],o=a[1],u=Math.ceil(e[2]/2),l=u*Math.ceil(e[1]/2),c=Tb();return`\n    vec4 ${r}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${i}, ${o}, ${l}, ${u}, b, row, col);\n      return ${c.texture2D}(${n}, uv);\n    }\n  `}(t);default:return function(t){const e=t.shapeInfo.logicalShape,n=e.length,r=t.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=t.shapeInfo.texShape,i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],o=i[0],u=i[1],l=Math.ceil(e[n-1]/2);let c=l*Math.ceil(e[n-2]/2),h="int b, int row, int col",p=`b * ${c} + (row / 2) * ${l} + (col / 2)`;for(let t=2;t<n-1;t++)h=`int b${t}, `+h,c*=e[n-t-1],p=`b${t} * ${c} + `+p;const d=Tb();return`\n    vec4 ${s}(${h}) {\n      int index = ${p};\n      int texR = index / ${u};\n      int texC = index - texR * ${u};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${u}, ${o});\n      return ${d.texture2D}(${r}, uv);\n    }\n  `}(t)}}const Lb="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",zb="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Bb="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Pb="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function Wb(){return"\n    int getOutputCoords() {\n      return 0;\n    }\n  "}function Vb(t){return"offset"+t}function Ub(t){const e=t.name,n=T(t.shapeInfo.logicalShape);return n<2?`return ${e};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${e}[i];\n      }\n    }\n  `}function Gb(t){if(t<=1)return"int";if(2===t)return"ivec2";if(3===t)return"ivec3";if(4===t)return"ivec4";if(5===t)return"ivec5";if(6===t)return"ivec6";throw Error(`GPU for rank ${t} is not yet supported`)}function Hb(t,e){const n=JSON.parse(JSON.stringify(t));return n.shapeInfo.logicalShape=e,n}function qb(t,e){return e.map(e=>t[e]).join(", ")}class jb{constructor(t,e,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,S(t.length>2,()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`);const s=t[t.length-1],a=Math.ceil(s/e);this.outputShape=t.slice(0,-1),a>1&&this.outputShape.push(a),r||this.variableNames.push("bestIndicesA");const i=this.outputShape,o=i.length,u=Gb(o),l=Eb("coords",o);let c,h;if(1===a){h=o+1;const t=Gb(h);c=`\n        ${t} sourceLocR = ${t}(${l.join()}, 0);\n        ++${l[o-1]};\n        ${t} sourceLocG = ${t}(${l.join()}, 0);\n        ++${l[o-2]};\n        ${t} sourceLocA = ${t}(${l.join()}, 0);\n        --${l[o-1]};\n        ${t} sourceLocB = ${t}(${l.join()}, 0);\n        --${l[o-2]};`}else h=o,c=`\n        ${u} sourceLocR = coords;\n        ++${l[o-1]};\n        ${u} sourceLocG = coords;\n        ++${l[o-2]};\n        ${u} sourceLocA = coords;\n        --${l[o-1]};\n        ${u} sourceLocB = coords;\n        --${l[o-2]};`;const p=["x","y","z","w","u","v"].slice(0,h),d="."+p[h-1],f=p.map(t=>"int "+t),m=Eb("sourceLocR",h-1).concat("inIdx.r"),g=Eb("sourceLocG",h-1).concat("inIdx.g"),y=Eb("sourceLocB",h-1).concat("inIdx.b"),b=Eb("sourceLocA",h-1).concat("inIdx.a"),x="max"===n?"greaterThan":"lessThan",w=r?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()})));`,v=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${g.join()}) : 0.,\n            hasNextRow ? getAChannel(${y.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${b.join()}) : 0.)`,k=r?"":`\n      float getBestIndicesAChannel(${f.join()}) {\n        return getChannel(getBestIndicesA(${p.join()}),\n                                          vec2(${p.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${f.join()}) {\n        return getChannel(getA(${p.join()}),\n                               vec2(${p.slice(-2).join()}));\n      }\n      ${k}\n      void main() {\n        ${u} coords = getOutputCoords();\n        bool hasNextCol = ${l[o-1]} < ${i[o-1]-1};\n        bool hasNextRow = ${l[o-2]} < ${i[o-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${d}, sourceLocG${d},\n          sourceLocB${d}, sourceLocA${d}) * ${e};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${v};\n\n        for (int i = 0; i < ${e}; i++) {\n          inIdx = srcIdx;\n          ${w}\n          vec4 candidate = ${v};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${x}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}class Kb{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,s=t.strideWidth,a=t.dilationHeight,i=t.dilationWidth,o=t.effectiveFilterHeight,u=t.effectiveFilterWidth,l=o-1-t.padInfo.top,c=u-1-t.padInfo.left,h=1/(e*n);this.userCode=`\n      const ivec2 pads = ivec2(${l}, ${c});\n      const float avgMultiplier = float(${h});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n            wR += ${a}) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${u};\n            wC+= ${i}) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Xb{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const e=t.filterDepth,n=t.filterHeight,r=t.filterWidth,s=t.strideDepth,a=t.strideHeight,i=t.strideWidth,o=t.dilationDepth,u=t.dilationHeight,l=t.dilationWidth,c=t.effectiveFilterDepth,h=t.effectiveFilterHeight,p=t.effectiveFilterWidth,d=c-1-t.padInfo.front,f=h-1-t.padInfo.top,m=p-1-t.padInfo.left,g=1/(e*n*r);this.userCode=`\n      const ivec3 pads = ivec3(${d}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${o}) {\n          float dyD = float(dyDCorner + wD) / ${s}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${u}) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${p};\n                wC += ${l}) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Yb{constructor(t,e,n,r,s,a){this.outputShape=[],this.variableNames=["x","mean","variance"],he(t,e),he(t,n);let i="0.0";null!=r&&(he(t,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="1.0";null!=s&&(he(t,s),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${o};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class Jb{constructor(t,e,n,r,s,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],he(t,e),he(t,n);let i="vec4(0.0)";null!=r&&(he(t,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="vec4(1.0)";null!=s&&(he(t,s),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${o};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const Zb="return areal * breal - aimag * bimag;",Qb="return areal * bimag + aimag * breal;";class tx{constructor(t,e,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=he(e,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${t}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const ex="return a + b;",nx="return a - b;",rx="return a * b;",sx="return (a < 0.) ? b * a : a;";class ax{constructor(t,e,n){this.variableNames=["A","B"],this.outputShape=he(e,n),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${t}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}const ix="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";class ox{constructor(t,e,n,r=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=he(e,n);const s=this.outputShape.length;let a="";if(r)if(0===s||1===T(this.outputShape))a="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else{if(a=`\n          ${Gb(s)} coords = getOutputCoords();\n        `,1===s)a+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const t=Eb("coords",s);a+=`\n            bool nextRowOutOfBounds =\n              (${t[s-2]} + 1) >= ${this.outputShape[s-2]};\n            bool nextColOutOfBounds =\n              (${t[s-1]} + 1) >= ${this.outputShape[s-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${t}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${a}\n\n        setOutput(result);\n      }\n    `}}class ux{constructor(t){this.variableNames=["A"],this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}getCustomSetupFunc(t,e){return(n,r)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(r,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(r,"maxVal")),n.gl.uniform1f(this.minLoc,t),n.gl.uniform1f(this.maxLoc,e)}}}class lx{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}getCustomSetupFunc(t,e){return(n,r)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(r,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(r,"maxVal")),n.gl.uniform1f(this.minLoc,t),n.gl.uniform1f(this.maxLoc,e)}}}class cx{constructor(t){this.variableNames=["real","imag"],this.outputShape=t,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}class hx{constructor(t){this.outputShape=[],this.outputShape=ys(t,1),this.variableNames=t.map((t,e)=>"T"+e);const e=new Array(t.length-1);e[0]=t[0][1];for(let n=1;n<e.length;n++)e[n]=e[n-1]+t[n][1];const n=[`if (yC < ${e[0]}) setOutput(getT0(yR, yC));`];for(let t=1;t<e.length;t++){const r=e[t-1];n.push(`else if (yC < ${e[t]}) setOutput(getT${t}(yR, yC-${r}));`)}const r=e.length,s=e[e.length-1];n.push(`else setOutput(getT${r}(yR, yC-${s}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class px{constructor(t,e){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=ys(t,e);const n=this.outputShape,r=n.length,s=Gb(r),a=Eb("coords",r),i=["x","y","z","w","u","v"].slice(0,r);this.variableNames=t.map((t,e)=>"T"+e);const o=new Array(t.length-1);o[0]=t[0][e];for(let n=1;n<o.length;n++)o[n]=o[n-1]+t[n][e];const u=i[e],l=i.slice(-2),c=i.join();let h=`if (${u} < ${o[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${l.join()}));\n        }`;for(let t=1;t<o.length;t++){const e=o[t-1];h+=`\n        if (${u} < ${o[t]}  && ${u} >= ${o[t-1]}) {\n          return getChannel(\n            getT${t}(${dx(i,u,e)}),\n            vec2(${dx(l,u,e)}));\n        }`}const p=o.length,d=o[o.length-1];h+=`\n        return getChannel(\n          getT${p}(${dx(i,u,d)}),\n          vec2(${dx(l,u,d)}));`,this.userCode=`\n      float getValue(${i.map(t=>"int "+t)}) {\n        ${h}\n      }\n\n      void main() {\n        ${s} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[r-1]} = ${a[r-1]} + 1;\n        if (${a[r-1]} < ${n[r-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[r-2]} = ${a[r-2]} + 1;\n        if (${a[r-2]} < ${n[r-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[r-1]} = ${a[r-1]} - 1;\n        if (${a[r-2]} < ${n[r-2]} &&\n            ${a[r-1]} < ${n[r-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function dx(t,e,n){const r=t.indexOf(e);return t.map((t,e)=>e===r?`${t} - ${n}`:t).join()}class fx{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideHeight,n=t.strideWidth,r=t.padInfo.top,s=t.padInfo.left,a="channelsLast"===t.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${e} - ${r};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${s};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              if (${a}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class mx{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,s=t.strideWidth,a="channelsLast"===t.dataFormat,i=e-1-t.padInfo.top,o=n-1-t.padInfo.left,u=a?1:2,l=a?2:3,c=a?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${u}], coords[${l}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n\n              if (${a}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class gx{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideDepth,n=t.strideHeight,r=t.strideWidth,s=t.padInfo.front,a=t.padInfo.top,i=t.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yF = 0; yF < ${t.outDepth}; yF++) {\n            int xF = wF + yF * ${e} - ${s};\n\n            if (xF < 0 || xF >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${t.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${a};\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${t.outWidth}; yC++) {\n                int xC = wC + yC * ${r} - ${i};\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class yx{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterDepth,n=t.filterHeight,r=t.filterWidth,s=t.strideDepth,a=t.strideHeight,i=t.strideWidth,o=e-1-t.padInfo.front,u=n-1-t.padInfo.top,l=r-1-t.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${o}, ${u}, ${l});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${e}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${s}.0;\n\n          if (dyF < 0.0 || dyF >= ${t.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${e} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class bx{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideHeight,n=t.strideWidth,r=t.padInfo.top,s=t.padInfo.left,a=t.outChannels/t.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${a} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${e} - ${r};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${s};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class xx{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,s=t.strideWidth,a=e-1-t.padInfo.top,i=n-1-t.padInfo.left,o=t.outChannels/t.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${o}; dm++) {\n              int d2 = d1 * ${o} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class wx{constructor(t,e=!1,n=null,r=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;const s=t.padInfo.top,a=t.padInfo.left,i=t.strideHeight,o=t.strideWidth,u=t.dilationHeight,l=t.dilationWidth,c=t.filterHeight,h=t.filterWidth,p=4*Math.floor(t.inChannels/4),d=t.inChannels%4,f="channelsLast"===t.dataFormat,m=f?1:2,g=f?2:3,y=f?3:1;let b="",x="";n&&(b=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,x="result = activation(result);");const w=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${b}\n\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${s}, ${a});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${y}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${m}], coords[${g}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${c}; wR++) {\n          int xR = xRCorner + wR * ${u};\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${h}; wC++) {\n            int xC = xCCorner + wC * ${l};\n\n            if (xC < 0 || xC >= ${t.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${p}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${f}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===d}) {\n\n              if (${f}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${p}) *\n                    getW(wR, wC, ${p}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${p}, xR, xC) *\n                    getW(wR, wC, ${p}, d2);\n              }\n\n            } else if (${2===d}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${p}, d2),\n                getW(wR, wC, ${p} + 1, d2)\n              );\n\n              if (${f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${p}),\n                  getX(batch, xR, xC, ${p} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${p}, xR, xC),\n                  getX(batch, ${p} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===d}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${p}, d2),\n                getW(wR, wC, ${p} + 1, d2),\n                getW(wR, wC, ${p} + 2, d2)\n              );\n\n              if (${f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${p}),\n                  getX(batch, xR, xC, ${p} + 1),\n                  getX(batch, xR, xC, ${p} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${p}, xR, xC),\n                  getX(batch, ${p} + 1, xR, xC),\n                  getX(batch, ${p} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${w}\n        ${x}\n        setOutput(result);\n      }\n    `}}class vx{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;const e=t.padInfo.front,n=t.padInfo.top,r=t.padInfo.left,s=t.strideDepth,a=t.strideHeight,i=t.strideWidth,o=t.dilationDepth,u=t.dilationHeight,l=t.dilationWidth,c=t.filterDepth,h=t.filterHeight,p=t.filterWidth,d=4*Math.floor(t.inChannels/4),f=t.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${s}, ${a}, ${i});\n      const ivec3 pads = ivec3(${e}, ${n}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${o};\n\n          if (xF < 0 || xF >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${u};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${l};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${d}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${d}) *\n                  getW(wF, wR, wC, ${d}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1),\n                  getX(batch, xF, xR, xC, ${d} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2),\n                  getW(wF, wR, wC, ${d} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class kx{constructor(t,e=!1,n=null,r=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;const s=t.inHeight,a=t.inWidth,i=t.padInfo.top,o=t.padInfo.left,u=t.strideHeight,l=t.strideWidth,c=t.dilationHeight,h=t.dilationWidth,p=t.filterHeight,d=t.filterWidth,f=t.outChannels/t.inChannels;let m="",g="";n&&(m=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,g="result = activation(result);");const y=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${m}\n\n      const ivec2 strides = ivec2(${u}, ${l});\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${f};\n        int q = d2 - d1 * ${f};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${p}; wR++) {\n          int xR = xRCorner + wR * ${c};\n\n          if (xR < 0 || xR >= ${s}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${d}; wC++) {\n            int xC = xCCorner + wC * ${h};\n\n            if (xC < 0 || xC >= ${a}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${y}\n        ${g}\n        setOutput(result);\n      }\n    `}}class Nx{constructor(t,e=!1,n=null,r=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.outShape;const s=t.inHeight,a=t.inWidth,i=t.padInfo.top,o=t.padInfo.left,u=t.strideHeight,l=t.strideWidth,c=t.dilationHeight,h=t.dilationWidth,p=t.filterHeight,d=t.filterWidth,f=d;let m="int xR; int xC; int xCOffset;";for(let t=0;t<p;t++)for(let e=0;e<d;e++)m+=`\n          vec4 xTexelR${t}C${2*e} = vec4(0.);\n          vec4 wR${t}C${e} = vec4(0.);\n          vec4 xR${t}C${e} = vec4(0.);`;for(let t=0;t<p;t++)for(let e=0;e<f;e++){const n=2*e;if(m+=`\n          xR = xRCorner + ${t*c};\n          xC = xCCorner + ${n*h};\n        `,1===l){if(n<d&&(m+=o%2==1?`\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < ${s} && xCOffset >= 0 && xCOffset < ${a}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${a}) {\n                    xTexelR${t}C${n}.zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < ${s} && xCOffset >= 0 && xCOffset < ${a}) {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${a}) {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR${t}C${n} = vec4(previous.zw, xTexelR${t}C${n}.xy);\n                } else {\n                  xR${t}C${n} = vec4(0, 0, xTexelR${t}C${n}.xy);\n                }\n              `:`\n                if(xR >= 0 && xR < ${s} && xC >= 0 && xC < ${a}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xR${t}C${n} = xTexelR${t}C${n};\n              `,n+1<d)){const e=o%2==0?N(h):h;h%2==0&&o%2==1||h%2!=0&&o%2!=1?(m+=`\n                  xCOffset = xC + ${o%2} + ${e};\n\n                  if(xR >= 0 && xR < ${s} &&\n                    xCOffset >= 0 && xCOffset < ${a}) {\n                    xTexelR${t}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n                `,h>1&&(m+=`\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < ${s} &&\n                      xCOffset >= 0 && xCOffset < ${a}) {\n                      xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR${t}C${n} = vec4(0.);\n                    }\n                  `),m+=`\n                  xR${t}C${n+1} = vec4(\n                    xTexelR${t}C${n}.zw, xTexelR${t}C${n+2}.xy);\n                `):m+=`\n                  xCOffset = xC + ${e};\n\n                  if(xR >= 0 && xR < ${s} &&\n                    xCOffset >= 0 && xCOffset < ${a}) {\n                    xTexelR${t}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR${t}C${n+1} = xTexelR${t}C${n+2};\n                `}}else n<d&&(m+=`\n              if(xR >= 0 && xR < ${s}) {\n            `,o%2==1?(m+=`\n                xCOffset = xC + 1 - ${l};\n                if(xCOffset >= 0 && xCOffset < ${a}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${a}) {\n                  xTexelR${t}C${n+2} = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR${t}C${n+2} = vec4(0.);\n                }\n\n                xR${t}C${n} = vec4(\n                  xTexelR${t}C${n}.zw, xTexelR${t}C${n+2}.zw);\n              `,n+1<d&&(m+=`\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + ${l};\n                  if(xCOffset >= 0 && xCOffset < ${a}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR${t}C${n+1} = vec4(xTexelR${t}C${n+2}.xy, final.xy);\n                `)):(m+=`\n                if(xC >= 0 && xC < ${a}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + ${l};\n                if(xCOffset >= 0 && xCOffset < ${a}) {\n                  xTexelR${t}C${n+2} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${t}C${n+2} = vec4(0.);\n                }\n\n                xR${t}C${n} = vec4(\n                  xTexelR${t}C${n}.xy, xTexelR${t}C${n+2}.xy);\n              `,n+1<d&&(m+=`\n                  xR${t}C${n+1} = vec4(\n                    xTexelR${t}C${n}.zw, xTexelR${t}C${n+2}.zw);\n                `)),m+="}");n<d&&(m+=`\n            vec4 wTexelR${t}C${n} = getW(${t}, ${n}, d1, q);\n            wR${t}C${n} = vec4(wTexelR${t}C${n}.xz, wTexelR${t}C${n}.xz);\n          `,n+1<d&&(m+=`\n              vec4 wTexelR${t}C${n+1} = getW(${t}, ${n+1}, d1, q);\n              wR${t}C${n+1} =\n                vec4(wTexelR${t}C${n+1}.xz, wTexelR${t}C${n+1}.xz);`))}for(let t=0;t<p;t++)for(let e=0;e<d;e++)m+=`dotProd += xR${t}C${e} * wR${t}C${e};`;let g="",y="";n&&(g=r?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,y="result = activation(result);");const b=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${g}\n\n      const ivec2 strides = ivec2(${u}, ${l});\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        ${m}\n\n        vec4 result = dotProd;\n        ${b}\n        ${y}\n        setOutput(result);\n      }\n    `}}class Ix{constructor(t,e,n,r,s){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,i,o,u]=t,[l]=e,[c,h]=n;this.outputShape=[l,c,h,u];const p="bilinear"===r?1:0,[d,f]=[i-1+".0",o-1+".0"],[m,g,y]=c>1?[""+(i-1)/(c-1),"(y2-y1) * height_ratio",`y1*${d} + float(y)*(height_scale)`]:["0.0","0.0","0.5 * (y1+y2) * "+d],[b,x,w]=h>1?[""+(o-1)/(h-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0","0.5 * (x1+x2) * "+f];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${d} ) {\n          setOutput(float(${s}));\n          return;\n        }\n        float in_x = ${w};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${s}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}class Sx{constructor(t,e,n){this.variableNames=["x"],this.outputShape=t;const r=t.length,s=e?"0.0":`getX(${Cx(r,"coords")})`,a=t[t.length-1];let i="",o="";e?(i=n?"end != "+(a-1):"end != 0",o=n?"end + 1":"end - 1"):(i=n?"end + pow2 < "+a:"end >= pow2",o=n?"end + pow2":"end - pow2"),this.userCode=`\n      uniform float index;\n      void main() {\n        ${Gb(r)} coords = getOutputCoords();\n        int end = ${Ax(r,"coords")};\n        float val = ${s};\n        int pow2 = int(pow(2.0, index));\n        if (${i}) {\n          int idx = ${o};\n          ${Ax(r,"coords")} = idx;\n          val += getX(${Cx(r,"coords")});\n        }\n        setOutput(val);\n      }\n    `}getCustomSetupFunc(t){return(e,n)=>{null==this.index&&(this.index=e.getUniformLocation(n,"index")),e.gl.uniform1f(this.index,t)}}}function Cx(t,e){if(1===t)return""+e;if(2===t)return`${e}.x, ${e}.y`;if(3===t)return`${e}.x, ${e}.y, ${e}.z`;if(4===t)return`${e}.x, ${e}.y, ${e}.z, ${e}.w`;throw Error(`Cumulative sum for rank ${t} is not yet supported`)}function Ax(t,e){if(1===t)return""+e;if(2===t)return e+".y";if(3===t)return e+".z";if(4===t)return e+".w";throw Error(`Cumulative sum for rank ${t} is not yet supported`)}class Ex{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=jy.DENSE;const e=Jy(t),n=Tb();this.outputShape=t,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${Rb(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${e[0]}, ${e[1]}));\n        int index = 4 * (resTexRC.x * ${e[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${n.output} = result;\n      }\n    `}}class Tx{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=jy.DENSE;const e=Jy(t),n=Tb();this.outputShape=t,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${Rb(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${e[0]}, ${e[1]}));\n        int index = 4 * (resTexRC.x * ${e[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${n.output} = result;\n      }\n    `}}class Rx{constructor(t,e,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=t,this.blockSize=e,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${e};\n      int offset_h = imod(h, ${e});\n      int in_w = w / ${e};\n      int offset_w = imod(w, ${e});\n      int offset_d = (offset_h * ${e} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}class $x{constructor(t){this.variableNames=["X"],this.outputShape=[t,t],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}class _x{constructor(t){this.variableNames=["A"],this.outTexUsage=Ky.DOWNLOAD;const e=Tb();this.outputShape=t,this.userCode=`\n      ${_b}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${e.output} = encode_float(x);\n      }\n    `}}class Dx{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=Ky.DOWNLOAD;const e=Tb();this.outputShape=t,this.userCode=`\n      ${_b}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${e.output} = encode_float(x);\n      }\n    `}}class Fx{constructor(t,e,n=!1){this.variableNames=["A"];const r=Tb(),[s,a]=e;this.outputShape=t;let i="result";n&&(i="floor(result * 255. + 0.5)"),this.userCode=`\n      ${$b(t)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / ${a};\n        int c = imod(flatIndex, ${a});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${s}.0);\n        vec4 values = ${r.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${r.output} = vec4(${i}, 0., 0., 0.);\n      }\n    `}}class Ox{constructor(t,e,n=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const r=Tb(),[s,a]=e;this.outputShape=t;let i="",o="result";n&&(o="floor(result * 255. + 0.5)");for(let e=0;e<=1;e++)for(let n=0;n<=1;n++){const o=2*e+n;i+=`\n          localCoords = coords;\n          if(localCoords[2] + ${n} < ${t[2]}) {\n            localCoords[2] += ${n};\n            if(localCoords[1] + ${e} < ${t[1]}) {\n              localCoords[1] += ${e};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${a};\n              c = imod(flatIndex, ${a});\n              uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${s}.0);\n              values = ${r.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${o}] = values[0];\n              } else if(offset == 1) {\n                result[${o}] = values[1];\n              } else if(offset == 2) {\n                result[${o}] = values[2];\n              } else {\n                result[${o}] = values[3];\n              }\n            }\n          }\n        `}this.userCode=`\n      ${$b(t)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${i}\n\n        ${r.output} = ${o};\n      }\n    `}}const Mx="return real * expR - imag * expI;",Lx="return real * expI + imag * expR;";class zx{constructor(t,e,n){this.variableNames=["real","imag"];const r=e[1];this.outputShape=e;const s=n?"2.0 * "+Math.PI:"-2.0 * "+Math.PI,a=n?r+".0":"1.0";this.userCode=`\n      const float exponentMultiplier = ${s};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${t}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${r});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${r}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}class Bx{constructor(t,e){this.outputShape=[],this.variableNames=["x"],this.outputShape=t,this.userCode="\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}getCustomSetupFunc(t){return(e,n)=>{null==this.valueLoc&&(this.valueLoc=e.getUniformLocationNoThrow(n,"value")),e.gl.uniform1f(this.valueLoc,t)}}}class Px{constructor(t,e,n){this.variableNames=["A","indices"];const r=t.slice();r[n]=e,this.outputShape=r,this.rank=r.length;const s=Gb(this.rank),a=function(t,e){const n=t.length;if(n>4)throw Error(`Gather for rank ${n} is not yet supported`);if(1===n)return"int(getIndices(resRC))";const r=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[];for(let n=0;n<t.length;n++)n===e?s.push(`int(getIndices(${r[n]}))`):s.push(""+r[n]);return s.join()}(t,n);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        setOutput(getA(${a}));\n      }\n    `}}class Wx{constructor(t,e,n){this.sliceDim=t,this.strides=e,this.variableNames=["x","indices"],this.outputShape=n;const r=Gb(e.length),s=Gb(n.length),a=this.sliceDim>1?"strides[j]":"strides";this.userCode=`\n        ${r} strides = ${r}(${this.strides});\n         void main() {\n          ${s} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${a};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}function Vx(t){const e=Tb();return function(t,e){const n=hb(t,()=>t.createShader(t.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(tb(t,()=>t.shaderSource(n,e)),tb(t,()=>t.compileShader(n)),!1===t.getShaderParameter(n,t.COMPILE_STATUS))throw console.log(t.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(t,`${e.version}\n    precision highp float;\n    ${e.attribute} vec3 clipSpacePos;\n    ${e.attribute} vec2 uv;\n    ${e.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function Ux(t){return function(t,e){const n=hb(t,()=>t.createBuffer(),"Unable to create WebGLBuffer");return tb(t,()=>t.bindBuffer(t.ARRAY_BUFFER,n)),tb(t,()=>t.bufferData(t.ARRAY_BUFFER,e,t.STATIC_DRAW)),n}(t,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function Gx(t){return function(t,e){const n=hb(t,()=>t.createBuffer(),"Unable to create WebGLBuffer");return tb(t,()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,n)),tb(t,()=>t.bufferData(t.ELEMENT_ARRAY_BUFFER,e,t.STATIC_DRAW)),n}(t,new Uint16Array([0,1,2,2,1,3]))}function Hx(t,e,n,r,s,a){!function(t,e){const n=u().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t<=0||e<=0){throw new Error("Requested texture size "+`[${t}x${e}]`+" is invalid.")}if(t>n||e>n){throw new Error("Requested texture size "+`[${t}x${e}]`+" greater than WebGL maximum on this browser / GPU "+`[${n}x${n}]`+".")}}(e,n);const i=function(t){return hb(t,()=>t.createTexture(),"Unable to create WebGLTexture.")}(t),o=t.TEXTURE_2D;return tb(t,()=>t.bindTexture(o,i)),tb(t,()=>t.texParameteri(o,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE)),tb(t,()=>t.texParameteri(o,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE)),tb(t,()=>t.texParameteri(o,t.TEXTURE_MIN_FILTER,t.NEAREST)),tb(t,()=>t.texParameteri(o,t.TEXTURE_MAG_FILTER,t.NEAREST)),tb(t,()=>t.texImage2D(o,0,r,e,n,0,s,a,null)),tb(t,()=>t.bindTexture(t.TEXTURE_2D,null)),i}function qx(t){return t.internalFormatFloat}function jx(t){return t.internalFormatHalfFloat}function Kx(t){return t.downloadTextureFormat}function Xx(t){return t.internalFormatPackedFloat}function Yx(t){return t.internalFormatPackedHalfFloat}function Jx(t,e,n,r,s,a,i,o){const u=t,l=new Float32Array(function(t,e){const[n,r]=Zy(t,e);return n*r*4}(a,i));return u.bindBuffer(u.PIXEL_PACK_BUFFER,e),u.getBufferSubData(u.PIXEL_PACK_BUFFER,0,l),u.bindBuffer(u.PIXEL_PACK_BUFFER,null),l}class Zx{constructor(t){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const e=u().getNumber("WEBGL_VERSION");null!=t?(this.gl=t,function(t,e){Gy[t]=e}(e,t)):this.gl=qy(e);let n="WEBGL_color_buffer_float";if(1===u().getNumber("WEBGL_VERSION")){const t="OES_texture_float",e="OES_texture_half_float";if(this.textureFloatExtension=nb(this.gl,t),xb(this.gl,e))this.textureHalfFloatExtension=nb(this.gl,e);else if(u().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),xb(this.gl,"EXT_color_buffer_half_float"))this.colorBufferHalfFloatExtension=nb(this.gl,"EXT_color_buffer_half_float");else if(u().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",xb(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!xb(this.gl,"EXT_color_buffer_half_float"))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension("EXT_color_buffer_half_float")}this.vertexBuffer=Ux(this.gl),this.indexBuffer=Gx(this.gl),this.framebuffer=function(t){return hb(t,()=>t.createFramebuffer(),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=Qy(this.gl,this.textureHalfFloatExtension)}get debug(){return u().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const t=this.gl;tb(t,()=>t.finish()),tb(t,()=>t.bindFramebuffer(t.FRAMEBUFFER,null)),tb(t,()=>t.deleteFramebuffer(this.framebuffer)),tb(t,()=>t.bindBuffer(t.ARRAY_BUFFER,null)),tb(t,()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null)),tb(t,()=>t.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[s,a]=Yy(e,n);return Hx(t,s,a,qx(r),r.textureFormatFloat,t.FLOAT)}(this.gl,t,e,this.textureConfig)}createFloat16MatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[s,a]=Yy(e,n);return Hx(t,s,a,jx(r),r.textureFormatFloat,r.textureTypeHalfFloat)}(this.gl,t,e,this.textureConfig)}createUnsignedBytesMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[s,a]=Yy(e,n);return Hx(t,s,a,Kx(r),t.RGBA,t.UNSIGNED_BYTE)}(this.gl,t,e,this.textureConfig)}uploadPixelDataToTexture(t,e){this.throwIfDisposed(),function(t,e,n){tb(t,()=>t.bindTexture(t.TEXTURE_2D,e)),n.data instanceof Uint8Array?tb(t,()=>t.texImage2D(t.TEXTURE_2D,0,t.RGBA,n.width,n.height,0,t.RGBA,t.UNSIGNED_BYTE,n.data)):tb(t,()=>t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,n)),tb(t,()=>t.bindTexture(t.TEXTURE_2D,null))}(this.gl,t,e)}uploadDenseMatrixToTexture(t,e,n,r){this.throwIfDisposed(),function(t,e,n,r,s,a){let i,o,u;tb(t,()=>t.bindTexture(t.TEXTURE_2D,e)),s instanceof Uint8Array?(i=new Uint8Array(n*r*4),o=t.UNSIGNED_BYTE,u=t.RGBA):(i=new Float32Array(n*r*4),o=t.FLOAT,u=a.internalFormatPackedFloat),i.set(s),tb(t,()=>t.texImage2D(t.TEXTURE_2D,0,u,n,r,0,t.RGBA,o,i)),tb(t,()=>t.bindTexture(t.TEXTURE_2D,null))}(this.gl,t,e,n,r,this.textureConfig)}createFloat16PackedMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[s,a]=Zy(e,n);return Hx(t,s,a,Yx(r),t.RGBA,r.textureTypeHalfFloat)}(this.gl,t,e,this.textureConfig)}createPackedMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[s,a]=Zy(e,n);return Hx(t,s,a,Xx(r),t.RGBA,t.FLOAT)}(this.gl,t,e,this.textureConfig)}deleteMatrixTexture(t){this.throwIfDisposed(),this.outputTexture===t&&(lb(this.gl,this.framebuffer),this.outputTexture=null),tb(this.gl,()=>this.gl.deleteTexture(t))}downloadByteEncodedFloatMatrixFromOutputTexture(t,e,n){return this.downloadMatrixDriver(t,()=>function(t,e,n,r){const[s,a]=Yy(e,n),i=new Uint8Array(e*n*4);return tb(t,()=>t.readPixels(0,0,s,a,r.downloadTextureFormat,t.UNSIGNED_BYTE,i)),new Float32Array(i.buffer)}(this.gl,e,n,this.textureConfig))}downloadPackedMatrixFromBuffer(t,e,n,r,s,a){return Jx(this.gl,t,0,0,0,s,a,this.textureConfig)}downloadFloat32MatrixFromBuffer(t,e){return function(t,e,n){const r=t,s=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,e),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,s),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),s}(this.gl,t,e)}createBufferFromTexture(t,e,n){this.bindTextureToFrameBuffer(t);const r=function(t,e,n,r){const s=t.createBuffer();tb(t,()=>t.bindBuffer(t.PIXEL_PACK_BUFFER,s));const a=16*e*n;return tb(t,()=>t.bufferData(t.PIXEL_PACK_BUFFER,a,t.STREAM_READ)),tb(t,()=>t.readPixels(0,0,n,e,t.RGBA,t.FLOAT,0)),tb(t,()=>t.bindBuffer(t.PIXEL_PACK_BUFFER,null)),s}(this.gl,e,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const t=this.createFence(this.gl);return this.pollFence(t)}createFence(t){let e,n;if(u().getBool("WEBGL_FENCE_API_ENABLED")){const r=t,s=r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE,0);t.flush(),n=()=>{const t=r.clientWaitSync(s,0,0);return t===r.ALREADY_SIGNALED||t===r.CONDITION_SATISFIED},e=s}else u().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(e=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(e,u().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:e,isFencePassed:n}}downloadMatrixFromPackedTexture(t,e,n){return this.downloadMatrixDriver(t,()=>function(t,e,n){const r=new Float32Array(e*n*4);return tb(t,()=>t.readPixels(0,0,n,e,t.RGBA,t.FLOAT,r)),r}(this.gl,e,n))}createProgram(t){this.throwIfDisposed();const e=this.gl,n=rb(e,t),r=Vx(e),s=function(t){return hb(t,()=>t.createProgram(),"Unable to create WebGLProgram.")}(e);return tb(e,()=>e.attachShader(s,r)),tb(e,()=>e.attachShader(s,n)),function(t,e){if(tb(t,()=>t.linkProgram(e)),!1===t.getProgramParameter(e,t.LINK_STATUS))throw console.log(t.getProgramInfoLog(e)),new Error("Failed to link vertex and fragment shaders.")}(e,s),this.debug&&ab(e,s),this.vertexAttrsAreBound||(this.setProgram(s),this.vertexAttrsAreBound=function(t,e,n){return tb(t,()=>t.bindBuffer(t.ARRAY_BUFFER,n)),ib(t,e,"clipSpacePos",n,3,20,0)&&ib(t,e,"uv",n,2,20,12)}(e,this.program,this.vertexBuffer)),s}deleteProgram(t){this.throwIfDisposed(),t===this.program&&(this.program=null),null!=t&&tb(this.gl,()=>this.gl.deleteProgram(t))}setProgram(t){this.throwIfDisposed(),this.program=t,null!=this.program&&this.debug&&ab(this.gl,this.program),tb(this.gl,()=>this.gl.useProgram(t))}getUniformLocation(t,e,n=!0){return this.throwIfDisposed(),n?function(t,e,n){return hb(t,()=>t.getUniformLocation(e,n),'uniform "'+n+'" not present in program.')}(this.gl,t,e):function(t,e,n){return t.getUniformLocation(e,n)}(this.gl,t,e)}getAttributeLocation(t,e){return this.throwIfDisposed(),tb(this.gl,()=>this.gl.getAttribLocation(t,e))}getUniformLocationNoThrow(t,e){return this.throwIfDisposed(),this.gl.getUniformLocation(t,e)}setInputMatrixTexture(t,e,n){this.throwIfDisposed(),this.throwIfNoProgram(),function(t,e,n,r){tb(t,()=>ob(t,e,r)),tb(t,()=>t.uniform1i(n,r))}(this.gl,t,e,n)}setOutputMatrixTexture(t,e,n){this.setOutputMatrixTextureDriver(t,n,e)}setOutputPackedMatrixTexture(t,e,n){this.throwIfDisposed();const[r,s]=Zy(e,n);this.setOutputMatrixTextureDriver(t,r,s)}setOutputMatrixWriteRegion(t,e,n,r){this.setOutputMatrixWriteRegionDriver(n,t,r,e)}setOutputPackedMatrixWriteRegion(t,e,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&ab(this.gl,this.program),cb(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const t=this.gl;this.debug&&this.debugValidate(),tb(t,()=>t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),tb(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=nb(this.gl,2===u().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===u().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const t=this.gl,e=this.getQueryTimerExtensionWebGL2(),n=t.createQuery();return t.beginQuery(e.TIME_ELAPSED_EXT,n),n}const t=this.getQueryTimerExtensionWebGL1(),e=t.createQueryEXT();return t.beginQueryEXT(t.TIME_ELAPSED_EXT,e),e}endQuery(){if(2===u().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const t=this.gl,e=this.getQueryTimerExtensionWebGL2();return void t.endQuery(e.TIME_ELAPSED_EXT)}const t=this.getQueryTimerExtensionWebGL1();t.endQueryEXT(t.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(t){return await O(()=>this.disposed||this.isQueryAvailable(t,u().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),this.getQueryTime(t,u().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(t,e){if(0===e)return null;if(2===e){const e=this.gl;return e.getQueryParameter(t,e.QUERY_RESULT)/1e6}{const e=this.getQueryTimerExtensionWebGL1();return e.getQueryObjectEXT(t,e.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(t,e){if(0===e)return!0;if(2===e){const e=this.gl,n=this.getQueryTimerExtensionWebGL2(),r=e.getQueryParameter(t,e.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),r&&!this.disjoint}{const e=this.getQueryTimerExtensionWebGL1(),n=e.getQueryObjectEXT(t,e.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(e.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(t){return new Promise(e=>{this.addItemToPoll(()=>t.isFencePassed(),()=>e())})}pollItems(){const t=function(t){let e=0;for(;e<t.length;++e){if(!t[e]())break}return e-1}(this.itemsToPoll.map(t=>t.isDoneFn));for(let e=0;e<=t;++e){const{resolveFn:t}=this.itemsToPoll[e];t()}this.itemsToPoll=this.itemsToPoll.slice(t+1)}addItemToPoll(t,e){this.itemsToPoll.push({isDoneFn:t,resolveFn:e}),this.itemsToPoll.length>1||O(()=>(this.pollItems(),0===this.itemsToPoll.length))}bindTextureToFrameBuffer(t){this.throwIfDisposed(),ub(this.gl,t,this.framebuffer),this.debug&&cb(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(ub(this.gl,this.outputTexture,this.framebuffer),this.debug&&cb(this.gl)):lb(this.gl,this.framebuffer)}downloadMatrixDriver(t,e){this.bindTextureToFrameBuffer(t);const n=e();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(t,e,n){this.throwIfDisposed();const r=this.gl;ub(r,t,this.framebuffer),this.debug&&cb(r),this.outputTexture=t,tb(r,()=>r.viewport(0,0,e,n)),tb(r,()=>r.scissor(0,0,e,n))}setOutputMatrixWriteRegionDriver(t,e,n,r){this.throwIfDisposed(),tb(this.gl,()=>this.gl.scissor(t,e,n,r))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}function Qx(t,e){if(t.length!==e.length)throw Error(`Binary was compiled with ${t.length} inputs, but was executed with ${e.length} inputs`);t.forEach((t,n)=>{const r=t.logicalShape,s=e[n],a=s.shape;if(!R(r,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${a} must match`);if(t.isUniform&&s.isUniform)return;const i=t.texShape,o=s.isUniform?null:s.texData.texShape;if(!R(i,o))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${o} must match`)})}class tw{constructor(t,e,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;const{filterWidth:r,inChannels:s,strideWidth:a,strideHeight:i,padInfo:o,outWidth:u,dilationWidth:l,dilationHeight:c,dataFormat:h}=n,{left:p,top:d}=o,f=s*r,m=Tb(),g="channelsLast"===h,y=g?0:1,b=g?1:2;let x="";for(let n=0;n<=1;n++)for(let r=0;r<=1;r++)x+=`\n          blockIndex = rc.y + ${r};\n          pos = rc.x + ${n};\n\n          if(blockIndex < ${t[1]} && pos < ${t[0]}) {\n            offsetY = int(blockIndex / (${u})) * ${i} - ${d};\n            d0 = offsetY + ${c} * (pos / ${f});\n\n            if(d0 < ${e[y]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${u}.) * ${a}. - ${p}.);\n              d1 = offsetX + ${l} * (int(mod(float(pos), ${f}.) / ${s}.));\n\n              if(d1 < ${e[b]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${s}.));\n\n                if (${g}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*n+r}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*n+r}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${x}\n\n        ${m.output} = result;\n      }\n    `}}class ew{constructor(t,e,n,r,s){this.variableNames=["x"],this.outputShape=[];const a=e,i=t[3]-1;let o;this.outputShape=t;const u=`float(${n}) + float(${r}) * sum`;o=.5===s?`inversesqrt(${u})`:1===s?`1.0/(${u})`:`exp(log(${u}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${o};\n        setOutput(val);\n      }\n    `}}class nw{constructor(t,e,n,r,s){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=t,this.depth=t[3],this.depthRadius=e,this.bias=n,this.alpha=r,this.beta=s,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${e})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${e} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${s})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${s});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}class rw{constructor(t,e,n,r,s){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=e,i=t[3]-1;let o;this.outputShape=t;const u=`float(${n}) + float(${r}) * sum`;o=.5===s?`inversesqrt(${u})`:1===s?`1.0/(${u})`:`exp(log(${u}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${o};\n        setOutput(result);\n      }\n    `}}class sw{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const e=t.strideHeight,n=t.strideWidth,r=t.dilationHeight,s=t.effectiveFilterHeight,a=t.effectiveFilterWidth,i=s-1-t.padInfo.top,o=a-1-t.padInfo.left,u=s*a-1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${s};\n          wR += ${r}) {\n          float dyR = float(dyRCorner + wR) / ${e}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${u} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${a} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class aw{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const e=t.strideDepth,n=t.strideHeight,r=t.strideWidth,s=t.dilationDepth,a=t.dilationHeight,i=t.dilationWidth,o=t.effectiveFilterDepth,u=t.effectiveFilterHeight,l=t.effectiveFilterWidth,c=o-1-t.padInfo.front,h=u-1-t.padInfo.top,p=l-1-t.padInfo.left,d=o*u*l-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${h}, ${p});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${o};\n           wD += ${s}) {\n          float dyD = float(dyDCorner + wD) / ${e}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${u};\n              wR += ${a}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${l};\n                wC += ${i}) {\n              float dyC = float(dyCCorner + wC) / ${r}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${d} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${u} * ${l} +\n                  wR * ${l} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class iw{constructor(t,e,n=!1,r=!1,s=!1,a=null,i=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;const o=n?t[1]:t[2],u=Math.ceil(o/2),l=n?"i * 2, rc.y":"rc.y, i * 2",c=r?"rc.z, i * 2":"i * 2, rc.z",h=n?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],p=r?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let d="",f="";a&&(d=i?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${a}\n        }`:`vec4 activation(vec4 x) {\n          ${a}\n        }`,f="result = activation(result);");const m=s?"result += getBiasAtOutCoords();":"";s&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${d}\n\n      const float sharedDimension = ${u}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${u}; i++) {\n          vec4 a = getMatrixA(rc.x, ${l});\n          vec4 b = getMatrixB(rc.x, ${c});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${h[0]} * ${p[0]});\n          result += (${h[1]} * ${p[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${m}\n\n        ${f}\n\n        setOutput(result);\n      }\n    `}}class ow{constructor(t,e,n){this.variableNames=["probs"],this.outputShape=[t,n],this.userCode=`\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${e-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${e-1}));\n      }\n    `}getCustomSetupFunc(t){return(e,n)=>{null==this.seedLoc&&(this.seedLoc=e.getUniformLocation(n,"seed")),e.gl.uniform1f(this.seedLoc,t)}}}class uw{constructor(t,e,n,r){this.variableNames=["indices"],this.outputShape=[t,e],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}class lw{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=t;const e=t.length;if(0===e)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const n=Eb("rc",e),r=Gb(e),s=function(t,e,n){if(1===t)return"rc > "+e[0];let r="";for(let s=t-2;s<t;s++)r+=`${n[s]} >= ${e[s]}`,s<t-1&&(r+="||");return r}(e,t,n),a=function(t,e,n,r){if(1===t)return"";const s=r.slice(-2);return`\n    int r = ${s[0]};\n    int c = ${s[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${e};\n    bool rEdge = rp1 >= ${n};\n  `}(e,t[t.length-1],t[t.length-2],n),i=function(t,e){const n=t.length,r=function(t,e){const n=[];for(let r=0;r<=1;r++)for(let s=0;s<=1;s++){let a=`${0===r?"r":"rp1"}, ${0===s?"c":"cp1"}`;for(let n=2;n<t;n++)a=e[e.length-1-n]+","+a;n.push(a)}return n}(n,e);if(1===n)return`getA(rc),\n            rc + 1 >= ${t[0]} ? 0. : getA(rc + 1),\n            0, 0`;return`getA(${r[0]}),\n          cEdge ? 0. : getA(${r[1]}),\n          rEdge ? 0. : getA(${r[2]}),\n          rEdge || cEdge ? 0. : getA(${r[3]})`}(t,n);this.userCode=`\n        void main() {\n          ${r} rc = getOutputCoords();\n\n          if(${s}) {\n            setOutput(vec4(0));\n          } else {\n            ${a}\n\n            setOutput(vec4(${i}));\n          }\n        }\n      `}}}class cw{constructor(t,e,n){this.variableNames=["x"],this.outputShape=e.map((e,n)=>e[0]+t[n]+e[1]);const r=t.length,s=Gb(r),a=e.map(t=>t[0]).join(","),i=e.map((e,n)=>e[0]+t[n]).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${s} start = ${s}(${a});\n      ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(${n}));\n        } else {\n          ${s} coords = outC - start;\n          setOutput(getX(${o}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(${n}));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class hw{constructor(t,e,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map((e,n)=>e[0]+t[n]+e[1]);const r=t.length,s=Gb(r),a=e.map(t=>t[0]).join(","),i=e.map((e,n)=>e[0]+t[n]).join(","),o=Eb("rc",r),u=Eb("source",r),l=`${o[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${u.slice(-2).join()})`,h=[s+" rc = outputLoc;",`${o[r-1]} += 1;\n       if(${l}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${o[r-2]} += 1;\n       if(${o[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${o[r-1]} += 1;\n         if(${l}) {`],p=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let d="";for(let t=0,e=1===r?2:4;t<e;t++)d+=`\n        ${h[t]}\n        if (${p}) {\n          result[${t}] = float(${n});\n        } else {\n          ${s} source = rc - start;\n          result[${t}] = getChannel(getX(${u.join()}), ${c});\n        }\n      `;d+=1===r?"} ":"}}",this.userCode=`\n      const ${s} start = ${s}(${a});\n      const ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}}class pw{constructor(t,e,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");const a=t.filterWidth,i=t.strideHeight,o=t.strideWidth,u=t.dilationHeight,l=t.dilationWidth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,p=t.padInfo.top,d=t.padInfo.left;this.outputShape=t.outShape;const f="avg"===e,m=`((batch  * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + d`,g=`(xR * ${t.inWidth} + xC) * ${t.inChannels} + d`;let y="0.0";if(f||(y="-1.0 / 1e-20"),n){const e=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${o});\n        const ivec2 pads = ivec2(${p}, ${d});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${u}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${l}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${e} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?s?m:g:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(b="avgValue / count");const x=4*Math.floor(a/4),w=a%4,v=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${p}, ${d});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${u}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC += 4) {\n            int xC = xCCorner + wC * ${l};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              getValue(batch, xR, xC + 3 * ${l}, d)\n            );\n\n            ${v}\n          }\n\n          int xC = xCCorner + ${x};\n          if (${1===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${2===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${3===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              initializationValue\n            );\n\n            ${v}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class dw{constructor(t,e,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");const a=t.filterWidth,i=t.strideDepth,o=t.strideHeight,u=t.strideWidth,l=t.dilationDepth,c=t.dilationHeight,h=t.dilationWidth,p=t.effectiveFilterDepth,d=t.effectiveFilterHeight,f=t.effectiveFilterWidth,m=t.padInfo.front,g=t.padInfo.top,y=t.padInfo.left;this.outputShape=t.outShape;const b="avg"===e;let x="0.0";if(b||(x="-1.0 / 1e-20"),n){const e=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${o}, ${u});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${l}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${d};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${e} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r?s?`(((batch * ${t.inDepth} + xD) * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`((xD * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`wD * ${d} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let w=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(w="avgValue / count");const v=4*Math.floor(a/4),k=a%4,N=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${o}, ${u});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${l}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${v}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${N}\n            }\n\n            int xC = xCCorner + ${v};\n            if (${1===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${N}\n            } else if (${2===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${N}\n            } else if (${3===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${N}\n            }\n          }\n          setOutput(${w});\n        }\n      }\n    `}}class fw{constructor(t,e){this.variableNames=["x"];const n=t.windowSize,r=t.batchSize,s=t.inSize,a=Math.ceil(s/n);this.outputShape=[r,a];let i="0.0",o="";"prod"===e?i="1.0":"min"===e?(i="1.0 / 1e-20",o="min"):"max"===e&&(i="-1.0 / 1e-20",o="max");let u=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===e?u="sumValue":"prod"===e?u="prodValue":"all"===e?u="allValue":"any"===e&&(u="anyValue");const l=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===e}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===e}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${o}(values, minMaxValue);\n      }\n    `,p="vec4";"all"===e?(i="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===e&&(i="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let d="";s%n>0&&(d=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${d}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${l}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${l};\n        if (${1===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${u});\n      }\n    `}}class mw{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;let n="";for(let t=0;t<4;t++){let e="thisRC = rc;";t%2==1&&(e+="thisRC.z += 1;"),t>1&&(e+="thisRC.y += 1;"),n+=`\n        ${e}\n        ${t>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${t}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${t>0?"}":""}\n      `}var r;this.userCode=`\n      ${r=e,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${Rb(["r","c","d"],r)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${$b(t)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${t[1]};\n        int cols = ${t[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class gw{constructor(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e.shape;const[,r,s]=e.shape,[,a,i]=t.shape,o=[n&&a>1?r-1:r,n&&i>1?s-1:s],u=[n&&a>1?a-1:a,n&&i>1?i-1:i],l=o[0]/u[0],c=o[1]/u[1],h=1/l,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${s-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}class yw{constructor(t,e,n,r){this.variableNames=["A"],this.outputShape=[];const[s,a,i,o]=t;this.outputShape=[s,e,n,o];const u=[r&&e>1?a-1:a,r&&n>1?i-1:i],l=[r&&e>1?e-1:e,r&&n>1?n-1:n];this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/l[0]},\n          ${u[1]/l[1]});\n      const vec2 inputShapeRC = vec2(${a}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class bw{constructor(t,e,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[s,a,i,o]=t;this.outputShape=[s,e,n,o];const u=[r&&e>1?a-1:a,r&&n>1?i-1:i],l=[r&&e>1?e-1:e,r&&n>1?n-1:n];this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/l[0]},\n          ${u[1]/l[1]},\n          ${u[1]/l[1]});\n      const vec3 inputShapeRC = vec3(${a}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${o-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}class xw{constructor(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e.shape;const[,r,s]=e.shape,[,a,i]=t.shape,o=[n&&a>1?r-1:r,n&&i>1?s-1:s],u=[n&&a>1?a-1:a,n&&i>1?i-1:i],l=o[0]/u[0],c=o[1]/u[1],h=1/l,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${o[0]}) *\n                (float(dyR) / float(${u[0]}));\n\n            float sourceFracCol =\n                float(${o[1]}) *\n                  (float(dyC) / float(${u[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}class ww{constructor(t,e,n,r){this.variableNames=["A"],this.outputShape=[];const[s,a,i,o]=t;this.outputShape=[s,e,n,o];const u=[r&&e>1?a-1:a,r&&n>1?i-1:i],l=[r&&e>1?e-1:e,r&&n>1?n-1:n],c=r?"0.5":"0.0";this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/l[0]},\n          ${u[1]/l[1]});\n      const vec2 inputShapeRC = vec2(${a}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${c})));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class vw{constructor(t,e){this.variableNames=["x"];const n=t.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=t,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${t[0]} - coord - 1));\n        }\n      `);const r=t.map((n,r)=>(n=>-1!==e.indexOf(n)&&1!==t[n]?`${t[n]} - coords[${n}] - 1`:`coords[${n}]`)(r)).join(","),s=Gb(n);this.userCode=`\n      void main() {\n        ${s} coords = getOutputCoords();\n        setOutput(getX(${r}));\n      }\n    `}}class kw{constructor(t,e){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=t.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=t;const r=Eb("rc",n),s=`${r[n-1]} + 1 < ${this.outputShape[n-1]}`,a=`${r[n-2]} + 1 < ${this.outputShape[n-2]}`,i=Gb(n);function o(n){const r=t.map((r,s)=>function(n,r){return-1!==e.indexOf(n)&&1!==t[n]?`${t[n]} - ${r[n]} - 1`:""+r[n]}(s,n));return`getChannel(getX(${r.join(",")}), vec2(${r.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${t[0]} - rc - 1),\n            ${t[0]} - rc - 1);\n          if(${s}){\n              result.g = getChannel(getX(${t[0]} - (rc  + 1) - 1),\n                ${t[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(t){return o(t)}(r.slice())};\n          if(${s}){\n            result.g = ${function(t){return t[n-1]="("+t[n-1]+" + 1)",o(t)}(r.slice())};\n          }\n          if(${a}) {\n            result.b = ${function(t){return t[n-2]="("+t[n-2]+" + 1)",o(t)}(r.slice())};\n            if(${s}) {\n              result.a = ${function(t){return t[n-1]="("+t[n-1]+" + 1)",t[n-2]="("+t[n-2]+" + 1)",o(t)}(r.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}class Nw{constructor(t,e,n,r,s,a,i=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const o=Gb(s.length),u=Gb(a.length);let l="";1===n?l="i":2===n&&(l="i, j");const c=`getIndices(${l})`;let h="";1===r?h="i":2===r&&(h="i, coords[1]");const p=`getUpdates(${h})`,d=e>1?"strides[j]":"strides";this.userCode=`\n        ${o} strides = ${o}(${s});\n\n        void main() {\n          ${u} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${t}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${e}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${d};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${p};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}class Iw{constructor(t,e){this.variableNames=["x","segmentIds"];const n=t.windowSize,r=t.batchSize,s=t.inSize,a=t.numSegments,i=a*Math.ceil(s/n);this.outputShape=[r,i];const o=4*Math.floor(n/4),u=n%4,l="\n        sumValue += dot(values, segFilter);\n    ";let c="";s%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `);let h="";s%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${l}\n        } else if (${2===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${l}\n        } else if (${3===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}class Sw{constructor(t,e,n){let r,s;if(this.variableNames=["c","a","b"],this.outputShape=e,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)s="resRC",r="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],i=[];for(let r=0;r<e.length;r++)i.push(""+n[r]),r<t&&a.push(""+n[r]);r=a.join(),s=i.join()}const a=Gb(n);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${s}));\n        } else {\n          setOutput(getB(${s}));\n        }\n      }\n    `}}class Cw{constructor(t){this.variableNames=["source"],this.outputShape=t,this.rank=t.length;const e=Gb(this.rank),n=`uniform int start[${this.rank}];`,r=function(t){if(1===t)return"sourceLoc";if(t<=6)return Aw.slice(0,t).map(t=>"sourceLoc."+t).join(",");throw Error(`Slicing for rank ${t} is not yet supported`)}(this.rank);let s;s=`\n        ${e} sourceLoc;\n        ${e} coords = getOutputCoords();\n        ${t.map((t,e)=>`sourceLoc.${Aw[e]} = start[${e}] + coords.${Aw[e]};`).join("\n")}\n      `,this.userCode=`\n      ${n}\n      void main() {\n        ${s}\n        setOutput(getSource(${r}));\n      }\n    `}getCustomSetupFunc(t){if(t.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${t.length})`);return(e,n)=>{null==this.startLoc&&(this.startLoc=e.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||e.gl.uniform1iv(this.startLoc,t)}}}const Aw=["x","y","z","w","u","v"];class Ew{constructor(t){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.rank=t.length;const e=Gb(this.rank),n=Eb("coords",this.rank),r=Eb("sourceLoc",this.rank),s=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,a=`getChannel(getSource(${r.join()}), ${s})`,i=`\n      result.x = ${a};\n      if (++${n[this.rank-1]} < ${t[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${a};\n        --${r[this.rank-1]};\n      }\n    `,o=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${t[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${a};\n        if (++${n[this.rank-1]} < ${t[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,u=this.rank<=4?`sourceLoc = coords +\n            ${e}(${t.map((t,e)=>`start[${e}]`).join()});`:t.map((t,e)=>`${r[e]} = ${n[e]} + start[${e}];`).join("\n");this.userCode=`\n      uniform int start[${this.rank}];\n      void main() {\n        ${e} coords = getOutputCoords();\n        ${e} sourceLoc;\n        ${u}\n        vec4 result = vec4(0.);\n        ${i}\n        ${o}\n        setOutput(result);\n      }\n    `}getCustomSetupFunc(t){if(t.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${t.length})`);return(e,n)=>{null==this.startLoc&&(this.startLoc=e.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||e.gl.uniform1iv(this.startLoc,t)}}}class Tw{constructor(t,e,n){this.variableNames=["x"],this.outputShape=n;const r=n.length,s=Gb(n.length),a=Gb(n.length);let i="";if(1===r)i="coords * strides + begin";else{let t=0;i=n.map((e,r)=>(t++,1===n.length?`coords * strides[${r}] + begin[${r}]`:`coords[${t-1}] * strides[${r}] + begin[${r}]`)).join(",")}this.userCode=`\n      ${s} begin = ${s}(${t});\n      ${s} strides = ${s}(${e});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}class Rw{constructor(t){this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(t,e,n){const r=_w(e,n),s=Dw(t,r,n);s in this.freeTextures||(this.freeTextures[s]=[]),s in this.usedTextures||(this.usedTextures[s]=[]);const a=$w(t,r,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[s].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const t=this.freeTextures[s].shift();return this.usedTextures[s].push(t),t}let i;return r===Xy.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(t[0],t[1]):r===Xy.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(t[0],t[1]):r===Xy.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(t[0],t[1]):r===Xy.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(t[0],t[1]):r===Xy.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(t[0],t[1])),this.usedTextures[s].push(i),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),i}releaseTexture(t,e,n,r){if(null==this.freeTextures)return;const s=_w(n,r),a=Dw(e,s,r);a in this.freeTextures||(this.freeTextures[a]=[]);const i=$w(e,s,this.gpgpu.gl,this.gpgpu.textureConfig,r),o=u().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==o&&this._numBytesAllocated>o?(this.gpgpu.deleteMatrixTexture(t),this._numBytesAllocated-=i):(this.freeTextures[a].push(t),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const l=this.usedTextures[a],c=l.indexOf(t);if(c<0)throw new Error("Cannot release a texture that was never provided by this texture manager");l.splice(c,1),this.log()}log(){if(!this.logEnabled)return;const t=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${t})`);const e=this._numBytesFree/this._numBytesAllocated;console.log("Bytes allocated: "+this._numBytesAllocated),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*e)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const t in this.freeTextures)this.freeTextures[t].forEach(t=>{this.gpgpu.deleteMatrixTexture(t)});for(const t in this.usedTextures)this.usedTextures[t].forEach(t=>{this.gpgpu.deleteMatrixTexture(t)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function $w(t,e,n,r,s){const a=function(t,e){switch(t){case Xy.PACKED_2X2_FLOAT32:return Xx(e);case Xy.PACKED_2X2_FLOAT16:return Yx(e);case Xy.UNPACKED_FLOAT32:return qx(e);case Xy.UNPACKED_FLOAT16:return jx(e);case Xy.PACKED_4X1_UNSIGNED_BYTE:return Kx(e);default:throw new Error("Unknown physical texture type "+t)}}(e,r);let i;if(s){const[e,n]=Zy(t[0],t[1]);i=e*n}else{const[e,n]=Yy(t[0],t[1]);i=e*n}return i*function(t,e){const n=t;if(e===n.R32F)return 4;if(e===n.R16F)return 2;if(e===n.RGBA32F)return 16;if(e===t.RGBA)return 16;if(e===n.RGBA16F)return 8;throw new Error("Unknown internal format "+e)}(n,a)}function _w(t,e){if(t===Ky.UPLOAD)return Xy.PACKED_2X2_FLOAT32;if(t===Ky.RENDER||null==t)return function(t){return u().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?t?Xy.PACKED_2X2_FLOAT32:Xy.UNPACKED_FLOAT32:t?Xy.PACKED_2X2_FLOAT16:Xy.UNPACKED_FLOAT16}(e);if(t===Ky.DOWNLOAD||t===Ky.PIXELS)return Xy.PACKED_4X1_UNSIGNED_BYTE;throw new Error("Unknown logical texture type "+t)}function Dw(t,e,n){return`${t[0]}_${t[1]}_${e}_${n}`}class Fw{constructor(t,e){this.variableNames=["A"];const n=new Array(t.length);for(let r=0;r<n.length;r++)n[r]=t[r]*e[r];this.outputShape=n,this.rank=n.length;const r=Gb(this.rank),s=function(t){const e=t.length;if(e>5)throw Error(`Tile for rank ${e} is not yet supported`);if(1===e)return`imod(resRC, ${t[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[];for(let e=0;e<t.length;e++)r.push(`imod(${n[e]}, ${t[e]})`);return r.join()}(t);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${s}));\n      }\n    `}}class Ow{constructor(t,e){this.variableNames=["A"],this.outputShape=t,this.userCode=`\n      float unaryOperation(float x) {\n        ${e}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const Mw="if (isnan(x)) return x;",Lw="return abs(x);",zw=Mw+"\n  return (x < 0.0) ? 0.0 : x;\n",Bw=Mw+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",Pw="return (x >= 0.0) ? x : (exp(x) - 1.0);",Ww=`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = 1.7580993408473768;\n  float scale = ${Pr};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`;const Vw="return -x;",Uw="return ceil(x);",Gw="return floor(x);",Hw="return exp(x);",qw="return exp(x) - 1.0;",jw="return x;",Kw="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",Xw="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",Yw="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n";class Jw{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${e}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class Zw{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=t;const e=t.length,n=Eb("rc",e),r=Gb(e),s=function(t,e){if(1===t)return"rc";let n="";for(let r=0;r<t;r++)n+=e[r],r<t-1&&(n+=",");return n}(e,n),a=n.slice(-2),i=e<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${s});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const{segment_util:Qw}=Wc,tv=Vc,ev=Uc,nv=Gc,rv=Pu,sv={};function av(t,e=!1){if("linear"===t)return"return x;";if("relu"===t)return e?Kw:zw;if("elu"===t)return e?Yw:Pw;if("relu6"===t)return e?Xw:Bw;if("prelu"===t)return e?ix:sx;throw new Error(`Activation ${t} has not been implemented for the WebGL backend.`)}class iv extends jc{constructor(t){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.warnedAboutMemory=!1,this.warnedAboutCPUBackend=!1,this.pendingDeletes=0,this.disposed=!1,!u().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==t){const t=qy(u().getNumber("WEBGL_VERSION"));this.binaryCache=((e=u().getNumber("WEBGL_VERSION"))in sv||(sv[e]={}),sv[e]),this.gpgpu=new Zx(t),this.canvas=t.canvas,this.gpgpuCreatedLocally=!0}else this.gpgpu=t,this.binaryCache={},this.gpgpuCreatedLocally=!1,this.canvas=t.gl.canvas;var e;this.textureManager=new Rw(this.gpgpu),this.numMBBeforeWarning=null==u().global.screen?1024:u().global.screen.height*u().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new qc(this,si())}numDataIds(){return this.texData.numDataIds()+(this.cpuBackend?this.cpuBackend.numDataIds():0)-this.pendingDeletes}write(t,e,n){if((u().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||u().getBool("DEBUG"))&&this.checkNumericalProblems(t),"complex64"===n&&null!=t)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const r={};return this.texData.set(r,{shape:e,dtype:n,values:t,usage:Ky.UPLOAD}),r}move(t,e,n,r){if(u().getBool("DEBUG")&&this.checkNumericalProblems(e),"complex64"===r)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(t,{shape:n,dtype:r,values:e,usage:Ky.UPLOAD})}readSync(t){const e=this.texData.get(t),{values:n,dtype:r,complexTensors:s,slice:a,shape:i,isPacked:o}=e;if(null!=a){let e;e=o?new Jw(i,jw):new Ow(i,jw);const n=this.runWebGLProgram(e,[{dataId:t,shape:i,dtype:r}],r),s=this.readSync(n.dataId);return this.disposeData(n.dataId),s}if(null!=n)return this.convertAndCacheOnCPU(t);if("string"===r)return n;const u=null!=this.activeTimers;let l,c;if(u&&(l=at()),"complex64"===r){c=Rc(s.real.dataSync(),s.imag.dataSync())}else c=this.getValuesFromTexture(t);return u&&(this.downloadWaitMs+=at()-l),this.convertAndCacheOnCPU(t,c)}async read(t){if(this.pendingRead.has(t)){const e=this.pendingRead.get(t);return new Promise(t=>e.push(t))}const e=this.texData.get(t),{values:n,shape:r,slice:s,dtype:a,complexTensors:i,isPacked:o}=e;if(null!=s){let e;e=o?new Jw(r,jw):new Ow(r,jw);const n=this.runWebGLProgram(e,[{dataId:t,shape:r,dtype:a}],a),s=this.read(n.dataId);return this.disposeData(n.dataId),s}if(null!=n)return this.convertAndCacheOnCPU(t);if(!u().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===u().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let l,c,h=null;if("complex64"!==a&&u().get("WEBGL_BUFFER_SUPPORTED")){l=this.decode(t);const e=this.texData.get(l.dataId);h=this.gpgpu.createBufferFromTexture(e.texture,...Jy(r))}if(this.pendingRead.set(t,[]),"complex64"!==a&&await this.gpgpu.createAndWaitForFence(),"complex64"===a){const t=await Promise.all([i.real.data(),i.imag.data()]);c=Rc(t[0],t[1])}else if(null==h)c=this.getValuesFromTexture(t);else{const t=T(r);c=this.gpgpu.downloadFloat32MatrixFromBuffer(h,t)}null!=l&&this.disposeData(l.dataId);const p=this.convertAndCacheOnCPU(t,c),d=this.pendingRead.get(t);return this.pendingRead.delete(t),d.forEach(t=>t(p)),this.pendingDisposal.has(t)&&(this.pendingDisposal.delete(t),this.disposeData(t),this.pendingDeletes--),p}checkNumericalProblems(t){if(null!=t)for(let e=0;e<t.length;e++){const n=t[e];if(!eb(n)){if(u().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(t){const{shape:e,dtype:n,isPacked:r}=this.texData.get(t),s=T(e);if(u().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(t),r=this.texData.get(n.dataId),a=this.gpgpu.downloadMatrixFromPackedTexture(r.texture,...Jy(e)).subarray(0,s);return this.disposeData(n.dataId),a}const a=u().getBool("WEBGL_PACK")&&!0===r,i=a?fb(e):e,o=a?new Dx(i):new _x(i),l=this.runWebGLProgram(o,[{shape:i,dtype:n,dataId:t}],"float32"),c=this.texData.get(l.dataId),h=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(c.texture,c.texShape[0],c.texShape[1]).subarray(0,s);return this.disposeData(l.dataId),h}async time(t){const e=this.activeTimers,n=[];let r=!1;null==this.programTimersStack?(this.programTimersStack=n,r=!0):this.activeTimers.push(n),this.activeTimers=n,t();const s=E(this.activeTimers.map(t=>t.query)).filter(t=>null!=t),a=E(this.activeTimers.map(t=>t.name)).filter(t=>null!=t);this.activeTimers=e,r&&(this.programTimersStack=null);const i={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};if(u().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const t=await Promise.all(s);i.kernelMs=I(t),i.getExtraProfileInfo=()=>t.map((t,e)=>({name:a[e],ms:t})).map(t=>`${t.name}: ${t.ms}`).join(", ")}else i.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,i}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return u().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:at(),endMs:null}}endTimer(t){return u().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),t):(t.endMs=at(),t)}async getQueryTime(t){if(u().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(t);const e=t;return e.endMs-e.startMs}disposeData(t){if(this.pendingDisposal.has(t))return;if(this.pendingRead.has(t))return this.pendingDisposal.add(t),void this.pendingDeletes++;if(!this.texData.has(t))return;this.releaseGPUData(t);const{complexTensors:e}=this.texData.get(t);null!=e&&(e.real.dispose(),e.imag.dispose()),this.texData.delete(t)}releaseGPUData(t){const{texture:e,dtype:n,texShape:r,usage:s,isPacked:a,slice:i}=this.texData.get(t),o=i&&i.origDataId||t,u=this.dataRefCount.get(o);u>1?this.dataRefCount.set(o,u-1):(this.dataRefCount.delete(o),null!=e&&(this.numBytesInGPU-=this.computeBytes(r,n),this.textureManager.releaseTexture(e,r,s,a)));const l=this.texData.get(t);l.texture=null,l.texShape=null,l.isPacked=!1,l.slice=null}getTexture(t){return this.uploadToGPU(t),this.texData.get(t).texture}getDataInfo(t){return this.texData.get(t)}getCPUBackend(){return u().getBool("WEBGL_CPU_FORWARD")?(null==this.cpuBackend&&(this.cpuBackend=si().findBackend("cpu")),this.cpuBackend):null}shouldExecuteOnCPU(t,e=128){const n=this.getCPUBackend();return this.warnedAboutCPUBackend||null!=n||u().getBool("IS_TEST")||(console.warn("Your application contains ops that are small enough to be executed on the CPU backend, however the CPU backend cannot be found. Consider importing the CPU backend (@tensorflow/tfjs-backend-cpu) for better performance."),this.warnedAboutCPUBackend=!0),null!=n&&t.every(t=>null==this.texData.get(t.dataId).texture&&T(t.shape)<e)}getGPGPUContext(){return this.gpgpu}complex(t,e){const n=this.makeOutput(t.shape,"complex64");return this.texData.get(n.dataId).complexTensors={real:si().keep(t.clone()),imag:si().keep(e.clone())},n}real(t){return this.texData.get(t.dataId).complexTensors.real.clone()}imag(t){return this.texData.get(t.dataId).complexTensors.imag.clone()}slice(t,e,n){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.slice(t,e,n);if(0===T(n))return bs([],n,t.dtype);const{isPacked:r}=this.texData.get(t.dataId),s=is(t.shape,e,n);if(r||!s){const r=u().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Ew(n):new Cw(n),s=r.getCustomSetupFunc(e);return this.compileAndRun(r,[t],null,s)}return this.uploadToGPU(t.dataId),this.shallowSlice(t,e,n)}shallowSlice(t,e,n){const r=this.texData.get(t.dataId),s=this.makeOutput(n,t.dtype),a=this.texData.get(s.dataId);Object.assign(a,r),a.shape=n,a.dtype=t.dtype;let i=os(e,t.strides);r.slice&&(i+=r.slice.flatOffset),a.slice={flatOffset:i,origDataId:r.slice&&r.slice.origDataId||t.dataId};const o=this.dataRefCount.get(a.slice.origDataId)||1;return this.dataRefCount.set(a.slice.origDataId,o+1),s}stridedSlice(t,e,n,r){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.stridedSlice(t,e,n,r);const s=Jr(e,n,r);if(s.some(t=>0===t))return bs([],s);const a=new Tw(e,r,s);return this.compileAndRun(a,[t])}reverse(t,e){const n=u().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new kw(t.shape,e):new vw(t.shape,e);return this.compileAndRun(n,[t])}concat(t,e){if("complex64"===t[0].dtype){const n=t.map(t=>ao(t)),r=t.map(t=>so(t));return br(this.concat(n,e),this.concat(r,e))}if(this.shouldExecuteOnCPU(t))return this.cpuBackend.concat(t,e);if(1===t.length)return t[0];if(t.length>u().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const n=Math.floor(t.length/2),r=this.concat(t.slice(0,n),e),s=this.concat(t.slice(n),e);return this.concat([r,s],e)}if(u().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&t[0].rank>1){const n=new px(t.map(t=>t.shape),e);return this.compileAndRun(n,t)}const n=ys(t.map(t=>t.shape),e),r=t.map(t=>t.as2D(-1,T(t.shape.slice(e)))),s=new hx(r.map(t=>t.shape));return this.compileAndRun(s,r).reshape(n)}neg(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.neg(t);if(u().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Vw,t.dtype);const e=new Ow(t.shape,Vw);return this.compileAndRun(e,[t])}batchMatMul(t,e,n,r){const s=n?t.shape[2]:t.shape[1],a=r?e.shape[1]:e.shape[2],i=n?t.shape[1]:t.shape[2],[o,,]=t.shape;if((1===s||1===a)&&i>1e3){n&&(t=In(t,[0,2,1])),r&&(e=In(e,[0,2,1]));const s=1===a?t:t.as3D(o,i,1),u=1===a?2:1,l=1===a?e.as3D(o,1,i):e;return this.multiply(s,l).sum(u,!0)}const u=Tt(t.dtype,e.dtype),l=new iw(t.shape,[o,s,a],n,r);return this.compileAndRun(l,[t,e],u)}fusedBatchMatMul({a:t,b:e,transposeA:n,transposeB:r,bias:s,activation:a,preluActivationWeights:i}){const o=n?t.shape[2]:t.shape[1],u=r?e.shape[1]:e.shape[2],[l,,]=t.shape,c=Tt(t.dtype,e.dtype),h=null!=s,p=null!=i,d=a?av(a,!0):null,f=new iw(t.shape,[l,o,u],n,r,h,d,p),m=[t,e];return s&&m.push(s),i&&m.push(i),this.compileAndRun(f,m,c)}multiply(t,e){if("complex64"===t.dtype){const n=this.texData.get(t.dataId),r=this.texData.get(e.dataId),s=new tx(Zb,t.shape,e.shape),a=new tx(Qb,t.shape,e.shape),i=[this.makeComplexComponentTensorInfo(t,n.complexTensors.real),this.makeComplexComponentTensorInfo(t,n.complexTensors.imag),this.makeComplexComponentTensorInfo(e,r.complexTensors.real),this.makeComplexComponentTensorInfo(e,r.complexTensors.imag)],o=this.compileAndRun(s,i),u=this.compileAndRun(a,i),l=this.complex(o,u);return o.dispose(),u.dispose(),l}if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.multiply(t,e);if(u().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,rx,t.dtype);const n=new ax(rx,t.shape,e.shape);return this.compileAndRun(n,[t,e],t.dtype)}batchNorm(t,e,n,r,s,a){const i=[t,e,n];let o=null;null!=r&&(o=r.shape,i.push(r));let l=null;if(null!=s&&(l=s.shape,i.push(s)),u().getBool("WEBGL_PACK_NORMALIZATION")){const r=new Jb(t.shape,e.shape,n.shape,o,l,a);return this.compileAndRun(r,i)}const c=new Yb(t.shape,e.shape,n.shape,o,l,a);return this.compileAndRun(c,i)}localResponseNormalization4D(t,e,n,r,s){const a=u().getBool("WEBGL_PACK_NORMALIZATION")?new rw(t.shape,e,n,r,s):new ew(t.shape,e,n,r,s);return this.compileAndRun(a,[t])}LRNGrad(t,e,n,r,s,a,i){const o=new nw(e.shape,r,s,a,i);return this.compileAndRun(o,[e,n,t])}tile(t,e){if("string"===t.dtype){const n=this.readSync(t.dataId).map(t=>ut(t)),r=Fi(t.shape,t.dtype,n);return ev(r,e)}const n=new Fw(t.shape,e);return this.compileAndRun(n,[t])}pad(t,e,n){const r=u().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new hw(t.shape,e,n):new cw(t.shape,e,n);return this.compileAndRun(r,[t])}gather(t,e,n){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.gather(t,e,n);const r=new Px(t.shape,e.size,n);return this.compileAndRun(r,[t,e])}batchToSpaceND(t,e,n){S(t.rank<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");const r=e.reduce((t,e)=>t*e),s=Ic(t.shape,e,r),a=Sc(s.length,e.length),i=Cc(t.shape,e,r),o=Ac(n,e.length),u=Ec(i,n,e.length);return In(t.reshape(s),a).reshape(i).slice(o,u)}spaceToBatchND(t,e,n){S(t.rank<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");const r=e.reduce((t,e)=>t*e),s=[[0,0]];s.push(...n);for(let n=1+e.length;n<t.shape.length;++n)s.push([0,0]);const a=t.pad(s),i=Ic(a.shape,e,r,!1),o=Sc(i.length,e.length,!1),u=Cc(a.shape,e,r,!1),l=In(a.reshape(i),o);return we(l,u)}reduce(t,e,n){const r=t.shape[0],s=t.shape[1],a=Ms(s),i=new fw({windowSize:a,inSize:s,batchSize:r},e),o=this.compileAndRun(i,[t],n);return 1===o.shape[1]?o:this.reduce(o,e,n)}argReduce(t,e,n=null){let r=t.shape[0],s=t.shape[1];null!=n&&(r=n.shape[0],s=n.shape[1]);const a=Ms(s),i=new Cb({windowSize:a,inSize:s,batchSize:r},e,null==n),o=[t];null!=n&&o.push(n);const u=this.compileAndRun(i,o,"int32");return 1===u.shape[1]?u:this.argReduce(t,e,u)}argReducePacked(t,e,n=null){const r=null!=n?n.shape:t.shape,s=Ms(r[r.length-1]),a=new jb(r,s,e,null==n),i=null==n?[t]:[t,n],o=this.compileAndRun(a,i,"int32");return o.rank===t.rank?this.argReducePacked(t,e,o):o}sum(t,e){Se("sum",e,t.rank);const[n,r]=Ne(t.shape,e),s=T(r),a=t.as2D(-1,s),i=Rt(t.dtype);return this.reduce(a,"sum",i).reshape(n)}prod(t,e){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.prod(t,e);const[n,r]=Ne(t.shape,e),s=T(r),a=t.as2D(-1,s),i=Rt(t.dtype);return this.reduce(a,"prod",i).reshape(n)}unsortedSegmentSum(t,e,n){let r=0;const s=Ce([r],t.rank);let a=t;null!=s&&(a=In(t,s),r=Ee(1,t.rank)[0]);const i=Qw.computeOutShape(a.shape,r,n),o=T([a.shape[r]]),u=a.as2D(-1,o),l=Rt(t.dtype);let c=this.segOpCompute(u,"unsortedSegmentSum",e,l,n).reshape(i);return null!=s&&(c=In(c,Ae(s))),c}segOpCompute(t,e,n,r,s){const a=t.shape[0],i=t.shape[1],o=Qw.segOpComputeOptimalWindowSize(i,s),u=new Iw({windowSize:o,inSize:i,batchSize:a,numSegments:s},e),l=this.compileAndRun(u,[t,n],r);return l.shape[1]===s?l:(n=uu(0,s).tile([i/o]),this.segOpCompute(l,e,n,r,s))}argMinMaxReduce(t,e,n){const r=[e];if(Se("arg"+n.charAt(0).toUpperCase()+n.slice(1),r,t.rank),!u().getBool("WEBGL_PACK_REDUCE")||t.rank<=2){const[e,s]=Ne(t.shape,r),a=T(s),i=t.as2D(-1,a);return this.argReduce(i,n).reshape(e)}return this.argReducePacked(t,n)}argMin(t,e){return this.argMinMaxReduce(t,e,"min")}argMax(t,e){return this.argMinMaxReduce(t,e,"max")}cumsum(t,e,n,r){if(e!==t.rank-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${t.rank-1} but got axis=`+e);const s=t.shape[e];let a=t;for(let e=0;e<=Math.ceil(Math.log2(s))-1;e++){const n=new Sx(t.shape,!1,r),s=n.getCustomSetupFunc(e),i=a;a=this.compileAndRun(n,[a],a.dtype,s),i.dispose()}if(n){const e=new Sx(t.shape,n,r),s=a;a=this.compileAndRun(e,[a]),s.dispose()}return a}equal(t,e){if(u().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(equal(a, b));\n","bool");const n=new ax("return float(a == b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}notEqual(t,e){if(u().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(notEqual(a, b));\n","bool");const n=new ax("return float(a != b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}less(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.less(t,e);if(u().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(lessThan(a, b));\n","bool");const n=new ax("return float(a < b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}lessEqual(t,e){if(u().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(lessThanEqual(a, b));\n","bool");const n=new ax("return float(a <= b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}greater(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.greater(t,e);if(u().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(greaterThan(a, b));\n","bool");const n=new ax("return float(a > b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}greaterEqual(t,e){if(u().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(greaterThanEqual(a, b));\n","bool");const n=new ax("return float(a >= b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}logicalNot(t){const e=new Ow(t.shape,"return float(!(x >= 1.0));");return this.compileAndRun(e,[t])}logicalAnd(t,e){if(u().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n","bool");const n=new ax("return float(a >= 1.0 && b >= 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}logicalOr(t,e){if(u().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n","bool");const n=new ax("return float(a >= 1.0 || b >= 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}select(t,e,n){const r=new Sw(t.rank,e.shape,e.rank);return this.compileAndRun(r,[t,e,n],Tt(e.dtype,n.dtype))}where(t){Tc("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const e=t.dataSync();return rv(t.shape,e)}topk(t,e,n){const r=t.dataSync();return nv(r,t.shape,t.dtype,e)}min(t,e){Se("min",e,t.rank);const[n,r]=Ne(t.shape,e),s=T(r),a=t.as2D(-1,s);return this.reduce(a,"min",a.dtype).reshape(n)}minimum(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.minimum(t,e);const n=u().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ox("\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new ax("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",t.shape,e.shape);return this.compileAndRun(n,[t,e])}mod(t,e){const n=u().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ox("\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new ax("if (b == 0.0) return NAN;\n  return mod(a, b);",t.shape,e.shape);return this.compileAndRun(n,[t,e])}maximum(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.maximum(t,e);const n=u().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ox("\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new ax("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",t.shape,e.shape);return this.compileAndRun(n,[t,e])}all(t,e){Se("all",e,t.rank);const[n,r]=Ne(t.shape,e),s=T(r),a=t.as2D(-1,s);return this.reduce(a,"all",a.dtype).reshape(n)}any(t,e){Se("any",e,t.rank);const[n,r]=Ne(t.shape,e),s=T(r),a=t.as2D(-1,s);return this.reduce(a,"any",a.dtype).reshape(n)}floorDiv(t,e){if(u().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n","int32");const n=new ax("\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",t.shape,e.shape);return this.compileAndRun(n,[t,e],"int32")}add(t,e){if("complex64"===t.dtype&&"complex64"===e.dtype)return this.complexSeparableBinaryOp(t,e,ex);if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.add(t,e);const n=Tt(t.dtype,e.dtype);if(u().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,ex,n);const r=new ax(ex,t.shape,e.shape);return this.compileAndRun(r,[t,e],n)}packedUnaryOp(t,e,n){const r=new Jw(t.shape,e);return this.compileAndRun(r,[t],n)}packedBinaryOp(t,e,n,r,s=!1){const a=new ox(n,t.shape,e.shape,s);return this.compileAndRun(a,[t,e],r)}complexSeparableBinaryOp(t,e,n){const r=this.texData.get(t.dataId),s=this.texData.get(e.dataId),[a,i]=[[r.complexTensors.real,s.complexTensors.real],[r.complexTensors.imag,s.complexTensors.imag]].map(r=>{const[s,a]=r,i=this.makeComplexComponentTensorInfo(t,s),o=this.makeComplexComponentTensorInfo(e,a),u=new ax(n,t.shape,e.shape);return this.compileAndRun(u,[i,o],Tt(s.dtype,a.dtype))}),o=this.complex(a,i);return a.dispose(),i.dispose(),o}makeComplexComponentTensorInfo(t,e){return{dataId:e.dataId,dtype:e.dtype,shape:t.shape}}addN(t){if(1===t.length)return t[0];if(t.length>u().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const e=Math.floor(t.length/2),n=this.addN(t.slice(0,e)),r=this.addN(t.slice(e));return this.addN([n,r])}const e=t.map(t=>t.dtype).reduce((t,e)=>Tt(t,e)),n=t.map(t=>t.shape),r=u().getBool("WEBGL_PACK")?new Sb(t[0].shape,n):new Ib(t[0].shape,n);return this.compileAndRun(r,t,e)}subtract(t,e){if("complex64"===t.dtype&&"complex64"===e.dtype)return this.complexSeparableBinaryOp(t,e,nx);if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.subtract(t,e);const n=Tt(t.dtype,e.dtype);if(u().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,nx,t.dtype);const r=new ax(nx,t.shape,e.shape);return this.compileAndRun(r,[t,e],n)}pow(t,e){const n=u().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ox("\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new ax("\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nif (b == 0.0) {\n  return 1.0;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",t.shape,e.shape),r=Tt(t.dtype,e.dtype);return this.compileAndRun(n,[t,e],r)}ceil(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.ceil(t);if(u().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Uw,t.dtype);const e=new Ow(t.shape,Uw);return this.compileAndRun(e,[t])}floor(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.floor(t);if(u().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Gw,t.dtype);const e=new Ow(t.shape,Gw);return this.compileAndRun(e,[t])}sign(t){const e=new Ow(t.shape,"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n");return this.compileAndRun(e,[t])}isNaN(t){const e=new Ow(t.shape,"return float(isnan(x));");return this.compileAndRun(e,[t],"bool")}isInf(t){const e=new Ow(t.shape,"return float(isinf(x));");return this.compileAndRun(e,[t],"bool")}isFinite(t){const e=new Ow(t.shape,"return float(!isnan(x) && !isinf(x));");return this.compileAndRun(e,[t],"bool")}round(t){const e=new Ow(t.shape,"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n");return this.compileAndRun(e,[t])}exp(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.exp(t);if(u().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Hw,t.dtype);const e=new Ow(t.shape,Hw);return this.compileAndRun(e,[t])}expm1(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.expm1(t);if(u().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,qw,t.dtype);const e=new Ow(t.shape,qw);return this.compileAndRun(e,[t])}softmax(t,e){const n=L([e],t.shape),r=xo(t,n),s=Ie(r.shape,n),a=this.subtract(t,r.reshape(s)),i=this.exp(a),o=this.sum(i,n).reshape(s);return te(i,o)}log(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.log(t);if(u().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",t.dtype);const e=new Ow(t.shape,"if (x < 0.0) return NAN;\n  return log(x);");return this.compileAndRun(e,[t])}log1p(t){const e=new Ow(t.shape,"return log(1.0 + x);");return this.compileAndRun(e,[t])}sqrt(t){const e=new Ow(t.shape,"return sqrt(x);");return this.compileAndRun(e,[t])}rsqrt(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.rsqrt(t);const e=new Ow(t.shape,"return inversesqrt(x);");return this.compileAndRun(e,[t])}reciprocal(t){const e=new Ow(t.shape,"return 1.0 / x;");return this.compileAndRun(e,[t])}relu(t){let e;return e=u().getBool("WEBGL_PACK")?new Jw(t.shape,Kw):new Ow(t.shape,zw),this.compileAndRun(e,[t])}relu6(t){let e;return e=u().getBool("WEBGL_PACK")?new Jw(t.shape,Xw):new Ow(t.shape,Bw),this.compileAndRun(e,[t])}prelu(t,e){const n=u().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ox(ix,t.shape,e.shape):new ax(sx,t.shape,e.shape);return this.compileAndRun(n,[t,e])}elu(t){if(u().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Yw,t.dtype);const e=new Ow(t.shape,Pw);return this.compileAndRun(e,[t])}eluDer(t,e){const n=u().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ox("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",t.shape,e.shape):new ax("return (b >= 1.0) ? a : a * (b + 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e])}selu(t){const e=new Ow(t.shape,Ww);return this.compileAndRun(e,[t])}int(t){const e=new Ow(t.shape,"return float(int(x));");return this.compileAndRun(e,[t],"int32")}clip(t,e,n){let r;r=u().getBool("WEBGL_PACK_CLIP")?new lx(t.shape):new ux(t.shape);const s=r.getCustomSetupFunc(e,n);return this.compileAndRun(r,[t],null,s)}abs(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.abs(t);if(u().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Lw,t.dtype);const e=new Ow(t.shape,Lw);return this.compileAndRun(e,[t])}complexAbs(t){const e=this.texData.get(t.dataId),n=new cx(t.shape),r=[this.makeComplexComponentTensorInfo(t,e.complexTensors.real),this.makeComplexComponentTensorInfo(t,e.complexTensors.imag)];return this.compileAndRun(n,r)}sigmoid(t){const e=new Ow(t.shape,"return 1.0 / (1.0 + exp(-1.0 * x));");return this.compileAndRun(e,[t])}softplus(t){const e=new Ow(t.shape,"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n");return this.compileAndRun(e,[t])}sin(t){const e=new Ow(t.shape,"if (isnan(x)) return x;\n  return sin(x);\n");return this.compileAndRun(e,[t])}cos(t){const e=new Ow(t.shape,"if (isnan(x)) return x;\n  return cos(x);\n");return this.compileAndRun(e,[t])}tan(t){const e=new Ow(t.shape,"return tan(x);");return this.compileAndRun(e,[t])}asin(t){const e=new Ow(t.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n");return this.compileAndRun(e,[t])}acos(t){const e=new Ow(t.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n");return this.compileAndRun(e,[t])}atan(t){const e=new Ow(t.shape,"if (isnan(x)) return x;\n  return atan(x);\n");return this.compileAndRun(e,[t])}atan2(t,e){const n=u().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ox("\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new ax("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",t.shape,e.shape);return this.compileAndRun(n,[t,e])}sinh(t){const e=new Ow(t.shape,"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n");return this.compileAndRun(e,[t])}cosh(t){const e=new Ow(t.shape,"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n");return this.compileAndRun(e,[t])}tanh(t){const e=new Ow(t.shape,"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n");return this.compileAndRun(e,[t])}asinh(t){const e=new Ow(t.shape,"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));");return this.compileAndRun(e,[t])}acosh(t){const e=new Ow(t.shape,"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\n  return log(x + sqrt(x * x - 1.0));");return this.compileAndRun(e,[t])}atanh(t){const e=new Ow(t.shape,"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;");return this.compileAndRun(e,[t])}erf(t){const e=new Ow(t.shape,'\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = 0.3275911;\n  float a1 = 0.254829592;\n  float a2 = -0.284496736;\n  float a3 = 1.421413741;\n  float a4 = -1.453152027;\n  float a5 = 1.061405429;\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n');return this.compileAndRun(e,[t])}step(t,e){const n=new Ow(t.shape,function(t=0){return`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t});\n  `}(e));return this.compileAndRun(n,[t])}conv2dByMatMul(t,e,n,r,s,a){const i=t.shape,o=this.texData.get(t.dataId),l=n.inChannels,c=i[0]*i[1]*i[2],h=n.outChannels,p="channelsLast"===n.dataFormat,d=(1===c||1===h)&&l>1e3,f=i[2]%2!=0&&!!o.isPacked;if(d||!u().getBool("WEBGL_LAZILY_UNPACK")||!u().getBool("WEBGL_PACK_BINARY_OPERATIONS")||!f){const o=p?i[0]*i[1]*i[2]:i[0]*i[2]*i[3],u=this.reshape(t,[1,o,n.inChannels]),l=this.reshape(e,[1,n.inChannels,n.outChannels]);return this.reshape(this.fusedBatchMatMul({a:u,b:l,transposeA:!1,transposeB:!1,bias:r,activation:s,preluActivationWeights:a}),n.outShape)}const m=p?i[0]*i[1]*(i[2]+1):i[0]*i[2]*(i[3]+1),g={dataId:t.dataId,shape:[1,m,n.inChannels],dtype:t.dtype},y=o.shape;o.shape=o.shape.slice(),o.shape[o.shape.length-2]++,S(gb(o.shape,g.shape),()=>`packed reshape ${o.shape} to ${g.shape} isn't free`);const b=this.reshape(e,[1,n.inChannels,n.outChannels]),x=this.fusedBatchMatMul({a:g,b:b,transposeA:!1,transposeB:!1,bias:r,activation:s,preluActivationWeights:a}),w=this.texData.get(x.dataId);return S(w.isPacked,()=>"batchMatMul result is expected to be packed"),o.shape=y,w.shape=n.outShape,si().makeTensorFromDataId(x.dataId,n.outShape,x.dtype)}conv2dWithIm2Row(t,e,n,r,s,a){const{filterWidth:i,filterHeight:o,inChannels:u,outWidth:l,outHeight:c,dataFormat:h}=n,p="channelsLast"===h,d=i*o*u,f=c*l,m=[d,f],g=t.squeeze([0]),y=e.reshape([1,d,-1]),b=new tw(m,g.shape,n),x=this.compileAndRun(b,[g]).reshape([1,m[0],m[1]]),w=null!=r,v=null!=a,k=s?av(s,!0):null,N=new iw(x.shape,[1,f,n.outChannels],!0,!1,w,k,v),I=[x,y];r&&I.push(r),v&&I.push(a);const S=this.compileAndRun(N,I);return p?S.reshape([1,c,l,n.outChannels]):S.reshape([1,n.outChannels,c,l])}fusedConv2d({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){if(1===n.filterHeight&&1===n.filterWidth&&1===n.dilationHeight&&1===n.dilationWidth&&1===n.strideHeight&&1===n.strideWidth&&("SAME"===n.padInfo.type||"VALID"===n.padInfo.type))return this.conv2dByMatMul(t,e,n,r,s,a);if(u().getBool("WEBGL_CONV_IM2COL")&&1===t.shape[0])return this.conv2dWithIm2Row(t,e,n,r,s,a);const i=null!=r,o=null!=a,l=s?av(s,!1):null,c=new wx(n,i,l,o),h=[t,e];return r&&h.push(r),a&&h.push(a),this.compileAndRun(c,h)}conv2d(t,e,n){if(1===n.filterHeight&&1===n.filterWidth&&1===n.dilationHeight&&1===n.dilationWidth&&1===n.strideHeight&&1===n.strideWidth&&("SAME"===n.padInfo.type||"VALID"===n.padInfo.type))return this.conv2dByMatMul(t,e,n);if(u().getBool("WEBGL_CONV_IM2COL")&&1===t.shape[0])return this.conv2dWithIm2Row(t,e,n);const r=new wx(n);return this.compileAndRun(r,[t,e])}conv2dDerInput(t,e,n){const r=new mx(n);return this.compileAndRun(r,[t,e])}conv2dDerFilter(t,e,n){const r=new fx(n);return this.compileAndRun(r,[t,e])}fusedDepthwiseConv2D({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){const i=u().getBool("WEBGL_PACK_DEPTHWISECONV")&&n.strideWidth<=2&&n.outChannels/n.inChannels==1,o=s?av(s,i):null,l=[t,e],c=null!=r,h=null!=a;let p;return c&&l.push(r),h&&l.push(a),i?(p=new Nx(n,c,o,h),this.compileAndRun(p,l)):(p=new kx(n,c,o,h),this.compileAndRun(p,l))}depthwiseConv2D(t,e,n){let r;return u().getBool("WEBGL_PACK_DEPTHWISECONV")&&n.strideWidth<=2&&n.outChannels/n.inChannels==1?(r=new Nx(n),this.compileAndRun(r,[t,e])):(r=new kx(n),this.compileAndRun(r,[t,e]))}depthwiseConv2DDerInput(t,e,n){const r=new xx(n);return this.compileAndRun(r,[t,e])}depthwiseConv2DDerFilter(t,e,n){const r=new bx(n);return this.compileAndRun(r,[t,e])}conv3d(t,e,n){const r=new vx(n);return this.compileAndRun(r,[t,e])}conv3dDerInput(t,e,n){const r=new yx(n);return this.compileAndRun(r,[t,e])}conv3dDerFilter(t,e,n){const r=new gx(n);return this.compileAndRun(r,[t,e])}maxPool(t,e){const n=new pw(e,"max",!1);return this.compileAndRun(n,[t])}avgPool(t,e){const n=new pw(e,"avg",!1);return this.compileAndRun(n,[t],"float32")}maxPoolBackprop(t,e,n,r){const s=new pw(r,"max",!0),a=this.compileAndRun(s,[e]),i=new sw(r),o=this.compileAndRun(i,[t,a],e.dtype);return a.dispose(),o}avgPoolBackprop(t,e,n){const r=new Kb(n);return this.compileAndRun(r,[t],e.dtype)}cast(t,e){return zc(t,e,this)}unstack(t,e){const n=t.shape[e],r=new Array(t.rank-1);let s=0;for(let n=0;n<t.rank;n++)n!==e&&(r[s++]=t.shape[n]);const a=new Array(t.rank).fill(0),i=t.shape.slice();i[e]=1;const o=new Array(n);for(let n=0;n<o.length;n++)a[e]=n,o[n]=this.slice(t,a,i).reshape(r);return o}avgPool3d(t,e){const n=new dw(e,"avg",!1);return this.compileAndRun(n,[t],"float32")}avgPool3dBackprop(t,e,n){const r=new Xb(n);return this.compileAndRun(r,[t],e.dtype)}maxPool3d(t,e){const n=new dw(e,"max",!1);return this.compileAndRun(n,[t],"float32")}maxPool3dBackprop(t,e,n,r){const s=new dw(r,"max",!0),a=this.compileAndRun(s,[e]),i=new aw(r),o=this.compileAndRun(i,[t,a],e.dtype);return a.dispose(),o}reshape(t,e){const n=this.texData.get(t.dataId);if(n.isPacked&&!gb(t.shape,e)&&(null===n.texture||!gb(n.shape,e))){const n=this.packedReshape(t,e);return si().makeTensorFromDataId(n.dataId,n.shape,n.dtype)}return Bc(t,e)}resizeBilinear(t,e,n,r){const s=u().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new bw(t.shape,e,n,r):new yw(t.shape,e,n,r);return this.compileAndRun(s,[t],"float32")}resizeBilinearBackprop(t,e,n){const r=new gw(t,e,n);return this.compileAndRun(r,[t])}resizeNearestNeighbor(t,e,n,r){const s=new ww(t.shape,e,n,r);return this.compileAndRun(s,[t])}resizeNearestNeighborBackprop(t,e,n){const r=new xw(t,e,n);return this.compileAndRun(r,[t])}multinomial(t,e,n,r){const s=e?t:Cu(t),a=s.shape[0],i=s.shape[1],o=new ow(a,i,n),u=o.getCustomSetupFunc(r);return this.compileAndRun(o,[s],"int32",u)}oneHot(t,e,n,r){const s=new uw(t.size,e,n,r);return this.compileAndRun(s,[t])}diag(t){const e=new $x(t.size);return this.compileAndRun(e,[t])}cropAndResize(t,e,n,r,s,a){const i=new Ix(t.shape,e.shape,r,s,a);return this.compileAndRun(i,[t,e,n],"float32")}depthToSpace(t,e,n){S(e>1,()=>"blockSize should be > 1 for depthToSpace, but was: "+e);const r=t.shape[0],s="NHWC"===n?t.shape[1]:t.shape[2],a="NHWC"===n?t.shape[2]:t.shape[3],i="NHWC"===n?t.shape[3]:t.shape[1],o=s*e,u=a*e,l=i/(e*e),c=new Rx("NHWC"===n?[r,o,u,l]:[r,l,o,u],e,n);return this.compileAndRun(c,[t])}split(t,e,n){return tv(t,e,n)}scatterND(t,e,n){const{sliceRank:r,numUpdates:s,sliceSize:a,strides:i,outputSize:o}=ja(0,t,n),u=[o/a,a],l=t.reshape([s,r]),c=e.reshape([s,a]);if(0===o)return Bc(bs([]),n);const h=re(0),p=new Nw(s,r,l.rank,c.rank,i,u);return this.compileAndRun(p,[c,l,h]).reshape(n)}sparseToDense(t,e,n,r){const{sliceRank:s,numUpdates:a,strides:i,outputSize:o}=ja(0,t,n),u=new Nw(a,s,t.rank,e.rank,i,[o,1],!1);return this.compileAndRun(u,[e,t,r]).reshape(n)}fft(t){return this.fftImpl(t,!1)}ifft(t){return this.fftImpl(t,!0)}fftImpl(t,e){const n=this.texData.get(t.dataId),r=new zx(Mx,t.shape,e),s=new zx(Lx,t.shape,e),a=[this.makeComplexComponentTensorInfo(t,n.complexTensors.real),this.makeComplexComponentTensorInfo(t,n.complexTensors.imag)],i=this.compileAndRun(r,a),o=this.compileAndRun(s,a),u=this.complex(i,o).as2D(t.shape[0],t.shape[1]);return i.dispose(),o.dispose(),u}gatherND(t,e){const n=e.shape,r=n[n.length-1],[s,a,i,o]=Ua(t,e),u=e.reshape([a,r]),l=t.reshape([t.size/i,i]),c=new Wx(r,o,[a,i]);return this.compileAndRun(c,[l,u]).reshape(s)}fill(t,e,n){if("string"===(n=n||Y(e))){const r=P(n,T(t));return r.fill(e),si().makeTensor(r,t,n,this)}{const r=new Bx(t,e),s=r.getCustomSetupFunc(e);return this.compileAndRun(r,[],n,s)}}onesLike(t){if("string"===t.dtype)throw new Error("onesLike is not supported under string dtype");return this.fill(t.shape,1,t.dtype)}zerosLike(t){return this.fill(t.shape,"string"===t.dtype?"":0,t.dtype)}linspace(t,e,n){return Pc(t,e,n)}makeTensorInfo(t,e){const n=this.write(null,t,e);return this.texData.get(n).usage=null,{dataId:n,shape:t,dtype:e}}makeOutput(t,e){const{dataId:n}=this.makeTensorInfo(t,e);return si().makeTensorFromDataId(n,t,e,this)}unpackTensor(t){const e=new Zw(t.shape);return this.runWebGLProgram(e,[t],t.dtype)}packTensor(t){const e=new lw(t.shape);return this.runWebGLProgram(e,[t],t.dtype,null,!0)}packedReshape(t,e){const n=[pb(t.shape),...db(t.shape)],r={dtype:t.dtype,shape:n,dataId:t.dataId},s=[pb(e),...db(e)],a=new mw(s,n),i=this.runWebGLProgram(a,[r],t.dtype,null,!0);return{dataId:i.dataId,shape:e,dtype:i.dtype}}decode(t){const e=this.texData.get(t),{isPacked:n,shape:r,dtype:s}=e,a=fb(r);let i;i=n?new Tx(a):new Ex(a);return{dtype:s,shape:r,dataId:this.runWebGLProgram(i,[{shape:a,dtype:s,dataId:t}],s,null,!0).dataId}}runWebGLProgram(t,e,n,r,s=!1){const a=this.makeTensorInfo(t.outputShape,n),i=this.texData.get(a.dataId);if(t.packedOutput&&(i.isPacked=!0),t.outPackingScheme===jy.DENSE){const e=Jy(t.outputShape);i.texShape=e.map(t=>2*t)}if(null!=t.outTexUsage&&(i.usage=t.outTexUsage),0===T(a.shape))return i.values=B(a.dtype,0),a;const o=[],l=e.map(e=>{if("complex64"===e.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(e.dataId);if(null==n.texture){if(!t.packedInputs&&T(e.shape)<=u().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:e.shape,texData:null,isUniform:!0,uniformValues:n.values};t.packedInputs&&(n.isPacked=!0,n.shape=e.shape)}else if(!!n.isPacked!=!!t.packedInputs)e=n.isPacked?this.unpackTensor(e):this.packTensor(e),o.push(e),n=this.texData.get(e.dataId);else if(n.isPacked&&!gb(n.shape,e.shape)){const t=e,r=e.shape;e.shape=n.shape,e=this.packedReshape(e,r),o.push(e),n=this.texData.get(e.dataId),t.shape=r}return this.uploadToGPU(e.dataId),{shape:e.shape,texData:n,isUniform:!1}});this.uploadToGPU(a.dataId);const c={shape:a.shape,texData:i,isUniform:!1},h=function(t,e,n){let r="";e.concat(n).forEach(t=>{const e=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0,n=t.isUniform?"uniform":t.texData.texShape;r+=`${t.shape}_${n}_${e}`});const s=t.userCode;let a=t.constructor.name;return a+="_"+r+"_"+s,a}(t,l,c),p=this.getAndSaveBinary(h,()=>function(t,e,n,r){const s=e.userCode,a=n.map((t,n)=>{const r={logicalShape:t.shape,texShape:t.isUniform?null:t.texData.texShape,isUniform:t.isUniform,isPacked:!t.isUniform&&t.texData.isPacked,flatOffset:null};return null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0&&(r.flatOffset=t.texData.slice.flatOffset),{name:e.variableNames[n],shapeInfo:r}}),i=a.map(t=>t.shapeInfo),o={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},l=Fb(a,o,s,e.packedInputs),c=t.createProgram(l);let h=null;const p=t.getUniformLocation(c,"NAN",!1);1===u().getNumber("WEBGL_VERSION")&&(h=t.getUniformLocation(c,"INFINITY",!1));const d={};for(let n=0;n<e.variableNames.length;n++){const r=e.variableNames[n],s=!1;d[r]=t.getUniformLocation(c,r,s),d["offset"+r]=t.getUniformLocation(c,"offset"+r,s)}return{program:e,source:l,webGLProgram:c,uniformLocations:d,inShapeInfos:i,outShapeInfo:o,infLoc:h,nanLoc:p}}(this.gpgpu,t,l,c)),d=null!=this.activeTimers;let f;if(d&&(f=this.startTimer()),function(t,e,n,r,s){Qx(e.inShapeInfos,n),Qx([e.outShapeInfo],[r]);const a=r.texData.texture,i=r.texData.texShape;r.texData.isPacked?t.setOutputPackedMatrixTexture(a,i[0],i[1]):t.setOutputMatrixTexture(a,i[0],i[1]),t.setProgram(e.webGLProgram),1===u().getNumber("WEBGL_VERSION")&&null!==e.infLoc&&t.gl.uniform1f(e.infLoc,1/0),null!==e.nanLoc&&t.gl.uniform1f(e.nanLoc,NaN),n.forEach((n,r)=>{const s=e.program.variableNames[r],a=e.uniformLocations[s],i=e.uniformLocations["offset"+s];if(null!=a)if(n.isUniform)if(T(n.shape)<2)t.gl.uniform1f(a,n.uniformValues[0]);else{let e=n.uniformValues;e instanceof Float32Array||(e=new Float32Array(e)),t.gl.uniform1fv(a,e)}else null!=n.texData.slice&&null!=i&&t.gl.uniform1i(i,n.texData.slice.flatOffset),t.setInputMatrixTexture(n.texData.texture,a,r)}),null!=s&&s(t,e.webGLProgram),t.executeProgram()}(this.gpgpu,p,l,c,r),o.forEach(t=>this.disposeData(t.dataId)),d&&(f=this.endTimer(f),this.activeTimers.push({name:t.constructor.name,query:this.getQueryTime(f)})),!u().getBool("WEBGL_LAZILY_UNPACK")&&i.isPacked&&!1===s){const t=this.unpackTensor(a);return this.disposeData(a.dataId),t}return a}compileAndRun(t,e,n,r,s=!1){n=n||e[0].dtype;const a=this.runWebGLProgram(t,e,n,r,s);return si().makeTensorFromDataId(a.dataId,a.shape,a.dtype)}getAndSaveBinary(t,e){return t in this.binaryCache||(this.binaryCache[t]=e()),this.binaryCache[t]}getTextureManager(){return this.textureManager}dispose(){if(!this.disposed){if(!u().getBool("IS_TEST")){Object.keys(this.binaryCache).forEach(t=>{this.gpgpu.deleteProgram(this.binaryCache[t].webGLProgram),delete this.binaryCache[t]})}this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=ii(()=>{if(!u().get("WEBGL_RENDER_FLOAT32_ENABLED")){const t=u().getBool("DEBUG");u().set("DEBUG",!1);const e=this.abs(re(1e-8)).dataSync()[0];if(u().set("DEBUG",t),e>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(t){const e=this.texData.get(t),{shape:n,dtype:r,values:s,texture:a,usage:i,isPacked:o}=e;if(null!=a)return;const l=null!=this.activeTimers;let c;l&&(c=at());let h=e.texShape;if(null==h&&(h=function(t,e=!1){let n=u().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e&&(n*=2,1===(t=t.map((e,n)=>n>=t.length-2?N(t[n]):t[n])).length&&(t=[2,t[0]])),2!==t.length){const e=z(t);t=e.newShape}let r=T(t);if(t.length<=1&&r<=n)return[1,r];if(2===t.length&&t[0]<=n&&t[1]<=n)return t;if(3===t.length&&t[0]*t[1]<=n&&t[2]<=n)return[t[0]*t[1],t[2]];if(3===t.length&&t[0]<=n&&t[1]*t[2]<=n)return[t[0],t[1]*t[2]];if(4===t.length&&t[0]*t[1]*t[2]<=n&&t[3]<=n)return[t[0]*t[1]*t[2],t[3]];if(4===t.length&&t[0]<=n&&t[1]*t[2]*t[3]<=n)return[t[0],t[1]*t[2]*t[3]];if(e){const e=pb(t);let n=2,s=2;return t.length&&([n,s]=db(t)),r=e*(n/2)*(s/2),D(r).map(t=>2*t)}return D(r)}(n,o),e.texShape=h),null!=s){const t=fb(n);let a,i=h[1],u=h[0];const p=s instanceof Uint8Array;o?([i,u]=Zy(h[0],h[1]),a=new Ox(t,[u,i],p)):a=new Fx(t,[u,i],p);const d=this.makeTensorInfo([u,i],r);this.texData.get(d.dataId).usage=p?Ky.PIXELS:Ky.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(d.dataId),i,u,s);const f=!0,m=this.runWebGLProgram(a,[d],r,null,f),g=this.texData.get(m.dataId);e.texture=g.texture,e.texShape=g.texShape,e.isPacked=g.isPacked,e.usage=g.usage,this.disposeData(d.dataId),this.texData.delete(m.dataId),e.values=null,l&&(this.uploadWaitMs+=at()-c)}else{const t=this.acquireTexture(h,i,r,o);e.texture=t}}convertAndCacheOnCPU(t,e){const n=this.texData.get(t),{dtype:r}=n;return this.releaseGPUData(t),null!=e&&(n.values=function(t,e){if("float32"===e||"complex64"===e)return t;if("int32"===e||"bool"===e){const n="int32"===e?new Int32Array(t.length):new Uint8Array(t.length);for(let e=0;e<n.length;++e)n[e]=Math.round(t[e]);return n}throw new Error("Unknown dtype "+e)}(e,r)),n.values}acquireTexture(t,e,n,r){if(this.numBytesInGPU+=this.computeBytes(t,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const t=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${t} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(t,e,r)}computeBytes(t,e){return t[0]*t[1]*H(e)}}const ov={kernelName:Vt,backendName:"webgl",kernelFunc:({inputs:t,backend:e})=>{const{a:n,b:r}=t;return function(t,e,n){let r=new ax("\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",t.shape,e.shape);return u().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&(r=new ox("\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",t.shape,e.shape,!0)),n.runWebGLProgram(r,[t,e],"float32")}(n,r,e)}};class uv{constructor(t){this.variableNames=["A"];const e=Tb(),[n,r]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${n}.0);\n\n        vec4 values = ${e.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class lv{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const e=Tb(),[n,r]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${n}.0);\n            vec4 values = ${e.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${e.output} = result;\n      }\n    `}}const cv={kernelName:"FromPixels",backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t;let{pixels:s}=e;const{numChannels:a}=r,i="undefined"!=typeof HTMLVideoElement&&s instanceof HTMLVideoElement,o="undefined"!=typeof HTMLImageElement&&s instanceof HTMLImageElement,[l,c]=i?[s.videoWidth,s.videoHeight]:[s.width,s.height],h=[c,l],p=[c,l,a];(o||i)&&(null==hv&&(hv=document.createElement("canvas").getContext("2d")),hv.canvas.width=l,hv.canvas.height=c,hv.drawImage(s,0,0,l,c),s=hv.canvas);const d=n.makeTensorInfo(h,"int32");n.texData.get(d.dataId).usage=Ky.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(d.dataId),s);const f=u().getBool("WEBGL_PACK")?new lv(p):new uv(p),m=n.runWebGLProgram(f,[d],"int32");return n.disposeData(d.dataId),m}};let hv;const{maxImpl:pv,transposeImpl:dv}=Ny;function fv(t,e,n){const r=n.texData.get(t.dataId);return!r.isPacked||gb(t.shape,e)||null!==r.texture&&gb(r.shape,e)?{dataId:t.dataId,shape:e,dtype:t.dtype}:function(t,e,n){const r=[pb(t.shape),...db(t.shape)],s={dtype:t.dtype,shape:r,dataId:t.dataId},a=[pb(e),...db(e)],i=new mw(a,r),o=n.runWebGLProgram(i,[s],t.dtype,null,!0);return{dataId:o.dataId,shape:e,dtype:o.dtype}}(t,e,n)}function mv(t,e,n,r){const s=T(e),a=fv(t,[T(t.shape)/s,s],r),i=function t(e,n,r,s){const[a,i]=e.shape,o=Ms(i),u=new fw({windowSize:o,inSize:i,batchSize:a},r),l=s.runWebGLProgram(u,[e],n);return 1===l.shape[1]?l:t(l,n,r,s)}(a,t.dtype,"max",r);return a.dataId!==t.dataId&&r.disposeData(a.dataId),fv(i,n,r)}class gv{constructor(t,e){this.variableNames=["A"];const n=new Array(t.length);for(let r=0;r<n.length;r++)n[r]=t[e[r]];this.outputShape=n,this.rank=n.length;const r=Gb(this.rank),s=function(t){const e=t.length;if(e>6)throw Error(`Transpose for rank ${e} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(e);for(let e=0;e<t.length;e++)r[t[e]]=n[e];return r.join()}(e);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${s}));\n    }\n    `}}class yv{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(t.length);for(let r=0;r<n.length;r++)n[r]=t[e[r]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=Gb(this.rank),s=Ab("rc",this.rank),a=new Array(this.rank);for(let t=0;t<e.length;t++)a[e[t]]=s[t];const i=`vec2(${a.slice(-2).join()})`,o=`++${s[this.rank-1]} < ${n[this.rank-1]}`,u=`getChannel(getA(${a.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${u};\n      if(${o}) {\n        result[1] = ${u};\n      }\n      --${s[this.rank-1]};\n      if(++${s[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${u};\n        if(${o}) {\n          result[3] = ${u};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function bv(t,e,n){const r=u().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new yv(t.shape,e):new gv(t.shape,e);return n.runWebGLProgram(r,[t],t.dtype)}const xv={kernelName:Ut,backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{reductionIndices:s,keepDims:a}=e,i=n,o=r.shape.length,u=L(s,r.shape);let l=u;const c=Ce(l,o),h=null!=c,p=i.shouldExecuteOnCPU([r]);let d=r;if(h){if(p){const t=i.texData.get(d.dataId).values,e=new Array(o);for(let t=0;t<e.length;t++)e[t]=r.shape[c[t]];const n=dv(t,r.shape,r.dtype,c,e);d=i.makeTensorInfo(e,r.dtype);i.texData.get(d.dataId).values=n}else d=bv(r,c,i);l=Ee(l.length,o)}Se("max",l,o);const[f,m]=Ne(d.shape,l);let g,y=f;if(a&&(y=Ie(f,u)),p){const t=i.texData.get(d.dataId).values,e=pv(t,T(m),y,r.dtype);g=i.makeTensorInfo(y,r.dtype);i.texData.get(g.dataId).values=e}else g=mv(d,m,y,i);return h&&i.disposeData(d.dataId),g}};const wv={kernelName:"MaxPoolWithArgmax",backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{filterSize:s,strides:a,pad:i,includeBatchInIndex:o}=e,u=n;S(4===r.shape.length,()=>`Error in maxPool: input must be rank 4 but got rank ${r.shape.length}.`);const l=[1,1];S(Ge(a,l),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${l}'`);const c=Fe(r.shape,s,a,l,i),[h,p]=function(t,e,n,r){let s=new pw(n,"max",!1);const a=r.runWebGLProgram(s,[t],"float32");return s=new pw(n,"max",!0,!0,e),[a,r.runWebGLProgram(s,[t],"float32")]}(r,o,c,u);return[h,p]}},vv={kernelName:"NonMaxSuppressionV3",backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{Tc("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{boxes:r,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=n,u=e;return $l(u.readSync(r.dataId),u.readSync(s.dataId),a,i,o)}},kv=_l,Nv={kernelName:"NonMaxSuppressionV4",backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{Tc("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{boxes:r,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o,padToMaxOutputSize:u}=n,l=e,c=l.readSync(r.dataId),h=l.readSync(s.dataId),{selectedIndices:p,validOutputs:d}=kv(c,h,a,i,o,u);return[p,d]}},Iv=Dl,Sv={kernelName:"NonMaxSuppressionV5",backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{Tc("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{boxes:r,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o,softNmsSigma:u}=n,l=e,c=l.readSync(r.dataId),h=l.readSync(s.dataId),p=a,d=i,f=o,m=u,{selectedIndices:g,selectedScores:y}=Iv(c,h,p,d,f,m);return[g,y]}};class Cv{constructor(t,e,n,r){this.variableNames=["Image"],this.outputShape=[];const s=t[1],a=t[2],i=Math.sin(e).toFixed(3),o=Math.cos(e).toFixed(3);this.outputShape=t;const[u,l]=Nc(r,s,a),c=u.toFixed(3),h=l.toFixed(3);let p="";p="number"==typeof n?`float outputValue = ${n.toFixed(2)};`:`\n        vec3 fill = vec3(${n.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - ${c}) * ${o} - (float(y) - ${h}) * ${i};\n          float coordYFloat = (float(x) - ${c}) * ${i} + (float(y) - ${h}) * ${o};\n          int coordX = int(round(coordXFloat + ${c}));\n          int coordY = int(round(coordYFloat + ${h}));\n          ${p}\n          if(coordX >= 0 && coordX < ${a} && coordY >= 0 && coordY < ${s}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const Av=[xv,cv,ov,wv,vv,Nv,Sv,{kernelName:"RotateWithOffset",backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{image:r}=t,{radians:s,fillValue:a,center:i}=e,o=n,u=new Cv(r.shape,s,a,i);return o.runWebGLProgram(u,[r],r.dtype)}},{kernelName:"Square",backendName:"webgl",kernelFunc:({inputs:t,backend:e})=>{const{x:n}=t,r=e,s=new Ow(n.shape,"return x * x;");return r.runWebGLProgram(s,[n],n.dtype)}},{kernelName:"SquaredDifference",backendName:"webgl",kernelFunc:({inputs:t,backend:e})=>{const{a:n,b:r}=t,s=e,a=u().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ox("return (a - b) * (a - b);",n.shape,r.shape):new ax("return (a - b) * (a - b);",n.shape,r.shape);return s.compileAndRun(a,[n,r])}},{kernelName:"Transpose",backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{perm:s}=e,a=n,i=r.shape.length,o=new Array(i);for(let t=0;t<o.length;t++)o[t]=r.shape[s[t]];let u;if(a.shouldExecuteOnCPU([r])){const t=a.texData.get(r.dataId).values,e=dv(t,r.shape,r.dtype,s,o);u=a.makeTensorInfo(o,r.dtype);a.texData.get(u.dataId).values=e}else u=bv(r,s,a);return u}}];for(const t of Av)b(t);Bt()&&li("webgl",()=>new iv,2);const Ev=xo([1,2,3,4]);console.log(Ev.dataSync())}));
//# sourceMappingURL=union_package.js.map
